
fra222_lab10_code.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006474  08000198  08000198  00010198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001f8  08006610  08006610  00016610  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006808  08006808  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  08006808  08006808  00016808  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006810  08006810  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006810  08006810  00016810  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006814  08006814  00016814  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08006818  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000230  20000010  08006828  00020010  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000240  08006828  00020240  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010718  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002200  00000000  00000000  00030758  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000fc0  00000000  00000000  00032958  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ef8  00000000  00000000  00033918  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017a8e  00000000  00000000  00034810  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010a00  00000000  00000000  0004c29e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009b026  00000000  00000000  0005cc9e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000f7cc4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000477c  00000000  00000000  000f7d18  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000010 	.word	0x20000010
 80001b4:	00000000 	.word	0x00000000
 80001b8:	080065f4 	.word	0x080065f4

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000014 	.word	0x20000014
 80001d4:	080065f4 	.word	0x080065f4

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	; 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	3c01      	subs	r4, #1
 8000314:	bf28      	it	cs
 8000316:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800031a:	d2e9      	bcs.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004c2:	bf08      	it	eq
 80004c4:	4770      	bxeq	lr
 80004c6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ca:	bf04      	itt	eq
 80004cc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004e0:	e71c      	b.n	800031c <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_ul2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f04f 0500 	mov.w	r5, #0
 80004f2:	e00a      	b.n	800050a <__aeabi_l2d+0x16>

080004f4 <__aeabi_l2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000502:	d502      	bpl.n	800050a <__aeabi_l2d+0x16>
 8000504:	4240      	negs	r0, r0
 8000506:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800050e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000512:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000516:	f43f aed8 	beq.w	80002ca <__adddf3+0xe6>
 800051a:	f04f 0203 	mov.w	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000532:	f1c2 0320 	rsb	r3, r2, #32
 8000536:	fa00 fc03 	lsl.w	ip, r0, r3
 800053a:	fa20 f002 	lsr.w	r0, r0, r2
 800053e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000542:	ea40 000e 	orr.w	r0, r0, lr
 8000546:	fa21 f102 	lsr.w	r1, r1, r2
 800054a:	4414      	add	r4, r2
 800054c:	e6bd      	b.n	80002ca <__adddf3+0xe6>
 800054e:	bf00      	nop

08000550 <__aeabi_dmul>:
 8000550:	b570      	push	{r4, r5, r6, lr}
 8000552:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000556:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800055a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800055e:	bf1d      	ittte	ne
 8000560:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000564:	ea94 0f0c 	teqne	r4, ip
 8000568:	ea95 0f0c 	teqne	r5, ip
 800056c:	f000 f8de 	bleq	800072c <__aeabi_dmul+0x1dc>
 8000570:	442c      	add	r4, r5
 8000572:	ea81 0603 	eor.w	r6, r1, r3
 8000576:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800057a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800057e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000582:	bf18      	it	ne
 8000584:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000588:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800058c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000590:	d038      	beq.n	8000604 <__aeabi_dmul+0xb4>
 8000592:	fba0 ce02 	umull	ip, lr, r0, r2
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800059e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005a6:	f04f 0600 	mov.w	r6, #0
 80005aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ae:	f09c 0f00 	teq	ip, #0
 80005b2:	bf18      	it	ne
 80005b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005bc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005c0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005c4:	d204      	bcs.n	80005d0 <__aeabi_dmul+0x80>
 80005c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ca:	416d      	adcs	r5, r5
 80005cc:	eb46 0606 	adc.w	r6, r6, r6
 80005d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005e4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e8:	bf88      	it	hi
 80005ea:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005ee:	d81e      	bhi.n	800062e <__aeabi_dmul+0xde>
 80005f0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005f4:	bf08      	it	eq
 80005f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005fa:	f150 0000 	adcs.w	r0, r0, #0
 80005fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000608:	ea46 0101 	orr.w	r1, r6, r1
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	ea81 0103 	eor.w	r1, r1, r3
 8000614:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000618:	bfc2      	ittt	gt
 800061a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800061e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000622:	bd70      	popgt	{r4, r5, r6, pc}
 8000624:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000628:	f04f 0e00 	mov.w	lr, #0
 800062c:	3c01      	subs	r4, #1
 800062e:	f300 80ab 	bgt.w	8000788 <__aeabi_dmul+0x238>
 8000632:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000636:	bfde      	ittt	le
 8000638:	2000      	movle	r0, #0
 800063a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800063e:	bd70      	pople	{r4, r5, r6, pc}
 8000640:	f1c4 0400 	rsb	r4, r4, #0
 8000644:	3c20      	subs	r4, #32
 8000646:	da35      	bge.n	80006b4 <__aeabi_dmul+0x164>
 8000648:	340c      	adds	r4, #12
 800064a:	dc1b      	bgt.n	8000684 <__aeabi_dmul+0x134>
 800064c:	f104 0414 	add.w	r4, r4, #20
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f305 	lsl.w	r3, r0, r5
 8000658:	fa20 f004 	lsr.w	r0, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea40 0002 	orr.w	r0, r0, r2
 8000664:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000668:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800066c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000670:	fa21 f604 	lsr.w	r6, r1, r4
 8000674:	eb42 0106 	adc.w	r1, r2, r6
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f1c4 040c 	rsb	r4, r4, #12
 8000688:	f1c4 0520 	rsb	r5, r4, #32
 800068c:	fa00 f304 	lsl.w	r3, r0, r4
 8000690:	fa20 f005 	lsr.w	r0, r0, r5
 8000694:	fa01 f204 	lsl.w	r2, r1, r4
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a4:	f141 0100 	adc.w	r1, r1, #0
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 0520 	rsb	r5, r4, #32
 80006b8:	fa00 f205 	lsl.w	r2, r0, r5
 80006bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c0:	fa20 f304 	lsr.w	r3, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea43 0302 	orr.w	r3, r3, r2
 80006cc:	fa21 f004 	lsr.w	r0, r1, r4
 80006d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d4:	fa21 f204 	lsr.w	r2, r1, r4
 80006d8:	ea20 0002 	bic.w	r0, r0, r2
 80006dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f094 0f00 	teq	r4, #0
 80006f0:	d10f      	bne.n	8000712 <__aeabi_dmul+0x1c2>
 80006f2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006f6:	0040      	lsls	r0, r0, #1
 80006f8:	eb41 0101 	adc.w	r1, r1, r1
 80006fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000700:	bf08      	it	eq
 8000702:	3c01      	subeq	r4, #1
 8000704:	d0f7      	beq.n	80006f6 <__aeabi_dmul+0x1a6>
 8000706:	ea41 0106 	orr.w	r1, r1, r6
 800070a:	f095 0f00 	teq	r5, #0
 800070e:	bf18      	it	ne
 8000710:	4770      	bxne	lr
 8000712:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000716:	0052      	lsls	r2, r2, #1
 8000718:	eb43 0303 	adc.w	r3, r3, r3
 800071c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000720:	bf08      	it	eq
 8000722:	3d01      	subeq	r5, #1
 8000724:	d0f7      	beq.n	8000716 <__aeabi_dmul+0x1c6>
 8000726:	ea43 0306 	orr.w	r3, r3, r6
 800072a:	4770      	bx	lr
 800072c:	ea94 0f0c 	teq	r4, ip
 8000730:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000734:	bf18      	it	ne
 8000736:	ea95 0f0c 	teqne	r5, ip
 800073a:	d00c      	beq.n	8000756 <__aeabi_dmul+0x206>
 800073c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000740:	bf18      	it	ne
 8000742:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000746:	d1d1      	bne.n	80006ec <__aeabi_dmul+0x19c>
 8000748:	ea81 0103 	eor.w	r1, r1, r3
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	bd70      	pop	{r4, r5, r6, pc}
 8000756:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800075a:	bf06      	itte	eq
 800075c:	4610      	moveq	r0, r2
 800075e:	4619      	moveq	r1, r3
 8000760:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000764:	d019      	beq.n	800079a <__aeabi_dmul+0x24a>
 8000766:	ea94 0f0c 	teq	r4, ip
 800076a:	d102      	bne.n	8000772 <__aeabi_dmul+0x222>
 800076c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000770:	d113      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000772:	ea95 0f0c 	teq	r5, ip
 8000776:	d105      	bne.n	8000784 <__aeabi_dmul+0x234>
 8000778:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800077c:	bf1c      	itt	ne
 800077e:	4610      	movne	r0, r2
 8000780:	4619      	movne	r1, r3
 8000782:	d10a      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000784:	ea81 0103 	eor.w	r1, r1, r3
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000790:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000794:	f04f 0000 	mov.w	r0, #0
 8000798:	bd70      	pop	{r4, r5, r6, pc}
 800079a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800079e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007a2:	bd70      	pop	{r4, r5, r6, pc}

080007a4 <__aeabi_ddiv>:
 80007a4:	b570      	push	{r4, r5, r6, lr}
 80007a6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007aa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007b2:	bf1d      	ittte	ne
 80007b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b8:	ea94 0f0c 	teqne	r4, ip
 80007bc:	ea95 0f0c 	teqne	r5, ip
 80007c0:	f000 f8a7 	bleq	8000912 <__aeabi_ddiv+0x16e>
 80007c4:	eba4 0405 	sub.w	r4, r4, r5
 80007c8:	ea81 0e03 	eor.w	lr, r1, r3
 80007cc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007d4:	f000 8088 	beq.w	80008e8 <__aeabi_ddiv+0x144>
 80007d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007dc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007e0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007e4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007ec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007f4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007fc:	429d      	cmp	r5, r3
 80007fe:	bf08      	it	eq
 8000800:	4296      	cmpeq	r6, r2
 8000802:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000806:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800080a:	d202      	bcs.n	8000812 <__aeabi_ddiv+0x6e>
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	1ab6      	subs	r6, r6, r2
 8000814:	eb65 0503 	sbc.w	r5, r5, r3
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000822:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 000c 	orrcs.w	r0, r0, ip
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000880:	ea55 0e06 	orrs.w	lr, r5, r6
 8000884:	d018      	beq.n	80008b8 <__aeabi_ddiv+0x114>
 8000886:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800088a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800088e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000892:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000896:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800089a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800089e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008a2:	d1c0      	bne.n	8000826 <__aeabi_ddiv+0x82>
 80008a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a8:	d10b      	bne.n	80008c2 <__aeabi_ddiv+0x11e>
 80008aa:	ea41 0100 	orr.w	r1, r1, r0
 80008ae:	f04f 0000 	mov.w	r0, #0
 80008b2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008b6:	e7b6      	b.n	8000826 <__aeabi_ddiv+0x82>
 80008b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008bc:	bf04      	itt	eq
 80008be:	4301      	orreq	r1, r0
 80008c0:	2000      	moveq	r0, #0
 80008c2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008c6:	bf88      	it	hi
 80008c8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008cc:	f63f aeaf 	bhi.w	800062e <__aeabi_dmul+0xde>
 80008d0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008d4:	bf04      	itt	eq
 80008d6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008de:	f150 0000 	adcs.w	r0, r0, #0
 80008e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	pop	{r4, r5, r6, pc}
 80008e8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008f4:	bfc2      	ittt	gt
 80008f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000900:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000904:	f04f 0e00 	mov.w	lr, #0
 8000908:	3c01      	subs	r4, #1
 800090a:	e690      	b.n	800062e <__aeabi_dmul+0xde>
 800090c:	ea45 0e06 	orr.w	lr, r5, r6
 8000910:	e68d      	b.n	800062e <__aeabi_dmul+0xde>
 8000912:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000916:	ea94 0f0c 	teq	r4, ip
 800091a:	bf08      	it	eq
 800091c:	ea95 0f0c 	teqeq	r5, ip
 8000920:	f43f af3b 	beq.w	800079a <__aeabi_dmul+0x24a>
 8000924:	ea94 0f0c 	teq	r4, ip
 8000928:	d10a      	bne.n	8000940 <__aeabi_ddiv+0x19c>
 800092a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800092e:	f47f af34 	bne.w	800079a <__aeabi_dmul+0x24a>
 8000932:	ea95 0f0c 	teq	r5, ip
 8000936:	f47f af25 	bne.w	8000784 <__aeabi_dmul+0x234>
 800093a:	4610      	mov	r0, r2
 800093c:	4619      	mov	r1, r3
 800093e:	e72c      	b.n	800079a <__aeabi_dmul+0x24a>
 8000940:	ea95 0f0c 	teq	r5, ip
 8000944:	d106      	bne.n	8000954 <__aeabi_ddiv+0x1b0>
 8000946:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800094a:	f43f aefd 	beq.w	8000748 <__aeabi_dmul+0x1f8>
 800094e:	4610      	mov	r0, r2
 8000950:	4619      	mov	r1, r3
 8000952:	e722      	b.n	800079a <__aeabi_dmul+0x24a>
 8000954:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000958:	bf18      	it	ne
 800095a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800095e:	f47f aec5 	bne.w	80006ec <__aeabi_dmul+0x19c>
 8000962:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000966:	f47f af0d 	bne.w	8000784 <__aeabi_dmul+0x234>
 800096a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800096e:	f47f aeeb 	bne.w	8000748 <__aeabi_dmul+0x1f8>
 8000972:	e712      	b.n	800079a <__aeabi_dmul+0x24a>

08000974 <__gedf2>:
 8000974:	f04f 3cff 	mov.w	ip, #4294967295
 8000978:	e006      	b.n	8000988 <__cmpdf2+0x4>
 800097a:	bf00      	nop

0800097c <__ledf2>:
 800097c:	f04f 0c01 	mov.w	ip, #1
 8000980:	e002      	b.n	8000988 <__cmpdf2+0x4>
 8000982:	bf00      	nop

08000984 <__cmpdf2>:
 8000984:	f04f 0c01 	mov.w	ip, #1
 8000988:	f84d cd04 	str.w	ip, [sp, #-4]!
 800098c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000990:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000994:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800099e:	d01b      	beq.n	80009d8 <__cmpdf2+0x54>
 80009a0:	b001      	add	sp, #4
 80009a2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009a6:	bf0c      	ite	eq
 80009a8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ac:	ea91 0f03 	teqne	r1, r3
 80009b0:	bf02      	ittt	eq
 80009b2:	ea90 0f02 	teqeq	r0, r2
 80009b6:	2000      	moveq	r0, #0
 80009b8:	4770      	bxeq	lr
 80009ba:	f110 0f00 	cmn.w	r0, #0
 80009be:	ea91 0f03 	teq	r1, r3
 80009c2:	bf58      	it	pl
 80009c4:	4299      	cmppl	r1, r3
 80009c6:	bf08      	it	eq
 80009c8:	4290      	cmpeq	r0, r2
 80009ca:	bf2c      	ite	cs
 80009cc:	17d8      	asrcs	r0, r3, #31
 80009ce:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009d2:	f040 0001 	orr.w	r0, r0, #1
 80009d6:	4770      	bx	lr
 80009d8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d102      	bne.n	80009e8 <__cmpdf2+0x64>
 80009e2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009e6:	d107      	bne.n	80009f8 <__cmpdf2+0x74>
 80009e8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009ec:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f0:	d1d6      	bne.n	80009a0 <__cmpdf2+0x1c>
 80009f2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009f6:	d0d3      	beq.n	80009a0 <__cmpdf2+0x1c>
 80009f8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009fc:	4770      	bx	lr
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdrcmple>:
 8000a00:	4684      	mov	ip, r0
 8000a02:	4610      	mov	r0, r2
 8000a04:	4662      	mov	r2, ip
 8000a06:	468c      	mov	ip, r1
 8000a08:	4619      	mov	r1, r3
 8000a0a:	4663      	mov	r3, ip
 8000a0c:	e000      	b.n	8000a10 <__aeabi_cdcmpeq>
 8000a0e:	bf00      	nop

08000a10 <__aeabi_cdcmpeq>:
 8000a10:	b501      	push	{r0, lr}
 8000a12:	f7ff ffb7 	bl	8000984 <__cmpdf2>
 8000a16:	2800      	cmp	r0, #0
 8000a18:	bf48      	it	mi
 8000a1a:	f110 0f00 	cmnmi.w	r0, #0
 8000a1e:	bd01      	pop	{r0, pc}

08000a20 <__aeabi_dcmpeq>:
 8000a20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a24:	f7ff fff4 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a28:	bf0c      	ite	eq
 8000a2a:	2001      	moveq	r0, #1
 8000a2c:	2000      	movne	r0, #0
 8000a2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a32:	bf00      	nop

08000a34 <__aeabi_dcmplt>:
 8000a34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a38:	f7ff ffea 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a3c:	bf34      	ite	cc
 8000a3e:	2001      	movcc	r0, #1
 8000a40:	2000      	movcs	r0, #0
 8000a42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a46:	bf00      	nop

08000a48 <__aeabi_dcmple>:
 8000a48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a4c:	f7ff ffe0 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a50:	bf94      	ite	ls
 8000a52:	2001      	movls	r0, #1
 8000a54:	2000      	movhi	r0, #0
 8000a56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5a:	bf00      	nop

08000a5c <__aeabi_dcmpge>:
 8000a5c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a60:	f7ff ffce 	bl	8000a00 <__aeabi_cdrcmple>
 8000a64:	bf94      	ite	ls
 8000a66:	2001      	movls	r0, #1
 8000a68:	2000      	movhi	r0, #0
 8000a6a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a6e:	bf00      	nop

08000a70 <__aeabi_dcmpgt>:
 8000a70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a74:	f7ff ffc4 	bl	8000a00 <__aeabi_cdrcmple>
 8000a78:	bf34      	ite	cc
 8000a7a:	2001      	movcc	r0, #1
 8000a7c:	2000      	movcs	r0, #0
 8000a7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a82:	bf00      	nop

08000a84 <__aeabi_d2iz>:
 8000a84:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a88:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a8c:	d215      	bcs.n	8000aba <__aeabi_d2iz+0x36>
 8000a8e:	d511      	bpl.n	8000ab4 <__aeabi_d2iz+0x30>
 8000a90:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a94:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a98:	d912      	bls.n	8000ac0 <__aeabi_d2iz+0x3c>
 8000a9a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a9e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aa2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aa6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	bf18      	it	ne
 8000ab0:	4240      	negne	r0, r0
 8000ab2:	4770      	bx	lr
 8000ab4:	f04f 0000 	mov.w	r0, #0
 8000ab8:	4770      	bx	lr
 8000aba:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000abe:	d105      	bne.n	8000acc <__aeabi_d2iz+0x48>
 8000ac0:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ac4:	bf08      	it	eq
 8000ac6:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000aca:	4770      	bx	lr
 8000acc:	f04f 0000 	mov.w	r0, #0
 8000ad0:	4770      	bx	lr
 8000ad2:	bf00      	nop

08000ad4 <__aeabi_d2uiz>:
 8000ad4:	004a      	lsls	r2, r1, #1
 8000ad6:	d211      	bcs.n	8000afc <__aeabi_d2uiz+0x28>
 8000ad8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000adc:	d211      	bcs.n	8000b02 <__aeabi_d2uiz+0x2e>
 8000ade:	d50d      	bpl.n	8000afc <__aeabi_d2uiz+0x28>
 8000ae0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ae4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ae8:	d40e      	bmi.n	8000b08 <__aeabi_d2uiz+0x34>
 8000aea:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aee:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000af2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000af6:	fa23 f002 	lsr.w	r0, r3, r2
 8000afa:	4770      	bx	lr
 8000afc:	f04f 0000 	mov.w	r0, #0
 8000b00:	4770      	bx	lr
 8000b02:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b06:	d102      	bne.n	8000b0e <__aeabi_d2uiz+0x3a>
 8000b08:	f04f 30ff 	mov.w	r0, #4294967295
 8000b0c:	4770      	bx	lr
 8000b0e:	f04f 0000 	mov.w	r0, #0
 8000b12:	4770      	bx	lr

08000b14 <__aeabi_d2f>:
 8000b14:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b18:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b1c:	bf24      	itt	cs
 8000b1e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b22:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b26:	d90d      	bls.n	8000b44 <__aeabi_d2f+0x30>
 8000b28:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b2c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b30:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b34:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b38:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b3c:	bf08      	it	eq
 8000b3e:	f020 0001 	biceq.w	r0, r0, #1
 8000b42:	4770      	bx	lr
 8000b44:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b48:	d121      	bne.n	8000b8e <__aeabi_d2f+0x7a>
 8000b4a:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b4e:	bfbc      	itt	lt
 8000b50:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b54:	4770      	bxlt	lr
 8000b56:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b5a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b5e:	f1c2 0218 	rsb	r2, r2, #24
 8000b62:	f1c2 0c20 	rsb	ip, r2, #32
 8000b66:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b6a:	fa20 f002 	lsr.w	r0, r0, r2
 8000b6e:	bf18      	it	ne
 8000b70:	f040 0001 	orrne.w	r0, r0, #1
 8000b74:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b78:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b7c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b80:	ea40 000c 	orr.w	r0, r0, ip
 8000b84:	fa23 f302 	lsr.w	r3, r3, r2
 8000b88:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b8c:	e7cc      	b.n	8000b28 <__aeabi_d2f+0x14>
 8000b8e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b92:	d107      	bne.n	8000ba4 <__aeabi_d2f+0x90>
 8000b94:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b98:	bf1e      	ittt	ne
 8000b9a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b9e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000ba2:	4770      	bxne	lr
 8000ba4:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000bac:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bb0:	4770      	bx	lr
 8000bb2:	bf00      	nop

08000bb4 <__aeabi_frsub>:
 8000bb4:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000bb8:	e002      	b.n	8000bc0 <__addsf3>
 8000bba:	bf00      	nop

08000bbc <__aeabi_fsub>:
 8000bbc:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000bc0 <__addsf3>:
 8000bc0:	0042      	lsls	r2, r0, #1
 8000bc2:	bf1f      	itttt	ne
 8000bc4:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000bc8:	ea92 0f03 	teqne	r2, r3
 8000bcc:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000bd0:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000bd4:	d06a      	beq.n	8000cac <__addsf3+0xec>
 8000bd6:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000bda:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000bde:	bfc1      	itttt	gt
 8000be0:	18d2      	addgt	r2, r2, r3
 8000be2:	4041      	eorgt	r1, r0
 8000be4:	4048      	eorgt	r0, r1
 8000be6:	4041      	eorgt	r1, r0
 8000be8:	bfb8      	it	lt
 8000bea:	425b      	neglt	r3, r3
 8000bec:	2b19      	cmp	r3, #25
 8000bee:	bf88      	it	hi
 8000bf0:	4770      	bxhi	lr
 8000bf2:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000bf6:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bfa:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000bfe:	bf18      	it	ne
 8000c00:	4240      	negne	r0, r0
 8000c02:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000c06:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000c0a:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000c0e:	bf18      	it	ne
 8000c10:	4249      	negne	r1, r1
 8000c12:	ea92 0f03 	teq	r2, r3
 8000c16:	d03f      	beq.n	8000c98 <__addsf3+0xd8>
 8000c18:	f1a2 0201 	sub.w	r2, r2, #1
 8000c1c:	fa41 fc03 	asr.w	ip, r1, r3
 8000c20:	eb10 000c 	adds.w	r0, r0, ip
 8000c24:	f1c3 0320 	rsb	r3, r3, #32
 8000c28:	fa01 f103 	lsl.w	r1, r1, r3
 8000c2c:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c30:	d502      	bpl.n	8000c38 <__addsf3+0x78>
 8000c32:	4249      	negs	r1, r1
 8000c34:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000c38:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000c3c:	d313      	bcc.n	8000c66 <__addsf3+0xa6>
 8000c3e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000c42:	d306      	bcc.n	8000c52 <__addsf3+0x92>
 8000c44:	0840      	lsrs	r0, r0, #1
 8000c46:	ea4f 0131 	mov.w	r1, r1, rrx
 8000c4a:	f102 0201 	add.w	r2, r2, #1
 8000c4e:	2afe      	cmp	r2, #254	; 0xfe
 8000c50:	d251      	bcs.n	8000cf6 <__addsf3+0x136>
 8000c52:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000c56:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c5a:	bf08      	it	eq
 8000c5c:	f020 0001 	biceq.w	r0, r0, #1
 8000c60:	ea40 0003 	orr.w	r0, r0, r3
 8000c64:	4770      	bx	lr
 8000c66:	0049      	lsls	r1, r1, #1
 8000c68:	eb40 0000 	adc.w	r0, r0, r0
 8000c6c:	3a01      	subs	r2, #1
 8000c6e:	bf28      	it	cs
 8000c70:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000c74:	d2ed      	bcs.n	8000c52 <__addsf3+0x92>
 8000c76:	fab0 fc80 	clz	ip, r0
 8000c7a:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c7e:	ebb2 020c 	subs.w	r2, r2, ip
 8000c82:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c86:	bfaa      	itet	ge
 8000c88:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c8c:	4252      	neglt	r2, r2
 8000c8e:	4318      	orrge	r0, r3
 8000c90:	bfbc      	itt	lt
 8000c92:	40d0      	lsrlt	r0, r2
 8000c94:	4318      	orrlt	r0, r3
 8000c96:	4770      	bx	lr
 8000c98:	f092 0f00 	teq	r2, #0
 8000c9c:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000ca0:	bf06      	itte	eq
 8000ca2:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000ca6:	3201      	addeq	r2, #1
 8000ca8:	3b01      	subne	r3, #1
 8000caa:	e7b5      	b.n	8000c18 <__addsf3+0x58>
 8000cac:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000cb0:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000cb4:	bf18      	it	ne
 8000cb6:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000cba:	d021      	beq.n	8000d00 <__addsf3+0x140>
 8000cbc:	ea92 0f03 	teq	r2, r3
 8000cc0:	d004      	beq.n	8000ccc <__addsf3+0x10c>
 8000cc2:	f092 0f00 	teq	r2, #0
 8000cc6:	bf08      	it	eq
 8000cc8:	4608      	moveq	r0, r1
 8000cca:	4770      	bx	lr
 8000ccc:	ea90 0f01 	teq	r0, r1
 8000cd0:	bf1c      	itt	ne
 8000cd2:	2000      	movne	r0, #0
 8000cd4:	4770      	bxne	lr
 8000cd6:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000cda:	d104      	bne.n	8000ce6 <__addsf3+0x126>
 8000cdc:	0040      	lsls	r0, r0, #1
 8000cde:	bf28      	it	cs
 8000ce0:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000ce4:	4770      	bx	lr
 8000ce6:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000cea:	bf3c      	itt	cc
 8000cec:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000cf0:	4770      	bxcc	lr
 8000cf2:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000cf6:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000cfa:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cfe:	4770      	bx	lr
 8000d00:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000d04:	bf16      	itet	ne
 8000d06:	4608      	movne	r0, r1
 8000d08:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000d0c:	4601      	movne	r1, r0
 8000d0e:	0242      	lsls	r2, r0, #9
 8000d10:	bf06      	itte	eq
 8000d12:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000d16:	ea90 0f01 	teqeq	r0, r1
 8000d1a:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000d1e:	4770      	bx	lr

08000d20 <__aeabi_ui2f>:
 8000d20:	f04f 0300 	mov.w	r3, #0
 8000d24:	e004      	b.n	8000d30 <__aeabi_i2f+0x8>
 8000d26:	bf00      	nop

08000d28 <__aeabi_i2f>:
 8000d28:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000d2c:	bf48      	it	mi
 8000d2e:	4240      	negmi	r0, r0
 8000d30:	ea5f 0c00 	movs.w	ip, r0
 8000d34:	bf08      	it	eq
 8000d36:	4770      	bxeq	lr
 8000d38:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000d3c:	4601      	mov	r1, r0
 8000d3e:	f04f 0000 	mov.w	r0, #0
 8000d42:	e01c      	b.n	8000d7e <__aeabi_l2f+0x2a>

08000d44 <__aeabi_ul2f>:
 8000d44:	ea50 0201 	orrs.w	r2, r0, r1
 8000d48:	bf08      	it	eq
 8000d4a:	4770      	bxeq	lr
 8000d4c:	f04f 0300 	mov.w	r3, #0
 8000d50:	e00a      	b.n	8000d68 <__aeabi_l2f+0x14>
 8000d52:	bf00      	nop

08000d54 <__aeabi_l2f>:
 8000d54:	ea50 0201 	orrs.w	r2, r0, r1
 8000d58:	bf08      	it	eq
 8000d5a:	4770      	bxeq	lr
 8000d5c:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000d60:	d502      	bpl.n	8000d68 <__aeabi_l2f+0x14>
 8000d62:	4240      	negs	r0, r0
 8000d64:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d68:	ea5f 0c01 	movs.w	ip, r1
 8000d6c:	bf02      	ittt	eq
 8000d6e:	4684      	moveq	ip, r0
 8000d70:	4601      	moveq	r1, r0
 8000d72:	2000      	moveq	r0, #0
 8000d74:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000d78:	bf08      	it	eq
 8000d7a:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000d7e:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000d82:	fabc f28c 	clz	r2, ip
 8000d86:	3a08      	subs	r2, #8
 8000d88:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d8c:	db10      	blt.n	8000db0 <__aeabi_l2f+0x5c>
 8000d8e:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d92:	4463      	add	r3, ip
 8000d94:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d98:	f1c2 0220 	rsb	r2, r2, #32
 8000d9c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000da0:	fa20 f202 	lsr.w	r2, r0, r2
 8000da4:	eb43 0002 	adc.w	r0, r3, r2
 8000da8:	bf08      	it	eq
 8000daa:	f020 0001 	biceq.w	r0, r0, #1
 8000dae:	4770      	bx	lr
 8000db0:	f102 0220 	add.w	r2, r2, #32
 8000db4:	fa01 fc02 	lsl.w	ip, r1, r2
 8000db8:	f1c2 0220 	rsb	r2, r2, #32
 8000dbc:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000dc0:	fa21 f202 	lsr.w	r2, r1, r2
 8000dc4:	eb43 0002 	adc.w	r0, r3, r2
 8000dc8:	bf08      	it	eq
 8000dca:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000dce:	4770      	bx	lr

08000dd0 <__aeabi_uldivmod>:
 8000dd0:	b953      	cbnz	r3, 8000de8 <__aeabi_uldivmod+0x18>
 8000dd2:	b94a      	cbnz	r2, 8000de8 <__aeabi_uldivmod+0x18>
 8000dd4:	2900      	cmp	r1, #0
 8000dd6:	bf08      	it	eq
 8000dd8:	2800      	cmpeq	r0, #0
 8000dda:	bf1c      	itt	ne
 8000ddc:	f04f 31ff 	movne.w	r1, #4294967295
 8000de0:	f04f 30ff 	movne.w	r0, #4294967295
 8000de4:	f000 b96e 	b.w	80010c4 <__aeabi_idiv0>
 8000de8:	f1ad 0c08 	sub.w	ip, sp, #8
 8000dec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000df0:	f000 f806 	bl	8000e00 <__udivmoddi4>
 8000df4:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000df8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000dfc:	b004      	add	sp, #16
 8000dfe:	4770      	bx	lr

08000e00 <__udivmoddi4>:
 8000e00:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000e04:	9d08      	ldr	r5, [sp, #32]
 8000e06:	4604      	mov	r4, r0
 8000e08:	468c      	mov	ip, r1
 8000e0a:	2b00      	cmp	r3, #0
 8000e0c:	f040 8083 	bne.w	8000f16 <__udivmoddi4+0x116>
 8000e10:	428a      	cmp	r2, r1
 8000e12:	4617      	mov	r7, r2
 8000e14:	d947      	bls.n	8000ea6 <__udivmoddi4+0xa6>
 8000e16:	fab2 f282 	clz	r2, r2
 8000e1a:	b142      	cbz	r2, 8000e2e <__udivmoddi4+0x2e>
 8000e1c:	f1c2 0020 	rsb	r0, r2, #32
 8000e20:	fa24 f000 	lsr.w	r0, r4, r0
 8000e24:	4091      	lsls	r1, r2
 8000e26:	4097      	lsls	r7, r2
 8000e28:	ea40 0c01 	orr.w	ip, r0, r1
 8000e2c:	4094      	lsls	r4, r2
 8000e2e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000e32:	0c23      	lsrs	r3, r4, #16
 8000e34:	fbbc f6f8 	udiv	r6, ip, r8
 8000e38:	fa1f fe87 	uxth.w	lr, r7
 8000e3c:	fb08 c116 	mls	r1, r8, r6, ip
 8000e40:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e44:	fb06 f10e 	mul.w	r1, r6, lr
 8000e48:	4299      	cmp	r1, r3
 8000e4a:	d909      	bls.n	8000e60 <__udivmoddi4+0x60>
 8000e4c:	18fb      	adds	r3, r7, r3
 8000e4e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000e52:	f080 8119 	bcs.w	8001088 <__udivmoddi4+0x288>
 8000e56:	4299      	cmp	r1, r3
 8000e58:	f240 8116 	bls.w	8001088 <__udivmoddi4+0x288>
 8000e5c:	3e02      	subs	r6, #2
 8000e5e:	443b      	add	r3, r7
 8000e60:	1a5b      	subs	r3, r3, r1
 8000e62:	b2a4      	uxth	r4, r4
 8000e64:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e68:	fb08 3310 	mls	r3, r8, r0, r3
 8000e6c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e70:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e74:	45a6      	cmp	lr, r4
 8000e76:	d909      	bls.n	8000e8c <__udivmoddi4+0x8c>
 8000e78:	193c      	adds	r4, r7, r4
 8000e7a:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e7e:	f080 8105 	bcs.w	800108c <__udivmoddi4+0x28c>
 8000e82:	45a6      	cmp	lr, r4
 8000e84:	f240 8102 	bls.w	800108c <__udivmoddi4+0x28c>
 8000e88:	3802      	subs	r0, #2
 8000e8a:	443c      	add	r4, r7
 8000e8c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e90:	eba4 040e 	sub.w	r4, r4, lr
 8000e94:	2600      	movs	r6, #0
 8000e96:	b11d      	cbz	r5, 8000ea0 <__udivmoddi4+0xa0>
 8000e98:	40d4      	lsrs	r4, r2
 8000e9a:	2300      	movs	r3, #0
 8000e9c:	e9c5 4300 	strd	r4, r3, [r5]
 8000ea0:	4631      	mov	r1, r6
 8000ea2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ea6:	b902      	cbnz	r2, 8000eaa <__udivmoddi4+0xaa>
 8000ea8:	deff      	udf	#255	; 0xff
 8000eaa:	fab2 f282 	clz	r2, r2
 8000eae:	2a00      	cmp	r2, #0
 8000eb0:	d150      	bne.n	8000f54 <__udivmoddi4+0x154>
 8000eb2:	1bcb      	subs	r3, r1, r7
 8000eb4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000eb8:	fa1f f887 	uxth.w	r8, r7
 8000ebc:	2601      	movs	r6, #1
 8000ebe:	fbb3 fcfe 	udiv	ip, r3, lr
 8000ec2:	0c21      	lsrs	r1, r4, #16
 8000ec4:	fb0e 331c 	mls	r3, lr, ip, r3
 8000ec8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ecc:	fb08 f30c 	mul.w	r3, r8, ip
 8000ed0:	428b      	cmp	r3, r1
 8000ed2:	d907      	bls.n	8000ee4 <__udivmoddi4+0xe4>
 8000ed4:	1879      	adds	r1, r7, r1
 8000ed6:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000eda:	d202      	bcs.n	8000ee2 <__udivmoddi4+0xe2>
 8000edc:	428b      	cmp	r3, r1
 8000ede:	f200 80e9 	bhi.w	80010b4 <__udivmoddi4+0x2b4>
 8000ee2:	4684      	mov	ip, r0
 8000ee4:	1ac9      	subs	r1, r1, r3
 8000ee6:	b2a3      	uxth	r3, r4
 8000ee8:	fbb1 f0fe 	udiv	r0, r1, lr
 8000eec:	fb0e 1110 	mls	r1, lr, r0, r1
 8000ef0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000ef4:	fb08 f800 	mul.w	r8, r8, r0
 8000ef8:	45a0      	cmp	r8, r4
 8000efa:	d907      	bls.n	8000f0c <__udivmoddi4+0x10c>
 8000efc:	193c      	adds	r4, r7, r4
 8000efe:	f100 33ff 	add.w	r3, r0, #4294967295
 8000f02:	d202      	bcs.n	8000f0a <__udivmoddi4+0x10a>
 8000f04:	45a0      	cmp	r8, r4
 8000f06:	f200 80d9 	bhi.w	80010bc <__udivmoddi4+0x2bc>
 8000f0a:	4618      	mov	r0, r3
 8000f0c:	eba4 0408 	sub.w	r4, r4, r8
 8000f10:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000f14:	e7bf      	b.n	8000e96 <__udivmoddi4+0x96>
 8000f16:	428b      	cmp	r3, r1
 8000f18:	d909      	bls.n	8000f2e <__udivmoddi4+0x12e>
 8000f1a:	2d00      	cmp	r5, #0
 8000f1c:	f000 80b1 	beq.w	8001082 <__udivmoddi4+0x282>
 8000f20:	2600      	movs	r6, #0
 8000f22:	e9c5 0100 	strd	r0, r1, [r5]
 8000f26:	4630      	mov	r0, r6
 8000f28:	4631      	mov	r1, r6
 8000f2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f2e:	fab3 f683 	clz	r6, r3
 8000f32:	2e00      	cmp	r6, #0
 8000f34:	d14a      	bne.n	8000fcc <__udivmoddi4+0x1cc>
 8000f36:	428b      	cmp	r3, r1
 8000f38:	d302      	bcc.n	8000f40 <__udivmoddi4+0x140>
 8000f3a:	4282      	cmp	r2, r0
 8000f3c:	f200 80b8 	bhi.w	80010b0 <__udivmoddi4+0x2b0>
 8000f40:	1a84      	subs	r4, r0, r2
 8000f42:	eb61 0103 	sbc.w	r1, r1, r3
 8000f46:	2001      	movs	r0, #1
 8000f48:	468c      	mov	ip, r1
 8000f4a:	2d00      	cmp	r5, #0
 8000f4c:	d0a8      	beq.n	8000ea0 <__udivmoddi4+0xa0>
 8000f4e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000f52:	e7a5      	b.n	8000ea0 <__udivmoddi4+0xa0>
 8000f54:	f1c2 0320 	rsb	r3, r2, #32
 8000f58:	fa20 f603 	lsr.w	r6, r0, r3
 8000f5c:	4097      	lsls	r7, r2
 8000f5e:	fa01 f002 	lsl.w	r0, r1, r2
 8000f62:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000f66:	40d9      	lsrs	r1, r3
 8000f68:	4330      	orrs	r0, r6
 8000f6a:	0c03      	lsrs	r3, r0, #16
 8000f6c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000f70:	fa1f f887 	uxth.w	r8, r7
 8000f74:	fb0e 1116 	mls	r1, lr, r6, r1
 8000f78:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f7c:	fb06 f108 	mul.w	r1, r6, r8
 8000f80:	4299      	cmp	r1, r3
 8000f82:	fa04 f402 	lsl.w	r4, r4, r2
 8000f86:	d909      	bls.n	8000f9c <__udivmoddi4+0x19c>
 8000f88:	18fb      	adds	r3, r7, r3
 8000f8a:	f106 3cff 	add.w	ip, r6, #4294967295
 8000f8e:	f080 808d 	bcs.w	80010ac <__udivmoddi4+0x2ac>
 8000f92:	4299      	cmp	r1, r3
 8000f94:	f240 808a 	bls.w	80010ac <__udivmoddi4+0x2ac>
 8000f98:	3e02      	subs	r6, #2
 8000f9a:	443b      	add	r3, r7
 8000f9c:	1a5b      	subs	r3, r3, r1
 8000f9e:	b281      	uxth	r1, r0
 8000fa0:	fbb3 f0fe 	udiv	r0, r3, lr
 8000fa4:	fb0e 3310 	mls	r3, lr, r0, r3
 8000fa8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000fac:	fb00 f308 	mul.w	r3, r0, r8
 8000fb0:	428b      	cmp	r3, r1
 8000fb2:	d907      	bls.n	8000fc4 <__udivmoddi4+0x1c4>
 8000fb4:	1879      	adds	r1, r7, r1
 8000fb6:	f100 3cff 	add.w	ip, r0, #4294967295
 8000fba:	d273      	bcs.n	80010a4 <__udivmoddi4+0x2a4>
 8000fbc:	428b      	cmp	r3, r1
 8000fbe:	d971      	bls.n	80010a4 <__udivmoddi4+0x2a4>
 8000fc0:	3802      	subs	r0, #2
 8000fc2:	4439      	add	r1, r7
 8000fc4:	1acb      	subs	r3, r1, r3
 8000fc6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000fca:	e778      	b.n	8000ebe <__udivmoddi4+0xbe>
 8000fcc:	f1c6 0c20 	rsb	ip, r6, #32
 8000fd0:	fa03 f406 	lsl.w	r4, r3, r6
 8000fd4:	fa22 f30c 	lsr.w	r3, r2, ip
 8000fd8:	431c      	orrs	r4, r3
 8000fda:	fa20 f70c 	lsr.w	r7, r0, ip
 8000fde:	fa01 f306 	lsl.w	r3, r1, r6
 8000fe2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000fe6:	fa21 f10c 	lsr.w	r1, r1, ip
 8000fea:	431f      	orrs	r7, r3
 8000fec:	0c3b      	lsrs	r3, r7, #16
 8000fee:	fbb1 f9fe 	udiv	r9, r1, lr
 8000ff2:	fa1f f884 	uxth.w	r8, r4
 8000ff6:	fb0e 1119 	mls	r1, lr, r9, r1
 8000ffa:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000ffe:	fb09 fa08 	mul.w	sl, r9, r8
 8001002:	458a      	cmp	sl, r1
 8001004:	fa02 f206 	lsl.w	r2, r2, r6
 8001008:	fa00 f306 	lsl.w	r3, r0, r6
 800100c:	d908      	bls.n	8001020 <__udivmoddi4+0x220>
 800100e:	1861      	adds	r1, r4, r1
 8001010:	f109 30ff 	add.w	r0, r9, #4294967295
 8001014:	d248      	bcs.n	80010a8 <__udivmoddi4+0x2a8>
 8001016:	458a      	cmp	sl, r1
 8001018:	d946      	bls.n	80010a8 <__udivmoddi4+0x2a8>
 800101a:	f1a9 0902 	sub.w	r9, r9, #2
 800101e:	4421      	add	r1, r4
 8001020:	eba1 010a 	sub.w	r1, r1, sl
 8001024:	b2bf      	uxth	r7, r7
 8001026:	fbb1 f0fe 	udiv	r0, r1, lr
 800102a:	fb0e 1110 	mls	r1, lr, r0, r1
 800102e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8001032:	fb00 f808 	mul.w	r8, r0, r8
 8001036:	45b8      	cmp	r8, r7
 8001038:	d907      	bls.n	800104a <__udivmoddi4+0x24a>
 800103a:	19e7      	adds	r7, r4, r7
 800103c:	f100 31ff 	add.w	r1, r0, #4294967295
 8001040:	d22e      	bcs.n	80010a0 <__udivmoddi4+0x2a0>
 8001042:	45b8      	cmp	r8, r7
 8001044:	d92c      	bls.n	80010a0 <__udivmoddi4+0x2a0>
 8001046:	3802      	subs	r0, #2
 8001048:	4427      	add	r7, r4
 800104a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800104e:	eba7 0708 	sub.w	r7, r7, r8
 8001052:	fba0 8902 	umull	r8, r9, r0, r2
 8001056:	454f      	cmp	r7, r9
 8001058:	46c6      	mov	lr, r8
 800105a:	4649      	mov	r1, r9
 800105c:	d31a      	bcc.n	8001094 <__udivmoddi4+0x294>
 800105e:	d017      	beq.n	8001090 <__udivmoddi4+0x290>
 8001060:	b15d      	cbz	r5, 800107a <__udivmoddi4+0x27a>
 8001062:	ebb3 020e 	subs.w	r2, r3, lr
 8001066:	eb67 0701 	sbc.w	r7, r7, r1
 800106a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800106e:	40f2      	lsrs	r2, r6
 8001070:	ea4c 0202 	orr.w	r2, ip, r2
 8001074:	40f7      	lsrs	r7, r6
 8001076:	e9c5 2700 	strd	r2, r7, [r5]
 800107a:	2600      	movs	r6, #0
 800107c:	4631      	mov	r1, r6
 800107e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001082:	462e      	mov	r6, r5
 8001084:	4628      	mov	r0, r5
 8001086:	e70b      	b.n	8000ea0 <__udivmoddi4+0xa0>
 8001088:	4606      	mov	r6, r0
 800108a:	e6e9      	b.n	8000e60 <__udivmoddi4+0x60>
 800108c:	4618      	mov	r0, r3
 800108e:	e6fd      	b.n	8000e8c <__udivmoddi4+0x8c>
 8001090:	4543      	cmp	r3, r8
 8001092:	d2e5      	bcs.n	8001060 <__udivmoddi4+0x260>
 8001094:	ebb8 0e02 	subs.w	lr, r8, r2
 8001098:	eb69 0104 	sbc.w	r1, r9, r4
 800109c:	3801      	subs	r0, #1
 800109e:	e7df      	b.n	8001060 <__udivmoddi4+0x260>
 80010a0:	4608      	mov	r0, r1
 80010a2:	e7d2      	b.n	800104a <__udivmoddi4+0x24a>
 80010a4:	4660      	mov	r0, ip
 80010a6:	e78d      	b.n	8000fc4 <__udivmoddi4+0x1c4>
 80010a8:	4681      	mov	r9, r0
 80010aa:	e7b9      	b.n	8001020 <__udivmoddi4+0x220>
 80010ac:	4666      	mov	r6, ip
 80010ae:	e775      	b.n	8000f9c <__udivmoddi4+0x19c>
 80010b0:	4630      	mov	r0, r6
 80010b2:	e74a      	b.n	8000f4a <__udivmoddi4+0x14a>
 80010b4:	f1ac 0c02 	sub.w	ip, ip, #2
 80010b8:	4439      	add	r1, r7
 80010ba:	e713      	b.n	8000ee4 <__udivmoddi4+0xe4>
 80010bc:	3802      	subs	r0, #2
 80010be:	443c      	add	r4, r7
 80010c0:	e724      	b.n	8000f0c <__udivmoddi4+0x10c>
 80010c2:	bf00      	nop

080010c4 <__aeabi_idiv0>:
 80010c4:	4770      	bx	lr
 80010c6:	bf00      	nop

080010c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80010c8:	b5b0      	push	{r4, r5, r7, lr}
 80010ca:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80010cc:	f000 ff44 	bl	8001f58 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80010d0:	f000 f846 	bl	8001160 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80010d4:	f000 f9f0 	bl	80014b8 <MX_GPIO_Init>
  MX_DMA_Init();
 80010d8:	f000 f9ce 	bl	8001478 <MX_DMA_Init>
  MX_USART2_UART_Init();
 80010dc:	f000 f9a2 	bl	8001424 <MX_USART2_UART_Init>
  MX_SPI3_Init();
 80010e0:	f000 f8f8 	bl	80012d4 <MX_SPI3_Init>
  MX_ADC1_Init();
 80010e4:	f000 f8a4 	bl	8001230 <MX_ADC1_Init>
  MX_TIM3_Init();
 80010e8:	f000 f92c 	bl	8001344 <MX_TIM3_Init>
  MX_TIM11_Init();
 80010ec:	f000 f976 	bl	80013dc <MX_TIM11_Init>
  /* USER CODE BEGIN 2 */

	HAL_TIM_Base_Start(&htim3);
 80010f0:	4814      	ldr	r0, [pc, #80]	; (8001144 <main+0x7c>)
 80010f2:	f003 fbbb 	bl	800486c <HAL_TIM_Base_Start>
	HAL_TIM_Base_Start_IT(&htim11);
 80010f6:	4814      	ldr	r0, [pc, #80]	; (8001148 <main+0x80>)
 80010f8:	f003 fc12 	bl	8004920 <HAL_TIM_Base_Start_IT>
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*) &ADCin, 1);
 80010fc:	2201      	movs	r2, #1
 80010fe:	4913      	ldr	r1, [pc, #76]	; (800114c <main+0x84>)
 8001100:	4813      	ldr	r0, [pc, #76]	; (8001150 <main+0x88>)
 8001102:	f001 f91f 	bl	8002344 <HAL_ADC_Start_DMA>

	HAL_GPIO_WritePin(LOAD_GPIO_Port, LOAD_Pin, GPIO_PIN_RESET);
 8001106:	2200      	movs	r2, #0
 8001108:	f44f 7100 	mov.w	r1, #512	; 0x200
 800110c:	4811      	ldr	r0, [pc, #68]	; (8001154 <main+0x8c>)
 800110e:	f002 fb2b 	bl	8003768 <HAL_GPIO_WritePin>

	generatorInit(&ControlVar);
 8001112:	4811      	ldr	r0, [pc, #68]	; (8001158 <main+0x90>)
 8001114:	f000 fa70 	bl	80015f8 <generatorInit>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
	{
		static uint64_t timestamp = 0;
		if (micros() - timestamp > 100) // f 10kHz or T 100uS
 8001118:	f000 fcf2 	bl	8001b00 <micros>
 800111c:	4b0f      	ldr	r3, [pc, #60]	; (800115c <main+0x94>)
 800111e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001122:	1a84      	subs	r4, r0, r2
 8001124:	eb61 0503 	sbc.w	r5, r1, r3
 8001128:	2d00      	cmp	r5, #0
 800112a:	bf08      	it	eq
 800112c:	2c65      	cmpeq	r4, #101	; 0x65
 800112e:	d3f3      	bcc.n	8001118 <main+0x50>
		{
			timestamp = micros();
 8001130:	f000 fce6 	bl	8001b00 <micros>
 8001134:	4602      	mov	r2, r0
 8001136:	460b      	mov	r3, r1
 8001138:	4908      	ldr	r1, [pc, #32]	; (800115c <main+0x94>)
 800113a:	e9c1 2300 	strd	r2, r3, [r1]
			generator();
 800113e:	f000 fa87 	bl	8001650 <generator>
	{
 8001142:	e7e9      	b.n	8001118 <main+0x50>
 8001144:	20000068 	.word	0x20000068
 8001148:	20000150 	.word	0x20000150
 800114c:	2000002c 	.word	0x2000002c
 8001150:	20000108 	.word	0x20000108
 8001154:	40020000 	.word	0x40020000
 8001158:	20000040 	.word	0x20000040
 800115c:	20000060 	.word	0x20000060

08001160 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	b094      	sub	sp, #80	; 0x50
 8001164:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001166:	f107 0320 	add.w	r3, r7, #32
 800116a:	2230      	movs	r2, #48	; 0x30
 800116c:	2100      	movs	r1, #0
 800116e:	4618      	mov	r0, r3
 8001170:	f004 fa02 	bl	8005578 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001174:	f107 030c 	add.w	r3, r7, #12
 8001178:	2200      	movs	r2, #0
 800117a:	601a      	str	r2, [r3, #0]
 800117c:	605a      	str	r2, [r3, #4]
 800117e:	609a      	str	r2, [r3, #8]
 8001180:	60da      	str	r2, [r3, #12]
 8001182:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001184:	2300      	movs	r3, #0
 8001186:	60bb      	str	r3, [r7, #8]
 8001188:	4b27      	ldr	r3, [pc, #156]	; (8001228 <SystemClock_Config+0xc8>)
 800118a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800118c:	4a26      	ldr	r2, [pc, #152]	; (8001228 <SystemClock_Config+0xc8>)
 800118e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001192:	6413      	str	r3, [r2, #64]	; 0x40
 8001194:	4b24      	ldr	r3, [pc, #144]	; (8001228 <SystemClock_Config+0xc8>)
 8001196:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001198:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800119c:	60bb      	str	r3, [r7, #8]
 800119e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80011a0:	2300      	movs	r3, #0
 80011a2:	607b      	str	r3, [r7, #4]
 80011a4:	4b21      	ldr	r3, [pc, #132]	; (800122c <SystemClock_Config+0xcc>)
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	4a20      	ldr	r2, [pc, #128]	; (800122c <SystemClock_Config+0xcc>)
 80011aa:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80011ae:	6013      	str	r3, [r2, #0]
 80011b0:	4b1e      	ldr	r3, [pc, #120]	; (800122c <SystemClock_Config+0xcc>)
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80011b8:	607b      	str	r3, [r7, #4]
 80011ba:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80011bc:	2302      	movs	r3, #2
 80011be:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80011c0:	2301      	movs	r3, #1
 80011c2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80011c4:	2310      	movs	r3, #16
 80011c6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80011c8:	2302      	movs	r3, #2
 80011ca:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80011cc:	2300      	movs	r3, #0
 80011ce:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80011d0:	2308      	movs	r3, #8
 80011d2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 80011d4:	2364      	movs	r3, #100	; 0x64
 80011d6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80011d8:	2302      	movs	r3, #2
 80011da:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80011dc:	2304      	movs	r3, #4
 80011de:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80011e0:	f107 0320 	add.w	r3, r7, #32
 80011e4:	4618      	mov	r0, r3
 80011e6:	f002 fad9 	bl	800379c <HAL_RCC_OscConfig>
 80011ea:	4603      	mov	r3, r0
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d001      	beq.n	80011f4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80011f0:	f000 fca0 	bl	8001b34 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80011f4:	230f      	movs	r3, #15
 80011f6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80011f8:	2302      	movs	r3, #2
 80011fa:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80011fc:	2300      	movs	r3, #0
 80011fe:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001200:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001204:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001206:	2300      	movs	r3, #0
 8001208:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800120a:	f107 030c 	add.w	r3, r7, #12
 800120e:	2103      	movs	r1, #3
 8001210:	4618      	mov	r0, r3
 8001212:	f002 fd3b 	bl	8003c8c <HAL_RCC_ClockConfig>
 8001216:	4603      	mov	r3, r0
 8001218:	2b00      	cmp	r3, #0
 800121a:	d001      	beq.n	8001220 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 800121c:	f000 fc8a 	bl	8001b34 <Error_Handler>
  }
}
 8001220:	bf00      	nop
 8001222:	3750      	adds	r7, #80	; 0x50
 8001224:	46bd      	mov	sp, r7
 8001226:	bd80      	pop	{r7, pc}
 8001228:	40023800 	.word	0x40023800
 800122c:	40007000 	.word	0x40007000

08001230 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001230:	b580      	push	{r7, lr}
 8001232:	b084      	sub	sp, #16
 8001234:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001236:	463b      	mov	r3, r7
 8001238:	2200      	movs	r2, #0
 800123a:	601a      	str	r2, [r3, #0]
 800123c:	605a      	str	r2, [r3, #4]
 800123e:	609a      	str	r2, [r3, #8]
 8001240:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001242:	4b22      	ldr	r3, [pc, #136]	; (80012cc <MX_ADC1_Init+0x9c>)
 8001244:	4a22      	ldr	r2, [pc, #136]	; (80012d0 <MX_ADC1_Init+0xa0>)
 8001246:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001248:	4b20      	ldr	r3, [pc, #128]	; (80012cc <MX_ADC1_Init+0x9c>)
 800124a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800124e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001250:	4b1e      	ldr	r3, [pc, #120]	; (80012cc <MX_ADC1_Init+0x9c>)
 8001252:	2200      	movs	r2, #0
 8001254:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8001256:	4b1d      	ldr	r3, [pc, #116]	; (80012cc <MX_ADC1_Init+0x9c>)
 8001258:	2201      	movs	r2, #1
 800125a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800125c:	4b1b      	ldr	r3, [pc, #108]	; (80012cc <MX_ADC1_Init+0x9c>)
 800125e:	2200      	movs	r2, #0
 8001260:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001262:	4b1a      	ldr	r3, [pc, #104]	; (80012cc <MX_ADC1_Init+0x9c>)
 8001264:	2200      	movs	r2, #0
 8001266:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 800126a:	4b18      	ldr	r3, [pc, #96]	; (80012cc <MX_ADC1_Init+0x9c>)
 800126c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001270:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T3_TRGO;
 8001272:	4b16      	ldr	r3, [pc, #88]	; (80012cc <MX_ADC1_Init+0x9c>)
 8001274:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001278:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800127a:	4b14      	ldr	r3, [pc, #80]	; (80012cc <MX_ADC1_Init+0x9c>)
 800127c:	2200      	movs	r2, #0
 800127e:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001280:	4b12      	ldr	r3, [pc, #72]	; (80012cc <MX_ADC1_Init+0x9c>)
 8001282:	2201      	movs	r2, #1
 8001284:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8001286:	4b11      	ldr	r3, [pc, #68]	; (80012cc <MX_ADC1_Init+0x9c>)
 8001288:	2201      	movs	r2, #1
 800128a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 800128e:	4b0f      	ldr	r3, [pc, #60]	; (80012cc <MX_ADC1_Init+0x9c>)
 8001290:	2200      	movs	r2, #0
 8001292:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001294:	480d      	ldr	r0, [pc, #52]	; (80012cc <MX_ADC1_Init+0x9c>)
 8001296:	f000 fed1 	bl	800203c <HAL_ADC_Init>
 800129a:	4603      	mov	r3, r0
 800129c:	2b00      	cmp	r3, #0
 800129e:	d001      	beq.n	80012a4 <MX_ADC1_Init+0x74>
  {
    Error_Handler();
 80012a0:	f000 fc48 	bl	8001b34 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80012a4:	2300      	movs	r3, #0
 80012a6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80012a8:	2301      	movs	r3, #1
 80012aa:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80012ac:	2300      	movs	r3, #0
 80012ae:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80012b0:	463b      	mov	r3, r7
 80012b2:	4619      	mov	r1, r3
 80012b4:	4805      	ldr	r0, [pc, #20]	; (80012cc <MX_ADC1_Init+0x9c>)
 80012b6:	f001 f95d 	bl	8002574 <HAL_ADC_ConfigChannel>
 80012ba:	4603      	mov	r3, r0
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d001      	beq.n	80012c4 <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 80012c0:	f000 fc38 	bl	8001b34 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80012c4:	bf00      	nop
 80012c6:	3710      	adds	r7, #16
 80012c8:	46bd      	mov	sp, r7
 80012ca:	bd80      	pop	{r7, pc}
 80012cc:	20000108 	.word	0x20000108
 80012d0:	40012000 	.word	0x40012000

080012d4 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 80012d4:	b580      	push	{r7, lr}
 80012d6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 80012d8:	4b18      	ldr	r3, [pc, #96]	; (800133c <MX_SPI3_Init+0x68>)
 80012da:	4a19      	ldr	r2, [pc, #100]	; (8001340 <MX_SPI3_Init+0x6c>)
 80012dc:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 80012de:	4b17      	ldr	r3, [pc, #92]	; (800133c <MX_SPI3_Init+0x68>)
 80012e0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80012e4:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 80012e6:	4b15      	ldr	r3, [pc, #84]	; (800133c <MX_SPI3_Init+0x68>)
 80012e8:	2200      	movs	r2, #0
 80012ea:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_16BIT;
 80012ec:	4b13      	ldr	r3, [pc, #76]	; (800133c <MX_SPI3_Init+0x68>)
 80012ee:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80012f2:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 80012f4:	4b11      	ldr	r3, [pc, #68]	; (800133c <MX_SPI3_Init+0x68>)
 80012f6:	2200      	movs	r2, #0
 80012f8:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 80012fa:	4b10      	ldr	r3, [pc, #64]	; (800133c <MX_SPI3_Init+0x68>)
 80012fc:	2200      	movs	r2, #0
 80012fe:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8001300:	4b0e      	ldr	r3, [pc, #56]	; (800133c <MX_SPI3_Init+0x68>)
 8001302:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001306:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8001308:	4b0c      	ldr	r3, [pc, #48]	; (800133c <MX_SPI3_Init+0x68>)
 800130a:	2220      	movs	r2, #32
 800130c:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800130e:	4b0b      	ldr	r3, [pc, #44]	; (800133c <MX_SPI3_Init+0x68>)
 8001310:	2200      	movs	r2, #0
 8001312:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8001314:	4b09      	ldr	r3, [pc, #36]	; (800133c <MX_SPI3_Init+0x68>)
 8001316:	2200      	movs	r2, #0
 8001318:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800131a:	4b08      	ldr	r3, [pc, #32]	; (800133c <MX_SPI3_Init+0x68>)
 800131c:	2200      	movs	r2, #0
 800131e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 8001320:	4b06      	ldr	r3, [pc, #24]	; (800133c <MX_SPI3_Init+0x68>)
 8001322:	220a      	movs	r2, #10
 8001324:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8001326:	4805      	ldr	r0, [pc, #20]	; (800133c <MX_SPI3_Init+0x68>)
 8001328:	f002 feac 	bl	8004084 <HAL_SPI_Init>
 800132c:	4603      	mov	r3, r0
 800132e:	2b00      	cmp	r3, #0
 8001330:	d001      	beq.n	8001336 <MX_SPI3_Init+0x62>
  {
    Error_Handler();
 8001332:	f000 fbff 	bl	8001b34 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8001336:	bf00      	nop
 8001338:	bd80      	pop	{r7, pc}
 800133a:	bf00      	nop
 800133c:	200000b0 	.word	0x200000b0
 8001340:	40003c00 	.word	0x40003c00

08001344 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001344:	b580      	push	{r7, lr}
 8001346:	b086      	sub	sp, #24
 8001348:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800134a:	f107 0308 	add.w	r3, r7, #8
 800134e:	2200      	movs	r2, #0
 8001350:	601a      	str	r2, [r3, #0]
 8001352:	605a      	str	r2, [r3, #4]
 8001354:	609a      	str	r2, [r3, #8]
 8001356:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001358:	463b      	mov	r3, r7
 800135a:	2200      	movs	r2, #0
 800135c:	601a      	str	r2, [r3, #0]
 800135e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001360:	4b1c      	ldr	r3, [pc, #112]	; (80013d4 <MX_TIM3_Init+0x90>)
 8001362:	4a1d      	ldr	r2, [pc, #116]	; (80013d8 <MX_TIM3_Init+0x94>)
 8001364:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 100;
 8001366:	4b1b      	ldr	r3, [pc, #108]	; (80013d4 <MX_TIM3_Init+0x90>)
 8001368:	2264      	movs	r2, #100	; 0x64
 800136a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800136c:	4b19      	ldr	r3, [pc, #100]	; (80013d4 <MX_TIM3_Init+0x90>)
 800136e:	2200      	movs	r2, #0
 8001370:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 100;
 8001372:	4b18      	ldr	r3, [pc, #96]	; (80013d4 <MX_TIM3_Init+0x90>)
 8001374:	2264      	movs	r2, #100	; 0x64
 8001376:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001378:	4b16      	ldr	r3, [pc, #88]	; (80013d4 <MX_TIM3_Init+0x90>)
 800137a:	2200      	movs	r2, #0
 800137c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800137e:	4b15      	ldr	r3, [pc, #84]	; (80013d4 <MX_TIM3_Init+0x90>)
 8001380:	2200      	movs	r2, #0
 8001382:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001384:	4813      	ldr	r0, [pc, #76]	; (80013d4 <MX_TIM3_Init+0x90>)
 8001386:	f003 fa21 	bl	80047cc <HAL_TIM_Base_Init>
 800138a:	4603      	mov	r3, r0
 800138c:	2b00      	cmp	r3, #0
 800138e:	d001      	beq.n	8001394 <MX_TIM3_Init+0x50>
  {
    Error_Handler();
 8001390:	f000 fbd0 	bl	8001b34 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001394:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001398:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800139a:	f107 0308 	add.w	r3, r7, #8
 800139e:	4619      	mov	r1, r3
 80013a0:	480c      	ldr	r0, [pc, #48]	; (80013d4 <MX_TIM3_Init+0x90>)
 80013a2:	f003 fc27 	bl	8004bf4 <HAL_TIM_ConfigClockSource>
 80013a6:	4603      	mov	r3, r0
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d001      	beq.n	80013b0 <MX_TIM3_Init+0x6c>
  {
    Error_Handler();
 80013ac:	f000 fbc2 	bl	8001b34 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80013b0:	2320      	movs	r3, #32
 80013b2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80013b4:	2300      	movs	r3, #0
 80013b6:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80013b8:	463b      	mov	r3, r7
 80013ba:	4619      	mov	r1, r3
 80013bc:	4805      	ldr	r0, [pc, #20]	; (80013d4 <MX_TIM3_Init+0x90>)
 80013be:	f003 fe1f 	bl	8005000 <HAL_TIMEx_MasterConfigSynchronization>
 80013c2:	4603      	mov	r3, r0
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d001      	beq.n	80013cc <MX_TIM3_Init+0x88>
  {
    Error_Handler();
 80013c8:	f000 fbb4 	bl	8001b34 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80013cc:	bf00      	nop
 80013ce:	3718      	adds	r7, #24
 80013d0:	46bd      	mov	sp, r7
 80013d2:	bd80      	pop	{r7, pc}
 80013d4:	20000068 	.word	0x20000068
 80013d8:	40000400 	.word	0x40000400

080013dc <MX_TIM11_Init>:
  * @brief TIM11 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM11_Init(void)
{
 80013dc:	b580      	push	{r7, lr}
 80013de:	af00      	add	r7, sp, #0
  /* USER CODE END TIM11_Init 0 */

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 80013e0:	4b0e      	ldr	r3, [pc, #56]	; (800141c <MX_TIM11_Init+0x40>)
 80013e2:	4a0f      	ldr	r2, [pc, #60]	; (8001420 <MX_TIM11_Init+0x44>)
 80013e4:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 100;
 80013e6:	4b0d      	ldr	r3, [pc, #52]	; (800141c <MX_TIM11_Init+0x40>)
 80013e8:	2264      	movs	r2, #100	; 0x64
 80013ea:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013ec:	4b0b      	ldr	r3, [pc, #44]	; (800141c <MX_TIM11_Init+0x40>)
 80013ee:	2200      	movs	r2, #0
 80013f0:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 65535;
 80013f2:	4b0a      	ldr	r3, [pc, #40]	; (800141c <MX_TIM11_Init+0x40>)
 80013f4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80013f8:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013fa:	4b08      	ldr	r3, [pc, #32]	; (800141c <MX_TIM11_Init+0x40>)
 80013fc:	2200      	movs	r2, #0
 80013fe:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001400:	4b06      	ldr	r3, [pc, #24]	; (800141c <MX_TIM11_Init+0x40>)
 8001402:	2200      	movs	r2, #0
 8001404:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 8001406:	4805      	ldr	r0, [pc, #20]	; (800141c <MX_TIM11_Init+0x40>)
 8001408:	f003 f9e0 	bl	80047cc <HAL_TIM_Base_Init>
 800140c:	4603      	mov	r3, r0
 800140e:	2b00      	cmp	r3, #0
 8001410:	d001      	beq.n	8001416 <MX_TIM11_Init+0x3a>
  {
    Error_Handler();
 8001412:	f000 fb8f 	bl	8001b34 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
 8001416:	bf00      	nop
 8001418:	bd80      	pop	{r7, pc}
 800141a:	bf00      	nop
 800141c:	20000150 	.word	0x20000150
 8001420:	40014800 	.word	0x40014800

08001424 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001424:	b580      	push	{r7, lr}
 8001426:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001428:	4b11      	ldr	r3, [pc, #68]	; (8001470 <MX_USART2_UART_Init+0x4c>)
 800142a:	4a12      	ldr	r2, [pc, #72]	; (8001474 <MX_USART2_UART_Init+0x50>)
 800142c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800142e:	4b10      	ldr	r3, [pc, #64]	; (8001470 <MX_USART2_UART_Init+0x4c>)
 8001430:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001434:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001436:	4b0e      	ldr	r3, [pc, #56]	; (8001470 <MX_USART2_UART_Init+0x4c>)
 8001438:	2200      	movs	r2, #0
 800143a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800143c:	4b0c      	ldr	r3, [pc, #48]	; (8001470 <MX_USART2_UART_Init+0x4c>)
 800143e:	2200      	movs	r2, #0
 8001440:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001442:	4b0b      	ldr	r3, [pc, #44]	; (8001470 <MX_USART2_UART_Init+0x4c>)
 8001444:	2200      	movs	r2, #0
 8001446:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001448:	4b09      	ldr	r3, [pc, #36]	; (8001470 <MX_USART2_UART_Init+0x4c>)
 800144a:	220c      	movs	r2, #12
 800144c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800144e:	4b08      	ldr	r3, [pc, #32]	; (8001470 <MX_USART2_UART_Init+0x4c>)
 8001450:	2200      	movs	r2, #0
 8001452:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001454:	4b06      	ldr	r3, [pc, #24]	; (8001470 <MX_USART2_UART_Init+0x4c>)
 8001456:	2200      	movs	r2, #0
 8001458:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800145a:	4805      	ldr	r0, [pc, #20]	; (8001470 <MX_USART2_UART_Init+0x4c>)
 800145c:	f003 fe52 	bl	8005104 <HAL_UART_Init>
 8001460:	4603      	mov	r3, r0
 8001462:	2b00      	cmp	r3, #0
 8001464:	d001      	beq.n	800146a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001466:	f000 fb65 	bl	8001b34 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800146a:	bf00      	nop
 800146c:	bd80      	pop	{r7, pc}
 800146e:	bf00      	nop
 8001470:	200001f8 	.word	0x200001f8
 8001474:	40004400 	.word	0x40004400

08001478 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001478:	b580      	push	{r7, lr}
 800147a:	b082      	sub	sp, #8
 800147c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800147e:	2300      	movs	r3, #0
 8001480:	607b      	str	r3, [r7, #4]
 8001482:	4b0c      	ldr	r3, [pc, #48]	; (80014b4 <MX_DMA_Init+0x3c>)
 8001484:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001486:	4a0b      	ldr	r2, [pc, #44]	; (80014b4 <MX_DMA_Init+0x3c>)
 8001488:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800148c:	6313      	str	r3, [r2, #48]	; 0x30
 800148e:	4b09      	ldr	r3, [pc, #36]	; (80014b4 <MX_DMA_Init+0x3c>)
 8001490:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001492:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001496:	607b      	str	r3, [r7, #4]
 8001498:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 800149a:	2200      	movs	r2, #0
 800149c:	2100      	movs	r1, #0
 800149e:	2038      	movs	r0, #56	; 0x38
 80014a0:	f001 fbfd 	bl	8002c9e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80014a4:	2038      	movs	r0, #56	; 0x38
 80014a6:	f001 fc16 	bl	8002cd6 <HAL_NVIC_EnableIRQ>

}
 80014aa:	bf00      	nop
 80014ac:	3708      	adds	r7, #8
 80014ae:	46bd      	mov	sp, r7
 80014b0:	bd80      	pop	{r7, pc}
 80014b2:	bf00      	nop
 80014b4:	40023800 	.word	0x40023800

080014b8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80014b8:	b580      	push	{r7, lr}
 80014ba:	b08a      	sub	sp, #40	; 0x28
 80014bc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014be:	f107 0314 	add.w	r3, r7, #20
 80014c2:	2200      	movs	r2, #0
 80014c4:	601a      	str	r2, [r3, #0]
 80014c6:	605a      	str	r2, [r3, #4]
 80014c8:	609a      	str	r2, [r3, #8]
 80014ca:	60da      	str	r2, [r3, #12]
 80014cc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80014ce:	2300      	movs	r3, #0
 80014d0:	613b      	str	r3, [r7, #16]
 80014d2:	4b44      	ldr	r3, [pc, #272]	; (80015e4 <MX_GPIO_Init+0x12c>)
 80014d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014d6:	4a43      	ldr	r2, [pc, #268]	; (80015e4 <MX_GPIO_Init+0x12c>)
 80014d8:	f043 0304 	orr.w	r3, r3, #4
 80014dc:	6313      	str	r3, [r2, #48]	; 0x30
 80014de:	4b41      	ldr	r3, [pc, #260]	; (80015e4 <MX_GPIO_Init+0x12c>)
 80014e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014e2:	f003 0304 	and.w	r3, r3, #4
 80014e6:	613b      	str	r3, [r7, #16]
 80014e8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80014ea:	2300      	movs	r3, #0
 80014ec:	60fb      	str	r3, [r7, #12]
 80014ee:	4b3d      	ldr	r3, [pc, #244]	; (80015e4 <MX_GPIO_Init+0x12c>)
 80014f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014f2:	4a3c      	ldr	r2, [pc, #240]	; (80015e4 <MX_GPIO_Init+0x12c>)
 80014f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80014f8:	6313      	str	r3, [r2, #48]	; 0x30
 80014fa:	4b3a      	ldr	r3, [pc, #232]	; (80015e4 <MX_GPIO_Init+0x12c>)
 80014fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001502:	60fb      	str	r3, [r7, #12]
 8001504:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001506:	2300      	movs	r3, #0
 8001508:	60bb      	str	r3, [r7, #8]
 800150a:	4b36      	ldr	r3, [pc, #216]	; (80015e4 <MX_GPIO_Init+0x12c>)
 800150c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800150e:	4a35      	ldr	r2, [pc, #212]	; (80015e4 <MX_GPIO_Init+0x12c>)
 8001510:	f043 0301 	orr.w	r3, r3, #1
 8001514:	6313      	str	r3, [r2, #48]	; 0x30
 8001516:	4b33      	ldr	r3, [pc, #204]	; (80015e4 <MX_GPIO_Init+0x12c>)
 8001518:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800151a:	f003 0301 	and.w	r3, r3, #1
 800151e:	60bb      	str	r3, [r7, #8]
 8001520:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001522:	2300      	movs	r3, #0
 8001524:	607b      	str	r3, [r7, #4]
 8001526:	4b2f      	ldr	r3, [pc, #188]	; (80015e4 <MX_GPIO_Init+0x12c>)
 8001528:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800152a:	4a2e      	ldr	r2, [pc, #184]	; (80015e4 <MX_GPIO_Init+0x12c>)
 800152c:	f043 0302 	orr.w	r3, r3, #2
 8001530:	6313      	str	r3, [r2, #48]	; 0x30
 8001532:	4b2c      	ldr	r3, [pc, #176]	; (80015e4 <MX_GPIO_Init+0x12c>)
 8001534:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001536:	f003 0302 	and.w	r3, r3, #2
 800153a:	607b      	str	r3, [r7, #4]
 800153c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800153e:	2200      	movs	r2, #0
 8001540:	2120      	movs	r1, #32
 8001542:	4829      	ldr	r0, [pc, #164]	; (80015e8 <MX_GPIO_Init+0x130>)
 8001544:	f002 f910 	bl	8003768 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI_SS_GPIO_Port, SPI_SS_Pin, GPIO_PIN_SET);
 8001548:	2201      	movs	r2, #1
 800154a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800154e:	4827      	ldr	r0, [pc, #156]	; (80015ec <MX_GPIO_Init+0x134>)
 8001550:	f002 f90a 	bl	8003768 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SHDN_GPIO_Port, SHDN_Pin, GPIO_PIN_SET);
 8001554:	2201      	movs	r2, #1
 8001556:	2180      	movs	r1, #128	; 0x80
 8001558:	4825      	ldr	r0, [pc, #148]	; (80015f0 <MX_GPIO_Init+0x138>)
 800155a:	f002 f905 	bl	8003768 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LOAD_GPIO_Port, LOAD_Pin, GPIO_PIN_SET);
 800155e:	2201      	movs	r2, #1
 8001560:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001564:	4820      	ldr	r0, [pc, #128]	; (80015e8 <MX_GPIO_Init+0x130>)
 8001566:	f002 f8ff 	bl	8003768 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800156a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800156e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001570:	4b20      	ldr	r3, [pc, #128]	; (80015f4 <MX_GPIO_Init+0x13c>)
 8001572:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001574:	2300      	movs	r3, #0
 8001576:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001578:	f107 0314 	add.w	r3, r7, #20
 800157c:	4619      	mov	r1, r3
 800157e:	481c      	ldr	r0, [pc, #112]	; (80015f0 <MX_GPIO_Init+0x138>)
 8001580:	f001 ff56 	bl	8003430 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin LOAD_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|LOAD_Pin;
 8001584:	f44f 7308 	mov.w	r3, #544	; 0x220
 8001588:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800158a:	2301      	movs	r3, #1
 800158c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800158e:	2300      	movs	r3, #0
 8001590:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001592:	2300      	movs	r3, #0
 8001594:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001596:	f107 0314 	add.w	r3, r7, #20
 800159a:	4619      	mov	r1, r3
 800159c:	4812      	ldr	r0, [pc, #72]	; (80015e8 <MX_GPIO_Init+0x130>)
 800159e:	f001 ff47 	bl	8003430 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI_SS_Pin */
  GPIO_InitStruct.Pin = SPI_SS_Pin;
 80015a2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80015a6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015a8:	2301      	movs	r3, #1
 80015aa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ac:	2300      	movs	r3, #0
 80015ae:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015b0:	2300      	movs	r3, #0
 80015b2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI_SS_GPIO_Port, &GPIO_InitStruct);
 80015b4:	f107 0314 	add.w	r3, r7, #20
 80015b8:	4619      	mov	r1, r3
 80015ba:	480c      	ldr	r0, [pc, #48]	; (80015ec <MX_GPIO_Init+0x134>)
 80015bc:	f001 ff38 	bl	8003430 <HAL_GPIO_Init>

  /*Configure GPIO pin : SHDN_Pin */
  GPIO_InitStruct.Pin = SHDN_Pin;
 80015c0:	2380      	movs	r3, #128	; 0x80
 80015c2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015c4:	2301      	movs	r3, #1
 80015c6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015c8:	2300      	movs	r3, #0
 80015ca:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015cc:	2300      	movs	r3, #0
 80015ce:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SHDN_GPIO_Port, &GPIO_InitStruct);
 80015d0:	f107 0314 	add.w	r3, r7, #20
 80015d4:	4619      	mov	r1, r3
 80015d6:	4806      	ldr	r0, [pc, #24]	; (80015f0 <MX_GPIO_Init+0x138>)
 80015d8:	f001 ff2a 	bl	8003430 <HAL_GPIO_Init>

}
 80015dc:	bf00      	nop
 80015de:	3728      	adds	r7, #40	; 0x28
 80015e0:	46bd      	mov	sp, r7
 80015e2:	bd80      	pop	{r7, pc}
 80015e4:	40023800 	.word	0x40023800
 80015e8:	40020000 	.word	0x40020000
 80015ec:	40020400 	.word	0x40020400
 80015f0:	40020800 	.word	0x40020800
 80015f4:	10210000 	.word	0x10210000

080015f8 <generatorInit>:

/* USER CODE BEGIN 4 */

void generatorInit(Generator *var)
{
 80015f8:	b580      	push	{r7, lr}
 80015fa:	b082      	sub	sp, #8
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	6078      	str	r0, [r7, #4]
	var->wave_mode		= 0;
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	2200      	movs	r2, #0
 8001604:	751a      	strb	r2, [r3, #20]
						//0:sawtooth
						//1:sinewave
						//2:squarewave
	var->count			= 0; 		//0-99 %
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	f04f 0200 	mov.w	r2, #0
 800160c:	601a      	str	r2, [r3, #0]
	var->frequency 		= 1;		//0-10 Hz
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8001614:	605a      	str	r2, [r3, #4]
	var->max_voltage	= 3.3;		//0-3.3 V
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	4a0b      	ldr	r2, [pc, #44]	; (8001648 <generatorInit+0x50>)
 800161a:	609a      	str	r2, [r3, #8]
	var->min_voltage	= 0;		//0-3.3 V
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	f04f 0200 	mov.w	r2, #0
 8001622:	60da      	str	r2, [r3, #12]
	var->duty_cycle		= 50.0;		//0-100 %
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	4a09      	ldr	r2, [pc, #36]	; (800164c <generatorInit+0x54>)
 8001628:	611a      	str	r2, [r3, #16]
	var->periodstamp	= micros();	//uS
 800162a:	f000 fa69 	bl	8001b00 <micros>
 800162e:	4602      	mov	r2, r0
 8001630:	460b      	mov	r3, r1
 8001632:	6879      	ldr	r1, [r7, #4]
 8001634:	e9c1 2306 	strd	r2, r3, [r1, #24]
	var->slope_down		= 0;		//0:slope up 1:slope down (sawtooth mode)
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	2200      	movs	r2, #0
 800163c:	755a      	strb	r2, [r3, #21]
}
 800163e:	bf00      	nop
 8001640:	3708      	adds	r7, #8
 8001642:	46bd      	mov	sp, r7
 8001644:	bd80      	pop	{r7, pc}
 8001646:	bf00      	nop
 8001648:	40533333 	.word	0x40533333
 800164c:	42480000 	.word	0x42480000

08001650 <generator>:

void generator()
{
 8001650:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001654:	af00      	add	r7, sp, #0
	//Count by normalized to 0-100
	ControlVar.count += 100 * ControlVar.frequency /10000.0;
 8001656:	4bc8      	ldr	r3, [pc, #800]	; (8001978 <generator+0x328>)
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	4618      	mov	r0, r3
 800165c:	f7fe ff20 	bl	80004a0 <__aeabi_f2d>
 8001660:	4680      	mov	r8, r0
 8001662:	4689      	mov	r9, r1
 8001664:	4bc4      	ldr	r3, [pc, #784]	; (8001978 <generator+0x328>)
 8001666:	edd3 7a01 	vldr	s15, [r3, #4]
 800166a:	ed9f 7ac4 	vldr	s14, [pc, #784]	; 800197c <generator+0x32c>
 800166e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001672:	ee17 0a90 	vmov	r0, s15
 8001676:	f7fe ff13 	bl	80004a0 <__aeabi_f2d>
 800167a:	a3b7      	add	r3, pc, #732	; (adr r3, 8001958 <generator+0x308>)
 800167c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001680:	f7ff f890 	bl	80007a4 <__aeabi_ddiv>
 8001684:	4602      	mov	r2, r0
 8001686:	460b      	mov	r3, r1
 8001688:	4640      	mov	r0, r8
 800168a:	4649      	mov	r1, r9
 800168c:	f7fe fdaa 	bl	80001e4 <__adddf3>
 8001690:	4602      	mov	r2, r0
 8001692:	460b      	mov	r3, r1
 8001694:	4610      	mov	r0, r2
 8001696:	4619      	mov	r1, r3
 8001698:	f7ff fa3c 	bl	8000b14 <__aeabi_d2f>
 800169c:	4603      	mov	r3, r0
 800169e:	4ab6      	ldr	r2, [pc, #728]	; (8001978 <generator+0x328>)
 80016a0:	6013      	str	r3, [r2, #0]
	if (micros()-ControlVar.periodstamp > 1/ControlVar.frequency*1000000) {ControlVar.count = 0; ControlVar.periodstamp = micros();}
 80016a2:	f000 fa2d 	bl	8001b00 <micros>
 80016a6:	4bb4      	ldr	r3, [pc, #720]	; (8001978 <generator+0x328>)
 80016a8:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 80016ac:	1a84      	subs	r4, r0, r2
 80016ae:	eb61 0503 	sbc.w	r5, r1, r3
 80016b2:	4620      	mov	r0, r4
 80016b4:	4629      	mov	r1, r5
 80016b6:	f7ff fb45 	bl	8000d44 <__aeabi_ul2f>
 80016ba:	ee06 0a10 	vmov	s12, r0
 80016be:	4bae      	ldr	r3, [pc, #696]	; (8001978 <generator+0x328>)
 80016c0:	ed93 7a01 	vldr	s14, [r3, #4]
 80016c4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80016c8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80016cc:	ed9f 7aac 	vldr	s14, [pc, #688]	; 8001980 <generator+0x330>
 80016d0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80016d4:	eeb4 6ae7 	vcmpe.f32	s12, s15
 80016d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80016dc:	dd0a      	ble.n	80016f4 <generator+0xa4>
 80016de:	4ba6      	ldr	r3, [pc, #664]	; (8001978 <generator+0x328>)
 80016e0:	f04f 0200 	mov.w	r2, #0
 80016e4:	601a      	str	r2, [r3, #0]
 80016e6:	f000 fa0b 	bl	8001b00 <micros>
 80016ea:	4602      	mov	r2, r0
 80016ec:	460b      	mov	r3, r1
 80016ee:	49a2      	ldr	r1, [pc, #648]	; (8001978 <generator+0x328>)
 80016f0:	e9c1 2306 	strd	r2, r3, [r1, #24]

	//Amplify to 12 bits (0-4096)
	switch (ControlVar.wave_mode)
 80016f4:	4ba0      	ldr	r3, [pc, #640]	; (8001978 <generator+0x328>)
 80016f6:	7d1b      	ldrb	r3, [r3, #20]
 80016f8:	2b02      	cmp	r3, #2
 80016fa:	f000 8149 	beq.w	8001990 <generator+0x340>
 80016fe:	2b02      	cmp	r3, #2
 8001700:	f300 817b 	bgt.w	80019fa <generator+0x3aa>
 8001704:	2b00      	cmp	r3, #0
 8001706:	d003      	beq.n	8001710 <generator+0xc0>
 8001708:	2b01      	cmp	r3, #1
 800170a:	f000 80b1 	beq.w	8001870 <generator+0x220>
				dataOut = 4096/3.3*ControlVar.min_voltage;
			}
			break;

		default:
			break;
 800170e:	e174      	b.n	80019fa <generator+0x3aa>
			if (ControlVar.slope_down) {							//slope down
 8001710:	4b99      	ldr	r3, [pc, #612]	; (8001978 <generator+0x328>)
 8001712:	7d5b      	ldrb	r3, [r3, #21]
 8001714:	2b00      	cmp	r3, #0
 8001716:	d058      	beq.n	80017ca <generator+0x17a>
				dataOut = (100-ControlVar.count) * (
 8001718:	4b97      	ldr	r3, [pc, #604]	; (8001978 <generator+0x328>)
 800171a:	edd3 7a00 	vldr	s15, [r3]
 800171e:	ed9f 7a97 	vldr	s14, [pc, #604]	; 800197c <generator+0x32c>
 8001722:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001726:	ee17 0a90 	vmov	r0, s15
 800172a:	f7fe feb9 	bl	80004a0 <__aeabi_f2d>
 800172e:	4604      	mov	r4, r0
 8001730:	460d      	mov	r5, r1
						4096/3.3*ControlVar.max_voltage - 4096/3.3*ControlVar.min_voltage) /100
 8001732:	4b91      	ldr	r3, [pc, #580]	; (8001978 <generator+0x328>)
 8001734:	689b      	ldr	r3, [r3, #8]
 8001736:	4618      	mov	r0, r3
 8001738:	f7fe feb2 	bl	80004a0 <__aeabi_f2d>
 800173c:	a388      	add	r3, pc, #544	; (adr r3, 8001960 <generator+0x310>)
 800173e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001742:	f7fe ff05 	bl	8000550 <__aeabi_dmul>
 8001746:	4602      	mov	r2, r0
 8001748:	460b      	mov	r3, r1
 800174a:	4690      	mov	r8, r2
 800174c:	4699      	mov	r9, r3
 800174e:	4b8a      	ldr	r3, [pc, #552]	; (8001978 <generator+0x328>)
 8001750:	68db      	ldr	r3, [r3, #12]
 8001752:	4618      	mov	r0, r3
 8001754:	f7fe fea4 	bl	80004a0 <__aeabi_f2d>
 8001758:	a381      	add	r3, pc, #516	; (adr r3, 8001960 <generator+0x310>)
 800175a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800175e:	f7fe fef7 	bl	8000550 <__aeabi_dmul>
 8001762:	4602      	mov	r2, r0
 8001764:	460b      	mov	r3, r1
 8001766:	4640      	mov	r0, r8
 8001768:	4649      	mov	r1, r9
 800176a:	f7fe fd39 	bl	80001e0 <__aeabi_dsub>
 800176e:	4602      	mov	r2, r0
 8001770:	460b      	mov	r3, r1
				dataOut = (100-ControlVar.count) * (
 8001772:	4620      	mov	r0, r4
 8001774:	4629      	mov	r1, r5
 8001776:	f7fe feeb 	bl	8000550 <__aeabi_dmul>
 800177a:	4602      	mov	r2, r0
 800177c:	460b      	mov	r3, r1
 800177e:	4610      	mov	r0, r2
 8001780:	4619      	mov	r1, r3
						4096/3.3*ControlVar.max_voltage - 4096/3.3*ControlVar.min_voltage) /100
 8001782:	f04f 0200 	mov.w	r2, #0
 8001786:	4b7f      	ldr	r3, [pc, #508]	; (8001984 <generator+0x334>)
 8001788:	f7ff f80c 	bl	80007a4 <__aeabi_ddiv>
 800178c:	4602      	mov	r2, r0
 800178e:	460b      	mov	r3, r1
 8001790:	4614      	mov	r4, r2
 8001792:	461d      	mov	r5, r3
								+ 4096/3.3*ControlVar.min_voltage;
 8001794:	4b78      	ldr	r3, [pc, #480]	; (8001978 <generator+0x328>)
 8001796:	68db      	ldr	r3, [r3, #12]
 8001798:	4618      	mov	r0, r3
 800179a:	f7fe fe81 	bl	80004a0 <__aeabi_f2d>
 800179e:	a370      	add	r3, pc, #448	; (adr r3, 8001960 <generator+0x310>)
 80017a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017a4:	f7fe fed4 	bl	8000550 <__aeabi_dmul>
 80017a8:	4602      	mov	r2, r0
 80017aa:	460b      	mov	r3, r1
 80017ac:	4620      	mov	r0, r4
 80017ae:	4629      	mov	r1, r5
 80017b0:	f7fe fd18 	bl	80001e4 <__adddf3>
 80017b4:	4602      	mov	r2, r0
 80017b6:	460b      	mov	r3, r1
				dataOut = (100-ControlVar.count) * (
 80017b8:	4610      	mov	r0, r2
 80017ba:	4619      	mov	r1, r3
 80017bc:	f7ff f98a 	bl	8000ad4 <__aeabi_d2uiz>
 80017c0:	4603      	mov	r3, r0
 80017c2:	b29a      	uxth	r2, r3
 80017c4:	4b70      	ldr	r3, [pc, #448]	; (8001988 <generator+0x338>)
 80017c6:	801a      	strh	r2, [r3, #0]
			break;
 80017c8:	e118      	b.n	80019fc <generator+0x3ac>
				dataOut = ControlVar.count * (
 80017ca:	4b6b      	ldr	r3, [pc, #428]	; (8001978 <generator+0x328>)
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	4618      	mov	r0, r3
 80017d0:	f7fe fe66 	bl	80004a0 <__aeabi_f2d>
 80017d4:	4604      	mov	r4, r0
 80017d6:	460d      	mov	r5, r1
						4096/3.3*ControlVar.max_voltage - 4096/3.3*ControlVar.min_voltage) /100
 80017d8:	4b67      	ldr	r3, [pc, #412]	; (8001978 <generator+0x328>)
 80017da:	689b      	ldr	r3, [r3, #8]
 80017dc:	4618      	mov	r0, r3
 80017de:	f7fe fe5f 	bl	80004a0 <__aeabi_f2d>
 80017e2:	a35f      	add	r3, pc, #380	; (adr r3, 8001960 <generator+0x310>)
 80017e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017e8:	f7fe feb2 	bl	8000550 <__aeabi_dmul>
 80017ec:	4602      	mov	r2, r0
 80017ee:	460b      	mov	r3, r1
 80017f0:	4690      	mov	r8, r2
 80017f2:	4699      	mov	r9, r3
 80017f4:	4b60      	ldr	r3, [pc, #384]	; (8001978 <generator+0x328>)
 80017f6:	68db      	ldr	r3, [r3, #12]
 80017f8:	4618      	mov	r0, r3
 80017fa:	f7fe fe51 	bl	80004a0 <__aeabi_f2d>
 80017fe:	a358      	add	r3, pc, #352	; (adr r3, 8001960 <generator+0x310>)
 8001800:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001804:	f7fe fea4 	bl	8000550 <__aeabi_dmul>
 8001808:	4602      	mov	r2, r0
 800180a:	460b      	mov	r3, r1
 800180c:	4640      	mov	r0, r8
 800180e:	4649      	mov	r1, r9
 8001810:	f7fe fce6 	bl	80001e0 <__aeabi_dsub>
 8001814:	4602      	mov	r2, r0
 8001816:	460b      	mov	r3, r1
				dataOut = ControlVar.count * (
 8001818:	4620      	mov	r0, r4
 800181a:	4629      	mov	r1, r5
 800181c:	f7fe fe98 	bl	8000550 <__aeabi_dmul>
 8001820:	4602      	mov	r2, r0
 8001822:	460b      	mov	r3, r1
 8001824:	4610      	mov	r0, r2
 8001826:	4619      	mov	r1, r3
						4096/3.3*ControlVar.max_voltage - 4096/3.3*ControlVar.min_voltage) /100
 8001828:	f04f 0200 	mov.w	r2, #0
 800182c:	4b55      	ldr	r3, [pc, #340]	; (8001984 <generator+0x334>)
 800182e:	f7fe ffb9 	bl	80007a4 <__aeabi_ddiv>
 8001832:	4602      	mov	r2, r0
 8001834:	460b      	mov	r3, r1
 8001836:	4614      	mov	r4, r2
 8001838:	461d      	mov	r5, r3
								+ 4096/3.3*ControlVar.min_voltage;
 800183a:	4b4f      	ldr	r3, [pc, #316]	; (8001978 <generator+0x328>)
 800183c:	68db      	ldr	r3, [r3, #12]
 800183e:	4618      	mov	r0, r3
 8001840:	f7fe fe2e 	bl	80004a0 <__aeabi_f2d>
 8001844:	a346      	add	r3, pc, #280	; (adr r3, 8001960 <generator+0x310>)
 8001846:	e9d3 2300 	ldrd	r2, r3, [r3]
 800184a:	f7fe fe81 	bl	8000550 <__aeabi_dmul>
 800184e:	4602      	mov	r2, r0
 8001850:	460b      	mov	r3, r1
 8001852:	4620      	mov	r0, r4
 8001854:	4629      	mov	r1, r5
 8001856:	f7fe fcc5 	bl	80001e4 <__adddf3>
 800185a:	4602      	mov	r2, r0
 800185c:	460b      	mov	r3, r1
				dataOut = ControlVar.count * (
 800185e:	4610      	mov	r0, r2
 8001860:	4619      	mov	r1, r3
 8001862:	f7ff f937 	bl	8000ad4 <__aeabi_d2uiz>
 8001866:	4603      	mov	r3, r0
 8001868:	b29a      	uxth	r2, r3
 800186a:	4b47      	ldr	r3, [pc, #284]	; (8001988 <generator+0x338>)
 800186c:	801a      	strh	r2, [r3, #0]
			break;
 800186e:	e0c5      	b.n	80019fc <generator+0x3ac>
			dataOut = (2048/3.3*ControlVar.max_voltage - 2048/3.3*ControlVar.min_voltage) * (
 8001870:	4b41      	ldr	r3, [pc, #260]	; (8001978 <generator+0x328>)
 8001872:	689b      	ldr	r3, [r3, #8]
 8001874:	4618      	mov	r0, r3
 8001876:	f7fe fe13 	bl	80004a0 <__aeabi_f2d>
 800187a:	a33b      	add	r3, pc, #236	; (adr r3, 8001968 <generator+0x318>)
 800187c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001880:	f7fe fe66 	bl	8000550 <__aeabi_dmul>
 8001884:	4602      	mov	r2, r0
 8001886:	460b      	mov	r3, r1
 8001888:	4614      	mov	r4, r2
 800188a:	461d      	mov	r5, r3
 800188c:	4b3a      	ldr	r3, [pc, #232]	; (8001978 <generator+0x328>)
 800188e:	68db      	ldr	r3, [r3, #12]
 8001890:	4618      	mov	r0, r3
 8001892:	f7fe fe05 	bl	80004a0 <__aeabi_f2d>
 8001896:	a334      	add	r3, pc, #208	; (adr r3, 8001968 <generator+0x318>)
 8001898:	e9d3 2300 	ldrd	r2, r3, [r3]
 800189c:	f7fe fe58 	bl	8000550 <__aeabi_dmul>
 80018a0:	4602      	mov	r2, r0
 80018a2:	460b      	mov	r3, r1
 80018a4:	4620      	mov	r0, r4
 80018a6:	4629      	mov	r1, r5
 80018a8:	f7fe fc9a 	bl	80001e0 <__aeabi_dsub>
 80018ac:	4602      	mov	r2, r0
 80018ae:	460b      	mov	r3, r1
 80018b0:	4614      	mov	r4, r2
 80018b2:	461d      	mov	r5, r3
					sin(ControlVar.count*2.0/100.0*M_PI) + 1) + 4096/3.3*ControlVar.min_voltage;
 80018b4:	4b30      	ldr	r3, [pc, #192]	; (8001978 <generator+0x328>)
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	4618      	mov	r0, r3
 80018ba:	f7fe fdf1 	bl	80004a0 <__aeabi_f2d>
 80018be:	4602      	mov	r2, r0
 80018c0:	460b      	mov	r3, r1
 80018c2:	f7fe fc8f 	bl	80001e4 <__adddf3>
 80018c6:	4602      	mov	r2, r0
 80018c8:	460b      	mov	r3, r1
 80018ca:	4610      	mov	r0, r2
 80018cc:	4619      	mov	r1, r3
 80018ce:	f04f 0200 	mov.w	r2, #0
 80018d2:	4b2c      	ldr	r3, [pc, #176]	; (8001984 <generator+0x334>)
 80018d4:	f7fe ff66 	bl	80007a4 <__aeabi_ddiv>
 80018d8:	4602      	mov	r2, r0
 80018da:	460b      	mov	r3, r1
 80018dc:	4610      	mov	r0, r2
 80018de:	4619      	mov	r1, r3
 80018e0:	a323      	add	r3, pc, #140	; (adr r3, 8001970 <generator+0x320>)
 80018e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018e6:	f7fe fe33 	bl	8000550 <__aeabi_dmul>
 80018ea:	4602      	mov	r2, r0
 80018ec:	460b      	mov	r3, r1
 80018ee:	ec43 2b17 	vmov	d7, r2, r3
 80018f2:	eeb0 0a47 	vmov.f32	s0, s14
 80018f6:	eef0 0a67 	vmov.f32	s1, s15
 80018fa:	f003 fe45 	bl	8005588 <sin>
 80018fe:	ec51 0b10 	vmov	r0, r1, d0
 8001902:	f04f 0200 	mov.w	r2, #0
 8001906:	4b21      	ldr	r3, [pc, #132]	; (800198c <generator+0x33c>)
 8001908:	f7fe fc6c 	bl	80001e4 <__adddf3>
 800190c:	4602      	mov	r2, r0
 800190e:	460b      	mov	r3, r1
			dataOut = (2048/3.3*ControlVar.max_voltage - 2048/3.3*ControlVar.min_voltage) * (
 8001910:	4620      	mov	r0, r4
 8001912:	4629      	mov	r1, r5
 8001914:	f7fe fe1c 	bl	8000550 <__aeabi_dmul>
 8001918:	4602      	mov	r2, r0
 800191a:	460b      	mov	r3, r1
 800191c:	4614      	mov	r4, r2
 800191e:	461d      	mov	r5, r3
					sin(ControlVar.count*2.0/100.0*M_PI) + 1) + 4096/3.3*ControlVar.min_voltage;
 8001920:	4b15      	ldr	r3, [pc, #84]	; (8001978 <generator+0x328>)
 8001922:	68db      	ldr	r3, [r3, #12]
 8001924:	4618      	mov	r0, r3
 8001926:	f7fe fdbb 	bl	80004a0 <__aeabi_f2d>
 800192a:	a30d      	add	r3, pc, #52	; (adr r3, 8001960 <generator+0x310>)
 800192c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001930:	f7fe fe0e 	bl	8000550 <__aeabi_dmul>
 8001934:	4602      	mov	r2, r0
 8001936:	460b      	mov	r3, r1
 8001938:	4620      	mov	r0, r4
 800193a:	4629      	mov	r1, r5
 800193c:	f7fe fc52 	bl	80001e4 <__adddf3>
 8001940:	4602      	mov	r2, r0
 8001942:	460b      	mov	r3, r1
			dataOut = (2048/3.3*ControlVar.max_voltage - 2048/3.3*ControlVar.min_voltage) * (
 8001944:	4610      	mov	r0, r2
 8001946:	4619      	mov	r1, r3
 8001948:	f7ff f8c4 	bl	8000ad4 <__aeabi_d2uiz>
 800194c:	4603      	mov	r3, r0
 800194e:	b29a      	uxth	r2, r3
 8001950:	4b0d      	ldr	r3, [pc, #52]	; (8001988 <generator+0x338>)
 8001952:	801a      	strh	r2, [r3, #0]
			break;
 8001954:	e052      	b.n	80019fc <generator+0x3ac>
 8001956:	bf00      	nop
 8001958:	00000000 	.word	0x00000000
 800195c:	40c38800 	.word	0x40c38800
 8001960:	364d9365 	.word	0x364d9365
 8001964:	409364d9 	.word	0x409364d9
 8001968:	364d9365 	.word	0x364d9365
 800196c:	408364d9 	.word	0x408364d9
 8001970:	54442d18 	.word	0x54442d18
 8001974:	400921fb 	.word	0x400921fb
 8001978:	20000040 	.word	0x20000040
 800197c:	42c80000 	.word	0x42c80000
 8001980:	49742400 	.word	0x49742400
 8001984:	40590000 	.word	0x40590000
 8001988:	20000038 	.word	0x20000038
 800198c:	3ff00000 	.word	0x3ff00000
			if (ControlVar.count < ControlVar.duty_cycle) {
 8001990:	4b29      	ldr	r3, [pc, #164]	; (8001a38 <generator+0x3e8>)
 8001992:	ed93 7a00 	vldr	s14, [r3]
 8001996:	4b28      	ldr	r3, [pc, #160]	; (8001a38 <generator+0x3e8>)
 8001998:	edd3 7a04 	vldr	s15, [r3, #16]
 800199c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80019a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80019a4:	d514      	bpl.n	80019d0 <generator+0x380>
				dataOut = 4096/3.3*ControlVar.max_voltage;
 80019a6:	4b24      	ldr	r3, [pc, #144]	; (8001a38 <generator+0x3e8>)
 80019a8:	689b      	ldr	r3, [r3, #8]
 80019aa:	4618      	mov	r0, r3
 80019ac:	f7fe fd78 	bl	80004a0 <__aeabi_f2d>
 80019b0:	a31f      	add	r3, pc, #124	; (adr r3, 8001a30 <generator+0x3e0>)
 80019b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019b6:	f7fe fdcb 	bl	8000550 <__aeabi_dmul>
 80019ba:	4602      	mov	r2, r0
 80019bc:	460b      	mov	r3, r1
 80019be:	4610      	mov	r0, r2
 80019c0:	4619      	mov	r1, r3
 80019c2:	f7ff f887 	bl	8000ad4 <__aeabi_d2uiz>
 80019c6:	4603      	mov	r3, r0
 80019c8:	b29a      	uxth	r2, r3
 80019ca:	4b1c      	ldr	r3, [pc, #112]	; (8001a3c <generator+0x3ec>)
 80019cc:	801a      	strh	r2, [r3, #0]
			break;
 80019ce:	e015      	b.n	80019fc <generator+0x3ac>
				dataOut = 4096/3.3*ControlVar.min_voltage;
 80019d0:	4b19      	ldr	r3, [pc, #100]	; (8001a38 <generator+0x3e8>)
 80019d2:	68db      	ldr	r3, [r3, #12]
 80019d4:	4618      	mov	r0, r3
 80019d6:	f7fe fd63 	bl	80004a0 <__aeabi_f2d>
 80019da:	a315      	add	r3, pc, #84	; (adr r3, 8001a30 <generator+0x3e0>)
 80019dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019e0:	f7fe fdb6 	bl	8000550 <__aeabi_dmul>
 80019e4:	4602      	mov	r2, r0
 80019e6:	460b      	mov	r3, r1
 80019e8:	4610      	mov	r0, r2
 80019ea:	4619      	mov	r1, r3
 80019ec:	f7ff f872 	bl	8000ad4 <__aeabi_d2uiz>
 80019f0:	4603      	mov	r3, r0
 80019f2:	b29a      	uxth	r2, r3
 80019f4:	4b11      	ldr	r3, [pc, #68]	; (8001a3c <generator+0x3ec>)
 80019f6:	801a      	strh	r2, [r3, #0]
			break;
 80019f8:	e000      	b.n	80019fc <generator+0x3ac>
			break;
 80019fa:	bf00      	nop
	}

	//Send the SPI data
	if (hspi3.State == HAL_SPI_STATE_READY
 80019fc:	4b10      	ldr	r3, [pc, #64]	; (8001a40 <generator+0x3f0>)
 80019fe:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001a02:	b2db      	uxtb	r3, r3
 8001a04:	2b01      	cmp	r3, #1
 8001a06:	d10f      	bne.n	8001a28 <generator+0x3d8>
			&& HAL_GPIO_ReadPin(SPI_SS_GPIO_Port, SPI_SS_Pin) == GPIO_PIN_SET)
 8001a08:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001a0c:	480d      	ldr	r0, [pc, #52]	; (8001a44 <generator+0x3f4>)
 8001a0e:	f001 fe93 	bl	8003738 <HAL_GPIO_ReadPin>
 8001a12:	4603      	mov	r3, r0
 8001a14:	2b01      	cmp	r3, #1
 8001a16:	d107      	bne.n	8001a28 <generator+0x3d8>
	{
		MCP4922SetOutput(DACConfig, dataOut);
 8001a18:	4b0b      	ldr	r3, [pc, #44]	; (8001a48 <generator+0x3f8>)
 8001a1a:	781b      	ldrb	r3, [r3, #0]
 8001a1c:	4a07      	ldr	r2, [pc, #28]	; (8001a3c <generator+0x3ec>)
 8001a1e:	8812      	ldrh	r2, [r2, #0]
 8001a20:	4611      	mov	r1, r2
 8001a22:	4618      	mov	r0, r3
 8001a24:	f000 f812 	bl	8001a4c <MCP4922SetOutput>
	}
}
 8001a28:	bf00      	nop
 8001a2a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001a2e:	bf00      	nop
 8001a30:	364d9365 	.word	0x364d9365
 8001a34:	409364d9 	.word	0x409364d9
 8001a38:	20000040 	.word	0x20000040
 8001a3c:	20000038 	.word	0x20000038
 8001a40:	200000b0 	.word	0x200000b0
 8001a44:	40020400 	.word	0x40020400
 8001a48:	20000000 	.word	0x20000000

08001a4c <MCP4922SetOutput>:

void MCP4922SetOutput(uint8_t Config, uint16_t DACOutput)
{
 8001a4c:	b580      	push	{r7, lr}
 8001a4e:	b084      	sub	sp, #16
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	4603      	mov	r3, r0
 8001a54:	460a      	mov	r2, r1
 8001a56:	71fb      	strb	r3, [r7, #7]
 8001a58:	4613      	mov	r3, r2
 8001a5a:	80bb      	strh	r3, [r7, #4]
	uint32_t OutputPacket = (DACOutput & 0x0fff) | ((Config & 0xf) << 12);
 8001a5c:	88bb      	ldrh	r3, [r7, #4]
 8001a5e:	f3c3 020b 	ubfx	r2, r3, #0, #12
 8001a62:	79fb      	ldrb	r3, [r7, #7]
 8001a64:	031b      	lsls	r3, r3, #12
 8001a66:	b29b      	uxth	r3, r3
 8001a68:	4313      	orrs	r3, r2
 8001a6a:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_WritePin(SPI_SS_GPIO_Port, SPI_SS_Pin, GPIO_PIN_RESET);
 8001a6c:	2200      	movs	r2, #0
 8001a6e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001a72:	4807      	ldr	r0, [pc, #28]	; (8001a90 <MCP4922SetOutput+0x44>)
 8001a74:	f001 fe78 	bl	8003768 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit_IT(&hspi3, &OutputPacket, 1);
 8001a78:	f107 030c 	add.w	r3, r7, #12
 8001a7c:	2201      	movs	r2, #1
 8001a7e:	4619      	mov	r1, r3
 8001a80:	4804      	ldr	r0, [pc, #16]	; (8001a94 <MCP4922SetOutput+0x48>)
 8001a82:	f002 fb89 	bl	8004198 <HAL_SPI_Transmit_IT>
}
 8001a86:	bf00      	nop
 8001a88:	3710      	adds	r7, #16
 8001a8a:	46bd      	mov	sp, r7
 8001a8c:	bd80      	pop	{r7, pc}
 8001a8e:	bf00      	nop
 8001a90:	40020400 	.word	0x40020400
 8001a94:	200000b0 	.word	0x200000b0

08001a98 <HAL_SPI_TxCpltCallback>:

void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	b082      	sub	sp, #8
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	6078      	str	r0, [r7, #4]
	if (hspi == &hspi3)
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	4a06      	ldr	r2, [pc, #24]	; (8001abc <HAL_SPI_TxCpltCallback+0x24>)
 8001aa4:	4293      	cmp	r3, r2
 8001aa6:	d105      	bne.n	8001ab4 <HAL_SPI_TxCpltCallback+0x1c>
	{
		HAL_GPIO_WritePin(SPI_SS_GPIO_Port, SPI_SS_Pin, GPIO_PIN_SET);
 8001aa8:	2201      	movs	r2, #1
 8001aaa:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001aae:	4804      	ldr	r0, [pc, #16]	; (8001ac0 <HAL_SPI_TxCpltCallback+0x28>)
 8001ab0:	f001 fe5a 	bl	8003768 <HAL_GPIO_WritePin>
	}
}
 8001ab4:	bf00      	nop
 8001ab6:	3708      	adds	r7, #8
 8001ab8:	46bd      	mov	sp, r7
 8001aba:	bd80      	pop	{r7, pc}
 8001abc:	200000b0 	.word	0x200000b0
 8001ac0:	40020400 	.word	0x40020400

08001ac4 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001ac4:	b4b0      	push	{r4, r5, r7}
 8001ac6:	b083      	sub	sp, #12
 8001ac8:	af00      	add	r7, sp, #0
 8001aca:	6078      	str	r0, [r7, #4]
	if (htim == &htim11)
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	4a0a      	ldr	r2, [pc, #40]	; (8001af8 <HAL_TIM_PeriodElapsedCallback+0x34>)
 8001ad0:	4293      	cmp	r3, r2
 8001ad2:	d10c      	bne.n	8001aee <HAL_TIM_PeriodElapsedCallback+0x2a>
	{
		_micro += 65535;
 8001ad4:	4b09      	ldr	r3, [pc, #36]	; (8001afc <HAL_TIM_PeriodElapsedCallback+0x38>)
 8001ad6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ada:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8001ade:	f04f 0100 	mov.w	r1, #0
 8001ae2:	1814      	adds	r4, r2, r0
 8001ae4:	eb43 0501 	adc.w	r5, r3, r1
 8001ae8:	4b04      	ldr	r3, [pc, #16]	; (8001afc <HAL_TIM_PeriodElapsedCallback+0x38>)
 8001aea:	e9c3 4500 	strd	r4, r5, [r3]
	}
}
 8001aee:	bf00      	nop
 8001af0:	370c      	adds	r7, #12
 8001af2:	46bd      	mov	sp, r7
 8001af4:	bcb0      	pop	{r4, r5, r7}
 8001af6:	4770      	bx	lr
 8001af8:	20000150 	.word	0x20000150
 8001afc:	20000030 	.word	0x20000030

08001b00 <micros>:

inline uint64_t micros()
{
 8001b00:	b4b0      	push	{r4, r5, r7}
 8001b02:	af00      	add	r7, sp, #0
	return htim11.Instance->CNT + _micro;
 8001b04:	4b09      	ldr	r3, [pc, #36]	; (8001b2c <micros+0x2c>)
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b0a:	4618      	mov	r0, r3
 8001b0c:	f04f 0100 	mov.w	r1, #0
 8001b10:	4b07      	ldr	r3, [pc, #28]	; (8001b30 <micros+0x30>)
 8001b12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b16:	1884      	adds	r4, r0, r2
 8001b18:	eb41 0503 	adc.w	r5, r1, r3
 8001b1c:	4622      	mov	r2, r4
 8001b1e:	462b      	mov	r3, r5
}
 8001b20:	4610      	mov	r0, r2
 8001b22:	4619      	mov	r1, r3
 8001b24:	46bd      	mov	sp, r7
 8001b26:	bcb0      	pop	{r4, r5, r7}
 8001b28:	4770      	bx	lr
 8001b2a:	bf00      	nop
 8001b2c:	20000150 	.word	0x20000150
 8001b30:	20000030 	.word	0x20000030

08001b34 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001b34:	b480      	push	{r7}
 8001b36:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001b38:	b672      	cpsid	i
}
 8001b3a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8001b3c:	e7fe      	b.n	8001b3c <Error_Handler+0x8>
	...

08001b40 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001b40:	b580      	push	{r7, lr}
 8001b42:	b082      	sub	sp, #8
 8001b44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b46:	2300      	movs	r3, #0
 8001b48:	607b      	str	r3, [r7, #4]
 8001b4a:	4b10      	ldr	r3, [pc, #64]	; (8001b8c <HAL_MspInit+0x4c>)
 8001b4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b4e:	4a0f      	ldr	r2, [pc, #60]	; (8001b8c <HAL_MspInit+0x4c>)
 8001b50:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001b54:	6453      	str	r3, [r2, #68]	; 0x44
 8001b56:	4b0d      	ldr	r3, [pc, #52]	; (8001b8c <HAL_MspInit+0x4c>)
 8001b58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b5a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b5e:	607b      	str	r3, [r7, #4]
 8001b60:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b62:	2300      	movs	r3, #0
 8001b64:	603b      	str	r3, [r7, #0]
 8001b66:	4b09      	ldr	r3, [pc, #36]	; (8001b8c <HAL_MspInit+0x4c>)
 8001b68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b6a:	4a08      	ldr	r2, [pc, #32]	; (8001b8c <HAL_MspInit+0x4c>)
 8001b6c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b70:	6413      	str	r3, [r2, #64]	; 0x40
 8001b72:	4b06      	ldr	r3, [pc, #24]	; (8001b8c <HAL_MspInit+0x4c>)
 8001b74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b7a:	603b      	str	r3, [r7, #0]
 8001b7c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001b7e:	2007      	movs	r0, #7
 8001b80:	f001 f882 	bl	8002c88 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001b84:	bf00      	nop
 8001b86:	3708      	adds	r7, #8
 8001b88:	46bd      	mov	sp, r7
 8001b8a:	bd80      	pop	{r7, pc}
 8001b8c:	40023800 	.word	0x40023800

08001b90 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001b90:	b580      	push	{r7, lr}
 8001b92:	b08a      	sub	sp, #40	; 0x28
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b98:	f107 0314 	add.w	r3, r7, #20
 8001b9c:	2200      	movs	r2, #0
 8001b9e:	601a      	str	r2, [r3, #0]
 8001ba0:	605a      	str	r2, [r3, #4]
 8001ba2:	609a      	str	r2, [r3, #8]
 8001ba4:	60da      	str	r2, [r3, #12]
 8001ba6:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	4a33      	ldr	r2, [pc, #204]	; (8001c7c <HAL_ADC_MspInit+0xec>)
 8001bae:	4293      	cmp	r3, r2
 8001bb0:	d15f      	bne.n	8001c72 <HAL_ADC_MspInit+0xe2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001bb2:	2300      	movs	r3, #0
 8001bb4:	613b      	str	r3, [r7, #16]
 8001bb6:	4b32      	ldr	r3, [pc, #200]	; (8001c80 <HAL_ADC_MspInit+0xf0>)
 8001bb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bba:	4a31      	ldr	r2, [pc, #196]	; (8001c80 <HAL_ADC_MspInit+0xf0>)
 8001bbc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001bc0:	6453      	str	r3, [r2, #68]	; 0x44
 8001bc2:	4b2f      	ldr	r3, [pc, #188]	; (8001c80 <HAL_ADC_MspInit+0xf0>)
 8001bc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bc6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001bca:	613b      	str	r3, [r7, #16]
 8001bcc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bce:	2300      	movs	r3, #0
 8001bd0:	60fb      	str	r3, [r7, #12]
 8001bd2:	4b2b      	ldr	r3, [pc, #172]	; (8001c80 <HAL_ADC_MspInit+0xf0>)
 8001bd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bd6:	4a2a      	ldr	r2, [pc, #168]	; (8001c80 <HAL_ADC_MspInit+0xf0>)
 8001bd8:	f043 0301 	orr.w	r3, r3, #1
 8001bdc:	6313      	str	r3, [r2, #48]	; 0x30
 8001bde:	4b28      	ldr	r3, [pc, #160]	; (8001c80 <HAL_ADC_MspInit+0xf0>)
 8001be0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001be2:	f003 0301 	and.w	r3, r3, #1
 8001be6:	60fb      	str	r3, [r7, #12]
 8001be8:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001bea:	2301      	movs	r3, #1
 8001bec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001bee:	2303      	movs	r3, #3
 8001bf0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bf2:	2300      	movs	r3, #0
 8001bf4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bf6:	f107 0314 	add.w	r3, r7, #20
 8001bfa:	4619      	mov	r1, r3
 8001bfc:	4821      	ldr	r0, [pc, #132]	; (8001c84 <HAL_ADC_MspInit+0xf4>)
 8001bfe:	f001 fc17 	bl	8003430 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8001c02:	4b21      	ldr	r3, [pc, #132]	; (8001c88 <HAL_ADC_MspInit+0xf8>)
 8001c04:	4a21      	ldr	r2, [pc, #132]	; (8001c8c <HAL_ADC_MspInit+0xfc>)
 8001c06:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8001c08:	4b1f      	ldr	r3, [pc, #124]	; (8001c88 <HAL_ADC_MspInit+0xf8>)
 8001c0a:	2200      	movs	r2, #0
 8001c0c:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001c0e:	4b1e      	ldr	r3, [pc, #120]	; (8001c88 <HAL_ADC_MspInit+0xf8>)
 8001c10:	2200      	movs	r2, #0
 8001c12:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001c14:	4b1c      	ldr	r3, [pc, #112]	; (8001c88 <HAL_ADC_MspInit+0xf8>)
 8001c16:	2200      	movs	r2, #0
 8001c18:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001c1a:	4b1b      	ldr	r3, [pc, #108]	; (8001c88 <HAL_ADC_MspInit+0xf8>)
 8001c1c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001c20:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001c22:	4b19      	ldr	r3, [pc, #100]	; (8001c88 <HAL_ADC_MspInit+0xf8>)
 8001c24:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001c28:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001c2a:	4b17      	ldr	r3, [pc, #92]	; (8001c88 <HAL_ADC_MspInit+0xf8>)
 8001c2c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001c30:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001c32:	4b15      	ldr	r3, [pc, #84]	; (8001c88 <HAL_ADC_MspInit+0xf8>)
 8001c34:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001c38:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001c3a:	4b13      	ldr	r3, [pc, #76]	; (8001c88 <HAL_ADC_MspInit+0xf8>)
 8001c3c:	2200      	movs	r2, #0
 8001c3e:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001c40:	4b11      	ldr	r3, [pc, #68]	; (8001c88 <HAL_ADC_MspInit+0xf8>)
 8001c42:	2200      	movs	r2, #0
 8001c44:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001c46:	4810      	ldr	r0, [pc, #64]	; (8001c88 <HAL_ADC_MspInit+0xf8>)
 8001c48:	f001 f860 	bl	8002d0c <HAL_DMA_Init>
 8001c4c:	4603      	mov	r3, r0
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d001      	beq.n	8001c56 <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 8001c52:	f7ff ff6f 	bl	8001b34 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	4a0b      	ldr	r2, [pc, #44]	; (8001c88 <HAL_ADC_MspInit+0xf8>)
 8001c5a:	639a      	str	r2, [r3, #56]	; 0x38
 8001c5c:	4a0a      	ldr	r2, [pc, #40]	; (8001c88 <HAL_ADC_MspInit+0xf8>)
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	6393      	str	r3, [r2, #56]	; 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8001c62:	2200      	movs	r2, #0
 8001c64:	2100      	movs	r1, #0
 8001c66:	2012      	movs	r0, #18
 8001c68:	f001 f819 	bl	8002c9e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8001c6c:	2012      	movs	r0, #18
 8001c6e:	f001 f832 	bl	8002cd6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001c72:	bf00      	nop
 8001c74:	3728      	adds	r7, #40	; 0x28
 8001c76:	46bd      	mov	sp, r7
 8001c78:	bd80      	pop	{r7, pc}
 8001c7a:	bf00      	nop
 8001c7c:	40012000 	.word	0x40012000
 8001c80:	40023800 	.word	0x40023800
 8001c84:	40020000 	.word	0x40020000
 8001c88:	20000198 	.word	0x20000198
 8001c8c:	40026410 	.word	0x40026410

08001c90 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001c90:	b580      	push	{r7, lr}
 8001c92:	b08a      	sub	sp, #40	; 0x28
 8001c94:	af00      	add	r7, sp, #0
 8001c96:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c98:	f107 0314 	add.w	r3, r7, #20
 8001c9c:	2200      	movs	r2, #0
 8001c9e:	601a      	str	r2, [r3, #0]
 8001ca0:	605a      	str	r2, [r3, #4]
 8001ca2:	609a      	str	r2, [r3, #8]
 8001ca4:	60da      	str	r2, [r3, #12]
 8001ca6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	4a1d      	ldr	r2, [pc, #116]	; (8001d24 <HAL_SPI_MspInit+0x94>)
 8001cae:	4293      	cmp	r3, r2
 8001cb0:	d133      	bne.n	8001d1a <HAL_SPI_MspInit+0x8a>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001cb2:	2300      	movs	r3, #0
 8001cb4:	613b      	str	r3, [r7, #16]
 8001cb6:	4b1c      	ldr	r3, [pc, #112]	; (8001d28 <HAL_SPI_MspInit+0x98>)
 8001cb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cba:	4a1b      	ldr	r2, [pc, #108]	; (8001d28 <HAL_SPI_MspInit+0x98>)
 8001cbc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001cc0:	6413      	str	r3, [r2, #64]	; 0x40
 8001cc2:	4b19      	ldr	r3, [pc, #100]	; (8001d28 <HAL_SPI_MspInit+0x98>)
 8001cc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cc6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001cca:	613b      	str	r3, [r7, #16]
 8001ccc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001cce:	2300      	movs	r3, #0
 8001cd0:	60fb      	str	r3, [r7, #12]
 8001cd2:	4b15      	ldr	r3, [pc, #84]	; (8001d28 <HAL_SPI_MspInit+0x98>)
 8001cd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cd6:	4a14      	ldr	r2, [pc, #80]	; (8001d28 <HAL_SPI_MspInit+0x98>)
 8001cd8:	f043 0302 	orr.w	r3, r3, #2
 8001cdc:	6313      	str	r3, [r2, #48]	; 0x30
 8001cde:	4b12      	ldr	r3, [pc, #72]	; (8001d28 <HAL_SPI_MspInit+0x98>)
 8001ce0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ce2:	f003 0302 	and.w	r3, r3, #2
 8001ce6:	60fb      	str	r3, [r7, #12]
 8001ce8:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PB3     ------> SPI3_SCK
    PB4     ------> SPI3_MISO
    PB5     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8001cea:	2338      	movs	r3, #56	; 0x38
 8001cec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cee:	2302      	movs	r3, #2
 8001cf0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cf2:	2300      	movs	r3, #0
 8001cf4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001cf6:	2303      	movs	r3, #3
 8001cf8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001cfa:	2306      	movs	r3, #6
 8001cfc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001cfe:	f107 0314 	add.w	r3, r7, #20
 8001d02:	4619      	mov	r1, r3
 8001d04:	4809      	ldr	r0, [pc, #36]	; (8001d2c <HAL_SPI_MspInit+0x9c>)
 8001d06:	f001 fb93 	bl	8003430 <HAL_GPIO_Init>

    /* SPI3 interrupt Init */
    HAL_NVIC_SetPriority(SPI3_IRQn, 0, 0);
 8001d0a:	2200      	movs	r2, #0
 8001d0c:	2100      	movs	r1, #0
 8001d0e:	2033      	movs	r0, #51	; 0x33
 8001d10:	f000 ffc5 	bl	8002c9e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI3_IRQn);
 8001d14:	2033      	movs	r0, #51	; 0x33
 8001d16:	f000 ffde 	bl	8002cd6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8001d1a:	bf00      	nop
 8001d1c:	3728      	adds	r7, #40	; 0x28
 8001d1e:	46bd      	mov	sp, r7
 8001d20:	bd80      	pop	{r7, pc}
 8001d22:	bf00      	nop
 8001d24:	40003c00 	.word	0x40003c00
 8001d28:	40023800 	.word	0x40023800
 8001d2c:	40020400 	.word	0x40020400

08001d30 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001d30:	b580      	push	{r7, lr}
 8001d32:	b084      	sub	sp, #16
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	4a18      	ldr	r2, [pc, #96]	; (8001da0 <HAL_TIM_Base_MspInit+0x70>)
 8001d3e:	4293      	cmp	r3, r2
 8001d40:	d10e      	bne.n	8001d60 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001d42:	2300      	movs	r3, #0
 8001d44:	60fb      	str	r3, [r7, #12]
 8001d46:	4b17      	ldr	r3, [pc, #92]	; (8001da4 <HAL_TIM_Base_MspInit+0x74>)
 8001d48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d4a:	4a16      	ldr	r2, [pc, #88]	; (8001da4 <HAL_TIM_Base_MspInit+0x74>)
 8001d4c:	f043 0302 	orr.w	r3, r3, #2
 8001d50:	6413      	str	r3, [r2, #64]	; 0x40
 8001d52:	4b14      	ldr	r3, [pc, #80]	; (8001da4 <HAL_TIM_Base_MspInit+0x74>)
 8001d54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d56:	f003 0302 	and.w	r3, r3, #2
 8001d5a:	60fb      	str	r3, [r7, #12]
 8001d5c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }

}
 8001d5e:	e01a      	b.n	8001d96 <HAL_TIM_Base_MspInit+0x66>
  else if(htim_base->Instance==TIM11)
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	4a10      	ldr	r2, [pc, #64]	; (8001da8 <HAL_TIM_Base_MspInit+0x78>)
 8001d66:	4293      	cmp	r3, r2
 8001d68:	d115      	bne.n	8001d96 <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM11_CLK_ENABLE();
 8001d6a:	2300      	movs	r3, #0
 8001d6c:	60bb      	str	r3, [r7, #8]
 8001d6e:	4b0d      	ldr	r3, [pc, #52]	; (8001da4 <HAL_TIM_Base_MspInit+0x74>)
 8001d70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d72:	4a0c      	ldr	r2, [pc, #48]	; (8001da4 <HAL_TIM_Base_MspInit+0x74>)
 8001d74:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001d78:	6453      	str	r3, [r2, #68]	; 0x44
 8001d7a:	4b0a      	ldr	r3, [pc, #40]	; (8001da4 <HAL_TIM_Base_MspInit+0x74>)
 8001d7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d7e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001d82:	60bb      	str	r3, [r7, #8]
 8001d84:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 8001d86:	2200      	movs	r2, #0
 8001d88:	2100      	movs	r1, #0
 8001d8a:	201a      	movs	r0, #26
 8001d8c:	f000 ff87 	bl	8002c9e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8001d90:	201a      	movs	r0, #26
 8001d92:	f000 ffa0 	bl	8002cd6 <HAL_NVIC_EnableIRQ>
}
 8001d96:	bf00      	nop
 8001d98:	3710      	adds	r7, #16
 8001d9a:	46bd      	mov	sp, r7
 8001d9c:	bd80      	pop	{r7, pc}
 8001d9e:	bf00      	nop
 8001da0:	40000400 	.word	0x40000400
 8001da4:	40023800 	.word	0x40023800
 8001da8:	40014800 	.word	0x40014800

08001dac <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001dac:	b580      	push	{r7, lr}
 8001dae:	b08a      	sub	sp, #40	; 0x28
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001db4:	f107 0314 	add.w	r3, r7, #20
 8001db8:	2200      	movs	r2, #0
 8001dba:	601a      	str	r2, [r3, #0]
 8001dbc:	605a      	str	r2, [r3, #4]
 8001dbe:	609a      	str	r2, [r3, #8]
 8001dc0:	60da      	str	r2, [r3, #12]
 8001dc2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	4a19      	ldr	r2, [pc, #100]	; (8001e30 <HAL_UART_MspInit+0x84>)
 8001dca:	4293      	cmp	r3, r2
 8001dcc:	d12b      	bne.n	8001e26 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001dce:	2300      	movs	r3, #0
 8001dd0:	613b      	str	r3, [r7, #16]
 8001dd2:	4b18      	ldr	r3, [pc, #96]	; (8001e34 <HAL_UART_MspInit+0x88>)
 8001dd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dd6:	4a17      	ldr	r2, [pc, #92]	; (8001e34 <HAL_UART_MspInit+0x88>)
 8001dd8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001ddc:	6413      	str	r3, [r2, #64]	; 0x40
 8001dde:	4b15      	ldr	r3, [pc, #84]	; (8001e34 <HAL_UART_MspInit+0x88>)
 8001de0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001de2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001de6:	613b      	str	r3, [r7, #16]
 8001de8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001dea:	2300      	movs	r3, #0
 8001dec:	60fb      	str	r3, [r7, #12]
 8001dee:	4b11      	ldr	r3, [pc, #68]	; (8001e34 <HAL_UART_MspInit+0x88>)
 8001df0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001df2:	4a10      	ldr	r2, [pc, #64]	; (8001e34 <HAL_UART_MspInit+0x88>)
 8001df4:	f043 0301 	orr.w	r3, r3, #1
 8001df8:	6313      	str	r3, [r2, #48]	; 0x30
 8001dfa:	4b0e      	ldr	r3, [pc, #56]	; (8001e34 <HAL_UART_MspInit+0x88>)
 8001dfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dfe:	f003 0301 	and.w	r3, r3, #1
 8001e02:	60fb      	str	r3, [r7, #12]
 8001e04:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001e06:	230c      	movs	r3, #12
 8001e08:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e0a:	2302      	movs	r3, #2
 8001e0c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e0e:	2300      	movs	r3, #0
 8001e10:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e12:	2303      	movs	r3, #3
 8001e14:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001e16:	2307      	movs	r3, #7
 8001e18:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e1a:	f107 0314 	add.w	r3, r7, #20
 8001e1e:	4619      	mov	r1, r3
 8001e20:	4805      	ldr	r0, [pc, #20]	; (8001e38 <HAL_UART_MspInit+0x8c>)
 8001e22:	f001 fb05 	bl	8003430 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001e26:	bf00      	nop
 8001e28:	3728      	adds	r7, #40	; 0x28
 8001e2a:	46bd      	mov	sp, r7
 8001e2c:	bd80      	pop	{r7, pc}
 8001e2e:	bf00      	nop
 8001e30:	40004400 	.word	0x40004400
 8001e34:	40023800 	.word	0x40023800
 8001e38:	40020000 	.word	0x40020000

08001e3c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001e3c:	b480      	push	{r7}
 8001e3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001e40:	e7fe      	b.n	8001e40 <NMI_Handler+0x4>

08001e42 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001e42:	b480      	push	{r7}
 8001e44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001e46:	e7fe      	b.n	8001e46 <HardFault_Handler+0x4>

08001e48 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001e48:	b480      	push	{r7}
 8001e4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001e4c:	e7fe      	b.n	8001e4c <MemManage_Handler+0x4>

08001e4e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001e4e:	b480      	push	{r7}
 8001e50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001e52:	e7fe      	b.n	8001e52 <BusFault_Handler+0x4>

08001e54 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001e54:	b480      	push	{r7}
 8001e56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001e58:	e7fe      	b.n	8001e58 <UsageFault_Handler+0x4>

08001e5a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001e5a:	b480      	push	{r7}
 8001e5c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001e5e:	bf00      	nop
 8001e60:	46bd      	mov	sp, r7
 8001e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e66:	4770      	bx	lr

08001e68 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001e68:	b480      	push	{r7}
 8001e6a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001e6c:	bf00      	nop
 8001e6e:	46bd      	mov	sp, r7
 8001e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e74:	4770      	bx	lr

08001e76 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001e76:	b480      	push	{r7}
 8001e78:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001e7a:	bf00      	nop
 8001e7c:	46bd      	mov	sp, r7
 8001e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e82:	4770      	bx	lr

08001e84 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001e84:	b580      	push	{r7, lr}
 8001e86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001e88:	f000 f8b8 	bl	8001ffc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001e8c:	bf00      	nop
 8001e8e:	bd80      	pop	{r7, pc}

08001e90 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC_IRQHandler(void)
{
 8001e90:	b580      	push	{r7, lr}
 8001e92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001e94:	4802      	ldr	r0, [pc, #8]	; (8001ea0 <ADC_IRQHandler+0x10>)
 8001e96:	f000 f914 	bl	80020c2 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8001e9a:	bf00      	nop
 8001e9c:	bd80      	pop	{r7, pc}
 8001e9e:	bf00      	nop
 8001ea0:	20000108 	.word	0x20000108

08001ea4 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8001ea4:	b580      	push	{r7, lr}
 8001ea6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim11);
 8001ea8:	4802      	ldr	r0, [pc, #8]	; (8001eb4 <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 8001eaa:	f002 fd9b 	bl	80049e4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 8001eae:	bf00      	nop
 8001eb0:	bd80      	pop	{r7, pc}
 8001eb2:	bf00      	nop
 8001eb4:	20000150 	.word	0x20000150

08001eb8 <SPI3_IRQHandler>:

/**
  * @brief This function handles SPI3 global interrupt.
  */
void SPI3_IRQHandler(void)
{
 8001eb8:	b580      	push	{r7, lr}
 8001eba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI3_IRQn 0 */

  /* USER CODE END SPI3_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi3);
 8001ebc:	4802      	ldr	r0, [pc, #8]	; (8001ec8 <SPI3_IRQHandler+0x10>)
 8001ebe:	f002 f9f5 	bl	80042ac <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI3_IRQn 1 */

  /* USER CODE END SPI3_IRQn 1 */
}
 8001ec2:	bf00      	nop
 8001ec4:	bd80      	pop	{r7, pc}
 8001ec6:	bf00      	nop
 8001ec8:	200000b0 	.word	0x200000b0

08001ecc <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001ecc:	b580      	push	{r7, lr}
 8001ece:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001ed0:	4802      	ldr	r0, [pc, #8]	; (8001edc <DMA2_Stream0_IRQHandler+0x10>)
 8001ed2:	f001 f843 	bl	8002f5c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8001ed6:	bf00      	nop
 8001ed8:	bd80      	pop	{r7, pc}
 8001eda:	bf00      	nop
 8001edc:	20000198 	.word	0x20000198

08001ee0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001ee0:	b480      	push	{r7}
 8001ee2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001ee4:	4b06      	ldr	r3, [pc, #24]	; (8001f00 <SystemInit+0x20>)
 8001ee6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001eea:	4a05      	ldr	r2, [pc, #20]	; (8001f00 <SystemInit+0x20>)
 8001eec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001ef0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001ef4:	bf00      	nop
 8001ef6:	46bd      	mov	sp, r7
 8001ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001efc:	4770      	bx	lr
 8001efe:	bf00      	nop
 8001f00:	e000ed00 	.word	0xe000ed00

08001f04 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001f04:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001f3c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001f08:	480d      	ldr	r0, [pc, #52]	; (8001f40 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001f0a:	490e      	ldr	r1, [pc, #56]	; (8001f44 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001f0c:	4a0e      	ldr	r2, [pc, #56]	; (8001f48 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001f0e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001f10:	e002      	b.n	8001f18 <LoopCopyDataInit>

08001f12 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001f12:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001f14:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001f16:	3304      	adds	r3, #4

08001f18 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001f18:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001f1a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001f1c:	d3f9      	bcc.n	8001f12 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001f1e:	4a0b      	ldr	r2, [pc, #44]	; (8001f4c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001f20:	4c0b      	ldr	r4, [pc, #44]	; (8001f50 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001f22:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001f24:	e001      	b.n	8001f2a <LoopFillZerobss>

08001f26 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001f26:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001f28:	3204      	adds	r2, #4

08001f2a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001f2a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001f2c:	d3fb      	bcc.n	8001f26 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001f2e:	f7ff ffd7 	bl	8001ee0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001f32:	f003 fafd 	bl	8005530 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001f36:	f7ff f8c7 	bl	80010c8 <main>
  bx  lr    
 8001f3a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001f3c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001f40:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001f44:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8001f48:	08006818 	.word	0x08006818
  ldr r2, =_sbss
 8001f4c:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8001f50:	20000240 	.word	0x20000240

08001f54 <DMA1_Stream0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001f54:	e7fe      	b.n	8001f54 <DMA1_Stream0_IRQHandler>
	...

08001f58 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001f58:	b580      	push	{r7, lr}
 8001f5a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001f5c:	4b0e      	ldr	r3, [pc, #56]	; (8001f98 <HAL_Init+0x40>)
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	4a0d      	ldr	r2, [pc, #52]	; (8001f98 <HAL_Init+0x40>)
 8001f62:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001f66:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001f68:	4b0b      	ldr	r3, [pc, #44]	; (8001f98 <HAL_Init+0x40>)
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	4a0a      	ldr	r2, [pc, #40]	; (8001f98 <HAL_Init+0x40>)
 8001f6e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001f72:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001f74:	4b08      	ldr	r3, [pc, #32]	; (8001f98 <HAL_Init+0x40>)
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	4a07      	ldr	r2, [pc, #28]	; (8001f98 <HAL_Init+0x40>)
 8001f7a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f7e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001f80:	2003      	movs	r0, #3
 8001f82:	f000 fe81 	bl	8002c88 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001f86:	2000      	movs	r0, #0
 8001f88:	f000 f808 	bl	8001f9c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001f8c:	f7ff fdd8 	bl	8001b40 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001f90:	2300      	movs	r3, #0
}
 8001f92:	4618      	mov	r0, r3
 8001f94:	bd80      	pop	{r7, pc}
 8001f96:	bf00      	nop
 8001f98:	40023c00 	.word	0x40023c00

08001f9c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001f9c:	b580      	push	{r7, lr}
 8001f9e:	b082      	sub	sp, #8
 8001fa0:	af00      	add	r7, sp, #0
 8001fa2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001fa4:	4b12      	ldr	r3, [pc, #72]	; (8001ff0 <HAL_InitTick+0x54>)
 8001fa6:	681a      	ldr	r2, [r3, #0]
 8001fa8:	4b12      	ldr	r3, [pc, #72]	; (8001ff4 <HAL_InitTick+0x58>)
 8001faa:	781b      	ldrb	r3, [r3, #0]
 8001fac:	4619      	mov	r1, r3
 8001fae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001fb2:	fbb3 f3f1 	udiv	r3, r3, r1
 8001fb6:	fbb2 f3f3 	udiv	r3, r2, r3
 8001fba:	4618      	mov	r0, r3
 8001fbc:	f000 fe99 	bl	8002cf2 <HAL_SYSTICK_Config>
 8001fc0:	4603      	mov	r3, r0
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d001      	beq.n	8001fca <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001fc6:	2301      	movs	r3, #1
 8001fc8:	e00e      	b.n	8001fe8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	2b0f      	cmp	r3, #15
 8001fce:	d80a      	bhi.n	8001fe6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001fd0:	2200      	movs	r2, #0
 8001fd2:	6879      	ldr	r1, [r7, #4]
 8001fd4:	f04f 30ff 	mov.w	r0, #4294967295
 8001fd8:	f000 fe61 	bl	8002c9e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001fdc:	4a06      	ldr	r2, [pc, #24]	; (8001ff8 <HAL_InitTick+0x5c>)
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001fe2:	2300      	movs	r3, #0
 8001fe4:	e000      	b.n	8001fe8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001fe6:	2301      	movs	r3, #1
}
 8001fe8:	4618      	mov	r0, r3
 8001fea:	3708      	adds	r7, #8
 8001fec:	46bd      	mov	sp, r7
 8001fee:	bd80      	pop	{r7, pc}
 8001ff0:	20000004 	.word	0x20000004
 8001ff4:	2000000c 	.word	0x2000000c
 8001ff8:	20000008 	.word	0x20000008

08001ffc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001ffc:	b480      	push	{r7}
 8001ffe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002000:	4b06      	ldr	r3, [pc, #24]	; (800201c <HAL_IncTick+0x20>)
 8002002:	781b      	ldrb	r3, [r3, #0]
 8002004:	461a      	mov	r2, r3
 8002006:	4b06      	ldr	r3, [pc, #24]	; (8002020 <HAL_IncTick+0x24>)
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	4413      	add	r3, r2
 800200c:	4a04      	ldr	r2, [pc, #16]	; (8002020 <HAL_IncTick+0x24>)
 800200e:	6013      	str	r3, [r2, #0]
}
 8002010:	bf00      	nop
 8002012:	46bd      	mov	sp, r7
 8002014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002018:	4770      	bx	lr
 800201a:	bf00      	nop
 800201c:	2000000c 	.word	0x2000000c
 8002020:	2000023c 	.word	0x2000023c

08002024 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002024:	b480      	push	{r7}
 8002026:	af00      	add	r7, sp, #0
  return uwTick;
 8002028:	4b03      	ldr	r3, [pc, #12]	; (8002038 <HAL_GetTick+0x14>)
 800202a:	681b      	ldr	r3, [r3, #0]
}
 800202c:	4618      	mov	r0, r3
 800202e:	46bd      	mov	sp, r7
 8002030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002034:	4770      	bx	lr
 8002036:	bf00      	nop
 8002038:	2000023c 	.word	0x2000023c

0800203c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800203c:	b580      	push	{r7, lr}
 800203e:	b084      	sub	sp, #16
 8002040:	af00      	add	r7, sp, #0
 8002042:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002044:	2300      	movs	r3, #0
 8002046:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	2b00      	cmp	r3, #0
 800204c:	d101      	bne.n	8002052 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800204e:	2301      	movs	r3, #1
 8002050:	e033      	b.n	80020ba <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002056:	2b00      	cmp	r3, #0
 8002058:	d109      	bne.n	800206e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800205a:	6878      	ldr	r0, [r7, #4]
 800205c:	f7ff fd98 	bl	8001b90 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	2200      	movs	r2, #0
 8002064:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	2200      	movs	r2, #0
 800206a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002072:	f003 0310 	and.w	r3, r3, #16
 8002076:	2b00      	cmp	r3, #0
 8002078:	d118      	bne.n	80020ac <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800207e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002082:	f023 0302 	bic.w	r3, r3, #2
 8002086:	f043 0202 	orr.w	r2, r3, #2
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800208e:	6878      	ldr	r0, [r7, #4]
 8002090:	f000 fba2 	bl	80027d8 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	2200      	movs	r2, #0
 8002098:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800209e:	f023 0303 	bic.w	r3, r3, #3
 80020a2:	f043 0201 	orr.w	r2, r3, #1
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	641a      	str	r2, [r3, #64]	; 0x40
 80020aa:	e001      	b.n	80020b0 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80020ac:	2301      	movs	r3, #1
 80020ae:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	2200      	movs	r2, #0
 80020b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80020b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80020ba:	4618      	mov	r0, r3
 80020bc:	3710      	adds	r7, #16
 80020be:	46bd      	mov	sp, r7
 80020c0:	bd80      	pop	{r7, pc}

080020c2 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 80020c2:	b580      	push	{r7, lr}
 80020c4:	b084      	sub	sp, #16
 80020c6:	af00      	add	r7, sp, #0
 80020c8:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 80020ca:	2300      	movs	r3, #0
 80020cc:	60fb      	str	r3, [r7, #12]
 80020ce:	2300      	movs	r3, #0
 80020d0:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC);
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	f003 0302 	and.w	r3, r3, #2
 80020dc:	2b02      	cmp	r3, #2
 80020de:	bf0c      	ite	eq
 80020e0:	2301      	moveq	r3, #1
 80020e2:	2300      	movne	r3, #0
 80020e4:	b2db      	uxtb	r3, r3
 80020e6:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC);
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	685b      	ldr	r3, [r3, #4]
 80020ee:	f003 0320 	and.w	r3, r3, #32
 80020f2:	2b20      	cmp	r3, #32
 80020f4:	bf0c      	ite	eq
 80020f6:	2301      	moveq	r3, #1
 80020f8:	2300      	movne	r3, #0
 80020fa:	b2db      	uxtb	r3, r3
 80020fc:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	2b00      	cmp	r3, #0
 8002102:	d049      	beq.n	8002198 <HAL_ADC_IRQHandler+0xd6>
 8002104:	68bb      	ldr	r3, [r7, #8]
 8002106:	2b00      	cmp	r3, #0
 8002108:	d046      	beq.n	8002198 <HAL_ADC_IRQHandler+0xd6>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800210e:	f003 0310 	and.w	r3, r3, #16
 8002112:	2b00      	cmp	r3, #0
 8002114:	d105      	bne.n	8002122 <HAL_ADC_IRQHandler+0x60>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800211a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	689b      	ldr	r3, [r3, #8]
 8002128:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800212c:	2b00      	cmp	r3, #0
 800212e:	d12b      	bne.n	8002188 <HAL_ADC_IRQHandler+0xc6>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002134:	2b00      	cmp	r3, #0
 8002136:	d127      	bne.n	8002188 <HAL_ADC_IRQHandler+0xc6>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800213e:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002142:	2b00      	cmp	r3, #0
 8002144:	d006      	beq.n	8002154 <HAL_ADC_IRQHandler+0x92>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	689b      	ldr	r3, [r3, #8]
 800214c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002150:	2b00      	cmp	r3, #0
 8002152:	d119      	bne.n	8002188 <HAL_ADC_IRQHandler+0xc6>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	685a      	ldr	r2, [r3, #4]
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	f022 0220 	bic.w	r2, r2, #32
 8002162:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002168:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002174:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002178:	2b00      	cmp	r3, #0
 800217a:	d105      	bne.n	8002188 <HAL_ADC_IRQHandler+0xc6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002180:	f043 0201 	orr.w	r2, r3, #1
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002188:	6878      	ldr	r0, [r7, #4]
 800218a:	f000 f9cb 	bl	8002524 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	f06f 0212 	mvn.w	r2, #18
 8002196:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC);
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	f003 0304 	and.w	r3, r3, #4
 80021a2:	2b04      	cmp	r3, #4
 80021a4:	bf0c      	ite	eq
 80021a6:	2301      	moveq	r3, #1
 80021a8:	2300      	movne	r3, #0
 80021aa:	b2db      	uxtb	r3, r3
 80021ac:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC);                               
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	685b      	ldr	r3, [r3, #4]
 80021b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80021b8:	2b80      	cmp	r3, #128	; 0x80
 80021ba:	bf0c      	ite	eq
 80021bc:	2301      	moveq	r3, #1
 80021be:	2300      	movne	r3, #0
 80021c0:	b2db      	uxtb	r3, r3
 80021c2:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d057      	beq.n	800227a <HAL_ADC_IRQHandler+0x1b8>
 80021ca:	68bb      	ldr	r3, [r7, #8]
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d054      	beq.n	800227a <HAL_ADC_IRQHandler+0x1b8>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021d4:	f003 0310 	and.w	r3, r3, #16
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d105      	bne.n	80021e8 <HAL_ADC_IRQHandler+0x126>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021e0:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	689b      	ldr	r3, [r3, #8]
 80021ee:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d139      	bne.n	800226a <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80021fc:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8002200:	2b00      	cmp	r3, #0
 8002202:	d006      	beq.n	8002212 <HAL_ADC_IRQHandler+0x150>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	689b      	ldr	r3, [r3, #8]
 800220a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 800220e:	2b00      	cmp	r3, #0
 8002210:	d12b      	bne.n	800226a <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	685b      	ldr	r3, [r3, #4]
 8002218:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 800221c:	2b00      	cmp	r3, #0
 800221e:	d124      	bne.n	800226a <HAL_ADC_IRQHandler+0x1a8>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	689b      	ldr	r3, [r3, #8]
 8002226:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 800222a:	2b00      	cmp	r3, #0
 800222c:	d11d      	bne.n	800226a <HAL_ADC_IRQHandler+0x1a8>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8002232:	2b00      	cmp	r3, #0
 8002234:	d119      	bne.n	800226a <HAL_ADC_IRQHandler+0x1a8>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	685a      	ldr	r2, [r3, #4]
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002244:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800224a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002256:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800225a:	2b00      	cmp	r3, #0
 800225c:	d105      	bne.n	800226a <HAL_ADC_IRQHandler+0x1a8>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002262:	f043 0201 	orr.w	r2, r3, #1
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	641a      	str	r2, [r3, #64]	; 0x40
    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 800226a:	6878      	ldr	r0, [r7, #4]
 800226c:	f000 fc32 	bl	8002ad4 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	f06f 020c 	mvn.w	r2, #12
 8002278:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD);
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	f003 0301 	and.w	r3, r3, #1
 8002284:	2b01      	cmp	r3, #1
 8002286:	bf0c      	ite	eq
 8002288:	2301      	moveq	r3, #1
 800228a:	2300      	movne	r3, #0
 800228c:	b2db      	uxtb	r3, r3
 800228e:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD);                          
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	685b      	ldr	r3, [r3, #4]
 8002296:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800229a:	2b40      	cmp	r3, #64	; 0x40
 800229c:	bf0c      	ite	eq
 800229e:	2301      	moveq	r3, #1
 80022a0:	2300      	movne	r3, #0
 80022a2:	b2db      	uxtb	r3, r3
 80022a4:	60bb      	str	r3, [r7, #8]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d017      	beq.n	80022dc <HAL_ADC_IRQHandler+0x21a>
 80022ac:	68bb      	ldr	r3, [r7, #8]
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d014      	beq.n	80022dc <HAL_ADC_IRQHandler+0x21a>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	f003 0301 	and.w	r3, r3, #1
 80022bc:	2b01      	cmp	r3, #1
 80022be:	d10d      	bne.n	80022dc <HAL_ADC_IRQHandler+0x21a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022c4:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 80022cc:	6878      	ldr	r0, [r7, #4]
 80022ce:	f000 f93d 	bl	800254c <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	f06f 0201 	mvn.w	r2, #1
 80022da:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR);
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	f003 0320 	and.w	r3, r3, #32
 80022e6:	2b20      	cmp	r3, #32
 80022e8:	bf0c      	ite	eq
 80022ea:	2301      	moveq	r3, #1
 80022ec:	2300      	movne	r3, #0
 80022ee:	b2db      	uxtb	r3, r3
 80022f0:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR);
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	685b      	ldr	r3, [r3, #4]
 80022f8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80022fc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002300:	bf0c      	ite	eq
 8002302:	2301      	moveq	r3, #1
 8002304:	2300      	movne	r3, #0
 8002306:	b2db      	uxtb	r3, r3
 8002308:	60bb      	str	r3, [r7, #8]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	2b00      	cmp	r3, #0
 800230e:	d015      	beq.n	800233c <HAL_ADC_IRQHandler+0x27a>
 8002310:	68bb      	ldr	r3, [r7, #8]
 8002312:	2b00      	cmp	r3, #0
 8002314:	d012      	beq.n	800233c <HAL_ADC_IRQHandler+0x27a>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800231a:	f043 0202 	orr.w	r2, r3, #2
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	f06f 0220 	mvn.w	r2, #32
 800232a:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 800232c:	6878      	ldr	r0, [r7, #4]
 800232e:	f000 f917 	bl	8002560 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	f06f 0220 	mvn.w	r2, #32
 800233a:	601a      	str	r2, [r3, #0]
  }
}
 800233c:	bf00      	nop
 800233e:	3710      	adds	r7, #16
 8002340:	46bd      	mov	sp, r7
 8002342:	bd80      	pop	{r7, pc}

08002344 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8002344:	b580      	push	{r7, lr}
 8002346:	b086      	sub	sp, #24
 8002348:	af00      	add	r7, sp, #0
 800234a:	60f8      	str	r0, [r7, #12]
 800234c:	60b9      	str	r1, [r7, #8]
 800234e:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8002350:	2300      	movs	r3, #0
 8002352:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800235a:	2b01      	cmp	r3, #1
 800235c:	d101      	bne.n	8002362 <HAL_ADC_Start_DMA+0x1e>
 800235e:	2302      	movs	r3, #2
 8002360:	e0ce      	b.n	8002500 <HAL_ADC_Start_DMA+0x1bc>
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	2201      	movs	r2, #1
 8002366:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	689b      	ldr	r3, [r3, #8]
 8002370:	f003 0301 	and.w	r3, r3, #1
 8002374:	2b01      	cmp	r3, #1
 8002376:	d018      	beq.n	80023aa <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	689a      	ldr	r2, [r3, #8]
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	f042 0201 	orr.w	r2, r2, #1
 8002386:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002388:	4b5f      	ldr	r3, [pc, #380]	; (8002508 <HAL_ADC_Start_DMA+0x1c4>)
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	4a5f      	ldr	r2, [pc, #380]	; (800250c <HAL_ADC_Start_DMA+0x1c8>)
 800238e:	fba2 2303 	umull	r2, r3, r2, r3
 8002392:	0c9a      	lsrs	r2, r3, #18
 8002394:	4613      	mov	r3, r2
 8002396:	005b      	lsls	r3, r3, #1
 8002398:	4413      	add	r3, r2
 800239a:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 800239c:	e002      	b.n	80023a4 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 800239e:	693b      	ldr	r3, [r7, #16]
 80023a0:	3b01      	subs	r3, #1
 80023a2:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 80023a4:	693b      	ldr	r3, [r7, #16]
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d1f9      	bne.n	800239e <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	689b      	ldr	r3, [r3, #8]
 80023b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023b4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80023b8:	d107      	bne.n	80023ca <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	689a      	ldr	r2, [r3, #8]
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80023c8:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	689b      	ldr	r3, [r3, #8]
 80023d0:	f003 0301 	and.w	r3, r3, #1
 80023d4:	2b01      	cmp	r3, #1
 80023d6:	f040 8086 	bne.w	80024e6 <HAL_ADC_Start_DMA+0x1a2>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023de:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80023e2:	f023 0301 	bic.w	r3, r3, #1
 80023e6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	685b      	ldr	r3, [r3, #4]
 80023f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d007      	beq.n	800240c <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002400:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002404:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002410:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002414:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002418:	d106      	bne.n	8002428 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800241e:	f023 0206 	bic.w	r2, r3, #6
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	645a      	str	r2, [r3, #68]	; 0x44
 8002426:	e002      	b.n	800242e <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	2200      	movs	r2, #0
 800242c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	2200      	movs	r2, #0
 8002432:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002436:	4b36      	ldr	r3, [pc, #216]	; (8002510 <HAL_ADC_Start_DMA+0x1cc>)
 8002438:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800243e:	4a35      	ldr	r2, [pc, #212]	; (8002514 <HAL_ADC_Start_DMA+0x1d0>)
 8002440:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002446:	4a34      	ldr	r2, [pc, #208]	; (8002518 <HAL_ADC_Start_DMA+0x1d4>)
 8002448:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800244e:	4a33      	ldr	r2, [pc, #204]	; (800251c <HAL_ADC_Start_DMA+0x1d8>)
 8002450:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	f06f 0222 	mvn.w	r2, #34	; 0x22
 800245a:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	685a      	ldr	r2, [r3, #4]
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800246a:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	689a      	ldr	r2, [r3, #8]
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800247a:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	334c      	adds	r3, #76	; 0x4c
 8002486:	4619      	mov	r1, r3
 8002488:	68ba      	ldr	r2, [r7, #8]
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	f000 fcec 	bl	8002e68 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8002490:	697b      	ldr	r3, [r7, #20]
 8002492:	685b      	ldr	r3, [r3, #4]
 8002494:	f003 031f 	and.w	r3, r3, #31
 8002498:	2b00      	cmp	r3, #0
 800249a:	d10f      	bne.n	80024bc <HAL_ADC_Start_DMA+0x178>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	689b      	ldr	r3, [r3, #8]
 80024a2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d129      	bne.n	80024fe <HAL_ADC_Start_DMA+0x1ba>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	689a      	ldr	r2, [r3, #8]
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80024b8:	609a      	str	r2, [r3, #8]
 80024ba:	e020      	b.n	80024fe <HAL_ADC_Start_DMA+0x1ba>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	4a17      	ldr	r2, [pc, #92]	; (8002520 <HAL_ADC_Start_DMA+0x1dc>)
 80024c2:	4293      	cmp	r3, r2
 80024c4:	d11b      	bne.n	80024fe <HAL_ADC_Start_DMA+0x1ba>
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	689b      	ldr	r3, [r3, #8]
 80024cc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d114      	bne.n	80024fe <HAL_ADC_Start_DMA+0x1ba>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	689a      	ldr	r2, [r3, #8]
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80024e2:	609a      	str	r2, [r3, #8]
 80024e4:	e00b      	b.n	80024fe <HAL_ADC_Start_DMA+0x1ba>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024ea:	f043 0210 	orr.w	r2, r3, #16
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024f6:	f043 0201 	orr.w	r2, r3, #1
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 80024fe:	2300      	movs	r3, #0
}
 8002500:	4618      	mov	r0, r3
 8002502:	3718      	adds	r7, #24
 8002504:	46bd      	mov	sp, r7
 8002506:	bd80      	pop	{r7, pc}
 8002508:	20000004 	.word	0x20000004
 800250c:	431bde83 	.word	0x431bde83
 8002510:	40012300 	.word	0x40012300
 8002514:	080029d1 	.word	0x080029d1
 8002518:	08002a8b 	.word	0x08002a8b
 800251c:	08002aa7 	.word	0x08002aa7
 8002520:	40012000 	.word	0x40012000

08002524 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002524:	b480      	push	{r7}
 8002526:	b083      	sub	sp, #12
 8002528:	af00      	add	r7, sp, #0
 800252a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 800252c:	bf00      	nop
 800252e:	370c      	adds	r7, #12
 8002530:	46bd      	mov	sp, r7
 8002532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002536:	4770      	bx	lr

08002538 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002538:	b480      	push	{r7}
 800253a:	b083      	sub	sp, #12
 800253c:	af00      	add	r7, sp, #0
 800253e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8002540:	bf00      	nop
 8002542:	370c      	adds	r7, #12
 8002544:	46bd      	mov	sp, r7
 8002546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800254a:	4770      	bx	lr

0800254c <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 800254c:	b480      	push	{r7}
 800254e:	b083      	sub	sp, #12
 8002550:	af00      	add	r7, sp, #0
 8002552:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8002554:	bf00      	nop
 8002556:	370c      	adds	r7, #12
 8002558:	46bd      	mov	sp, r7
 800255a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800255e:	4770      	bx	lr

08002560 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002560:	b480      	push	{r7}
 8002562:	b083      	sub	sp, #12
 8002564:	af00      	add	r7, sp, #0
 8002566:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8002568:	bf00      	nop
 800256a:	370c      	adds	r7, #12
 800256c:	46bd      	mov	sp, r7
 800256e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002572:	4770      	bx	lr

08002574 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002574:	b480      	push	{r7}
 8002576:	b085      	sub	sp, #20
 8002578:	af00      	add	r7, sp, #0
 800257a:	6078      	str	r0, [r7, #4]
 800257c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800257e:	2300      	movs	r3, #0
 8002580:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002588:	2b01      	cmp	r3, #1
 800258a:	d101      	bne.n	8002590 <HAL_ADC_ConfigChannel+0x1c>
 800258c:	2302      	movs	r3, #2
 800258e:	e113      	b.n	80027b8 <HAL_ADC_ConfigChannel+0x244>
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	2201      	movs	r2, #1
 8002594:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002598:	683b      	ldr	r3, [r7, #0]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	2b09      	cmp	r3, #9
 800259e:	d925      	bls.n	80025ec <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	68d9      	ldr	r1, [r3, #12]
 80025a6:	683b      	ldr	r3, [r7, #0]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	b29b      	uxth	r3, r3
 80025ac:	461a      	mov	r2, r3
 80025ae:	4613      	mov	r3, r2
 80025b0:	005b      	lsls	r3, r3, #1
 80025b2:	4413      	add	r3, r2
 80025b4:	3b1e      	subs	r3, #30
 80025b6:	2207      	movs	r2, #7
 80025b8:	fa02 f303 	lsl.w	r3, r2, r3
 80025bc:	43da      	mvns	r2, r3
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	400a      	ands	r2, r1
 80025c4:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	68d9      	ldr	r1, [r3, #12]
 80025cc:	683b      	ldr	r3, [r7, #0]
 80025ce:	689a      	ldr	r2, [r3, #8]
 80025d0:	683b      	ldr	r3, [r7, #0]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	b29b      	uxth	r3, r3
 80025d6:	4618      	mov	r0, r3
 80025d8:	4603      	mov	r3, r0
 80025da:	005b      	lsls	r3, r3, #1
 80025dc:	4403      	add	r3, r0
 80025de:	3b1e      	subs	r3, #30
 80025e0:	409a      	lsls	r2, r3
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	430a      	orrs	r2, r1
 80025e8:	60da      	str	r2, [r3, #12]
 80025ea:	e022      	b.n	8002632 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	6919      	ldr	r1, [r3, #16]
 80025f2:	683b      	ldr	r3, [r7, #0]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	b29b      	uxth	r3, r3
 80025f8:	461a      	mov	r2, r3
 80025fa:	4613      	mov	r3, r2
 80025fc:	005b      	lsls	r3, r3, #1
 80025fe:	4413      	add	r3, r2
 8002600:	2207      	movs	r2, #7
 8002602:	fa02 f303 	lsl.w	r3, r2, r3
 8002606:	43da      	mvns	r2, r3
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	400a      	ands	r2, r1
 800260e:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	6919      	ldr	r1, [r3, #16]
 8002616:	683b      	ldr	r3, [r7, #0]
 8002618:	689a      	ldr	r2, [r3, #8]
 800261a:	683b      	ldr	r3, [r7, #0]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	b29b      	uxth	r3, r3
 8002620:	4618      	mov	r0, r3
 8002622:	4603      	mov	r3, r0
 8002624:	005b      	lsls	r3, r3, #1
 8002626:	4403      	add	r3, r0
 8002628:	409a      	lsls	r2, r3
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	430a      	orrs	r2, r1
 8002630:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002632:	683b      	ldr	r3, [r7, #0]
 8002634:	685b      	ldr	r3, [r3, #4]
 8002636:	2b06      	cmp	r3, #6
 8002638:	d824      	bhi.n	8002684 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002640:	683b      	ldr	r3, [r7, #0]
 8002642:	685a      	ldr	r2, [r3, #4]
 8002644:	4613      	mov	r3, r2
 8002646:	009b      	lsls	r3, r3, #2
 8002648:	4413      	add	r3, r2
 800264a:	3b05      	subs	r3, #5
 800264c:	221f      	movs	r2, #31
 800264e:	fa02 f303 	lsl.w	r3, r2, r3
 8002652:	43da      	mvns	r2, r3
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	400a      	ands	r2, r1
 800265a:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002662:	683b      	ldr	r3, [r7, #0]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	b29b      	uxth	r3, r3
 8002668:	4618      	mov	r0, r3
 800266a:	683b      	ldr	r3, [r7, #0]
 800266c:	685a      	ldr	r2, [r3, #4]
 800266e:	4613      	mov	r3, r2
 8002670:	009b      	lsls	r3, r3, #2
 8002672:	4413      	add	r3, r2
 8002674:	3b05      	subs	r3, #5
 8002676:	fa00 f203 	lsl.w	r2, r0, r3
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	430a      	orrs	r2, r1
 8002680:	635a      	str	r2, [r3, #52]	; 0x34
 8002682:	e04c      	b.n	800271e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002684:	683b      	ldr	r3, [r7, #0]
 8002686:	685b      	ldr	r3, [r3, #4]
 8002688:	2b0c      	cmp	r3, #12
 800268a:	d824      	bhi.n	80026d6 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002692:	683b      	ldr	r3, [r7, #0]
 8002694:	685a      	ldr	r2, [r3, #4]
 8002696:	4613      	mov	r3, r2
 8002698:	009b      	lsls	r3, r3, #2
 800269a:	4413      	add	r3, r2
 800269c:	3b23      	subs	r3, #35	; 0x23
 800269e:	221f      	movs	r2, #31
 80026a0:	fa02 f303 	lsl.w	r3, r2, r3
 80026a4:	43da      	mvns	r2, r3
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	400a      	ands	r2, r1
 80026ac:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80026b4:	683b      	ldr	r3, [r7, #0]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	b29b      	uxth	r3, r3
 80026ba:	4618      	mov	r0, r3
 80026bc:	683b      	ldr	r3, [r7, #0]
 80026be:	685a      	ldr	r2, [r3, #4]
 80026c0:	4613      	mov	r3, r2
 80026c2:	009b      	lsls	r3, r3, #2
 80026c4:	4413      	add	r3, r2
 80026c6:	3b23      	subs	r3, #35	; 0x23
 80026c8:	fa00 f203 	lsl.w	r2, r0, r3
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	430a      	orrs	r2, r1
 80026d2:	631a      	str	r2, [r3, #48]	; 0x30
 80026d4:	e023      	b.n	800271e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80026dc:	683b      	ldr	r3, [r7, #0]
 80026de:	685a      	ldr	r2, [r3, #4]
 80026e0:	4613      	mov	r3, r2
 80026e2:	009b      	lsls	r3, r3, #2
 80026e4:	4413      	add	r3, r2
 80026e6:	3b41      	subs	r3, #65	; 0x41
 80026e8:	221f      	movs	r2, #31
 80026ea:	fa02 f303 	lsl.w	r3, r2, r3
 80026ee:	43da      	mvns	r2, r3
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	400a      	ands	r2, r1
 80026f6:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80026fe:	683b      	ldr	r3, [r7, #0]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	b29b      	uxth	r3, r3
 8002704:	4618      	mov	r0, r3
 8002706:	683b      	ldr	r3, [r7, #0]
 8002708:	685a      	ldr	r2, [r3, #4]
 800270a:	4613      	mov	r3, r2
 800270c:	009b      	lsls	r3, r3, #2
 800270e:	4413      	add	r3, r2
 8002710:	3b41      	subs	r3, #65	; 0x41
 8002712:	fa00 f203 	lsl.w	r2, r0, r3
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	430a      	orrs	r2, r1
 800271c:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800271e:	4b29      	ldr	r3, [pc, #164]	; (80027c4 <HAL_ADC_ConfigChannel+0x250>)
 8002720:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	4a28      	ldr	r2, [pc, #160]	; (80027c8 <HAL_ADC_ConfigChannel+0x254>)
 8002728:	4293      	cmp	r3, r2
 800272a:	d10f      	bne.n	800274c <HAL_ADC_ConfigChannel+0x1d8>
 800272c:	683b      	ldr	r3, [r7, #0]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	2b12      	cmp	r3, #18
 8002732:	d10b      	bne.n	800274c <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	685b      	ldr	r3, [r3, #4]
 8002738:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	685b      	ldr	r3, [r3, #4]
 8002744:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	4a1d      	ldr	r2, [pc, #116]	; (80027c8 <HAL_ADC_ConfigChannel+0x254>)
 8002752:	4293      	cmp	r3, r2
 8002754:	d12b      	bne.n	80027ae <HAL_ADC_ConfigChannel+0x23a>
 8002756:	683b      	ldr	r3, [r7, #0]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	4a1c      	ldr	r2, [pc, #112]	; (80027cc <HAL_ADC_ConfigChannel+0x258>)
 800275c:	4293      	cmp	r3, r2
 800275e:	d003      	beq.n	8002768 <HAL_ADC_ConfigChannel+0x1f4>
 8002760:	683b      	ldr	r3, [r7, #0]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	2b11      	cmp	r3, #17
 8002766:	d122      	bne.n	80027ae <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	685b      	ldr	r3, [r3, #4]
 800276c:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	685b      	ldr	r3, [r3, #4]
 8002778:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8002780:	683b      	ldr	r3, [r7, #0]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	4a11      	ldr	r2, [pc, #68]	; (80027cc <HAL_ADC_ConfigChannel+0x258>)
 8002786:	4293      	cmp	r3, r2
 8002788:	d111      	bne.n	80027ae <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800278a:	4b11      	ldr	r3, [pc, #68]	; (80027d0 <HAL_ADC_ConfigChannel+0x25c>)
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	4a11      	ldr	r2, [pc, #68]	; (80027d4 <HAL_ADC_ConfigChannel+0x260>)
 8002790:	fba2 2303 	umull	r2, r3, r2, r3
 8002794:	0c9a      	lsrs	r2, r3, #18
 8002796:	4613      	mov	r3, r2
 8002798:	009b      	lsls	r3, r3, #2
 800279a:	4413      	add	r3, r2
 800279c:	005b      	lsls	r3, r3, #1
 800279e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80027a0:	e002      	b.n	80027a8 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 80027a2:	68bb      	ldr	r3, [r7, #8]
 80027a4:	3b01      	subs	r3, #1
 80027a6:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80027a8:	68bb      	ldr	r3, [r7, #8]
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d1f9      	bne.n	80027a2 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	2200      	movs	r2, #0
 80027b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80027b6:	2300      	movs	r3, #0
}
 80027b8:	4618      	mov	r0, r3
 80027ba:	3714      	adds	r7, #20
 80027bc:	46bd      	mov	sp, r7
 80027be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c2:	4770      	bx	lr
 80027c4:	40012300 	.word	0x40012300
 80027c8:	40012000 	.word	0x40012000
 80027cc:	10000012 	.word	0x10000012
 80027d0:	20000004 	.word	0x20000004
 80027d4:	431bde83 	.word	0x431bde83

080027d8 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80027d8:	b480      	push	{r7}
 80027da:	b085      	sub	sp, #20
 80027dc:	af00      	add	r7, sp, #0
 80027de:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80027e0:	4b79      	ldr	r3, [pc, #484]	; (80029c8 <ADC_Init+0x1f0>)
 80027e2:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	685b      	ldr	r3, [r3, #4]
 80027e8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	685a      	ldr	r2, [r3, #4]
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	685b      	ldr	r3, [r3, #4]
 80027f8:	431a      	orrs	r2, r3
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	685a      	ldr	r2, [r3, #4]
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800280c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	6859      	ldr	r1, [r3, #4]
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	691b      	ldr	r3, [r3, #16]
 8002818:	021a      	lsls	r2, r3, #8
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	430a      	orrs	r2, r1
 8002820:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	685a      	ldr	r2, [r3, #4]
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002830:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	6859      	ldr	r1, [r3, #4]
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	689a      	ldr	r2, [r3, #8]
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	430a      	orrs	r2, r1
 8002842:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	689a      	ldr	r2, [r3, #8]
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002852:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	6899      	ldr	r1, [r3, #8]
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	68da      	ldr	r2, [r3, #12]
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	430a      	orrs	r2, r1
 8002864:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800286a:	4a58      	ldr	r2, [pc, #352]	; (80029cc <ADC_Init+0x1f4>)
 800286c:	4293      	cmp	r3, r2
 800286e:	d022      	beq.n	80028b6 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	689a      	ldr	r2, [r3, #8]
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800287e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	6899      	ldr	r1, [r3, #8]
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	430a      	orrs	r2, r1
 8002890:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	689a      	ldr	r2, [r3, #8]
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80028a0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	6899      	ldr	r1, [r3, #8]
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	430a      	orrs	r2, r1
 80028b2:	609a      	str	r2, [r3, #8]
 80028b4:	e00f      	b.n	80028d6 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	689a      	ldr	r2, [r3, #8]
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80028c4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	689a      	ldr	r2, [r3, #8]
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80028d4:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	689a      	ldr	r2, [r3, #8]
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	f022 0202 	bic.w	r2, r2, #2
 80028e4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	6899      	ldr	r1, [r3, #8]
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	7e1b      	ldrb	r3, [r3, #24]
 80028f0:	005a      	lsls	r2, r3, #1
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	430a      	orrs	r2, r1
 80028f8:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002900:	2b00      	cmp	r3, #0
 8002902:	d01b      	beq.n	800293c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	685a      	ldr	r2, [r3, #4]
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002912:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	685a      	ldr	r2, [r3, #4]
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002922:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	6859      	ldr	r1, [r3, #4]
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800292e:	3b01      	subs	r3, #1
 8002930:	035a      	lsls	r2, r3, #13
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	430a      	orrs	r2, r1
 8002938:	605a      	str	r2, [r3, #4]
 800293a:	e007      	b.n	800294c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	685a      	ldr	r2, [r3, #4]
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800294a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800295a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	69db      	ldr	r3, [r3, #28]
 8002966:	3b01      	subs	r3, #1
 8002968:	051a      	lsls	r2, r3, #20
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	430a      	orrs	r2, r1
 8002970:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	689a      	ldr	r2, [r3, #8]
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002980:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	6899      	ldr	r1, [r3, #8]
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800298e:	025a      	lsls	r2, r3, #9
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	430a      	orrs	r2, r1
 8002996:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	689a      	ldr	r2, [r3, #8]
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80029a6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	6899      	ldr	r1, [r3, #8]
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	695b      	ldr	r3, [r3, #20]
 80029b2:	029a      	lsls	r2, r3, #10
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	430a      	orrs	r2, r1
 80029ba:	609a      	str	r2, [r3, #8]
}
 80029bc:	bf00      	nop
 80029be:	3714      	adds	r7, #20
 80029c0:	46bd      	mov	sp, r7
 80029c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c6:	4770      	bx	lr
 80029c8:	40012300 	.word	0x40012300
 80029cc:	0f000001 	.word	0x0f000001

080029d0 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 80029d0:	b580      	push	{r7, lr}
 80029d2:	b084      	sub	sp, #16
 80029d4:	af00      	add	r7, sp, #0
 80029d6:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029dc:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029e2:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d13c      	bne.n	8002a64 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029ee:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	689b      	ldr	r3, [r3, #8]
 80029fc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d12b      	bne.n	8002a5c <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d127      	bne.n	8002a5c <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a12:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d006      	beq.n	8002a28 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	689b      	ldr	r3, [r3, #8]
 8002a20:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d119      	bne.n	8002a5c <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	685a      	ldr	r2, [r3, #4]
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	f022 0220 	bic.w	r2, r2, #32
 8002a36:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a3c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a48:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d105      	bne.n	8002a5c <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a54:	f043 0201 	orr.w	r2, r3, #1
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002a5c:	68f8      	ldr	r0, [r7, #12]
 8002a5e:	f7ff fd61 	bl	8002524 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8002a62:	e00e      	b.n	8002a82 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a68:	f003 0310 	and.w	r3, r3, #16
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d003      	beq.n	8002a78 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8002a70:	68f8      	ldr	r0, [r7, #12]
 8002a72:	f7ff fd75 	bl	8002560 <HAL_ADC_ErrorCallback>
}
 8002a76:	e004      	b.n	8002a82 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a7e:	6878      	ldr	r0, [r7, #4]
 8002a80:	4798      	blx	r3
}
 8002a82:	bf00      	nop
 8002a84:	3710      	adds	r7, #16
 8002a86:	46bd      	mov	sp, r7
 8002a88:	bd80      	pop	{r7, pc}

08002a8a <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002a8a:	b580      	push	{r7, lr}
 8002a8c:	b084      	sub	sp, #16
 8002a8e:	af00      	add	r7, sp, #0
 8002a90:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a96:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002a98:	68f8      	ldr	r0, [r7, #12]
 8002a9a:	f7ff fd4d 	bl	8002538 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002a9e:	bf00      	nop
 8002aa0:	3710      	adds	r7, #16
 8002aa2:	46bd      	mov	sp, r7
 8002aa4:	bd80      	pop	{r7, pc}

08002aa6 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8002aa6:	b580      	push	{r7, lr}
 8002aa8:	b084      	sub	sp, #16
 8002aaa:	af00      	add	r7, sp, #0
 8002aac:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ab2:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	2240      	movs	r2, #64	; 0x40
 8002ab8:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002abe:	f043 0204 	orr.w	r2, r3, #4
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002ac6:	68f8      	ldr	r0, [r7, #12]
 8002ac8:	f7ff fd4a 	bl	8002560 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002acc:	bf00      	nop
 8002ace:	3710      	adds	r7, #16
 8002ad0:	46bd      	mov	sp, r7
 8002ad2:	bd80      	pop	{r7, pc}

08002ad4 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002ad4:	b480      	push	{r7}
 8002ad6:	b083      	sub	sp, #12
 8002ad8:	af00      	add	r7, sp, #0
 8002ada:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8002adc:	bf00      	nop
 8002ade:	370c      	adds	r7, #12
 8002ae0:	46bd      	mov	sp, r7
 8002ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae6:	4770      	bx	lr

08002ae8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002ae8:	b480      	push	{r7}
 8002aea:	b085      	sub	sp, #20
 8002aec:	af00      	add	r7, sp, #0
 8002aee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	f003 0307 	and.w	r3, r3, #7
 8002af6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002af8:	4b0c      	ldr	r3, [pc, #48]	; (8002b2c <__NVIC_SetPriorityGrouping+0x44>)
 8002afa:	68db      	ldr	r3, [r3, #12]
 8002afc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002afe:	68ba      	ldr	r2, [r7, #8]
 8002b00:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002b04:	4013      	ands	r3, r2
 8002b06:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002b0c:	68bb      	ldr	r3, [r7, #8]
 8002b0e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002b10:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002b14:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002b18:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002b1a:	4a04      	ldr	r2, [pc, #16]	; (8002b2c <__NVIC_SetPriorityGrouping+0x44>)
 8002b1c:	68bb      	ldr	r3, [r7, #8]
 8002b1e:	60d3      	str	r3, [r2, #12]
}
 8002b20:	bf00      	nop
 8002b22:	3714      	adds	r7, #20
 8002b24:	46bd      	mov	sp, r7
 8002b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b2a:	4770      	bx	lr
 8002b2c:	e000ed00 	.word	0xe000ed00

08002b30 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002b30:	b480      	push	{r7}
 8002b32:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002b34:	4b04      	ldr	r3, [pc, #16]	; (8002b48 <__NVIC_GetPriorityGrouping+0x18>)
 8002b36:	68db      	ldr	r3, [r3, #12]
 8002b38:	0a1b      	lsrs	r3, r3, #8
 8002b3a:	f003 0307 	and.w	r3, r3, #7
}
 8002b3e:	4618      	mov	r0, r3
 8002b40:	46bd      	mov	sp, r7
 8002b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b46:	4770      	bx	lr
 8002b48:	e000ed00 	.word	0xe000ed00

08002b4c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002b4c:	b480      	push	{r7}
 8002b4e:	b083      	sub	sp, #12
 8002b50:	af00      	add	r7, sp, #0
 8002b52:	4603      	mov	r3, r0
 8002b54:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	db0b      	blt.n	8002b76 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002b5e:	79fb      	ldrb	r3, [r7, #7]
 8002b60:	f003 021f 	and.w	r2, r3, #31
 8002b64:	4907      	ldr	r1, [pc, #28]	; (8002b84 <__NVIC_EnableIRQ+0x38>)
 8002b66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b6a:	095b      	lsrs	r3, r3, #5
 8002b6c:	2001      	movs	r0, #1
 8002b6e:	fa00 f202 	lsl.w	r2, r0, r2
 8002b72:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002b76:	bf00      	nop
 8002b78:	370c      	adds	r7, #12
 8002b7a:	46bd      	mov	sp, r7
 8002b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b80:	4770      	bx	lr
 8002b82:	bf00      	nop
 8002b84:	e000e100 	.word	0xe000e100

08002b88 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002b88:	b480      	push	{r7}
 8002b8a:	b083      	sub	sp, #12
 8002b8c:	af00      	add	r7, sp, #0
 8002b8e:	4603      	mov	r3, r0
 8002b90:	6039      	str	r1, [r7, #0]
 8002b92:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b94:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	db0a      	blt.n	8002bb2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b9c:	683b      	ldr	r3, [r7, #0]
 8002b9e:	b2da      	uxtb	r2, r3
 8002ba0:	490c      	ldr	r1, [pc, #48]	; (8002bd4 <__NVIC_SetPriority+0x4c>)
 8002ba2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ba6:	0112      	lsls	r2, r2, #4
 8002ba8:	b2d2      	uxtb	r2, r2
 8002baa:	440b      	add	r3, r1
 8002bac:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002bb0:	e00a      	b.n	8002bc8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002bb2:	683b      	ldr	r3, [r7, #0]
 8002bb4:	b2da      	uxtb	r2, r3
 8002bb6:	4908      	ldr	r1, [pc, #32]	; (8002bd8 <__NVIC_SetPriority+0x50>)
 8002bb8:	79fb      	ldrb	r3, [r7, #7]
 8002bba:	f003 030f 	and.w	r3, r3, #15
 8002bbe:	3b04      	subs	r3, #4
 8002bc0:	0112      	lsls	r2, r2, #4
 8002bc2:	b2d2      	uxtb	r2, r2
 8002bc4:	440b      	add	r3, r1
 8002bc6:	761a      	strb	r2, [r3, #24]
}
 8002bc8:	bf00      	nop
 8002bca:	370c      	adds	r7, #12
 8002bcc:	46bd      	mov	sp, r7
 8002bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd2:	4770      	bx	lr
 8002bd4:	e000e100 	.word	0xe000e100
 8002bd8:	e000ed00 	.word	0xe000ed00

08002bdc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002bdc:	b480      	push	{r7}
 8002bde:	b089      	sub	sp, #36	; 0x24
 8002be0:	af00      	add	r7, sp, #0
 8002be2:	60f8      	str	r0, [r7, #12]
 8002be4:	60b9      	str	r1, [r7, #8]
 8002be6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	f003 0307 	and.w	r3, r3, #7
 8002bee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002bf0:	69fb      	ldr	r3, [r7, #28]
 8002bf2:	f1c3 0307 	rsb	r3, r3, #7
 8002bf6:	2b04      	cmp	r3, #4
 8002bf8:	bf28      	it	cs
 8002bfa:	2304      	movcs	r3, #4
 8002bfc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002bfe:	69fb      	ldr	r3, [r7, #28]
 8002c00:	3304      	adds	r3, #4
 8002c02:	2b06      	cmp	r3, #6
 8002c04:	d902      	bls.n	8002c0c <NVIC_EncodePriority+0x30>
 8002c06:	69fb      	ldr	r3, [r7, #28]
 8002c08:	3b03      	subs	r3, #3
 8002c0a:	e000      	b.n	8002c0e <NVIC_EncodePriority+0x32>
 8002c0c:	2300      	movs	r3, #0
 8002c0e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c10:	f04f 32ff 	mov.w	r2, #4294967295
 8002c14:	69bb      	ldr	r3, [r7, #24]
 8002c16:	fa02 f303 	lsl.w	r3, r2, r3
 8002c1a:	43da      	mvns	r2, r3
 8002c1c:	68bb      	ldr	r3, [r7, #8]
 8002c1e:	401a      	ands	r2, r3
 8002c20:	697b      	ldr	r3, [r7, #20]
 8002c22:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002c24:	f04f 31ff 	mov.w	r1, #4294967295
 8002c28:	697b      	ldr	r3, [r7, #20]
 8002c2a:	fa01 f303 	lsl.w	r3, r1, r3
 8002c2e:	43d9      	mvns	r1, r3
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c34:	4313      	orrs	r3, r2
         );
}
 8002c36:	4618      	mov	r0, r3
 8002c38:	3724      	adds	r7, #36	; 0x24
 8002c3a:	46bd      	mov	sp, r7
 8002c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c40:	4770      	bx	lr
	...

08002c44 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002c44:	b580      	push	{r7, lr}
 8002c46:	b082      	sub	sp, #8
 8002c48:	af00      	add	r7, sp, #0
 8002c4a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	3b01      	subs	r3, #1
 8002c50:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002c54:	d301      	bcc.n	8002c5a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002c56:	2301      	movs	r3, #1
 8002c58:	e00f      	b.n	8002c7a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002c5a:	4a0a      	ldr	r2, [pc, #40]	; (8002c84 <SysTick_Config+0x40>)
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	3b01      	subs	r3, #1
 8002c60:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002c62:	210f      	movs	r1, #15
 8002c64:	f04f 30ff 	mov.w	r0, #4294967295
 8002c68:	f7ff ff8e 	bl	8002b88 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002c6c:	4b05      	ldr	r3, [pc, #20]	; (8002c84 <SysTick_Config+0x40>)
 8002c6e:	2200      	movs	r2, #0
 8002c70:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002c72:	4b04      	ldr	r3, [pc, #16]	; (8002c84 <SysTick_Config+0x40>)
 8002c74:	2207      	movs	r2, #7
 8002c76:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002c78:	2300      	movs	r3, #0
}
 8002c7a:	4618      	mov	r0, r3
 8002c7c:	3708      	adds	r7, #8
 8002c7e:	46bd      	mov	sp, r7
 8002c80:	bd80      	pop	{r7, pc}
 8002c82:	bf00      	nop
 8002c84:	e000e010 	.word	0xe000e010

08002c88 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002c88:	b580      	push	{r7, lr}
 8002c8a:	b082      	sub	sp, #8
 8002c8c:	af00      	add	r7, sp, #0
 8002c8e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002c90:	6878      	ldr	r0, [r7, #4]
 8002c92:	f7ff ff29 	bl	8002ae8 <__NVIC_SetPriorityGrouping>
}
 8002c96:	bf00      	nop
 8002c98:	3708      	adds	r7, #8
 8002c9a:	46bd      	mov	sp, r7
 8002c9c:	bd80      	pop	{r7, pc}

08002c9e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002c9e:	b580      	push	{r7, lr}
 8002ca0:	b086      	sub	sp, #24
 8002ca2:	af00      	add	r7, sp, #0
 8002ca4:	4603      	mov	r3, r0
 8002ca6:	60b9      	str	r1, [r7, #8]
 8002ca8:	607a      	str	r2, [r7, #4]
 8002caa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002cac:	2300      	movs	r3, #0
 8002cae:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002cb0:	f7ff ff3e 	bl	8002b30 <__NVIC_GetPriorityGrouping>
 8002cb4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002cb6:	687a      	ldr	r2, [r7, #4]
 8002cb8:	68b9      	ldr	r1, [r7, #8]
 8002cba:	6978      	ldr	r0, [r7, #20]
 8002cbc:	f7ff ff8e 	bl	8002bdc <NVIC_EncodePriority>
 8002cc0:	4602      	mov	r2, r0
 8002cc2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002cc6:	4611      	mov	r1, r2
 8002cc8:	4618      	mov	r0, r3
 8002cca:	f7ff ff5d 	bl	8002b88 <__NVIC_SetPriority>
}
 8002cce:	bf00      	nop
 8002cd0:	3718      	adds	r7, #24
 8002cd2:	46bd      	mov	sp, r7
 8002cd4:	bd80      	pop	{r7, pc}

08002cd6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002cd6:	b580      	push	{r7, lr}
 8002cd8:	b082      	sub	sp, #8
 8002cda:	af00      	add	r7, sp, #0
 8002cdc:	4603      	mov	r3, r0
 8002cde:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002ce0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ce4:	4618      	mov	r0, r3
 8002ce6:	f7ff ff31 	bl	8002b4c <__NVIC_EnableIRQ>
}
 8002cea:	bf00      	nop
 8002cec:	3708      	adds	r7, #8
 8002cee:	46bd      	mov	sp, r7
 8002cf0:	bd80      	pop	{r7, pc}

08002cf2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002cf2:	b580      	push	{r7, lr}
 8002cf4:	b082      	sub	sp, #8
 8002cf6:	af00      	add	r7, sp, #0
 8002cf8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002cfa:	6878      	ldr	r0, [r7, #4]
 8002cfc:	f7ff ffa2 	bl	8002c44 <SysTick_Config>
 8002d00:	4603      	mov	r3, r0
}
 8002d02:	4618      	mov	r0, r3
 8002d04:	3708      	adds	r7, #8
 8002d06:	46bd      	mov	sp, r7
 8002d08:	bd80      	pop	{r7, pc}
	...

08002d0c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002d0c:	b580      	push	{r7, lr}
 8002d0e:	b086      	sub	sp, #24
 8002d10:	af00      	add	r7, sp, #0
 8002d12:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002d14:	2300      	movs	r3, #0
 8002d16:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002d18:	f7ff f984 	bl	8002024 <HAL_GetTick>
 8002d1c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d101      	bne.n	8002d28 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002d24:	2301      	movs	r3, #1
 8002d26:	e099      	b.n	8002e5c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	2200      	movs	r2, #0
 8002d2c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	2202      	movs	r2, #2
 8002d34:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	681a      	ldr	r2, [r3, #0]
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	f022 0201 	bic.w	r2, r2, #1
 8002d46:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002d48:	e00f      	b.n	8002d6a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002d4a:	f7ff f96b 	bl	8002024 <HAL_GetTick>
 8002d4e:	4602      	mov	r2, r0
 8002d50:	693b      	ldr	r3, [r7, #16]
 8002d52:	1ad3      	subs	r3, r2, r3
 8002d54:	2b05      	cmp	r3, #5
 8002d56:	d908      	bls.n	8002d6a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	2220      	movs	r2, #32
 8002d5c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	2203      	movs	r2, #3
 8002d62:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002d66:	2303      	movs	r3, #3
 8002d68:	e078      	b.n	8002e5c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	f003 0301 	and.w	r3, r3, #1
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d1e8      	bne.n	8002d4a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002d80:	697a      	ldr	r2, [r7, #20]
 8002d82:	4b38      	ldr	r3, [pc, #224]	; (8002e64 <HAL_DMA_Init+0x158>)
 8002d84:	4013      	ands	r3, r2
 8002d86:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	685a      	ldr	r2, [r3, #4]
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	689b      	ldr	r3, [r3, #8]
 8002d90:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002d96:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	691b      	ldr	r3, [r3, #16]
 8002d9c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002da2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	699b      	ldr	r3, [r3, #24]
 8002da8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002dae:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	6a1b      	ldr	r3, [r3, #32]
 8002db4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002db6:	697a      	ldr	r2, [r7, #20]
 8002db8:	4313      	orrs	r3, r2
 8002dba:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dc0:	2b04      	cmp	r3, #4
 8002dc2:	d107      	bne.n	8002dd4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dcc:	4313      	orrs	r3, r2
 8002dce:	697a      	ldr	r2, [r7, #20]
 8002dd0:	4313      	orrs	r3, r2
 8002dd2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	697a      	ldr	r2, [r7, #20]
 8002dda:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	695b      	ldr	r3, [r3, #20]
 8002de2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002de4:	697b      	ldr	r3, [r7, #20]
 8002de6:	f023 0307 	bic.w	r3, r3, #7
 8002dea:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002df0:	697a      	ldr	r2, [r7, #20]
 8002df2:	4313      	orrs	r3, r2
 8002df4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dfa:	2b04      	cmp	r3, #4
 8002dfc:	d117      	bne.n	8002e2e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e02:	697a      	ldr	r2, [r7, #20]
 8002e04:	4313      	orrs	r3, r2
 8002e06:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d00e      	beq.n	8002e2e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002e10:	6878      	ldr	r0, [r7, #4]
 8002e12:	f000 fa91 	bl	8003338 <DMA_CheckFifoParam>
 8002e16:	4603      	mov	r3, r0
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d008      	beq.n	8002e2e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	2240      	movs	r2, #64	; 0x40
 8002e20:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	2201      	movs	r2, #1
 8002e26:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002e2a:	2301      	movs	r3, #1
 8002e2c:	e016      	b.n	8002e5c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	697a      	ldr	r2, [r7, #20]
 8002e34:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002e36:	6878      	ldr	r0, [r7, #4]
 8002e38:	f000 fa48 	bl	80032cc <DMA_CalcBaseAndBitshift>
 8002e3c:	4603      	mov	r3, r0
 8002e3e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e44:	223f      	movs	r2, #63	; 0x3f
 8002e46:	409a      	lsls	r2, r3
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	2200      	movs	r2, #0
 8002e50:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	2201      	movs	r2, #1
 8002e56:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002e5a:	2300      	movs	r3, #0
}
 8002e5c:	4618      	mov	r0, r3
 8002e5e:	3718      	adds	r7, #24
 8002e60:	46bd      	mov	sp, r7
 8002e62:	bd80      	pop	{r7, pc}
 8002e64:	f010803f 	.word	0xf010803f

08002e68 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002e68:	b580      	push	{r7, lr}
 8002e6a:	b086      	sub	sp, #24
 8002e6c:	af00      	add	r7, sp, #0
 8002e6e:	60f8      	str	r0, [r7, #12]
 8002e70:	60b9      	str	r1, [r7, #8]
 8002e72:	607a      	str	r2, [r7, #4]
 8002e74:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002e76:	2300      	movs	r3, #0
 8002e78:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e7e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002e86:	2b01      	cmp	r3, #1
 8002e88:	d101      	bne.n	8002e8e <HAL_DMA_Start_IT+0x26>
 8002e8a:	2302      	movs	r3, #2
 8002e8c:	e040      	b.n	8002f10 <HAL_DMA_Start_IT+0xa8>
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	2201      	movs	r2, #1
 8002e92:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002e9c:	b2db      	uxtb	r3, r3
 8002e9e:	2b01      	cmp	r3, #1
 8002ea0:	d12f      	bne.n	8002f02 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	2202      	movs	r2, #2
 8002ea6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	2200      	movs	r2, #0
 8002eae:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002eb0:	683b      	ldr	r3, [r7, #0]
 8002eb2:	687a      	ldr	r2, [r7, #4]
 8002eb4:	68b9      	ldr	r1, [r7, #8]
 8002eb6:	68f8      	ldr	r0, [r7, #12]
 8002eb8:	f000 f9da 	bl	8003270 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ec0:	223f      	movs	r2, #63	; 0x3f
 8002ec2:	409a      	lsls	r2, r3
 8002ec4:	693b      	ldr	r3, [r7, #16]
 8002ec6:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	681a      	ldr	r2, [r3, #0]
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	f042 0216 	orr.w	r2, r2, #22
 8002ed6:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d007      	beq.n	8002ef0 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	681a      	ldr	r2, [r3, #0]
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	f042 0208 	orr.w	r2, r2, #8
 8002eee:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	681a      	ldr	r2, [r3, #0]
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	f042 0201 	orr.w	r2, r2, #1
 8002efe:	601a      	str	r2, [r3, #0]
 8002f00:	e005      	b.n	8002f0e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	2200      	movs	r2, #0
 8002f06:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002f0a:	2302      	movs	r3, #2
 8002f0c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002f0e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002f10:	4618      	mov	r0, r3
 8002f12:	3718      	adds	r7, #24
 8002f14:	46bd      	mov	sp, r7
 8002f16:	bd80      	pop	{r7, pc}

08002f18 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002f18:	b480      	push	{r7}
 8002f1a:	b083      	sub	sp, #12
 8002f1c:	af00      	add	r7, sp, #0
 8002f1e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002f26:	b2db      	uxtb	r3, r3
 8002f28:	2b02      	cmp	r3, #2
 8002f2a:	d004      	beq.n	8002f36 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	2280      	movs	r2, #128	; 0x80
 8002f30:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002f32:	2301      	movs	r3, #1
 8002f34:	e00c      	b.n	8002f50 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	2205      	movs	r2, #5
 8002f3a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	681a      	ldr	r2, [r3, #0]
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	f022 0201 	bic.w	r2, r2, #1
 8002f4c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002f4e:	2300      	movs	r3, #0
}
 8002f50:	4618      	mov	r0, r3
 8002f52:	370c      	adds	r7, #12
 8002f54:	46bd      	mov	sp, r7
 8002f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f5a:	4770      	bx	lr

08002f5c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002f5c:	b580      	push	{r7, lr}
 8002f5e:	b086      	sub	sp, #24
 8002f60:	af00      	add	r7, sp, #0
 8002f62:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002f64:	2300      	movs	r3, #0
 8002f66:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002f68:	4b92      	ldr	r3, [pc, #584]	; (80031b4 <HAL_DMA_IRQHandler+0x258>)
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	4a92      	ldr	r2, [pc, #584]	; (80031b8 <HAL_DMA_IRQHandler+0x25c>)
 8002f6e:	fba2 2303 	umull	r2, r3, r2, r3
 8002f72:	0a9b      	lsrs	r3, r3, #10
 8002f74:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f7a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002f7c:	693b      	ldr	r3, [r7, #16]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f86:	2208      	movs	r2, #8
 8002f88:	409a      	lsls	r2, r3
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	4013      	ands	r3, r2
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d01a      	beq.n	8002fc8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	f003 0304 	and.w	r3, r3, #4
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d013      	beq.n	8002fc8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	681a      	ldr	r2, [r3, #0]
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	f022 0204 	bic.w	r2, r2, #4
 8002fae:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002fb4:	2208      	movs	r2, #8
 8002fb6:	409a      	lsls	r2, r3
 8002fb8:	693b      	ldr	r3, [r7, #16]
 8002fba:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002fc0:	f043 0201 	orr.w	r2, r3, #1
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002fcc:	2201      	movs	r2, #1
 8002fce:	409a      	lsls	r2, r3
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	4013      	ands	r3, r2
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d012      	beq.n	8002ffe <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	695b      	ldr	r3, [r3, #20]
 8002fde:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d00b      	beq.n	8002ffe <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002fea:	2201      	movs	r2, #1
 8002fec:	409a      	lsls	r2, r3
 8002fee:	693b      	ldr	r3, [r7, #16]
 8002ff0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ff6:	f043 0202 	orr.w	r2, r3, #2
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003002:	2204      	movs	r2, #4
 8003004:	409a      	lsls	r2, r3
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	4013      	ands	r3, r2
 800300a:	2b00      	cmp	r3, #0
 800300c:	d012      	beq.n	8003034 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	f003 0302 	and.w	r3, r3, #2
 8003018:	2b00      	cmp	r3, #0
 800301a:	d00b      	beq.n	8003034 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003020:	2204      	movs	r2, #4
 8003022:	409a      	lsls	r2, r3
 8003024:	693b      	ldr	r3, [r7, #16]
 8003026:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800302c:	f043 0204 	orr.w	r2, r3, #4
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003038:	2210      	movs	r2, #16
 800303a:	409a      	lsls	r2, r3
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	4013      	ands	r3, r2
 8003040:	2b00      	cmp	r3, #0
 8003042:	d043      	beq.n	80030cc <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	f003 0308 	and.w	r3, r3, #8
 800304e:	2b00      	cmp	r3, #0
 8003050:	d03c      	beq.n	80030cc <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003056:	2210      	movs	r2, #16
 8003058:	409a      	lsls	r2, r3
 800305a:	693b      	ldr	r3, [r7, #16]
 800305c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003068:	2b00      	cmp	r3, #0
 800306a:	d018      	beq.n	800309e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003076:	2b00      	cmp	r3, #0
 8003078:	d108      	bne.n	800308c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800307e:	2b00      	cmp	r3, #0
 8003080:	d024      	beq.n	80030cc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003086:	6878      	ldr	r0, [r7, #4]
 8003088:	4798      	blx	r3
 800308a:	e01f      	b.n	80030cc <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003090:	2b00      	cmp	r3, #0
 8003092:	d01b      	beq.n	80030cc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003098:	6878      	ldr	r0, [r7, #4]
 800309a:	4798      	blx	r3
 800309c:	e016      	b.n	80030cc <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d107      	bne.n	80030bc <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	681a      	ldr	r2, [r3, #0]
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	f022 0208 	bic.w	r2, r2, #8
 80030ba:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d003      	beq.n	80030cc <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030c8:	6878      	ldr	r0, [r7, #4]
 80030ca:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030d0:	2220      	movs	r2, #32
 80030d2:	409a      	lsls	r2, r3
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	4013      	ands	r3, r2
 80030d8:	2b00      	cmp	r3, #0
 80030da:	f000 808e 	beq.w	80031fa <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	f003 0310 	and.w	r3, r3, #16
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	f000 8086 	beq.w	80031fa <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030f2:	2220      	movs	r2, #32
 80030f4:	409a      	lsls	r2, r3
 80030f6:	693b      	ldr	r3, [r7, #16]
 80030f8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003100:	b2db      	uxtb	r3, r3
 8003102:	2b05      	cmp	r3, #5
 8003104:	d136      	bne.n	8003174 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	681a      	ldr	r2, [r3, #0]
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	f022 0216 	bic.w	r2, r2, #22
 8003114:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	695a      	ldr	r2, [r3, #20]
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003124:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800312a:	2b00      	cmp	r3, #0
 800312c:	d103      	bne.n	8003136 <HAL_DMA_IRQHandler+0x1da>
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003132:	2b00      	cmp	r3, #0
 8003134:	d007      	beq.n	8003146 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	681a      	ldr	r2, [r3, #0]
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	f022 0208 	bic.w	r2, r2, #8
 8003144:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800314a:	223f      	movs	r2, #63	; 0x3f
 800314c:	409a      	lsls	r2, r3
 800314e:	693b      	ldr	r3, [r7, #16]
 8003150:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	2200      	movs	r2, #0
 8003156:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	2201      	movs	r2, #1
 800315e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003166:	2b00      	cmp	r3, #0
 8003168:	d07d      	beq.n	8003266 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800316e:	6878      	ldr	r0, [r7, #4]
 8003170:	4798      	blx	r3
        }
        return;
 8003172:	e078      	b.n	8003266 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800317e:	2b00      	cmp	r3, #0
 8003180:	d01c      	beq.n	80031bc <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800318c:	2b00      	cmp	r3, #0
 800318e:	d108      	bne.n	80031a2 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003194:	2b00      	cmp	r3, #0
 8003196:	d030      	beq.n	80031fa <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800319c:	6878      	ldr	r0, [r7, #4]
 800319e:	4798      	blx	r3
 80031a0:	e02b      	b.n	80031fa <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d027      	beq.n	80031fa <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031ae:	6878      	ldr	r0, [r7, #4]
 80031b0:	4798      	blx	r3
 80031b2:	e022      	b.n	80031fa <HAL_DMA_IRQHandler+0x29e>
 80031b4:	20000004 	.word	0x20000004
 80031b8:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d10f      	bne.n	80031ea <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	681a      	ldr	r2, [r3, #0]
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	f022 0210 	bic.w	r2, r2, #16
 80031d8:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	2200      	movs	r2, #0
 80031de:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	2201      	movs	r2, #1
 80031e6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d003      	beq.n	80031fa <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031f6:	6878      	ldr	r0, [r7, #4]
 80031f8:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d032      	beq.n	8003268 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003206:	f003 0301 	and.w	r3, r3, #1
 800320a:	2b00      	cmp	r3, #0
 800320c:	d022      	beq.n	8003254 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	2205      	movs	r2, #5
 8003212:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	681a      	ldr	r2, [r3, #0]
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	f022 0201 	bic.w	r2, r2, #1
 8003224:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003226:	68bb      	ldr	r3, [r7, #8]
 8003228:	3301      	adds	r3, #1
 800322a:	60bb      	str	r3, [r7, #8]
 800322c:	697a      	ldr	r2, [r7, #20]
 800322e:	429a      	cmp	r2, r3
 8003230:	d307      	bcc.n	8003242 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	f003 0301 	and.w	r3, r3, #1
 800323c:	2b00      	cmp	r3, #0
 800323e:	d1f2      	bne.n	8003226 <HAL_DMA_IRQHandler+0x2ca>
 8003240:	e000      	b.n	8003244 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8003242:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	2200      	movs	r2, #0
 8003248:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	2201      	movs	r2, #1
 8003250:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003258:	2b00      	cmp	r3, #0
 800325a:	d005      	beq.n	8003268 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003260:	6878      	ldr	r0, [r7, #4]
 8003262:	4798      	blx	r3
 8003264:	e000      	b.n	8003268 <HAL_DMA_IRQHandler+0x30c>
        return;
 8003266:	bf00      	nop
    }
  }
}
 8003268:	3718      	adds	r7, #24
 800326a:	46bd      	mov	sp, r7
 800326c:	bd80      	pop	{r7, pc}
 800326e:	bf00      	nop

08003270 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003270:	b480      	push	{r7}
 8003272:	b085      	sub	sp, #20
 8003274:	af00      	add	r7, sp, #0
 8003276:	60f8      	str	r0, [r7, #12]
 8003278:	60b9      	str	r1, [r7, #8]
 800327a:	607a      	str	r2, [r7, #4]
 800327c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	681a      	ldr	r2, [r3, #0]
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800328c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	683a      	ldr	r2, [r7, #0]
 8003294:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	689b      	ldr	r3, [r3, #8]
 800329a:	2b40      	cmp	r3, #64	; 0x40
 800329c:	d108      	bne.n	80032b0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	687a      	ldr	r2, [r7, #4]
 80032a4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	68ba      	ldr	r2, [r7, #8]
 80032ac:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80032ae:	e007      	b.n	80032c0 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	68ba      	ldr	r2, [r7, #8]
 80032b6:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	687a      	ldr	r2, [r7, #4]
 80032be:	60da      	str	r2, [r3, #12]
}
 80032c0:	bf00      	nop
 80032c2:	3714      	adds	r7, #20
 80032c4:	46bd      	mov	sp, r7
 80032c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ca:	4770      	bx	lr

080032cc <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80032cc:	b480      	push	{r7}
 80032ce:	b085      	sub	sp, #20
 80032d0:	af00      	add	r7, sp, #0
 80032d2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	b2db      	uxtb	r3, r3
 80032da:	3b10      	subs	r3, #16
 80032dc:	4a14      	ldr	r2, [pc, #80]	; (8003330 <DMA_CalcBaseAndBitshift+0x64>)
 80032de:	fba2 2303 	umull	r2, r3, r2, r3
 80032e2:	091b      	lsrs	r3, r3, #4
 80032e4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80032e6:	4a13      	ldr	r2, [pc, #76]	; (8003334 <DMA_CalcBaseAndBitshift+0x68>)
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	4413      	add	r3, r2
 80032ec:	781b      	ldrb	r3, [r3, #0]
 80032ee:	461a      	mov	r2, r3
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	2b03      	cmp	r3, #3
 80032f8:	d909      	bls.n	800330e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003302:	f023 0303 	bic.w	r3, r3, #3
 8003306:	1d1a      	adds	r2, r3, #4
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	659a      	str	r2, [r3, #88]	; 0x58
 800330c:	e007      	b.n	800331e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003316:	f023 0303 	bic.w	r3, r3, #3
 800331a:	687a      	ldr	r2, [r7, #4]
 800331c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003322:	4618      	mov	r0, r3
 8003324:	3714      	adds	r7, #20
 8003326:	46bd      	mov	sp, r7
 8003328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800332c:	4770      	bx	lr
 800332e:	bf00      	nop
 8003330:	aaaaaaab 	.word	0xaaaaaaab
 8003334:	08006628 	.word	0x08006628

08003338 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003338:	b480      	push	{r7}
 800333a:	b085      	sub	sp, #20
 800333c:	af00      	add	r7, sp, #0
 800333e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003340:	2300      	movs	r3, #0
 8003342:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003348:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	699b      	ldr	r3, [r3, #24]
 800334e:	2b00      	cmp	r3, #0
 8003350:	d11f      	bne.n	8003392 <DMA_CheckFifoParam+0x5a>
 8003352:	68bb      	ldr	r3, [r7, #8]
 8003354:	2b03      	cmp	r3, #3
 8003356:	d856      	bhi.n	8003406 <DMA_CheckFifoParam+0xce>
 8003358:	a201      	add	r2, pc, #4	; (adr r2, 8003360 <DMA_CheckFifoParam+0x28>)
 800335a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800335e:	bf00      	nop
 8003360:	08003371 	.word	0x08003371
 8003364:	08003383 	.word	0x08003383
 8003368:	08003371 	.word	0x08003371
 800336c:	08003407 	.word	0x08003407
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003374:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003378:	2b00      	cmp	r3, #0
 800337a:	d046      	beq.n	800340a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800337c:	2301      	movs	r3, #1
 800337e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003380:	e043      	b.n	800340a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003386:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800338a:	d140      	bne.n	800340e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800338c:	2301      	movs	r3, #1
 800338e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003390:	e03d      	b.n	800340e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	699b      	ldr	r3, [r3, #24]
 8003396:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800339a:	d121      	bne.n	80033e0 <DMA_CheckFifoParam+0xa8>
 800339c:	68bb      	ldr	r3, [r7, #8]
 800339e:	2b03      	cmp	r3, #3
 80033a0:	d837      	bhi.n	8003412 <DMA_CheckFifoParam+0xda>
 80033a2:	a201      	add	r2, pc, #4	; (adr r2, 80033a8 <DMA_CheckFifoParam+0x70>)
 80033a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033a8:	080033b9 	.word	0x080033b9
 80033ac:	080033bf 	.word	0x080033bf
 80033b0:	080033b9 	.word	0x080033b9
 80033b4:	080033d1 	.word	0x080033d1
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80033b8:	2301      	movs	r3, #1
 80033ba:	73fb      	strb	r3, [r7, #15]
      break;
 80033bc:	e030      	b.n	8003420 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033c2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d025      	beq.n	8003416 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80033ca:	2301      	movs	r3, #1
 80033cc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80033ce:	e022      	b.n	8003416 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033d4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80033d8:	d11f      	bne.n	800341a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80033da:	2301      	movs	r3, #1
 80033dc:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80033de:	e01c      	b.n	800341a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80033e0:	68bb      	ldr	r3, [r7, #8]
 80033e2:	2b02      	cmp	r3, #2
 80033e4:	d903      	bls.n	80033ee <DMA_CheckFifoParam+0xb6>
 80033e6:	68bb      	ldr	r3, [r7, #8]
 80033e8:	2b03      	cmp	r3, #3
 80033ea:	d003      	beq.n	80033f4 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80033ec:	e018      	b.n	8003420 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80033ee:	2301      	movs	r3, #1
 80033f0:	73fb      	strb	r3, [r7, #15]
      break;
 80033f2:	e015      	b.n	8003420 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033f8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d00e      	beq.n	800341e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003400:	2301      	movs	r3, #1
 8003402:	73fb      	strb	r3, [r7, #15]
      break;
 8003404:	e00b      	b.n	800341e <DMA_CheckFifoParam+0xe6>
      break;
 8003406:	bf00      	nop
 8003408:	e00a      	b.n	8003420 <DMA_CheckFifoParam+0xe8>
      break;
 800340a:	bf00      	nop
 800340c:	e008      	b.n	8003420 <DMA_CheckFifoParam+0xe8>
      break;
 800340e:	bf00      	nop
 8003410:	e006      	b.n	8003420 <DMA_CheckFifoParam+0xe8>
      break;
 8003412:	bf00      	nop
 8003414:	e004      	b.n	8003420 <DMA_CheckFifoParam+0xe8>
      break;
 8003416:	bf00      	nop
 8003418:	e002      	b.n	8003420 <DMA_CheckFifoParam+0xe8>
      break;   
 800341a:	bf00      	nop
 800341c:	e000      	b.n	8003420 <DMA_CheckFifoParam+0xe8>
      break;
 800341e:	bf00      	nop
    }
  } 
  
  return status; 
 8003420:	7bfb      	ldrb	r3, [r7, #15]
}
 8003422:	4618      	mov	r0, r3
 8003424:	3714      	adds	r7, #20
 8003426:	46bd      	mov	sp, r7
 8003428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800342c:	4770      	bx	lr
 800342e:	bf00      	nop

08003430 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003430:	b480      	push	{r7}
 8003432:	b089      	sub	sp, #36	; 0x24
 8003434:	af00      	add	r7, sp, #0
 8003436:	6078      	str	r0, [r7, #4]
 8003438:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800343a:	2300      	movs	r3, #0
 800343c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800343e:	2300      	movs	r3, #0
 8003440:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003442:	2300      	movs	r3, #0
 8003444:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003446:	2300      	movs	r3, #0
 8003448:	61fb      	str	r3, [r7, #28]
 800344a:	e159      	b.n	8003700 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800344c:	2201      	movs	r2, #1
 800344e:	69fb      	ldr	r3, [r7, #28]
 8003450:	fa02 f303 	lsl.w	r3, r2, r3
 8003454:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003456:	683b      	ldr	r3, [r7, #0]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	697a      	ldr	r2, [r7, #20]
 800345c:	4013      	ands	r3, r2
 800345e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003460:	693a      	ldr	r2, [r7, #16]
 8003462:	697b      	ldr	r3, [r7, #20]
 8003464:	429a      	cmp	r2, r3
 8003466:	f040 8148 	bne.w	80036fa <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800346a:	683b      	ldr	r3, [r7, #0]
 800346c:	685b      	ldr	r3, [r3, #4]
 800346e:	f003 0303 	and.w	r3, r3, #3
 8003472:	2b01      	cmp	r3, #1
 8003474:	d005      	beq.n	8003482 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003476:	683b      	ldr	r3, [r7, #0]
 8003478:	685b      	ldr	r3, [r3, #4]
 800347a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800347e:	2b02      	cmp	r3, #2
 8003480:	d130      	bne.n	80034e4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	689b      	ldr	r3, [r3, #8]
 8003486:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003488:	69fb      	ldr	r3, [r7, #28]
 800348a:	005b      	lsls	r3, r3, #1
 800348c:	2203      	movs	r2, #3
 800348e:	fa02 f303 	lsl.w	r3, r2, r3
 8003492:	43db      	mvns	r3, r3
 8003494:	69ba      	ldr	r2, [r7, #24]
 8003496:	4013      	ands	r3, r2
 8003498:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800349a:	683b      	ldr	r3, [r7, #0]
 800349c:	68da      	ldr	r2, [r3, #12]
 800349e:	69fb      	ldr	r3, [r7, #28]
 80034a0:	005b      	lsls	r3, r3, #1
 80034a2:	fa02 f303 	lsl.w	r3, r2, r3
 80034a6:	69ba      	ldr	r2, [r7, #24]
 80034a8:	4313      	orrs	r3, r2
 80034aa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	69ba      	ldr	r2, [r7, #24]
 80034b0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	685b      	ldr	r3, [r3, #4]
 80034b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80034b8:	2201      	movs	r2, #1
 80034ba:	69fb      	ldr	r3, [r7, #28]
 80034bc:	fa02 f303 	lsl.w	r3, r2, r3
 80034c0:	43db      	mvns	r3, r3
 80034c2:	69ba      	ldr	r2, [r7, #24]
 80034c4:	4013      	ands	r3, r2
 80034c6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80034c8:	683b      	ldr	r3, [r7, #0]
 80034ca:	685b      	ldr	r3, [r3, #4]
 80034cc:	091b      	lsrs	r3, r3, #4
 80034ce:	f003 0201 	and.w	r2, r3, #1
 80034d2:	69fb      	ldr	r3, [r7, #28]
 80034d4:	fa02 f303 	lsl.w	r3, r2, r3
 80034d8:	69ba      	ldr	r2, [r7, #24]
 80034da:	4313      	orrs	r3, r2
 80034dc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	69ba      	ldr	r2, [r7, #24]
 80034e2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80034e4:	683b      	ldr	r3, [r7, #0]
 80034e6:	685b      	ldr	r3, [r3, #4]
 80034e8:	f003 0303 	and.w	r3, r3, #3
 80034ec:	2b03      	cmp	r3, #3
 80034ee:	d017      	beq.n	8003520 <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	68db      	ldr	r3, [r3, #12]
 80034f4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80034f6:	69fb      	ldr	r3, [r7, #28]
 80034f8:	005b      	lsls	r3, r3, #1
 80034fa:	2203      	movs	r2, #3
 80034fc:	fa02 f303 	lsl.w	r3, r2, r3
 8003500:	43db      	mvns	r3, r3
 8003502:	69ba      	ldr	r2, [r7, #24]
 8003504:	4013      	ands	r3, r2
 8003506:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003508:	683b      	ldr	r3, [r7, #0]
 800350a:	689a      	ldr	r2, [r3, #8]
 800350c:	69fb      	ldr	r3, [r7, #28]
 800350e:	005b      	lsls	r3, r3, #1
 8003510:	fa02 f303 	lsl.w	r3, r2, r3
 8003514:	69ba      	ldr	r2, [r7, #24]
 8003516:	4313      	orrs	r3, r2
 8003518:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	69ba      	ldr	r2, [r7, #24]
 800351e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003520:	683b      	ldr	r3, [r7, #0]
 8003522:	685b      	ldr	r3, [r3, #4]
 8003524:	f003 0303 	and.w	r3, r3, #3
 8003528:	2b02      	cmp	r3, #2
 800352a:	d123      	bne.n	8003574 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800352c:	69fb      	ldr	r3, [r7, #28]
 800352e:	08da      	lsrs	r2, r3, #3
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	3208      	adds	r2, #8
 8003534:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003538:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800353a:	69fb      	ldr	r3, [r7, #28]
 800353c:	f003 0307 	and.w	r3, r3, #7
 8003540:	009b      	lsls	r3, r3, #2
 8003542:	220f      	movs	r2, #15
 8003544:	fa02 f303 	lsl.w	r3, r2, r3
 8003548:	43db      	mvns	r3, r3
 800354a:	69ba      	ldr	r2, [r7, #24]
 800354c:	4013      	ands	r3, r2
 800354e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003550:	683b      	ldr	r3, [r7, #0]
 8003552:	691a      	ldr	r2, [r3, #16]
 8003554:	69fb      	ldr	r3, [r7, #28]
 8003556:	f003 0307 	and.w	r3, r3, #7
 800355a:	009b      	lsls	r3, r3, #2
 800355c:	fa02 f303 	lsl.w	r3, r2, r3
 8003560:	69ba      	ldr	r2, [r7, #24]
 8003562:	4313      	orrs	r3, r2
 8003564:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003566:	69fb      	ldr	r3, [r7, #28]
 8003568:	08da      	lsrs	r2, r3, #3
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	3208      	adds	r2, #8
 800356e:	69b9      	ldr	r1, [r7, #24]
 8003570:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800357a:	69fb      	ldr	r3, [r7, #28]
 800357c:	005b      	lsls	r3, r3, #1
 800357e:	2203      	movs	r2, #3
 8003580:	fa02 f303 	lsl.w	r3, r2, r3
 8003584:	43db      	mvns	r3, r3
 8003586:	69ba      	ldr	r2, [r7, #24]
 8003588:	4013      	ands	r3, r2
 800358a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800358c:	683b      	ldr	r3, [r7, #0]
 800358e:	685b      	ldr	r3, [r3, #4]
 8003590:	f003 0203 	and.w	r2, r3, #3
 8003594:	69fb      	ldr	r3, [r7, #28]
 8003596:	005b      	lsls	r3, r3, #1
 8003598:	fa02 f303 	lsl.w	r3, r2, r3
 800359c:	69ba      	ldr	r2, [r7, #24]
 800359e:	4313      	orrs	r3, r2
 80035a0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	69ba      	ldr	r2, [r7, #24]
 80035a6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80035a8:	683b      	ldr	r3, [r7, #0]
 80035aa:	685b      	ldr	r3, [r3, #4]
 80035ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	f000 80a2 	beq.w	80036fa <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80035b6:	2300      	movs	r3, #0
 80035b8:	60fb      	str	r3, [r7, #12]
 80035ba:	4b57      	ldr	r3, [pc, #348]	; (8003718 <HAL_GPIO_Init+0x2e8>)
 80035bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035be:	4a56      	ldr	r2, [pc, #344]	; (8003718 <HAL_GPIO_Init+0x2e8>)
 80035c0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80035c4:	6453      	str	r3, [r2, #68]	; 0x44
 80035c6:	4b54      	ldr	r3, [pc, #336]	; (8003718 <HAL_GPIO_Init+0x2e8>)
 80035c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035ca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80035ce:	60fb      	str	r3, [r7, #12]
 80035d0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80035d2:	4a52      	ldr	r2, [pc, #328]	; (800371c <HAL_GPIO_Init+0x2ec>)
 80035d4:	69fb      	ldr	r3, [r7, #28]
 80035d6:	089b      	lsrs	r3, r3, #2
 80035d8:	3302      	adds	r3, #2
 80035da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80035de:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80035e0:	69fb      	ldr	r3, [r7, #28]
 80035e2:	f003 0303 	and.w	r3, r3, #3
 80035e6:	009b      	lsls	r3, r3, #2
 80035e8:	220f      	movs	r2, #15
 80035ea:	fa02 f303 	lsl.w	r3, r2, r3
 80035ee:	43db      	mvns	r3, r3
 80035f0:	69ba      	ldr	r2, [r7, #24]
 80035f2:	4013      	ands	r3, r2
 80035f4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	4a49      	ldr	r2, [pc, #292]	; (8003720 <HAL_GPIO_Init+0x2f0>)
 80035fa:	4293      	cmp	r3, r2
 80035fc:	d019      	beq.n	8003632 <HAL_GPIO_Init+0x202>
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	4a48      	ldr	r2, [pc, #288]	; (8003724 <HAL_GPIO_Init+0x2f4>)
 8003602:	4293      	cmp	r3, r2
 8003604:	d013      	beq.n	800362e <HAL_GPIO_Init+0x1fe>
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	4a47      	ldr	r2, [pc, #284]	; (8003728 <HAL_GPIO_Init+0x2f8>)
 800360a:	4293      	cmp	r3, r2
 800360c:	d00d      	beq.n	800362a <HAL_GPIO_Init+0x1fa>
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	4a46      	ldr	r2, [pc, #280]	; (800372c <HAL_GPIO_Init+0x2fc>)
 8003612:	4293      	cmp	r3, r2
 8003614:	d007      	beq.n	8003626 <HAL_GPIO_Init+0x1f6>
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	4a45      	ldr	r2, [pc, #276]	; (8003730 <HAL_GPIO_Init+0x300>)
 800361a:	4293      	cmp	r3, r2
 800361c:	d101      	bne.n	8003622 <HAL_GPIO_Init+0x1f2>
 800361e:	2304      	movs	r3, #4
 8003620:	e008      	b.n	8003634 <HAL_GPIO_Init+0x204>
 8003622:	2307      	movs	r3, #7
 8003624:	e006      	b.n	8003634 <HAL_GPIO_Init+0x204>
 8003626:	2303      	movs	r3, #3
 8003628:	e004      	b.n	8003634 <HAL_GPIO_Init+0x204>
 800362a:	2302      	movs	r3, #2
 800362c:	e002      	b.n	8003634 <HAL_GPIO_Init+0x204>
 800362e:	2301      	movs	r3, #1
 8003630:	e000      	b.n	8003634 <HAL_GPIO_Init+0x204>
 8003632:	2300      	movs	r3, #0
 8003634:	69fa      	ldr	r2, [r7, #28]
 8003636:	f002 0203 	and.w	r2, r2, #3
 800363a:	0092      	lsls	r2, r2, #2
 800363c:	4093      	lsls	r3, r2
 800363e:	69ba      	ldr	r2, [r7, #24]
 8003640:	4313      	orrs	r3, r2
 8003642:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003644:	4935      	ldr	r1, [pc, #212]	; (800371c <HAL_GPIO_Init+0x2ec>)
 8003646:	69fb      	ldr	r3, [r7, #28]
 8003648:	089b      	lsrs	r3, r3, #2
 800364a:	3302      	adds	r3, #2
 800364c:	69ba      	ldr	r2, [r7, #24]
 800364e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003652:	4b38      	ldr	r3, [pc, #224]	; (8003734 <HAL_GPIO_Init+0x304>)
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003658:	693b      	ldr	r3, [r7, #16]
 800365a:	43db      	mvns	r3, r3
 800365c:	69ba      	ldr	r2, [r7, #24]
 800365e:	4013      	ands	r3, r2
 8003660:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003662:	683b      	ldr	r3, [r7, #0]
 8003664:	685b      	ldr	r3, [r3, #4]
 8003666:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800366a:	2b00      	cmp	r3, #0
 800366c:	d003      	beq.n	8003676 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800366e:	69ba      	ldr	r2, [r7, #24]
 8003670:	693b      	ldr	r3, [r7, #16]
 8003672:	4313      	orrs	r3, r2
 8003674:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003676:	4a2f      	ldr	r2, [pc, #188]	; (8003734 <HAL_GPIO_Init+0x304>)
 8003678:	69bb      	ldr	r3, [r7, #24]
 800367a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800367c:	4b2d      	ldr	r3, [pc, #180]	; (8003734 <HAL_GPIO_Init+0x304>)
 800367e:	685b      	ldr	r3, [r3, #4]
 8003680:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003682:	693b      	ldr	r3, [r7, #16]
 8003684:	43db      	mvns	r3, r3
 8003686:	69ba      	ldr	r2, [r7, #24]
 8003688:	4013      	ands	r3, r2
 800368a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800368c:	683b      	ldr	r3, [r7, #0]
 800368e:	685b      	ldr	r3, [r3, #4]
 8003690:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003694:	2b00      	cmp	r3, #0
 8003696:	d003      	beq.n	80036a0 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8003698:	69ba      	ldr	r2, [r7, #24]
 800369a:	693b      	ldr	r3, [r7, #16]
 800369c:	4313      	orrs	r3, r2
 800369e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80036a0:	4a24      	ldr	r2, [pc, #144]	; (8003734 <HAL_GPIO_Init+0x304>)
 80036a2:	69bb      	ldr	r3, [r7, #24]
 80036a4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80036a6:	4b23      	ldr	r3, [pc, #140]	; (8003734 <HAL_GPIO_Init+0x304>)
 80036a8:	689b      	ldr	r3, [r3, #8]
 80036aa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80036ac:	693b      	ldr	r3, [r7, #16]
 80036ae:	43db      	mvns	r3, r3
 80036b0:	69ba      	ldr	r2, [r7, #24]
 80036b2:	4013      	ands	r3, r2
 80036b4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80036b6:	683b      	ldr	r3, [r7, #0]
 80036b8:	685b      	ldr	r3, [r3, #4]
 80036ba:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d003      	beq.n	80036ca <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80036c2:	69ba      	ldr	r2, [r7, #24]
 80036c4:	693b      	ldr	r3, [r7, #16]
 80036c6:	4313      	orrs	r3, r2
 80036c8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80036ca:	4a1a      	ldr	r2, [pc, #104]	; (8003734 <HAL_GPIO_Init+0x304>)
 80036cc:	69bb      	ldr	r3, [r7, #24]
 80036ce:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80036d0:	4b18      	ldr	r3, [pc, #96]	; (8003734 <HAL_GPIO_Init+0x304>)
 80036d2:	68db      	ldr	r3, [r3, #12]
 80036d4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80036d6:	693b      	ldr	r3, [r7, #16]
 80036d8:	43db      	mvns	r3, r3
 80036da:	69ba      	ldr	r2, [r7, #24]
 80036dc:	4013      	ands	r3, r2
 80036de:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80036e0:	683b      	ldr	r3, [r7, #0]
 80036e2:	685b      	ldr	r3, [r3, #4]
 80036e4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d003      	beq.n	80036f4 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80036ec:	69ba      	ldr	r2, [r7, #24]
 80036ee:	693b      	ldr	r3, [r7, #16]
 80036f0:	4313      	orrs	r3, r2
 80036f2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80036f4:	4a0f      	ldr	r2, [pc, #60]	; (8003734 <HAL_GPIO_Init+0x304>)
 80036f6:	69bb      	ldr	r3, [r7, #24]
 80036f8:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80036fa:	69fb      	ldr	r3, [r7, #28]
 80036fc:	3301      	adds	r3, #1
 80036fe:	61fb      	str	r3, [r7, #28]
 8003700:	69fb      	ldr	r3, [r7, #28]
 8003702:	2b0f      	cmp	r3, #15
 8003704:	f67f aea2 	bls.w	800344c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003708:	bf00      	nop
 800370a:	bf00      	nop
 800370c:	3724      	adds	r7, #36	; 0x24
 800370e:	46bd      	mov	sp, r7
 8003710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003714:	4770      	bx	lr
 8003716:	bf00      	nop
 8003718:	40023800 	.word	0x40023800
 800371c:	40013800 	.word	0x40013800
 8003720:	40020000 	.word	0x40020000
 8003724:	40020400 	.word	0x40020400
 8003728:	40020800 	.word	0x40020800
 800372c:	40020c00 	.word	0x40020c00
 8003730:	40021000 	.word	0x40021000
 8003734:	40013c00 	.word	0x40013c00

08003738 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003738:	b480      	push	{r7}
 800373a:	b085      	sub	sp, #20
 800373c:	af00      	add	r7, sp, #0
 800373e:	6078      	str	r0, [r7, #4]
 8003740:	460b      	mov	r3, r1
 8003742:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	691a      	ldr	r2, [r3, #16]
 8003748:	887b      	ldrh	r3, [r7, #2]
 800374a:	4013      	ands	r3, r2
 800374c:	2b00      	cmp	r3, #0
 800374e:	d002      	beq.n	8003756 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003750:	2301      	movs	r3, #1
 8003752:	73fb      	strb	r3, [r7, #15]
 8003754:	e001      	b.n	800375a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003756:	2300      	movs	r3, #0
 8003758:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800375a:	7bfb      	ldrb	r3, [r7, #15]
}
 800375c:	4618      	mov	r0, r3
 800375e:	3714      	adds	r7, #20
 8003760:	46bd      	mov	sp, r7
 8003762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003766:	4770      	bx	lr

08003768 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003768:	b480      	push	{r7}
 800376a:	b083      	sub	sp, #12
 800376c:	af00      	add	r7, sp, #0
 800376e:	6078      	str	r0, [r7, #4]
 8003770:	460b      	mov	r3, r1
 8003772:	807b      	strh	r3, [r7, #2]
 8003774:	4613      	mov	r3, r2
 8003776:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003778:	787b      	ldrb	r3, [r7, #1]
 800377a:	2b00      	cmp	r3, #0
 800377c:	d003      	beq.n	8003786 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800377e:	887a      	ldrh	r2, [r7, #2]
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003784:	e003      	b.n	800378e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003786:	887b      	ldrh	r3, [r7, #2]
 8003788:	041a      	lsls	r2, r3, #16
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	619a      	str	r2, [r3, #24]
}
 800378e:	bf00      	nop
 8003790:	370c      	adds	r7, #12
 8003792:	46bd      	mov	sp, r7
 8003794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003798:	4770      	bx	lr
	...

0800379c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800379c:	b580      	push	{r7, lr}
 800379e:	b086      	sub	sp, #24
 80037a0:	af00      	add	r7, sp, #0
 80037a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d101      	bne.n	80037ae <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80037aa:	2301      	movs	r3, #1
 80037ac:	e264      	b.n	8003c78 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	f003 0301 	and.w	r3, r3, #1
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d075      	beq.n	80038a6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80037ba:	4ba3      	ldr	r3, [pc, #652]	; (8003a48 <HAL_RCC_OscConfig+0x2ac>)
 80037bc:	689b      	ldr	r3, [r3, #8]
 80037be:	f003 030c 	and.w	r3, r3, #12
 80037c2:	2b04      	cmp	r3, #4
 80037c4:	d00c      	beq.n	80037e0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80037c6:	4ba0      	ldr	r3, [pc, #640]	; (8003a48 <HAL_RCC_OscConfig+0x2ac>)
 80037c8:	689b      	ldr	r3, [r3, #8]
 80037ca:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80037ce:	2b08      	cmp	r3, #8
 80037d0:	d112      	bne.n	80037f8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80037d2:	4b9d      	ldr	r3, [pc, #628]	; (8003a48 <HAL_RCC_OscConfig+0x2ac>)
 80037d4:	685b      	ldr	r3, [r3, #4]
 80037d6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80037da:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80037de:	d10b      	bne.n	80037f8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80037e0:	4b99      	ldr	r3, [pc, #612]	; (8003a48 <HAL_RCC_OscConfig+0x2ac>)
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d05b      	beq.n	80038a4 <HAL_RCC_OscConfig+0x108>
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	685b      	ldr	r3, [r3, #4]
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d157      	bne.n	80038a4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80037f4:	2301      	movs	r3, #1
 80037f6:	e23f      	b.n	8003c78 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	685b      	ldr	r3, [r3, #4]
 80037fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003800:	d106      	bne.n	8003810 <HAL_RCC_OscConfig+0x74>
 8003802:	4b91      	ldr	r3, [pc, #580]	; (8003a48 <HAL_RCC_OscConfig+0x2ac>)
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	4a90      	ldr	r2, [pc, #576]	; (8003a48 <HAL_RCC_OscConfig+0x2ac>)
 8003808:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800380c:	6013      	str	r3, [r2, #0]
 800380e:	e01d      	b.n	800384c <HAL_RCC_OscConfig+0xb0>
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	685b      	ldr	r3, [r3, #4]
 8003814:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003818:	d10c      	bne.n	8003834 <HAL_RCC_OscConfig+0x98>
 800381a:	4b8b      	ldr	r3, [pc, #556]	; (8003a48 <HAL_RCC_OscConfig+0x2ac>)
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	4a8a      	ldr	r2, [pc, #552]	; (8003a48 <HAL_RCC_OscConfig+0x2ac>)
 8003820:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003824:	6013      	str	r3, [r2, #0]
 8003826:	4b88      	ldr	r3, [pc, #544]	; (8003a48 <HAL_RCC_OscConfig+0x2ac>)
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	4a87      	ldr	r2, [pc, #540]	; (8003a48 <HAL_RCC_OscConfig+0x2ac>)
 800382c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003830:	6013      	str	r3, [r2, #0]
 8003832:	e00b      	b.n	800384c <HAL_RCC_OscConfig+0xb0>
 8003834:	4b84      	ldr	r3, [pc, #528]	; (8003a48 <HAL_RCC_OscConfig+0x2ac>)
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	4a83      	ldr	r2, [pc, #524]	; (8003a48 <HAL_RCC_OscConfig+0x2ac>)
 800383a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800383e:	6013      	str	r3, [r2, #0]
 8003840:	4b81      	ldr	r3, [pc, #516]	; (8003a48 <HAL_RCC_OscConfig+0x2ac>)
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	4a80      	ldr	r2, [pc, #512]	; (8003a48 <HAL_RCC_OscConfig+0x2ac>)
 8003846:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800384a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	685b      	ldr	r3, [r3, #4]
 8003850:	2b00      	cmp	r3, #0
 8003852:	d013      	beq.n	800387c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003854:	f7fe fbe6 	bl	8002024 <HAL_GetTick>
 8003858:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800385a:	e008      	b.n	800386e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800385c:	f7fe fbe2 	bl	8002024 <HAL_GetTick>
 8003860:	4602      	mov	r2, r0
 8003862:	693b      	ldr	r3, [r7, #16]
 8003864:	1ad3      	subs	r3, r2, r3
 8003866:	2b64      	cmp	r3, #100	; 0x64
 8003868:	d901      	bls.n	800386e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800386a:	2303      	movs	r3, #3
 800386c:	e204      	b.n	8003c78 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800386e:	4b76      	ldr	r3, [pc, #472]	; (8003a48 <HAL_RCC_OscConfig+0x2ac>)
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003876:	2b00      	cmp	r3, #0
 8003878:	d0f0      	beq.n	800385c <HAL_RCC_OscConfig+0xc0>
 800387a:	e014      	b.n	80038a6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800387c:	f7fe fbd2 	bl	8002024 <HAL_GetTick>
 8003880:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003882:	e008      	b.n	8003896 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003884:	f7fe fbce 	bl	8002024 <HAL_GetTick>
 8003888:	4602      	mov	r2, r0
 800388a:	693b      	ldr	r3, [r7, #16]
 800388c:	1ad3      	subs	r3, r2, r3
 800388e:	2b64      	cmp	r3, #100	; 0x64
 8003890:	d901      	bls.n	8003896 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003892:	2303      	movs	r3, #3
 8003894:	e1f0      	b.n	8003c78 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003896:	4b6c      	ldr	r3, [pc, #432]	; (8003a48 <HAL_RCC_OscConfig+0x2ac>)
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d1f0      	bne.n	8003884 <HAL_RCC_OscConfig+0xe8>
 80038a2:	e000      	b.n	80038a6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80038a4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	f003 0302 	and.w	r3, r3, #2
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d063      	beq.n	800397a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80038b2:	4b65      	ldr	r3, [pc, #404]	; (8003a48 <HAL_RCC_OscConfig+0x2ac>)
 80038b4:	689b      	ldr	r3, [r3, #8]
 80038b6:	f003 030c 	and.w	r3, r3, #12
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d00b      	beq.n	80038d6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80038be:	4b62      	ldr	r3, [pc, #392]	; (8003a48 <HAL_RCC_OscConfig+0x2ac>)
 80038c0:	689b      	ldr	r3, [r3, #8]
 80038c2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80038c6:	2b08      	cmp	r3, #8
 80038c8:	d11c      	bne.n	8003904 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80038ca:	4b5f      	ldr	r3, [pc, #380]	; (8003a48 <HAL_RCC_OscConfig+0x2ac>)
 80038cc:	685b      	ldr	r3, [r3, #4]
 80038ce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d116      	bne.n	8003904 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80038d6:	4b5c      	ldr	r3, [pc, #368]	; (8003a48 <HAL_RCC_OscConfig+0x2ac>)
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	f003 0302 	and.w	r3, r3, #2
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d005      	beq.n	80038ee <HAL_RCC_OscConfig+0x152>
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	68db      	ldr	r3, [r3, #12]
 80038e6:	2b01      	cmp	r3, #1
 80038e8:	d001      	beq.n	80038ee <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80038ea:	2301      	movs	r3, #1
 80038ec:	e1c4      	b.n	8003c78 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80038ee:	4b56      	ldr	r3, [pc, #344]	; (8003a48 <HAL_RCC_OscConfig+0x2ac>)
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	691b      	ldr	r3, [r3, #16]
 80038fa:	00db      	lsls	r3, r3, #3
 80038fc:	4952      	ldr	r1, [pc, #328]	; (8003a48 <HAL_RCC_OscConfig+0x2ac>)
 80038fe:	4313      	orrs	r3, r2
 8003900:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003902:	e03a      	b.n	800397a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	68db      	ldr	r3, [r3, #12]
 8003908:	2b00      	cmp	r3, #0
 800390a:	d020      	beq.n	800394e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800390c:	4b4f      	ldr	r3, [pc, #316]	; (8003a4c <HAL_RCC_OscConfig+0x2b0>)
 800390e:	2201      	movs	r2, #1
 8003910:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003912:	f7fe fb87 	bl	8002024 <HAL_GetTick>
 8003916:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003918:	e008      	b.n	800392c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800391a:	f7fe fb83 	bl	8002024 <HAL_GetTick>
 800391e:	4602      	mov	r2, r0
 8003920:	693b      	ldr	r3, [r7, #16]
 8003922:	1ad3      	subs	r3, r2, r3
 8003924:	2b02      	cmp	r3, #2
 8003926:	d901      	bls.n	800392c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003928:	2303      	movs	r3, #3
 800392a:	e1a5      	b.n	8003c78 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800392c:	4b46      	ldr	r3, [pc, #280]	; (8003a48 <HAL_RCC_OscConfig+0x2ac>)
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	f003 0302 	and.w	r3, r3, #2
 8003934:	2b00      	cmp	r3, #0
 8003936:	d0f0      	beq.n	800391a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003938:	4b43      	ldr	r3, [pc, #268]	; (8003a48 <HAL_RCC_OscConfig+0x2ac>)
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	691b      	ldr	r3, [r3, #16]
 8003944:	00db      	lsls	r3, r3, #3
 8003946:	4940      	ldr	r1, [pc, #256]	; (8003a48 <HAL_RCC_OscConfig+0x2ac>)
 8003948:	4313      	orrs	r3, r2
 800394a:	600b      	str	r3, [r1, #0]
 800394c:	e015      	b.n	800397a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800394e:	4b3f      	ldr	r3, [pc, #252]	; (8003a4c <HAL_RCC_OscConfig+0x2b0>)
 8003950:	2200      	movs	r2, #0
 8003952:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003954:	f7fe fb66 	bl	8002024 <HAL_GetTick>
 8003958:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800395a:	e008      	b.n	800396e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800395c:	f7fe fb62 	bl	8002024 <HAL_GetTick>
 8003960:	4602      	mov	r2, r0
 8003962:	693b      	ldr	r3, [r7, #16]
 8003964:	1ad3      	subs	r3, r2, r3
 8003966:	2b02      	cmp	r3, #2
 8003968:	d901      	bls.n	800396e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800396a:	2303      	movs	r3, #3
 800396c:	e184      	b.n	8003c78 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800396e:	4b36      	ldr	r3, [pc, #216]	; (8003a48 <HAL_RCC_OscConfig+0x2ac>)
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	f003 0302 	and.w	r3, r3, #2
 8003976:	2b00      	cmp	r3, #0
 8003978:	d1f0      	bne.n	800395c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	f003 0308 	and.w	r3, r3, #8
 8003982:	2b00      	cmp	r3, #0
 8003984:	d030      	beq.n	80039e8 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	695b      	ldr	r3, [r3, #20]
 800398a:	2b00      	cmp	r3, #0
 800398c:	d016      	beq.n	80039bc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800398e:	4b30      	ldr	r3, [pc, #192]	; (8003a50 <HAL_RCC_OscConfig+0x2b4>)
 8003990:	2201      	movs	r2, #1
 8003992:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003994:	f7fe fb46 	bl	8002024 <HAL_GetTick>
 8003998:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800399a:	e008      	b.n	80039ae <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800399c:	f7fe fb42 	bl	8002024 <HAL_GetTick>
 80039a0:	4602      	mov	r2, r0
 80039a2:	693b      	ldr	r3, [r7, #16]
 80039a4:	1ad3      	subs	r3, r2, r3
 80039a6:	2b02      	cmp	r3, #2
 80039a8:	d901      	bls.n	80039ae <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80039aa:	2303      	movs	r3, #3
 80039ac:	e164      	b.n	8003c78 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80039ae:	4b26      	ldr	r3, [pc, #152]	; (8003a48 <HAL_RCC_OscConfig+0x2ac>)
 80039b0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80039b2:	f003 0302 	and.w	r3, r3, #2
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d0f0      	beq.n	800399c <HAL_RCC_OscConfig+0x200>
 80039ba:	e015      	b.n	80039e8 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80039bc:	4b24      	ldr	r3, [pc, #144]	; (8003a50 <HAL_RCC_OscConfig+0x2b4>)
 80039be:	2200      	movs	r2, #0
 80039c0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80039c2:	f7fe fb2f 	bl	8002024 <HAL_GetTick>
 80039c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80039c8:	e008      	b.n	80039dc <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80039ca:	f7fe fb2b 	bl	8002024 <HAL_GetTick>
 80039ce:	4602      	mov	r2, r0
 80039d0:	693b      	ldr	r3, [r7, #16]
 80039d2:	1ad3      	subs	r3, r2, r3
 80039d4:	2b02      	cmp	r3, #2
 80039d6:	d901      	bls.n	80039dc <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80039d8:	2303      	movs	r3, #3
 80039da:	e14d      	b.n	8003c78 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80039dc:	4b1a      	ldr	r3, [pc, #104]	; (8003a48 <HAL_RCC_OscConfig+0x2ac>)
 80039de:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80039e0:	f003 0302 	and.w	r3, r3, #2
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d1f0      	bne.n	80039ca <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	f003 0304 	and.w	r3, r3, #4
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	f000 80a0 	beq.w	8003b36 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80039f6:	2300      	movs	r3, #0
 80039f8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80039fa:	4b13      	ldr	r3, [pc, #76]	; (8003a48 <HAL_RCC_OscConfig+0x2ac>)
 80039fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d10f      	bne.n	8003a26 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003a06:	2300      	movs	r3, #0
 8003a08:	60bb      	str	r3, [r7, #8]
 8003a0a:	4b0f      	ldr	r3, [pc, #60]	; (8003a48 <HAL_RCC_OscConfig+0x2ac>)
 8003a0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a0e:	4a0e      	ldr	r2, [pc, #56]	; (8003a48 <HAL_RCC_OscConfig+0x2ac>)
 8003a10:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003a14:	6413      	str	r3, [r2, #64]	; 0x40
 8003a16:	4b0c      	ldr	r3, [pc, #48]	; (8003a48 <HAL_RCC_OscConfig+0x2ac>)
 8003a18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a1e:	60bb      	str	r3, [r7, #8]
 8003a20:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003a22:	2301      	movs	r3, #1
 8003a24:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a26:	4b0b      	ldr	r3, [pc, #44]	; (8003a54 <HAL_RCC_OscConfig+0x2b8>)
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d121      	bne.n	8003a76 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003a32:	4b08      	ldr	r3, [pc, #32]	; (8003a54 <HAL_RCC_OscConfig+0x2b8>)
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	4a07      	ldr	r2, [pc, #28]	; (8003a54 <HAL_RCC_OscConfig+0x2b8>)
 8003a38:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003a3c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003a3e:	f7fe faf1 	bl	8002024 <HAL_GetTick>
 8003a42:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a44:	e011      	b.n	8003a6a <HAL_RCC_OscConfig+0x2ce>
 8003a46:	bf00      	nop
 8003a48:	40023800 	.word	0x40023800
 8003a4c:	42470000 	.word	0x42470000
 8003a50:	42470e80 	.word	0x42470e80
 8003a54:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003a58:	f7fe fae4 	bl	8002024 <HAL_GetTick>
 8003a5c:	4602      	mov	r2, r0
 8003a5e:	693b      	ldr	r3, [r7, #16]
 8003a60:	1ad3      	subs	r3, r2, r3
 8003a62:	2b02      	cmp	r3, #2
 8003a64:	d901      	bls.n	8003a6a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8003a66:	2303      	movs	r3, #3
 8003a68:	e106      	b.n	8003c78 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a6a:	4b85      	ldr	r3, [pc, #532]	; (8003c80 <HAL_RCC_OscConfig+0x4e4>)
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d0f0      	beq.n	8003a58 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	689b      	ldr	r3, [r3, #8]
 8003a7a:	2b01      	cmp	r3, #1
 8003a7c:	d106      	bne.n	8003a8c <HAL_RCC_OscConfig+0x2f0>
 8003a7e:	4b81      	ldr	r3, [pc, #516]	; (8003c84 <HAL_RCC_OscConfig+0x4e8>)
 8003a80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a82:	4a80      	ldr	r2, [pc, #512]	; (8003c84 <HAL_RCC_OscConfig+0x4e8>)
 8003a84:	f043 0301 	orr.w	r3, r3, #1
 8003a88:	6713      	str	r3, [r2, #112]	; 0x70
 8003a8a:	e01c      	b.n	8003ac6 <HAL_RCC_OscConfig+0x32a>
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	689b      	ldr	r3, [r3, #8]
 8003a90:	2b05      	cmp	r3, #5
 8003a92:	d10c      	bne.n	8003aae <HAL_RCC_OscConfig+0x312>
 8003a94:	4b7b      	ldr	r3, [pc, #492]	; (8003c84 <HAL_RCC_OscConfig+0x4e8>)
 8003a96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a98:	4a7a      	ldr	r2, [pc, #488]	; (8003c84 <HAL_RCC_OscConfig+0x4e8>)
 8003a9a:	f043 0304 	orr.w	r3, r3, #4
 8003a9e:	6713      	str	r3, [r2, #112]	; 0x70
 8003aa0:	4b78      	ldr	r3, [pc, #480]	; (8003c84 <HAL_RCC_OscConfig+0x4e8>)
 8003aa2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003aa4:	4a77      	ldr	r2, [pc, #476]	; (8003c84 <HAL_RCC_OscConfig+0x4e8>)
 8003aa6:	f043 0301 	orr.w	r3, r3, #1
 8003aaa:	6713      	str	r3, [r2, #112]	; 0x70
 8003aac:	e00b      	b.n	8003ac6 <HAL_RCC_OscConfig+0x32a>
 8003aae:	4b75      	ldr	r3, [pc, #468]	; (8003c84 <HAL_RCC_OscConfig+0x4e8>)
 8003ab0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ab2:	4a74      	ldr	r2, [pc, #464]	; (8003c84 <HAL_RCC_OscConfig+0x4e8>)
 8003ab4:	f023 0301 	bic.w	r3, r3, #1
 8003ab8:	6713      	str	r3, [r2, #112]	; 0x70
 8003aba:	4b72      	ldr	r3, [pc, #456]	; (8003c84 <HAL_RCC_OscConfig+0x4e8>)
 8003abc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003abe:	4a71      	ldr	r2, [pc, #452]	; (8003c84 <HAL_RCC_OscConfig+0x4e8>)
 8003ac0:	f023 0304 	bic.w	r3, r3, #4
 8003ac4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	689b      	ldr	r3, [r3, #8]
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d015      	beq.n	8003afa <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ace:	f7fe faa9 	bl	8002024 <HAL_GetTick>
 8003ad2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ad4:	e00a      	b.n	8003aec <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003ad6:	f7fe faa5 	bl	8002024 <HAL_GetTick>
 8003ada:	4602      	mov	r2, r0
 8003adc:	693b      	ldr	r3, [r7, #16]
 8003ade:	1ad3      	subs	r3, r2, r3
 8003ae0:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ae4:	4293      	cmp	r3, r2
 8003ae6:	d901      	bls.n	8003aec <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8003ae8:	2303      	movs	r3, #3
 8003aea:	e0c5      	b.n	8003c78 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003aec:	4b65      	ldr	r3, [pc, #404]	; (8003c84 <HAL_RCC_OscConfig+0x4e8>)
 8003aee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003af0:	f003 0302 	and.w	r3, r3, #2
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d0ee      	beq.n	8003ad6 <HAL_RCC_OscConfig+0x33a>
 8003af8:	e014      	b.n	8003b24 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003afa:	f7fe fa93 	bl	8002024 <HAL_GetTick>
 8003afe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003b00:	e00a      	b.n	8003b18 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003b02:	f7fe fa8f 	bl	8002024 <HAL_GetTick>
 8003b06:	4602      	mov	r2, r0
 8003b08:	693b      	ldr	r3, [r7, #16]
 8003b0a:	1ad3      	subs	r3, r2, r3
 8003b0c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b10:	4293      	cmp	r3, r2
 8003b12:	d901      	bls.n	8003b18 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8003b14:	2303      	movs	r3, #3
 8003b16:	e0af      	b.n	8003c78 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003b18:	4b5a      	ldr	r3, [pc, #360]	; (8003c84 <HAL_RCC_OscConfig+0x4e8>)
 8003b1a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b1c:	f003 0302 	and.w	r3, r3, #2
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d1ee      	bne.n	8003b02 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003b24:	7dfb      	ldrb	r3, [r7, #23]
 8003b26:	2b01      	cmp	r3, #1
 8003b28:	d105      	bne.n	8003b36 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003b2a:	4b56      	ldr	r3, [pc, #344]	; (8003c84 <HAL_RCC_OscConfig+0x4e8>)
 8003b2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b2e:	4a55      	ldr	r2, [pc, #340]	; (8003c84 <HAL_RCC_OscConfig+0x4e8>)
 8003b30:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003b34:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	699b      	ldr	r3, [r3, #24]
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	f000 809b 	beq.w	8003c76 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003b40:	4b50      	ldr	r3, [pc, #320]	; (8003c84 <HAL_RCC_OscConfig+0x4e8>)
 8003b42:	689b      	ldr	r3, [r3, #8]
 8003b44:	f003 030c 	and.w	r3, r3, #12
 8003b48:	2b08      	cmp	r3, #8
 8003b4a:	d05c      	beq.n	8003c06 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	699b      	ldr	r3, [r3, #24]
 8003b50:	2b02      	cmp	r3, #2
 8003b52:	d141      	bne.n	8003bd8 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003b54:	4b4c      	ldr	r3, [pc, #304]	; (8003c88 <HAL_RCC_OscConfig+0x4ec>)
 8003b56:	2200      	movs	r2, #0
 8003b58:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b5a:	f7fe fa63 	bl	8002024 <HAL_GetTick>
 8003b5e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003b60:	e008      	b.n	8003b74 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003b62:	f7fe fa5f 	bl	8002024 <HAL_GetTick>
 8003b66:	4602      	mov	r2, r0
 8003b68:	693b      	ldr	r3, [r7, #16]
 8003b6a:	1ad3      	subs	r3, r2, r3
 8003b6c:	2b02      	cmp	r3, #2
 8003b6e:	d901      	bls.n	8003b74 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8003b70:	2303      	movs	r3, #3
 8003b72:	e081      	b.n	8003c78 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003b74:	4b43      	ldr	r3, [pc, #268]	; (8003c84 <HAL_RCC_OscConfig+0x4e8>)
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d1f0      	bne.n	8003b62 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	69da      	ldr	r2, [r3, #28]
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	6a1b      	ldr	r3, [r3, #32]
 8003b88:	431a      	orrs	r2, r3
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b8e:	019b      	lsls	r3, r3, #6
 8003b90:	431a      	orrs	r2, r3
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b96:	085b      	lsrs	r3, r3, #1
 8003b98:	3b01      	subs	r3, #1
 8003b9a:	041b      	lsls	r3, r3, #16
 8003b9c:	431a      	orrs	r2, r3
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ba2:	061b      	lsls	r3, r3, #24
 8003ba4:	4937      	ldr	r1, [pc, #220]	; (8003c84 <HAL_RCC_OscConfig+0x4e8>)
 8003ba6:	4313      	orrs	r3, r2
 8003ba8:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003baa:	4b37      	ldr	r3, [pc, #220]	; (8003c88 <HAL_RCC_OscConfig+0x4ec>)
 8003bac:	2201      	movs	r2, #1
 8003bae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003bb0:	f7fe fa38 	bl	8002024 <HAL_GetTick>
 8003bb4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003bb6:	e008      	b.n	8003bca <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003bb8:	f7fe fa34 	bl	8002024 <HAL_GetTick>
 8003bbc:	4602      	mov	r2, r0
 8003bbe:	693b      	ldr	r3, [r7, #16]
 8003bc0:	1ad3      	subs	r3, r2, r3
 8003bc2:	2b02      	cmp	r3, #2
 8003bc4:	d901      	bls.n	8003bca <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8003bc6:	2303      	movs	r3, #3
 8003bc8:	e056      	b.n	8003c78 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003bca:	4b2e      	ldr	r3, [pc, #184]	; (8003c84 <HAL_RCC_OscConfig+0x4e8>)
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d0f0      	beq.n	8003bb8 <HAL_RCC_OscConfig+0x41c>
 8003bd6:	e04e      	b.n	8003c76 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003bd8:	4b2b      	ldr	r3, [pc, #172]	; (8003c88 <HAL_RCC_OscConfig+0x4ec>)
 8003bda:	2200      	movs	r2, #0
 8003bdc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003bde:	f7fe fa21 	bl	8002024 <HAL_GetTick>
 8003be2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003be4:	e008      	b.n	8003bf8 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003be6:	f7fe fa1d 	bl	8002024 <HAL_GetTick>
 8003bea:	4602      	mov	r2, r0
 8003bec:	693b      	ldr	r3, [r7, #16]
 8003bee:	1ad3      	subs	r3, r2, r3
 8003bf0:	2b02      	cmp	r3, #2
 8003bf2:	d901      	bls.n	8003bf8 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8003bf4:	2303      	movs	r3, #3
 8003bf6:	e03f      	b.n	8003c78 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003bf8:	4b22      	ldr	r3, [pc, #136]	; (8003c84 <HAL_RCC_OscConfig+0x4e8>)
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d1f0      	bne.n	8003be6 <HAL_RCC_OscConfig+0x44a>
 8003c04:	e037      	b.n	8003c76 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	699b      	ldr	r3, [r3, #24]
 8003c0a:	2b01      	cmp	r3, #1
 8003c0c:	d101      	bne.n	8003c12 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8003c0e:	2301      	movs	r3, #1
 8003c10:	e032      	b.n	8003c78 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003c12:	4b1c      	ldr	r3, [pc, #112]	; (8003c84 <HAL_RCC_OscConfig+0x4e8>)
 8003c14:	685b      	ldr	r3, [r3, #4]
 8003c16:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	699b      	ldr	r3, [r3, #24]
 8003c1c:	2b01      	cmp	r3, #1
 8003c1e:	d028      	beq.n	8003c72 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003c2a:	429a      	cmp	r2, r3
 8003c2c:	d121      	bne.n	8003c72 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003c38:	429a      	cmp	r2, r3
 8003c3a:	d11a      	bne.n	8003c72 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003c3c:	68fa      	ldr	r2, [r7, #12]
 8003c3e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003c42:	4013      	ands	r3, r2
 8003c44:	687a      	ldr	r2, [r7, #4]
 8003c46:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003c48:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003c4a:	4293      	cmp	r3, r2
 8003c4c:	d111      	bne.n	8003c72 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c58:	085b      	lsrs	r3, r3, #1
 8003c5a:	3b01      	subs	r3, #1
 8003c5c:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003c5e:	429a      	cmp	r2, r3
 8003c60:	d107      	bne.n	8003c72 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c6c:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003c6e:	429a      	cmp	r2, r3
 8003c70:	d001      	beq.n	8003c76 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8003c72:	2301      	movs	r3, #1
 8003c74:	e000      	b.n	8003c78 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8003c76:	2300      	movs	r3, #0
}
 8003c78:	4618      	mov	r0, r3
 8003c7a:	3718      	adds	r7, #24
 8003c7c:	46bd      	mov	sp, r7
 8003c7e:	bd80      	pop	{r7, pc}
 8003c80:	40007000 	.word	0x40007000
 8003c84:	40023800 	.word	0x40023800
 8003c88:	42470060 	.word	0x42470060

08003c8c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003c8c:	b580      	push	{r7, lr}
 8003c8e:	b084      	sub	sp, #16
 8003c90:	af00      	add	r7, sp, #0
 8003c92:	6078      	str	r0, [r7, #4]
 8003c94:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d101      	bne.n	8003ca0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003c9c:	2301      	movs	r3, #1
 8003c9e:	e0cc      	b.n	8003e3a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003ca0:	4b68      	ldr	r3, [pc, #416]	; (8003e44 <HAL_RCC_ClockConfig+0x1b8>)
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	f003 0307 	and.w	r3, r3, #7
 8003ca8:	683a      	ldr	r2, [r7, #0]
 8003caa:	429a      	cmp	r2, r3
 8003cac:	d90c      	bls.n	8003cc8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003cae:	4b65      	ldr	r3, [pc, #404]	; (8003e44 <HAL_RCC_ClockConfig+0x1b8>)
 8003cb0:	683a      	ldr	r2, [r7, #0]
 8003cb2:	b2d2      	uxtb	r2, r2
 8003cb4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003cb6:	4b63      	ldr	r3, [pc, #396]	; (8003e44 <HAL_RCC_ClockConfig+0x1b8>)
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	f003 0307 	and.w	r3, r3, #7
 8003cbe:	683a      	ldr	r2, [r7, #0]
 8003cc0:	429a      	cmp	r2, r3
 8003cc2:	d001      	beq.n	8003cc8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003cc4:	2301      	movs	r3, #1
 8003cc6:	e0b8      	b.n	8003e3a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	f003 0302 	and.w	r3, r3, #2
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d020      	beq.n	8003d16 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	f003 0304 	and.w	r3, r3, #4
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d005      	beq.n	8003cec <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003ce0:	4b59      	ldr	r3, [pc, #356]	; (8003e48 <HAL_RCC_ClockConfig+0x1bc>)
 8003ce2:	689b      	ldr	r3, [r3, #8]
 8003ce4:	4a58      	ldr	r2, [pc, #352]	; (8003e48 <HAL_RCC_ClockConfig+0x1bc>)
 8003ce6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003cea:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	f003 0308 	and.w	r3, r3, #8
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d005      	beq.n	8003d04 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003cf8:	4b53      	ldr	r3, [pc, #332]	; (8003e48 <HAL_RCC_ClockConfig+0x1bc>)
 8003cfa:	689b      	ldr	r3, [r3, #8]
 8003cfc:	4a52      	ldr	r2, [pc, #328]	; (8003e48 <HAL_RCC_ClockConfig+0x1bc>)
 8003cfe:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003d02:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003d04:	4b50      	ldr	r3, [pc, #320]	; (8003e48 <HAL_RCC_ClockConfig+0x1bc>)
 8003d06:	689b      	ldr	r3, [r3, #8]
 8003d08:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	689b      	ldr	r3, [r3, #8]
 8003d10:	494d      	ldr	r1, [pc, #308]	; (8003e48 <HAL_RCC_ClockConfig+0x1bc>)
 8003d12:	4313      	orrs	r3, r2
 8003d14:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	f003 0301 	and.w	r3, r3, #1
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d044      	beq.n	8003dac <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	685b      	ldr	r3, [r3, #4]
 8003d26:	2b01      	cmp	r3, #1
 8003d28:	d107      	bne.n	8003d3a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003d2a:	4b47      	ldr	r3, [pc, #284]	; (8003e48 <HAL_RCC_ClockConfig+0x1bc>)
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d119      	bne.n	8003d6a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003d36:	2301      	movs	r3, #1
 8003d38:	e07f      	b.n	8003e3a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	685b      	ldr	r3, [r3, #4]
 8003d3e:	2b02      	cmp	r3, #2
 8003d40:	d003      	beq.n	8003d4a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003d46:	2b03      	cmp	r3, #3
 8003d48:	d107      	bne.n	8003d5a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003d4a:	4b3f      	ldr	r3, [pc, #252]	; (8003e48 <HAL_RCC_ClockConfig+0x1bc>)
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d109      	bne.n	8003d6a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003d56:	2301      	movs	r3, #1
 8003d58:	e06f      	b.n	8003e3a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d5a:	4b3b      	ldr	r3, [pc, #236]	; (8003e48 <HAL_RCC_ClockConfig+0x1bc>)
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	f003 0302 	and.w	r3, r3, #2
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d101      	bne.n	8003d6a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003d66:	2301      	movs	r3, #1
 8003d68:	e067      	b.n	8003e3a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003d6a:	4b37      	ldr	r3, [pc, #220]	; (8003e48 <HAL_RCC_ClockConfig+0x1bc>)
 8003d6c:	689b      	ldr	r3, [r3, #8]
 8003d6e:	f023 0203 	bic.w	r2, r3, #3
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	685b      	ldr	r3, [r3, #4]
 8003d76:	4934      	ldr	r1, [pc, #208]	; (8003e48 <HAL_RCC_ClockConfig+0x1bc>)
 8003d78:	4313      	orrs	r3, r2
 8003d7a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003d7c:	f7fe f952 	bl	8002024 <HAL_GetTick>
 8003d80:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d82:	e00a      	b.n	8003d9a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003d84:	f7fe f94e 	bl	8002024 <HAL_GetTick>
 8003d88:	4602      	mov	r2, r0
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	1ad3      	subs	r3, r2, r3
 8003d8e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d92:	4293      	cmp	r3, r2
 8003d94:	d901      	bls.n	8003d9a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003d96:	2303      	movs	r3, #3
 8003d98:	e04f      	b.n	8003e3a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d9a:	4b2b      	ldr	r3, [pc, #172]	; (8003e48 <HAL_RCC_ClockConfig+0x1bc>)
 8003d9c:	689b      	ldr	r3, [r3, #8]
 8003d9e:	f003 020c 	and.w	r2, r3, #12
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	685b      	ldr	r3, [r3, #4]
 8003da6:	009b      	lsls	r3, r3, #2
 8003da8:	429a      	cmp	r2, r3
 8003daa:	d1eb      	bne.n	8003d84 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003dac:	4b25      	ldr	r3, [pc, #148]	; (8003e44 <HAL_RCC_ClockConfig+0x1b8>)
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	f003 0307 	and.w	r3, r3, #7
 8003db4:	683a      	ldr	r2, [r7, #0]
 8003db6:	429a      	cmp	r2, r3
 8003db8:	d20c      	bcs.n	8003dd4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003dba:	4b22      	ldr	r3, [pc, #136]	; (8003e44 <HAL_RCC_ClockConfig+0x1b8>)
 8003dbc:	683a      	ldr	r2, [r7, #0]
 8003dbe:	b2d2      	uxtb	r2, r2
 8003dc0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003dc2:	4b20      	ldr	r3, [pc, #128]	; (8003e44 <HAL_RCC_ClockConfig+0x1b8>)
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	f003 0307 	and.w	r3, r3, #7
 8003dca:	683a      	ldr	r2, [r7, #0]
 8003dcc:	429a      	cmp	r2, r3
 8003dce:	d001      	beq.n	8003dd4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003dd0:	2301      	movs	r3, #1
 8003dd2:	e032      	b.n	8003e3a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	f003 0304 	and.w	r3, r3, #4
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d008      	beq.n	8003df2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003de0:	4b19      	ldr	r3, [pc, #100]	; (8003e48 <HAL_RCC_ClockConfig+0x1bc>)
 8003de2:	689b      	ldr	r3, [r3, #8]
 8003de4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	68db      	ldr	r3, [r3, #12]
 8003dec:	4916      	ldr	r1, [pc, #88]	; (8003e48 <HAL_RCC_ClockConfig+0x1bc>)
 8003dee:	4313      	orrs	r3, r2
 8003df0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	f003 0308 	and.w	r3, r3, #8
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d009      	beq.n	8003e12 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003dfe:	4b12      	ldr	r3, [pc, #72]	; (8003e48 <HAL_RCC_ClockConfig+0x1bc>)
 8003e00:	689b      	ldr	r3, [r3, #8]
 8003e02:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	691b      	ldr	r3, [r3, #16]
 8003e0a:	00db      	lsls	r3, r3, #3
 8003e0c:	490e      	ldr	r1, [pc, #56]	; (8003e48 <HAL_RCC_ClockConfig+0x1bc>)
 8003e0e:	4313      	orrs	r3, r2
 8003e10:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003e12:	f000 f821 	bl	8003e58 <HAL_RCC_GetSysClockFreq>
 8003e16:	4602      	mov	r2, r0
 8003e18:	4b0b      	ldr	r3, [pc, #44]	; (8003e48 <HAL_RCC_ClockConfig+0x1bc>)
 8003e1a:	689b      	ldr	r3, [r3, #8]
 8003e1c:	091b      	lsrs	r3, r3, #4
 8003e1e:	f003 030f 	and.w	r3, r3, #15
 8003e22:	490a      	ldr	r1, [pc, #40]	; (8003e4c <HAL_RCC_ClockConfig+0x1c0>)
 8003e24:	5ccb      	ldrb	r3, [r1, r3]
 8003e26:	fa22 f303 	lsr.w	r3, r2, r3
 8003e2a:	4a09      	ldr	r2, [pc, #36]	; (8003e50 <HAL_RCC_ClockConfig+0x1c4>)
 8003e2c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003e2e:	4b09      	ldr	r3, [pc, #36]	; (8003e54 <HAL_RCC_ClockConfig+0x1c8>)
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	4618      	mov	r0, r3
 8003e34:	f7fe f8b2 	bl	8001f9c <HAL_InitTick>

  return HAL_OK;
 8003e38:	2300      	movs	r3, #0
}
 8003e3a:	4618      	mov	r0, r3
 8003e3c:	3710      	adds	r7, #16
 8003e3e:	46bd      	mov	sp, r7
 8003e40:	bd80      	pop	{r7, pc}
 8003e42:	bf00      	nop
 8003e44:	40023c00 	.word	0x40023c00
 8003e48:	40023800 	.word	0x40023800
 8003e4c:	08006610 	.word	0x08006610
 8003e50:	20000004 	.word	0x20000004
 8003e54:	20000008 	.word	0x20000008

08003e58 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003e58:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8003e5c:	b084      	sub	sp, #16
 8003e5e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003e60:	2300      	movs	r3, #0
 8003e62:	607b      	str	r3, [r7, #4]
 8003e64:	2300      	movs	r3, #0
 8003e66:	60fb      	str	r3, [r7, #12]
 8003e68:	2300      	movs	r3, #0
 8003e6a:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8003e6c:	2300      	movs	r3, #0
 8003e6e:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003e70:	4b67      	ldr	r3, [pc, #412]	; (8004010 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003e72:	689b      	ldr	r3, [r3, #8]
 8003e74:	f003 030c 	and.w	r3, r3, #12
 8003e78:	2b08      	cmp	r3, #8
 8003e7a:	d00d      	beq.n	8003e98 <HAL_RCC_GetSysClockFreq+0x40>
 8003e7c:	2b08      	cmp	r3, #8
 8003e7e:	f200 80bd 	bhi.w	8003ffc <HAL_RCC_GetSysClockFreq+0x1a4>
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d002      	beq.n	8003e8c <HAL_RCC_GetSysClockFreq+0x34>
 8003e86:	2b04      	cmp	r3, #4
 8003e88:	d003      	beq.n	8003e92 <HAL_RCC_GetSysClockFreq+0x3a>
 8003e8a:	e0b7      	b.n	8003ffc <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003e8c:	4b61      	ldr	r3, [pc, #388]	; (8004014 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8003e8e:	60bb      	str	r3, [r7, #8]
       break;
 8003e90:	e0b7      	b.n	8004002 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003e92:	4b61      	ldr	r3, [pc, #388]	; (8004018 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8003e94:	60bb      	str	r3, [r7, #8]
      break;
 8003e96:	e0b4      	b.n	8004002 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003e98:	4b5d      	ldr	r3, [pc, #372]	; (8004010 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003e9a:	685b      	ldr	r3, [r3, #4]
 8003e9c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003ea0:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003ea2:	4b5b      	ldr	r3, [pc, #364]	; (8004010 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003ea4:	685b      	ldr	r3, [r3, #4]
 8003ea6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d04d      	beq.n	8003f4a <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003eae:	4b58      	ldr	r3, [pc, #352]	; (8004010 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003eb0:	685b      	ldr	r3, [r3, #4]
 8003eb2:	099b      	lsrs	r3, r3, #6
 8003eb4:	461a      	mov	r2, r3
 8003eb6:	f04f 0300 	mov.w	r3, #0
 8003eba:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003ebe:	f04f 0100 	mov.w	r1, #0
 8003ec2:	ea02 0800 	and.w	r8, r2, r0
 8003ec6:	ea03 0901 	and.w	r9, r3, r1
 8003eca:	4640      	mov	r0, r8
 8003ecc:	4649      	mov	r1, r9
 8003ece:	f04f 0200 	mov.w	r2, #0
 8003ed2:	f04f 0300 	mov.w	r3, #0
 8003ed6:	014b      	lsls	r3, r1, #5
 8003ed8:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003edc:	0142      	lsls	r2, r0, #5
 8003ede:	4610      	mov	r0, r2
 8003ee0:	4619      	mov	r1, r3
 8003ee2:	ebb0 0008 	subs.w	r0, r0, r8
 8003ee6:	eb61 0109 	sbc.w	r1, r1, r9
 8003eea:	f04f 0200 	mov.w	r2, #0
 8003eee:	f04f 0300 	mov.w	r3, #0
 8003ef2:	018b      	lsls	r3, r1, #6
 8003ef4:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003ef8:	0182      	lsls	r2, r0, #6
 8003efa:	1a12      	subs	r2, r2, r0
 8003efc:	eb63 0301 	sbc.w	r3, r3, r1
 8003f00:	f04f 0000 	mov.w	r0, #0
 8003f04:	f04f 0100 	mov.w	r1, #0
 8003f08:	00d9      	lsls	r1, r3, #3
 8003f0a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003f0e:	00d0      	lsls	r0, r2, #3
 8003f10:	4602      	mov	r2, r0
 8003f12:	460b      	mov	r3, r1
 8003f14:	eb12 0208 	adds.w	r2, r2, r8
 8003f18:	eb43 0309 	adc.w	r3, r3, r9
 8003f1c:	f04f 0000 	mov.w	r0, #0
 8003f20:	f04f 0100 	mov.w	r1, #0
 8003f24:	0259      	lsls	r1, r3, #9
 8003f26:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8003f2a:	0250      	lsls	r0, r2, #9
 8003f2c:	4602      	mov	r2, r0
 8003f2e:	460b      	mov	r3, r1
 8003f30:	4610      	mov	r0, r2
 8003f32:	4619      	mov	r1, r3
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	461a      	mov	r2, r3
 8003f38:	f04f 0300 	mov.w	r3, #0
 8003f3c:	f7fc ff48 	bl	8000dd0 <__aeabi_uldivmod>
 8003f40:	4602      	mov	r2, r0
 8003f42:	460b      	mov	r3, r1
 8003f44:	4613      	mov	r3, r2
 8003f46:	60fb      	str	r3, [r7, #12]
 8003f48:	e04a      	b.n	8003fe0 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003f4a:	4b31      	ldr	r3, [pc, #196]	; (8004010 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003f4c:	685b      	ldr	r3, [r3, #4]
 8003f4e:	099b      	lsrs	r3, r3, #6
 8003f50:	461a      	mov	r2, r3
 8003f52:	f04f 0300 	mov.w	r3, #0
 8003f56:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003f5a:	f04f 0100 	mov.w	r1, #0
 8003f5e:	ea02 0400 	and.w	r4, r2, r0
 8003f62:	ea03 0501 	and.w	r5, r3, r1
 8003f66:	4620      	mov	r0, r4
 8003f68:	4629      	mov	r1, r5
 8003f6a:	f04f 0200 	mov.w	r2, #0
 8003f6e:	f04f 0300 	mov.w	r3, #0
 8003f72:	014b      	lsls	r3, r1, #5
 8003f74:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003f78:	0142      	lsls	r2, r0, #5
 8003f7a:	4610      	mov	r0, r2
 8003f7c:	4619      	mov	r1, r3
 8003f7e:	1b00      	subs	r0, r0, r4
 8003f80:	eb61 0105 	sbc.w	r1, r1, r5
 8003f84:	f04f 0200 	mov.w	r2, #0
 8003f88:	f04f 0300 	mov.w	r3, #0
 8003f8c:	018b      	lsls	r3, r1, #6
 8003f8e:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003f92:	0182      	lsls	r2, r0, #6
 8003f94:	1a12      	subs	r2, r2, r0
 8003f96:	eb63 0301 	sbc.w	r3, r3, r1
 8003f9a:	f04f 0000 	mov.w	r0, #0
 8003f9e:	f04f 0100 	mov.w	r1, #0
 8003fa2:	00d9      	lsls	r1, r3, #3
 8003fa4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003fa8:	00d0      	lsls	r0, r2, #3
 8003faa:	4602      	mov	r2, r0
 8003fac:	460b      	mov	r3, r1
 8003fae:	1912      	adds	r2, r2, r4
 8003fb0:	eb45 0303 	adc.w	r3, r5, r3
 8003fb4:	f04f 0000 	mov.w	r0, #0
 8003fb8:	f04f 0100 	mov.w	r1, #0
 8003fbc:	0299      	lsls	r1, r3, #10
 8003fbe:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8003fc2:	0290      	lsls	r0, r2, #10
 8003fc4:	4602      	mov	r2, r0
 8003fc6:	460b      	mov	r3, r1
 8003fc8:	4610      	mov	r0, r2
 8003fca:	4619      	mov	r1, r3
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	461a      	mov	r2, r3
 8003fd0:	f04f 0300 	mov.w	r3, #0
 8003fd4:	f7fc fefc 	bl	8000dd0 <__aeabi_uldivmod>
 8003fd8:	4602      	mov	r2, r0
 8003fda:	460b      	mov	r3, r1
 8003fdc:	4613      	mov	r3, r2
 8003fde:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003fe0:	4b0b      	ldr	r3, [pc, #44]	; (8004010 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003fe2:	685b      	ldr	r3, [r3, #4]
 8003fe4:	0c1b      	lsrs	r3, r3, #16
 8003fe6:	f003 0303 	and.w	r3, r3, #3
 8003fea:	3301      	adds	r3, #1
 8003fec:	005b      	lsls	r3, r3, #1
 8003fee:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8003ff0:	68fa      	ldr	r2, [r7, #12]
 8003ff2:	683b      	ldr	r3, [r7, #0]
 8003ff4:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ff8:	60bb      	str	r3, [r7, #8]
      break;
 8003ffa:	e002      	b.n	8004002 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003ffc:	4b05      	ldr	r3, [pc, #20]	; (8004014 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8003ffe:	60bb      	str	r3, [r7, #8]
      break;
 8004000:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004002:	68bb      	ldr	r3, [r7, #8]
}
 8004004:	4618      	mov	r0, r3
 8004006:	3710      	adds	r7, #16
 8004008:	46bd      	mov	sp, r7
 800400a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800400e:	bf00      	nop
 8004010:	40023800 	.word	0x40023800
 8004014:	00f42400 	.word	0x00f42400
 8004018:	007a1200 	.word	0x007a1200

0800401c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800401c:	b480      	push	{r7}
 800401e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004020:	4b03      	ldr	r3, [pc, #12]	; (8004030 <HAL_RCC_GetHCLKFreq+0x14>)
 8004022:	681b      	ldr	r3, [r3, #0]
}
 8004024:	4618      	mov	r0, r3
 8004026:	46bd      	mov	sp, r7
 8004028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800402c:	4770      	bx	lr
 800402e:	bf00      	nop
 8004030:	20000004 	.word	0x20000004

08004034 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004034:	b580      	push	{r7, lr}
 8004036:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004038:	f7ff fff0 	bl	800401c <HAL_RCC_GetHCLKFreq>
 800403c:	4602      	mov	r2, r0
 800403e:	4b05      	ldr	r3, [pc, #20]	; (8004054 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004040:	689b      	ldr	r3, [r3, #8]
 8004042:	0a9b      	lsrs	r3, r3, #10
 8004044:	f003 0307 	and.w	r3, r3, #7
 8004048:	4903      	ldr	r1, [pc, #12]	; (8004058 <HAL_RCC_GetPCLK1Freq+0x24>)
 800404a:	5ccb      	ldrb	r3, [r1, r3]
 800404c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004050:	4618      	mov	r0, r3
 8004052:	bd80      	pop	{r7, pc}
 8004054:	40023800 	.word	0x40023800
 8004058:	08006620 	.word	0x08006620

0800405c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800405c:	b580      	push	{r7, lr}
 800405e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004060:	f7ff ffdc 	bl	800401c <HAL_RCC_GetHCLKFreq>
 8004064:	4602      	mov	r2, r0
 8004066:	4b05      	ldr	r3, [pc, #20]	; (800407c <HAL_RCC_GetPCLK2Freq+0x20>)
 8004068:	689b      	ldr	r3, [r3, #8]
 800406a:	0b5b      	lsrs	r3, r3, #13
 800406c:	f003 0307 	and.w	r3, r3, #7
 8004070:	4903      	ldr	r1, [pc, #12]	; (8004080 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004072:	5ccb      	ldrb	r3, [r1, r3]
 8004074:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004078:	4618      	mov	r0, r3
 800407a:	bd80      	pop	{r7, pc}
 800407c:	40023800 	.word	0x40023800
 8004080:	08006620 	.word	0x08006620

08004084 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004084:	b580      	push	{r7, lr}
 8004086:	b082      	sub	sp, #8
 8004088:	af00      	add	r7, sp, #0
 800408a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	2b00      	cmp	r3, #0
 8004090:	d101      	bne.n	8004096 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004092:	2301      	movs	r3, #1
 8004094:	e07b      	b.n	800418e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800409a:	2b00      	cmp	r3, #0
 800409c:	d108      	bne.n	80040b0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	685b      	ldr	r3, [r3, #4]
 80040a2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80040a6:	d009      	beq.n	80040bc <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	2200      	movs	r2, #0
 80040ac:	61da      	str	r2, [r3, #28]
 80040ae:	e005      	b.n	80040bc <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	2200      	movs	r2, #0
 80040b4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	2200      	movs	r2, #0
 80040ba:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	2200      	movs	r2, #0
 80040c0:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80040c8:	b2db      	uxtb	r3, r3
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d106      	bne.n	80040dc <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	2200      	movs	r2, #0
 80040d2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80040d6:	6878      	ldr	r0, [r7, #4]
 80040d8:	f7fd fdda 	bl	8001c90 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	2202      	movs	r2, #2
 80040e0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	681a      	ldr	r2, [r3, #0]
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80040f2:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	685b      	ldr	r3, [r3, #4]
 80040f8:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	689b      	ldr	r3, [r3, #8]
 8004100:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004104:	431a      	orrs	r2, r3
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	68db      	ldr	r3, [r3, #12]
 800410a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800410e:	431a      	orrs	r2, r3
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	691b      	ldr	r3, [r3, #16]
 8004114:	f003 0302 	and.w	r3, r3, #2
 8004118:	431a      	orrs	r2, r3
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	695b      	ldr	r3, [r3, #20]
 800411e:	f003 0301 	and.w	r3, r3, #1
 8004122:	431a      	orrs	r2, r3
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	699b      	ldr	r3, [r3, #24]
 8004128:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800412c:	431a      	orrs	r2, r3
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	69db      	ldr	r3, [r3, #28]
 8004132:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004136:	431a      	orrs	r2, r3
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	6a1b      	ldr	r3, [r3, #32]
 800413c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004140:	ea42 0103 	orr.w	r1, r2, r3
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004148:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	430a      	orrs	r2, r1
 8004152:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	699b      	ldr	r3, [r3, #24]
 8004158:	0c1b      	lsrs	r3, r3, #16
 800415a:	f003 0104 	and.w	r1, r3, #4
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004162:	f003 0210 	and.w	r2, r3, #16
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	430a      	orrs	r2, r1
 800416c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	69da      	ldr	r2, [r3, #28]
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800417c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	2200      	movs	r2, #0
 8004182:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	2201      	movs	r2, #1
 8004188:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800418c:	2300      	movs	r3, #0
}
 800418e:	4618      	mov	r0, r3
 8004190:	3708      	adds	r7, #8
 8004192:	46bd      	mov	sp, r7
 8004194:	bd80      	pop	{r7, pc}
	...

08004198 <HAL_SPI_Transmit_IT>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_IT(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8004198:	b480      	push	{r7}
 800419a:	b087      	sub	sp, #28
 800419c:	af00      	add	r7, sp, #0
 800419e:	60f8      	str	r0, [r7, #12]
 80041a0:	60b9      	str	r1, [r7, #8]
 80041a2:	4613      	mov	r3, r2
 80041a4:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 80041a6:	2300      	movs	r3, #0
 80041a8:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80041b0:	2b01      	cmp	r3, #1
 80041b2:	d101      	bne.n	80041b8 <HAL_SPI_Transmit_IT+0x20>
 80041b4:	2302      	movs	r3, #2
 80041b6:	e06f      	b.n	8004298 <HAL_SPI_Transmit_IT+0x100>
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	2201      	movs	r2, #1
 80041bc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if ((pData == NULL) || (Size == 0U))
 80041c0:	68bb      	ldr	r3, [r7, #8]
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d002      	beq.n	80041cc <HAL_SPI_Transmit_IT+0x34>
 80041c6:	88fb      	ldrh	r3, [r7, #6]
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d102      	bne.n	80041d2 <HAL_SPI_Transmit_IT+0x3a>
  {
    errorcode = HAL_ERROR;
 80041cc:	2301      	movs	r3, #1
 80041ce:	75fb      	strb	r3, [r7, #23]
    goto error;
 80041d0:	e05d      	b.n	800428e <HAL_SPI_Transmit_IT+0xf6>
  }

  if (hspi->State != HAL_SPI_STATE_READY)
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80041d8:	b2db      	uxtb	r3, r3
 80041da:	2b01      	cmp	r3, #1
 80041dc:	d002      	beq.n	80041e4 <HAL_SPI_Transmit_IT+0x4c>
  {
    errorcode = HAL_BUSY;
 80041de:	2302      	movs	r3, #2
 80041e0:	75fb      	strb	r3, [r7, #23]
    goto error;
 80041e2:	e054      	b.n	800428e <HAL_SPI_Transmit_IT+0xf6>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	2203      	movs	r2, #3
 80041e8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	2200      	movs	r2, #0
 80041f0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	68ba      	ldr	r2, [r7, #8]
 80041f6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	88fa      	ldrh	r2, [r7, #6]
 80041fc:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	88fa      	ldrh	r2, [r7, #6]
 8004202:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	2200      	movs	r2, #0
 8004208:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	2200      	movs	r2, #0
 800420e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	2200      	movs	r2, #0
 8004214:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	2200      	movs	r2, #0
 800421a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	68db      	ldr	r3, [r3, #12]
 8004220:	2b00      	cmp	r3, #0
 8004222:	d003      	beq.n	800422c <HAL_SPI_Transmit_IT+0x94>
  {
    hspi->TxISR = SPI_TxISR_16BIT;
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	4a1f      	ldr	r2, [pc, #124]	; (80042a4 <HAL_SPI_Transmit_IT+0x10c>)
 8004228:	645a      	str	r2, [r3, #68]	; 0x44
 800422a:	e002      	b.n	8004232 <HAL_SPI_Transmit_IT+0x9a>
  }
  else
  {
    hspi->TxISR = SPI_TxISR_8BIT;
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	4a1e      	ldr	r2, [pc, #120]	; (80042a8 <HAL_SPI_Transmit_IT+0x110>)
 8004230:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	689b      	ldr	r3, [r3, #8]
 8004236:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800423a:	d10f      	bne.n	800425c <HAL_SPI_Transmit_IT+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	681a      	ldr	r2, [r3, #0]
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800424a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	681a      	ldr	r2, [r3, #0]
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800425a:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Enable TXE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_ERR));
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	685a      	ldr	r2, [r3, #4]
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	f042 02a0 	orr.w	r2, r2, #160	; 0xa0
 800426a:	605a      	str	r2, [r3, #4]


  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004276:	2b40      	cmp	r3, #64	; 0x40
 8004278:	d008      	beq.n	800428c <HAL_SPI_Transmit_IT+0xf4>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	681a      	ldr	r2, [r3, #0]
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004288:	601a      	str	r2, [r3, #0]
 800428a:	e000      	b.n	800428e <HAL_SPI_Transmit_IT+0xf6>
  }

error :
 800428c:	bf00      	nop
  __HAL_UNLOCK(hspi);
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	2200      	movs	r2, #0
 8004292:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004296:	7dfb      	ldrb	r3, [r7, #23]
}
 8004298:	4618      	mov	r0, r3
 800429a:	371c      	adds	r7, #28
 800429c:	46bd      	mov	sp, r7
 800429e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042a2:	4770      	bx	lr
 80042a4:	0800452f 	.word	0x0800452f
 80042a8:	080044e9 	.word	0x080044e9

080042ac <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 80042ac:	b580      	push	{r7, lr}
 80042ae:	b088      	sub	sp, #32
 80042b0:	af00      	add	r7, sp, #0
 80042b2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	685b      	ldr	r3, [r3, #4]
 80042ba:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	689b      	ldr	r3, [r3, #8]
 80042c2:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80042c4:	69bb      	ldr	r3, [r7, #24]
 80042c6:	099b      	lsrs	r3, r3, #6
 80042c8:	f003 0301 	and.w	r3, r3, #1
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d10f      	bne.n	80042f0 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80042d0:	69bb      	ldr	r3, [r7, #24]
 80042d2:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d00a      	beq.n	80042f0 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80042da:	69fb      	ldr	r3, [r7, #28]
 80042dc:	099b      	lsrs	r3, r3, #6
 80042de:	f003 0301 	and.w	r3, r3, #1
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d004      	beq.n	80042f0 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042ea:	6878      	ldr	r0, [r7, #4]
 80042ec:	4798      	blx	r3
    return;
 80042ee:	e0d7      	b.n	80044a0 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 80042f0:	69bb      	ldr	r3, [r7, #24]
 80042f2:	085b      	lsrs	r3, r3, #1
 80042f4:	f003 0301 	and.w	r3, r3, #1
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d00a      	beq.n	8004312 <HAL_SPI_IRQHandler+0x66>
 80042fc:	69fb      	ldr	r3, [r7, #28]
 80042fe:	09db      	lsrs	r3, r3, #7
 8004300:	f003 0301 	and.w	r3, r3, #1
 8004304:	2b00      	cmp	r3, #0
 8004306:	d004      	beq.n	8004312 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800430c:	6878      	ldr	r0, [r7, #4]
 800430e:	4798      	blx	r3
    return;
 8004310:	e0c6      	b.n	80044a0 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8004312:	69bb      	ldr	r3, [r7, #24]
 8004314:	095b      	lsrs	r3, r3, #5
 8004316:	f003 0301 	and.w	r3, r3, #1
 800431a:	2b00      	cmp	r3, #0
 800431c:	d10c      	bne.n	8004338 <HAL_SPI_IRQHandler+0x8c>
 800431e:	69bb      	ldr	r3, [r7, #24]
 8004320:	099b      	lsrs	r3, r3, #6
 8004322:	f003 0301 	and.w	r3, r3, #1
 8004326:	2b00      	cmp	r3, #0
 8004328:	d106      	bne.n	8004338 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 800432a:	69bb      	ldr	r3, [r7, #24]
 800432c:	0a1b      	lsrs	r3, r3, #8
 800432e:	f003 0301 	and.w	r3, r3, #1
 8004332:	2b00      	cmp	r3, #0
 8004334:	f000 80b4 	beq.w	80044a0 <HAL_SPI_IRQHandler+0x1f4>
 8004338:	69fb      	ldr	r3, [r7, #28]
 800433a:	095b      	lsrs	r3, r3, #5
 800433c:	f003 0301 	and.w	r3, r3, #1
 8004340:	2b00      	cmp	r3, #0
 8004342:	f000 80ad 	beq.w	80044a0 <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8004346:	69bb      	ldr	r3, [r7, #24]
 8004348:	099b      	lsrs	r3, r3, #6
 800434a:	f003 0301 	and.w	r3, r3, #1
 800434e:	2b00      	cmp	r3, #0
 8004350:	d023      	beq.n	800439a <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004358:	b2db      	uxtb	r3, r3
 800435a:	2b03      	cmp	r3, #3
 800435c:	d011      	beq.n	8004382 <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004362:	f043 0204 	orr.w	r2, r3, #4
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800436a:	2300      	movs	r3, #0
 800436c:	617b      	str	r3, [r7, #20]
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	68db      	ldr	r3, [r3, #12]
 8004374:	617b      	str	r3, [r7, #20]
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	689b      	ldr	r3, [r3, #8]
 800437c:	617b      	str	r3, [r7, #20]
 800437e:	697b      	ldr	r3, [r7, #20]
 8004380:	e00b      	b.n	800439a <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004382:	2300      	movs	r3, #0
 8004384:	613b      	str	r3, [r7, #16]
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	68db      	ldr	r3, [r3, #12]
 800438c:	613b      	str	r3, [r7, #16]
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	689b      	ldr	r3, [r3, #8]
 8004394:	613b      	str	r3, [r7, #16]
 8004396:	693b      	ldr	r3, [r7, #16]
        return;
 8004398:	e082      	b.n	80044a0 <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 800439a:	69bb      	ldr	r3, [r7, #24]
 800439c:	095b      	lsrs	r3, r3, #5
 800439e:	f003 0301 	and.w	r3, r3, #1
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d014      	beq.n	80043d0 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043aa:	f043 0201 	orr.w	r2, r3, #1
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80043b2:	2300      	movs	r3, #0
 80043b4:	60fb      	str	r3, [r7, #12]
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	689b      	ldr	r3, [r3, #8]
 80043bc:	60fb      	str	r3, [r7, #12]
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	681a      	ldr	r2, [r3, #0]
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80043cc:	601a      	str	r2, [r3, #0]
 80043ce:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 80043d0:	69bb      	ldr	r3, [r7, #24]
 80043d2:	0a1b      	lsrs	r3, r3, #8
 80043d4:	f003 0301 	and.w	r3, r3, #1
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d00c      	beq.n	80043f6 <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043e0:	f043 0208 	orr.w	r2, r3, #8
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 80043e8:	2300      	movs	r3, #0
 80043ea:	60bb      	str	r3, [r7, #8]
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	689b      	ldr	r3, [r3, #8]
 80043f2:	60bb      	str	r3, [r7, #8]
 80043f4:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d04f      	beq.n	800449e <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	685a      	ldr	r2, [r3, #4]
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800440c:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	2201      	movs	r2, #1
 8004412:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8004416:	69fb      	ldr	r3, [r7, #28]
 8004418:	f003 0302 	and.w	r3, r3, #2
 800441c:	2b00      	cmp	r3, #0
 800441e:	d104      	bne.n	800442a <HAL_SPI_IRQHandler+0x17e>
 8004420:	69fb      	ldr	r3, [r7, #28]
 8004422:	f003 0301 	and.w	r3, r3, #1
 8004426:	2b00      	cmp	r3, #0
 8004428:	d034      	beq.n	8004494 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	685a      	ldr	r2, [r3, #4]
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	f022 0203 	bic.w	r2, r2, #3
 8004438:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800443e:	2b00      	cmp	r3, #0
 8004440:	d011      	beq.n	8004466 <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004446:	4a18      	ldr	r2, [pc, #96]	; (80044a8 <HAL_SPI_IRQHandler+0x1fc>)
 8004448:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800444e:	4618      	mov	r0, r3
 8004450:	f7fe fd62 	bl	8002f18 <HAL_DMA_Abort_IT>
 8004454:	4603      	mov	r3, r0
 8004456:	2b00      	cmp	r3, #0
 8004458:	d005      	beq.n	8004466 <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800445e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800446a:	2b00      	cmp	r3, #0
 800446c:	d016      	beq.n	800449c <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004472:	4a0d      	ldr	r2, [pc, #52]	; (80044a8 <HAL_SPI_IRQHandler+0x1fc>)
 8004474:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800447a:	4618      	mov	r0, r3
 800447c:	f7fe fd4c 	bl	8002f18 <HAL_DMA_Abort_IT>
 8004480:	4603      	mov	r3, r0
 8004482:	2b00      	cmp	r3, #0
 8004484:	d00a      	beq.n	800449c <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800448a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 8004492:	e003      	b.n	800449c <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8004494:	6878      	ldr	r0, [r7, #4]
 8004496:	f000 f809 	bl	80044ac <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800449a:	e000      	b.n	800449e <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 800449c:	bf00      	nop
    return;
 800449e:	bf00      	nop
  }
}
 80044a0:	3720      	adds	r7, #32
 80044a2:	46bd      	mov	sp, r7
 80044a4:	bd80      	pop	{r7, pc}
 80044a6:	bf00      	nop
 80044a8:	080044c1 	.word	0x080044c1

080044ac <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 80044ac:	b480      	push	{r7}
 80044ae:	b083      	sub	sp, #12
 80044b0:	af00      	add	r7, sp, #0
 80044b2:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 80044b4:	bf00      	nop
 80044b6:	370c      	adds	r7, #12
 80044b8:	46bd      	mov	sp, r7
 80044ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044be:	4770      	bx	lr

080044c0 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80044c0:	b580      	push	{r7, lr}
 80044c2:	b084      	sub	sp, #16
 80044c4:	af00      	add	r7, sp, #0
 80044c6:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044cc:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	2200      	movs	r2, #0
 80044d2:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	2200      	movs	r2, #0
 80044d8:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80044da:	68f8      	ldr	r0, [r7, #12]
 80044dc:	f7ff ffe6 	bl	80044ac <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80044e0:	bf00      	nop
 80044e2:	3710      	adds	r7, #16
 80044e4:	46bd      	mov	sp, r7
 80044e6:	bd80      	pop	{r7, pc}

080044e8 <SPI_TxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_TxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 80044e8:	b580      	push	{r7, lr}
 80044ea:	b082      	sub	sp, #8
 80044ec:	af00      	add	r7, sp, #0
 80044ee:	6078      	str	r0, [r7, #4]
  *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	330c      	adds	r3, #12
 80044fa:	7812      	ldrb	r2, [r2, #0]
 80044fc:	701a      	strb	r2, [r3, #0]
  hspi->pTxBuffPtr++;
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004502:	1c5a      	adds	r2, r3, #1
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount--;
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800450c:	b29b      	uxth	r3, r3
 800450e:	3b01      	subs	r3, #1
 8004510:	b29a      	uxth	r2, r3
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	86da      	strh	r2, [r3, #54]	; 0x36

  if (hspi->TxXferCount == 0U)
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800451a:	b29b      	uxth	r3, r3
 800451c:	2b00      	cmp	r3, #0
 800451e:	d102      	bne.n	8004526 <SPI_TxISR_8BIT+0x3e>
    {
      /* Enable CRC Transmission */
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
    }
#endif /* USE_SPI_CRC */
    SPI_CloseTx_ISR(hspi);
 8004520:	6878      	ldr	r0, [r7, #4]
 8004522:	f000 f8f1 	bl	8004708 <SPI_CloseTx_ISR>
  }
}
 8004526:	bf00      	nop
 8004528:	3708      	adds	r7, #8
 800452a:	46bd      	mov	sp, r7
 800452c:	bd80      	pop	{r7, pc}

0800452e <SPI_TxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_TxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 800452e:	b580      	push	{r7, lr}
 8004530:	b082      	sub	sp, #8
 8004532:	af00      	add	r7, sp, #0
 8004534:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800453a:	881a      	ldrh	r2, [r3, #0]
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004546:	1c9a      	adds	r2, r3, #2
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount--;
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004550:	b29b      	uxth	r3, r3
 8004552:	3b01      	subs	r3, #1
 8004554:	b29a      	uxth	r2, r3
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	86da      	strh	r2, [r3, #54]	; 0x36

  if (hspi->TxXferCount == 0U)
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800455e:	b29b      	uxth	r3, r3
 8004560:	2b00      	cmp	r3, #0
 8004562:	d102      	bne.n	800456a <SPI_TxISR_16BIT+0x3c>
    {
      /* Enable CRC Transmission */
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
    }
#endif /* USE_SPI_CRC */
    SPI_CloseTx_ISR(hspi);
 8004564:	6878      	ldr	r0, [r7, #4]
 8004566:	f000 f8cf 	bl	8004708 <SPI_CloseTx_ISR>
  }
}
 800456a:	bf00      	nop
 800456c:	3708      	adds	r7, #8
 800456e:	46bd      	mov	sp, r7
 8004570:	bd80      	pop	{r7, pc}
	...

08004574 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004574:	b580      	push	{r7, lr}
 8004576:	b088      	sub	sp, #32
 8004578:	af00      	add	r7, sp, #0
 800457a:	60f8      	str	r0, [r7, #12]
 800457c:	60b9      	str	r1, [r7, #8]
 800457e:	603b      	str	r3, [r7, #0]
 8004580:	4613      	mov	r3, r2
 8004582:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004584:	f7fd fd4e 	bl	8002024 <HAL_GetTick>
 8004588:	4602      	mov	r2, r0
 800458a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800458c:	1a9b      	subs	r3, r3, r2
 800458e:	683a      	ldr	r2, [r7, #0]
 8004590:	4413      	add	r3, r2
 8004592:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004594:	f7fd fd46 	bl	8002024 <HAL_GetTick>
 8004598:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800459a:	4b39      	ldr	r3, [pc, #228]	; (8004680 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	015b      	lsls	r3, r3, #5
 80045a0:	0d1b      	lsrs	r3, r3, #20
 80045a2:	69fa      	ldr	r2, [r7, #28]
 80045a4:	fb02 f303 	mul.w	r3, r2, r3
 80045a8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80045aa:	e054      	b.n	8004656 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80045ac:	683b      	ldr	r3, [r7, #0]
 80045ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045b2:	d050      	beq.n	8004656 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80045b4:	f7fd fd36 	bl	8002024 <HAL_GetTick>
 80045b8:	4602      	mov	r2, r0
 80045ba:	69bb      	ldr	r3, [r7, #24]
 80045bc:	1ad3      	subs	r3, r2, r3
 80045be:	69fa      	ldr	r2, [r7, #28]
 80045c0:	429a      	cmp	r2, r3
 80045c2:	d902      	bls.n	80045ca <SPI_WaitFlagStateUntilTimeout+0x56>
 80045c4:	69fb      	ldr	r3, [r7, #28]
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d13d      	bne.n	8004646 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	685a      	ldr	r2, [r3, #4]
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80045d8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	685b      	ldr	r3, [r3, #4]
 80045de:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80045e2:	d111      	bne.n	8004608 <SPI_WaitFlagStateUntilTimeout+0x94>
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	689b      	ldr	r3, [r3, #8]
 80045e8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80045ec:	d004      	beq.n	80045f8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	689b      	ldr	r3, [r3, #8]
 80045f2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80045f6:	d107      	bne.n	8004608 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	681a      	ldr	r2, [r3, #0]
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004606:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800460c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004610:	d10f      	bne.n	8004632 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	681a      	ldr	r2, [r3, #0]
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004620:	601a      	str	r2, [r3, #0]
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	681a      	ldr	r2, [r3, #0]
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004630:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	2201      	movs	r2, #1
 8004636:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	2200      	movs	r2, #0
 800463e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8004642:	2303      	movs	r3, #3
 8004644:	e017      	b.n	8004676 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8004646:	697b      	ldr	r3, [r7, #20]
 8004648:	2b00      	cmp	r3, #0
 800464a:	d101      	bne.n	8004650 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800464c:	2300      	movs	r3, #0
 800464e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004650:	697b      	ldr	r3, [r7, #20]
 8004652:	3b01      	subs	r3, #1
 8004654:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	689a      	ldr	r2, [r3, #8]
 800465c:	68bb      	ldr	r3, [r7, #8]
 800465e:	4013      	ands	r3, r2
 8004660:	68ba      	ldr	r2, [r7, #8]
 8004662:	429a      	cmp	r2, r3
 8004664:	bf0c      	ite	eq
 8004666:	2301      	moveq	r3, #1
 8004668:	2300      	movne	r3, #0
 800466a:	b2db      	uxtb	r3, r3
 800466c:	461a      	mov	r2, r3
 800466e:	79fb      	ldrb	r3, [r7, #7]
 8004670:	429a      	cmp	r2, r3
 8004672:	d19b      	bne.n	80045ac <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004674:	2300      	movs	r3, #0
}
 8004676:	4618      	mov	r0, r3
 8004678:	3720      	adds	r7, #32
 800467a:	46bd      	mov	sp, r7
 800467c:	bd80      	pop	{r7, pc}
 800467e:	bf00      	nop
 8004680:	20000004 	.word	0x20000004

08004684 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004684:	b580      	push	{r7, lr}
 8004686:	b088      	sub	sp, #32
 8004688:	af02      	add	r7, sp, #8
 800468a:	60f8      	str	r0, [r7, #12]
 800468c:	60b9      	str	r1, [r7, #8]
 800468e:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8004690:	4b1b      	ldr	r3, [pc, #108]	; (8004700 <SPI_EndRxTxTransaction+0x7c>)
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	4a1b      	ldr	r2, [pc, #108]	; (8004704 <SPI_EndRxTxTransaction+0x80>)
 8004696:	fba2 2303 	umull	r2, r3, r2, r3
 800469a:	0d5b      	lsrs	r3, r3, #21
 800469c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80046a0:	fb02 f303 	mul.w	r3, r2, r3
 80046a4:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	685b      	ldr	r3, [r3, #4]
 80046aa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80046ae:	d112      	bne.n	80046d6 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	9300      	str	r3, [sp, #0]
 80046b4:	68bb      	ldr	r3, [r7, #8]
 80046b6:	2200      	movs	r2, #0
 80046b8:	2180      	movs	r1, #128	; 0x80
 80046ba:	68f8      	ldr	r0, [r7, #12]
 80046bc:	f7ff ff5a 	bl	8004574 <SPI_WaitFlagStateUntilTimeout>
 80046c0:	4603      	mov	r3, r0
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d016      	beq.n	80046f4 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80046ca:	f043 0220 	orr.w	r2, r3, #32
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80046d2:	2303      	movs	r3, #3
 80046d4:	e00f      	b.n	80046f6 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80046d6:	697b      	ldr	r3, [r7, #20]
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d00a      	beq.n	80046f2 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80046dc:	697b      	ldr	r3, [r7, #20]
 80046de:	3b01      	subs	r3, #1
 80046e0:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	689b      	ldr	r3, [r3, #8]
 80046e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80046ec:	2b80      	cmp	r3, #128	; 0x80
 80046ee:	d0f2      	beq.n	80046d6 <SPI_EndRxTxTransaction+0x52>
 80046f0:	e000      	b.n	80046f4 <SPI_EndRxTxTransaction+0x70>
        break;
 80046f2:	bf00      	nop
  }

  return HAL_OK;
 80046f4:	2300      	movs	r3, #0
}
 80046f6:	4618      	mov	r0, r3
 80046f8:	3718      	adds	r7, #24
 80046fa:	46bd      	mov	sp, r7
 80046fc:	bd80      	pop	{r7, pc}
 80046fe:	bf00      	nop
 8004700:	20000004 	.word	0x20000004
 8004704:	165e9f81 	.word	0x165e9f81

08004708 <SPI_CloseTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseTx_ISR(SPI_HandleTypeDef *hspi)
{
 8004708:	b580      	push	{r7, lr}
 800470a:	b086      	sub	sp, #24
 800470c:	af00      	add	r7, sp, #0
 800470e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t count = SPI_DEFAULT_TIMEOUT * (SystemCoreClock / 24U / 1000U);
 8004710:	4b2c      	ldr	r3, [pc, #176]	; (80047c4 <SPI_CloseTx_ISR+0xbc>)
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	4a2c      	ldr	r2, [pc, #176]	; (80047c8 <SPI_CloseTx_ISR+0xc0>)
 8004716:	fba2 2303 	umull	r2, r3, r2, r3
 800471a:	0a5b      	lsrs	r3, r3, #9
 800471c:	2264      	movs	r2, #100	; 0x64
 800471e:	fb02 f303 	mul.w	r3, r2, r3
 8004722:	613b      	str	r3, [r7, #16]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004724:	f7fd fc7e 	bl	8002024 <HAL_GetTick>
 8004728:	6178      	str	r0, [r7, #20]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 800472a:	693b      	ldr	r3, [r7, #16]
 800472c:	2b00      	cmp	r3, #0
 800472e:	d106      	bne.n	800473e <SPI_CloseTx_ISR+0x36>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004734:	f043 0220 	orr.w	r2, r3, #32
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800473c:	e009      	b.n	8004752 <SPI_CloseTx_ISR+0x4a>
    }
    count--;
 800473e:	693b      	ldr	r3, [r7, #16]
 8004740:	3b01      	subs	r3, #1
 8004742:	613b      	str	r3, [r7, #16]
  } while ((hspi->Instance->SR & SPI_FLAG_TXE) == RESET);
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	689b      	ldr	r3, [r3, #8]
 800474a:	f003 0302 	and.w	r3, r3, #2
 800474e:	2b00      	cmp	r3, #0
 8004750:	d0eb      	beq.n	800472a <SPI_CloseTx_ISR+0x22>

  /* Disable TXE and ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_ERR));
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	685a      	ldr	r2, [r3, #4]
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004760:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8004762:	697a      	ldr	r2, [r7, #20]
 8004764:	2164      	movs	r1, #100	; 0x64
 8004766:	6878      	ldr	r0, [r7, #4]
 8004768:	f7ff ff8c 	bl	8004684 <SPI_EndRxTxTransaction>
 800476c:	4603      	mov	r3, r0
 800476e:	2b00      	cmp	r3, #0
 8004770:	d005      	beq.n	800477e <SPI_CloseTx_ISR+0x76>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004776:	f043 0220 	orr.w	r2, r3, #32
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	689b      	ldr	r3, [r3, #8]
 8004782:	2b00      	cmp	r3, #0
 8004784:	d10a      	bne.n	800479c <SPI_CloseTx_ISR+0x94>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004786:	2300      	movs	r3, #0
 8004788:	60fb      	str	r3, [r7, #12]
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	68db      	ldr	r3, [r3, #12]
 8004790:	60fb      	str	r3, [r7, #12]
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	689b      	ldr	r3, [r3, #8]
 8004798:	60fb      	str	r3, [r7, #12]
 800479a:	68fb      	ldr	r3, [r7, #12]
  }

  hspi->State = HAL_SPI_STATE_READY;
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	2201      	movs	r2, #1
 80047a0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d003      	beq.n	80047b4 <SPI_CloseTx_ISR+0xac>
  {
    /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
    hspi->ErrorCallback(hspi);
#else
    HAL_SPI_ErrorCallback(hspi);
 80047ac:	6878      	ldr	r0, [r7, #4]
 80047ae:	f7ff fe7d 	bl	80044ac <HAL_SPI_ErrorCallback>
    hspi->TxCpltCallback(hspi);
#else
    HAL_SPI_TxCpltCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
}
 80047b2:	e002      	b.n	80047ba <SPI_CloseTx_ISR+0xb2>
    HAL_SPI_TxCpltCallback(hspi);
 80047b4:	6878      	ldr	r0, [r7, #4]
 80047b6:	f7fd f96f 	bl	8001a98 <HAL_SPI_TxCpltCallback>
}
 80047ba:	bf00      	nop
 80047bc:	3718      	adds	r7, #24
 80047be:	46bd      	mov	sp, r7
 80047c0:	bd80      	pop	{r7, pc}
 80047c2:	bf00      	nop
 80047c4:	20000004 	.word	0x20000004
 80047c8:	057619f1 	.word	0x057619f1

080047cc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80047cc:	b580      	push	{r7, lr}
 80047ce:	b082      	sub	sp, #8
 80047d0:	af00      	add	r7, sp, #0
 80047d2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d101      	bne.n	80047de <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80047da:	2301      	movs	r3, #1
 80047dc:	e041      	b.n	8004862 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80047e4:	b2db      	uxtb	r3, r3
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d106      	bne.n	80047f8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	2200      	movs	r2, #0
 80047ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80047f2:	6878      	ldr	r0, [r7, #4]
 80047f4:	f7fd fa9c 	bl	8001d30 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	2202      	movs	r2, #2
 80047fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681a      	ldr	r2, [r3, #0]
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	3304      	adds	r3, #4
 8004808:	4619      	mov	r1, r3
 800480a:	4610      	mov	r0, r2
 800480c:	f000 fade 	bl	8004dcc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	2201      	movs	r2, #1
 8004814:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	2201      	movs	r2, #1
 800481c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	2201      	movs	r2, #1
 8004824:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	2201      	movs	r2, #1
 800482c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	2201      	movs	r2, #1
 8004834:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	2201      	movs	r2, #1
 800483c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	2201      	movs	r2, #1
 8004844:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	2201      	movs	r2, #1
 800484c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	2201      	movs	r2, #1
 8004854:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	2201      	movs	r2, #1
 800485c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004860:	2300      	movs	r3, #0
}
 8004862:	4618      	mov	r0, r3
 8004864:	3708      	adds	r7, #8
 8004866:	46bd      	mov	sp, r7
 8004868:	bd80      	pop	{r7, pc}
	...

0800486c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800486c:	b480      	push	{r7}
 800486e:	b085      	sub	sp, #20
 8004870:	af00      	add	r7, sp, #0
 8004872:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800487a:	b2db      	uxtb	r3, r3
 800487c:	2b01      	cmp	r3, #1
 800487e:	d001      	beq.n	8004884 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8004880:	2301      	movs	r3, #1
 8004882:	e03c      	b.n	80048fe <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	2202      	movs	r2, #2
 8004888:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	4a1e      	ldr	r2, [pc, #120]	; (800490c <HAL_TIM_Base_Start+0xa0>)
 8004892:	4293      	cmp	r3, r2
 8004894:	d018      	beq.n	80048c8 <HAL_TIM_Base_Start+0x5c>
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800489e:	d013      	beq.n	80048c8 <HAL_TIM_Base_Start+0x5c>
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	4a1a      	ldr	r2, [pc, #104]	; (8004910 <HAL_TIM_Base_Start+0xa4>)
 80048a6:	4293      	cmp	r3, r2
 80048a8:	d00e      	beq.n	80048c8 <HAL_TIM_Base_Start+0x5c>
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	4a19      	ldr	r2, [pc, #100]	; (8004914 <HAL_TIM_Base_Start+0xa8>)
 80048b0:	4293      	cmp	r3, r2
 80048b2:	d009      	beq.n	80048c8 <HAL_TIM_Base_Start+0x5c>
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	4a17      	ldr	r2, [pc, #92]	; (8004918 <HAL_TIM_Base_Start+0xac>)
 80048ba:	4293      	cmp	r3, r2
 80048bc:	d004      	beq.n	80048c8 <HAL_TIM_Base_Start+0x5c>
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	4a16      	ldr	r2, [pc, #88]	; (800491c <HAL_TIM_Base_Start+0xb0>)
 80048c4:	4293      	cmp	r3, r2
 80048c6:	d111      	bne.n	80048ec <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	689b      	ldr	r3, [r3, #8]
 80048ce:	f003 0307 	and.w	r3, r3, #7
 80048d2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	2b06      	cmp	r3, #6
 80048d8:	d010      	beq.n	80048fc <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	681a      	ldr	r2, [r3, #0]
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	f042 0201 	orr.w	r2, r2, #1
 80048e8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80048ea:	e007      	b.n	80048fc <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	681a      	ldr	r2, [r3, #0]
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	f042 0201 	orr.w	r2, r2, #1
 80048fa:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80048fc:	2300      	movs	r3, #0
}
 80048fe:	4618      	mov	r0, r3
 8004900:	3714      	adds	r7, #20
 8004902:	46bd      	mov	sp, r7
 8004904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004908:	4770      	bx	lr
 800490a:	bf00      	nop
 800490c:	40010000 	.word	0x40010000
 8004910:	40000400 	.word	0x40000400
 8004914:	40000800 	.word	0x40000800
 8004918:	40000c00 	.word	0x40000c00
 800491c:	40014000 	.word	0x40014000

08004920 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004920:	b480      	push	{r7}
 8004922:	b085      	sub	sp, #20
 8004924:	af00      	add	r7, sp, #0
 8004926:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800492e:	b2db      	uxtb	r3, r3
 8004930:	2b01      	cmp	r3, #1
 8004932:	d001      	beq.n	8004938 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004934:	2301      	movs	r3, #1
 8004936:	e044      	b.n	80049c2 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	2202      	movs	r2, #2
 800493c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	68da      	ldr	r2, [r3, #12]
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	f042 0201 	orr.w	r2, r2, #1
 800494e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	4a1e      	ldr	r2, [pc, #120]	; (80049d0 <HAL_TIM_Base_Start_IT+0xb0>)
 8004956:	4293      	cmp	r3, r2
 8004958:	d018      	beq.n	800498c <HAL_TIM_Base_Start_IT+0x6c>
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004962:	d013      	beq.n	800498c <HAL_TIM_Base_Start_IT+0x6c>
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	4a1a      	ldr	r2, [pc, #104]	; (80049d4 <HAL_TIM_Base_Start_IT+0xb4>)
 800496a:	4293      	cmp	r3, r2
 800496c:	d00e      	beq.n	800498c <HAL_TIM_Base_Start_IT+0x6c>
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	4a19      	ldr	r2, [pc, #100]	; (80049d8 <HAL_TIM_Base_Start_IT+0xb8>)
 8004974:	4293      	cmp	r3, r2
 8004976:	d009      	beq.n	800498c <HAL_TIM_Base_Start_IT+0x6c>
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	4a17      	ldr	r2, [pc, #92]	; (80049dc <HAL_TIM_Base_Start_IT+0xbc>)
 800497e:	4293      	cmp	r3, r2
 8004980:	d004      	beq.n	800498c <HAL_TIM_Base_Start_IT+0x6c>
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	4a16      	ldr	r2, [pc, #88]	; (80049e0 <HAL_TIM_Base_Start_IT+0xc0>)
 8004988:	4293      	cmp	r3, r2
 800498a:	d111      	bne.n	80049b0 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	689b      	ldr	r3, [r3, #8]
 8004992:	f003 0307 	and.w	r3, r3, #7
 8004996:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	2b06      	cmp	r3, #6
 800499c:	d010      	beq.n	80049c0 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	681a      	ldr	r2, [r3, #0]
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	f042 0201 	orr.w	r2, r2, #1
 80049ac:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80049ae:	e007      	b.n	80049c0 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	681a      	ldr	r2, [r3, #0]
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	f042 0201 	orr.w	r2, r2, #1
 80049be:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80049c0:	2300      	movs	r3, #0
}
 80049c2:	4618      	mov	r0, r3
 80049c4:	3714      	adds	r7, #20
 80049c6:	46bd      	mov	sp, r7
 80049c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049cc:	4770      	bx	lr
 80049ce:	bf00      	nop
 80049d0:	40010000 	.word	0x40010000
 80049d4:	40000400 	.word	0x40000400
 80049d8:	40000800 	.word	0x40000800
 80049dc:	40000c00 	.word	0x40000c00
 80049e0:	40014000 	.word	0x40014000

080049e4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80049e4:	b580      	push	{r7, lr}
 80049e6:	b082      	sub	sp, #8
 80049e8:	af00      	add	r7, sp, #0
 80049ea:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	691b      	ldr	r3, [r3, #16]
 80049f2:	f003 0302 	and.w	r3, r3, #2
 80049f6:	2b02      	cmp	r3, #2
 80049f8:	d122      	bne.n	8004a40 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	68db      	ldr	r3, [r3, #12]
 8004a00:	f003 0302 	and.w	r3, r3, #2
 8004a04:	2b02      	cmp	r3, #2
 8004a06:	d11b      	bne.n	8004a40 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	f06f 0202 	mvn.w	r2, #2
 8004a10:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	2201      	movs	r2, #1
 8004a16:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	699b      	ldr	r3, [r3, #24]
 8004a1e:	f003 0303 	and.w	r3, r3, #3
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d003      	beq.n	8004a2e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004a26:	6878      	ldr	r0, [r7, #4]
 8004a28:	f000 f9b2 	bl	8004d90 <HAL_TIM_IC_CaptureCallback>
 8004a2c:	e005      	b.n	8004a3a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004a2e:	6878      	ldr	r0, [r7, #4]
 8004a30:	f000 f9a4 	bl	8004d7c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004a34:	6878      	ldr	r0, [r7, #4]
 8004a36:	f000 f9b5 	bl	8004da4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	2200      	movs	r2, #0
 8004a3e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	691b      	ldr	r3, [r3, #16]
 8004a46:	f003 0304 	and.w	r3, r3, #4
 8004a4a:	2b04      	cmp	r3, #4
 8004a4c:	d122      	bne.n	8004a94 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	68db      	ldr	r3, [r3, #12]
 8004a54:	f003 0304 	and.w	r3, r3, #4
 8004a58:	2b04      	cmp	r3, #4
 8004a5a:	d11b      	bne.n	8004a94 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	f06f 0204 	mvn.w	r2, #4
 8004a64:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	2202      	movs	r2, #2
 8004a6a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	699b      	ldr	r3, [r3, #24]
 8004a72:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d003      	beq.n	8004a82 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004a7a:	6878      	ldr	r0, [r7, #4]
 8004a7c:	f000 f988 	bl	8004d90 <HAL_TIM_IC_CaptureCallback>
 8004a80:	e005      	b.n	8004a8e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004a82:	6878      	ldr	r0, [r7, #4]
 8004a84:	f000 f97a 	bl	8004d7c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004a88:	6878      	ldr	r0, [r7, #4]
 8004a8a:	f000 f98b 	bl	8004da4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	2200      	movs	r2, #0
 8004a92:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	691b      	ldr	r3, [r3, #16]
 8004a9a:	f003 0308 	and.w	r3, r3, #8
 8004a9e:	2b08      	cmp	r3, #8
 8004aa0:	d122      	bne.n	8004ae8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	68db      	ldr	r3, [r3, #12]
 8004aa8:	f003 0308 	and.w	r3, r3, #8
 8004aac:	2b08      	cmp	r3, #8
 8004aae:	d11b      	bne.n	8004ae8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	f06f 0208 	mvn.w	r2, #8
 8004ab8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	2204      	movs	r2, #4
 8004abe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	69db      	ldr	r3, [r3, #28]
 8004ac6:	f003 0303 	and.w	r3, r3, #3
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d003      	beq.n	8004ad6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004ace:	6878      	ldr	r0, [r7, #4]
 8004ad0:	f000 f95e 	bl	8004d90 <HAL_TIM_IC_CaptureCallback>
 8004ad4:	e005      	b.n	8004ae2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004ad6:	6878      	ldr	r0, [r7, #4]
 8004ad8:	f000 f950 	bl	8004d7c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004adc:	6878      	ldr	r0, [r7, #4]
 8004ade:	f000 f961 	bl	8004da4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	2200      	movs	r2, #0
 8004ae6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	691b      	ldr	r3, [r3, #16]
 8004aee:	f003 0310 	and.w	r3, r3, #16
 8004af2:	2b10      	cmp	r3, #16
 8004af4:	d122      	bne.n	8004b3c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	68db      	ldr	r3, [r3, #12]
 8004afc:	f003 0310 	and.w	r3, r3, #16
 8004b00:	2b10      	cmp	r3, #16
 8004b02:	d11b      	bne.n	8004b3c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	f06f 0210 	mvn.w	r2, #16
 8004b0c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	2208      	movs	r2, #8
 8004b12:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	69db      	ldr	r3, [r3, #28]
 8004b1a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d003      	beq.n	8004b2a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004b22:	6878      	ldr	r0, [r7, #4]
 8004b24:	f000 f934 	bl	8004d90 <HAL_TIM_IC_CaptureCallback>
 8004b28:	e005      	b.n	8004b36 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004b2a:	6878      	ldr	r0, [r7, #4]
 8004b2c:	f000 f926 	bl	8004d7c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004b30:	6878      	ldr	r0, [r7, #4]
 8004b32:	f000 f937 	bl	8004da4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	2200      	movs	r2, #0
 8004b3a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	691b      	ldr	r3, [r3, #16]
 8004b42:	f003 0301 	and.w	r3, r3, #1
 8004b46:	2b01      	cmp	r3, #1
 8004b48:	d10e      	bne.n	8004b68 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	68db      	ldr	r3, [r3, #12]
 8004b50:	f003 0301 	and.w	r3, r3, #1
 8004b54:	2b01      	cmp	r3, #1
 8004b56:	d107      	bne.n	8004b68 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	f06f 0201 	mvn.w	r2, #1
 8004b60:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004b62:	6878      	ldr	r0, [r7, #4]
 8004b64:	f7fc ffae 	bl	8001ac4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	691b      	ldr	r3, [r3, #16]
 8004b6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b72:	2b80      	cmp	r3, #128	; 0x80
 8004b74:	d10e      	bne.n	8004b94 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	68db      	ldr	r3, [r3, #12]
 8004b7c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b80:	2b80      	cmp	r3, #128	; 0x80
 8004b82:	d107      	bne.n	8004b94 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004b8c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004b8e:	6878      	ldr	r0, [r7, #4]
 8004b90:	f000 faae 	bl	80050f0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	691b      	ldr	r3, [r3, #16]
 8004b9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b9e:	2b40      	cmp	r3, #64	; 0x40
 8004ba0:	d10e      	bne.n	8004bc0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	68db      	ldr	r3, [r3, #12]
 8004ba8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004bac:	2b40      	cmp	r3, #64	; 0x40
 8004bae:	d107      	bne.n	8004bc0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004bb8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004bba:	6878      	ldr	r0, [r7, #4]
 8004bbc:	f000 f8fc 	bl	8004db8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	691b      	ldr	r3, [r3, #16]
 8004bc6:	f003 0320 	and.w	r3, r3, #32
 8004bca:	2b20      	cmp	r3, #32
 8004bcc:	d10e      	bne.n	8004bec <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	68db      	ldr	r3, [r3, #12]
 8004bd4:	f003 0320 	and.w	r3, r3, #32
 8004bd8:	2b20      	cmp	r3, #32
 8004bda:	d107      	bne.n	8004bec <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	f06f 0220 	mvn.w	r2, #32
 8004be4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004be6:	6878      	ldr	r0, [r7, #4]
 8004be8:	f000 fa78 	bl	80050dc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004bec:	bf00      	nop
 8004bee:	3708      	adds	r7, #8
 8004bf0:	46bd      	mov	sp, r7
 8004bf2:	bd80      	pop	{r7, pc}

08004bf4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004bf4:	b580      	push	{r7, lr}
 8004bf6:	b084      	sub	sp, #16
 8004bf8:	af00      	add	r7, sp, #0
 8004bfa:	6078      	str	r0, [r7, #4]
 8004bfc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004c04:	2b01      	cmp	r3, #1
 8004c06:	d101      	bne.n	8004c0c <HAL_TIM_ConfigClockSource+0x18>
 8004c08:	2302      	movs	r3, #2
 8004c0a:	e0b3      	b.n	8004d74 <HAL_TIM_ConfigClockSource+0x180>
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	2201      	movs	r2, #1
 8004c10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	2202      	movs	r2, #2
 8004c18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	689b      	ldr	r3, [r3, #8]
 8004c22:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004c2a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004c32:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	68fa      	ldr	r2, [r7, #12]
 8004c3a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004c3c:	683b      	ldr	r3, [r7, #0]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004c44:	d03e      	beq.n	8004cc4 <HAL_TIM_ConfigClockSource+0xd0>
 8004c46:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004c4a:	f200 8087 	bhi.w	8004d5c <HAL_TIM_ConfigClockSource+0x168>
 8004c4e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004c52:	f000 8085 	beq.w	8004d60 <HAL_TIM_ConfigClockSource+0x16c>
 8004c56:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004c5a:	d87f      	bhi.n	8004d5c <HAL_TIM_ConfigClockSource+0x168>
 8004c5c:	2b70      	cmp	r3, #112	; 0x70
 8004c5e:	d01a      	beq.n	8004c96 <HAL_TIM_ConfigClockSource+0xa2>
 8004c60:	2b70      	cmp	r3, #112	; 0x70
 8004c62:	d87b      	bhi.n	8004d5c <HAL_TIM_ConfigClockSource+0x168>
 8004c64:	2b60      	cmp	r3, #96	; 0x60
 8004c66:	d050      	beq.n	8004d0a <HAL_TIM_ConfigClockSource+0x116>
 8004c68:	2b60      	cmp	r3, #96	; 0x60
 8004c6a:	d877      	bhi.n	8004d5c <HAL_TIM_ConfigClockSource+0x168>
 8004c6c:	2b50      	cmp	r3, #80	; 0x50
 8004c6e:	d03c      	beq.n	8004cea <HAL_TIM_ConfigClockSource+0xf6>
 8004c70:	2b50      	cmp	r3, #80	; 0x50
 8004c72:	d873      	bhi.n	8004d5c <HAL_TIM_ConfigClockSource+0x168>
 8004c74:	2b40      	cmp	r3, #64	; 0x40
 8004c76:	d058      	beq.n	8004d2a <HAL_TIM_ConfigClockSource+0x136>
 8004c78:	2b40      	cmp	r3, #64	; 0x40
 8004c7a:	d86f      	bhi.n	8004d5c <HAL_TIM_ConfigClockSource+0x168>
 8004c7c:	2b30      	cmp	r3, #48	; 0x30
 8004c7e:	d064      	beq.n	8004d4a <HAL_TIM_ConfigClockSource+0x156>
 8004c80:	2b30      	cmp	r3, #48	; 0x30
 8004c82:	d86b      	bhi.n	8004d5c <HAL_TIM_ConfigClockSource+0x168>
 8004c84:	2b20      	cmp	r3, #32
 8004c86:	d060      	beq.n	8004d4a <HAL_TIM_ConfigClockSource+0x156>
 8004c88:	2b20      	cmp	r3, #32
 8004c8a:	d867      	bhi.n	8004d5c <HAL_TIM_ConfigClockSource+0x168>
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d05c      	beq.n	8004d4a <HAL_TIM_ConfigClockSource+0x156>
 8004c90:	2b10      	cmp	r3, #16
 8004c92:	d05a      	beq.n	8004d4a <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8004c94:	e062      	b.n	8004d5c <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	6818      	ldr	r0, [r3, #0]
 8004c9a:	683b      	ldr	r3, [r7, #0]
 8004c9c:	6899      	ldr	r1, [r3, #8]
 8004c9e:	683b      	ldr	r3, [r7, #0]
 8004ca0:	685a      	ldr	r2, [r3, #4]
 8004ca2:	683b      	ldr	r3, [r7, #0]
 8004ca4:	68db      	ldr	r3, [r3, #12]
 8004ca6:	f000 f98b 	bl	8004fc0 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	689b      	ldr	r3, [r3, #8]
 8004cb0:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004cb8:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	68fa      	ldr	r2, [r7, #12]
 8004cc0:	609a      	str	r2, [r3, #8]
      break;
 8004cc2:	e04e      	b.n	8004d62 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	6818      	ldr	r0, [r3, #0]
 8004cc8:	683b      	ldr	r3, [r7, #0]
 8004cca:	6899      	ldr	r1, [r3, #8]
 8004ccc:	683b      	ldr	r3, [r7, #0]
 8004cce:	685a      	ldr	r2, [r3, #4]
 8004cd0:	683b      	ldr	r3, [r7, #0]
 8004cd2:	68db      	ldr	r3, [r3, #12]
 8004cd4:	f000 f974 	bl	8004fc0 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	689a      	ldr	r2, [r3, #8]
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004ce6:	609a      	str	r2, [r3, #8]
      break;
 8004ce8:	e03b      	b.n	8004d62 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	6818      	ldr	r0, [r3, #0]
 8004cee:	683b      	ldr	r3, [r7, #0]
 8004cf0:	6859      	ldr	r1, [r3, #4]
 8004cf2:	683b      	ldr	r3, [r7, #0]
 8004cf4:	68db      	ldr	r3, [r3, #12]
 8004cf6:	461a      	mov	r2, r3
 8004cf8:	f000 f8e8 	bl	8004ecc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	2150      	movs	r1, #80	; 0x50
 8004d02:	4618      	mov	r0, r3
 8004d04:	f000 f941 	bl	8004f8a <TIM_ITRx_SetConfig>
      break;
 8004d08:	e02b      	b.n	8004d62 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	6818      	ldr	r0, [r3, #0]
 8004d0e:	683b      	ldr	r3, [r7, #0]
 8004d10:	6859      	ldr	r1, [r3, #4]
 8004d12:	683b      	ldr	r3, [r7, #0]
 8004d14:	68db      	ldr	r3, [r3, #12]
 8004d16:	461a      	mov	r2, r3
 8004d18:	f000 f907 	bl	8004f2a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	2160      	movs	r1, #96	; 0x60
 8004d22:	4618      	mov	r0, r3
 8004d24:	f000 f931 	bl	8004f8a <TIM_ITRx_SetConfig>
      break;
 8004d28:	e01b      	b.n	8004d62 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	6818      	ldr	r0, [r3, #0]
 8004d2e:	683b      	ldr	r3, [r7, #0]
 8004d30:	6859      	ldr	r1, [r3, #4]
 8004d32:	683b      	ldr	r3, [r7, #0]
 8004d34:	68db      	ldr	r3, [r3, #12]
 8004d36:	461a      	mov	r2, r3
 8004d38:	f000 f8c8 	bl	8004ecc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	2140      	movs	r1, #64	; 0x40
 8004d42:	4618      	mov	r0, r3
 8004d44:	f000 f921 	bl	8004f8a <TIM_ITRx_SetConfig>
      break;
 8004d48:	e00b      	b.n	8004d62 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	681a      	ldr	r2, [r3, #0]
 8004d4e:	683b      	ldr	r3, [r7, #0]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	4619      	mov	r1, r3
 8004d54:	4610      	mov	r0, r2
 8004d56:	f000 f918 	bl	8004f8a <TIM_ITRx_SetConfig>
        break;
 8004d5a:	e002      	b.n	8004d62 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8004d5c:	bf00      	nop
 8004d5e:	e000      	b.n	8004d62 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8004d60:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	2201      	movs	r2, #1
 8004d66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	2200      	movs	r2, #0
 8004d6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004d72:	2300      	movs	r3, #0
}
 8004d74:	4618      	mov	r0, r3
 8004d76:	3710      	adds	r7, #16
 8004d78:	46bd      	mov	sp, r7
 8004d7a:	bd80      	pop	{r7, pc}

08004d7c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004d7c:	b480      	push	{r7}
 8004d7e:	b083      	sub	sp, #12
 8004d80:	af00      	add	r7, sp, #0
 8004d82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004d84:	bf00      	nop
 8004d86:	370c      	adds	r7, #12
 8004d88:	46bd      	mov	sp, r7
 8004d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d8e:	4770      	bx	lr

08004d90 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004d90:	b480      	push	{r7}
 8004d92:	b083      	sub	sp, #12
 8004d94:	af00      	add	r7, sp, #0
 8004d96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004d98:	bf00      	nop
 8004d9a:	370c      	adds	r7, #12
 8004d9c:	46bd      	mov	sp, r7
 8004d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004da2:	4770      	bx	lr

08004da4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004da4:	b480      	push	{r7}
 8004da6:	b083      	sub	sp, #12
 8004da8:	af00      	add	r7, sp, #0
 8004daa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004dac:	bf00      	nop
 8004dae:	370c      	adds	r7, #12
 8004db0:	46bd      	mov	sp, r7
 8004db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004db6:	4770      	bx	lr

08004db8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004db8:	b480      	push	{r7}
 8004dba:	b083      	sub	sp, #12
 8004dbc:	af00      	add	r7, sp, #0
 8004dbe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004dc0:	bf00      	nop
 8004dc2:	370c      	adds	r7, #12
 8004dc4:	46bd      	mov	sp, r7
 8004dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dca:	4770      	bx	lr

08004dcc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004dcc:	b480      	push	{r7}
 8004dce:	b085      	sub	sp, #20
 8004dd0:	af00      	add	r7, sp, #0
 8004dd2:	6078      	str	r0, [r7, #4]
 8004dd4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	4a34      	ldr	r2, [pc, #208]	; (8004eb0 <TIM_Base_SetConfig+0xe4>)
 8004de0:	4293      	cmp	r3, r2
 8004de2:	d00f      	beq.n	8004e04 <TIM_Base_SetConfig+0x38>
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004dea:	d00b      	beq.n	8004e04 <TIM_Base_SetConfig+0x38>
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	4a31      	ldr	r2, [pc, #196]	; (8004eb4 <TIM_Base_SetConfig+0xe8>)
 8004df0:	4293      	cmp	r3, r2
 8004df2:	d007      	beq.n	8004e04 <TIM_Base_SetConfig+0x38>
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	4a30      	ldr	r2, [pc, #192]	; (8004eb8 <TIM_Base_SetConfig+0xec>)
 8004df8:	4293      	cmp	r3, r2
 8004dfa:	d003      	beq.n	8004e04 <TIM_Base_SetConfig+0x38>
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	4a2f      	ldr	r2, [pc, #188]	; (8004ebc <TIM_Base_SetConfig+0xf0>)
 8004e00:	4293      	cmp	r3, r2
 8004e02:	d108      	bne.n	8004e16 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e0a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004e0c:	683b      	ldr	r3, [r7, #0]
 8004e0e:	685b      	ldr	r3, [r3, #4]
 8004e10:	68fa      	ldr	r2, [r7, #12]
 8004e12:	4313      	orrs	r3, r2
 8004e14:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	4a25      	ldr	r2, [pc, #148]	; (8004eb0 <TIM_Base_SetConfig+0xe4>)
 8004e1a:	4293      	cmp	r3, r2
 8004e1c:	d01b      	beq.n	8004e56 <TIM_Base_SetConfig+0x8a>
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004e24:	d017      	beq.n	8004e56 <TIM_Base_SetConfig+0x8a>
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	4a22      	ldr	r2, [pc, #136]	; (8004eb4 <TIM_Base_SetConfig+0xe8>)
 8004e2a:	4293      	cmp	r3, r2
 8004e2c:	d013      	beq.n	8004e56 <TIM_Base_SetConfig+0x8a>
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	4a21      	ldr	r2, [pc, #132]	; (8004eb8 <TIM_Base_SetConfig+0xec>)
 8004e32:	4293      	cmp	r3, r2
 8004e34:	d00f      	beq.n	8004e56 <TIM_Base_SetConfig+0x8a>
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	4a20      	ldr	r2, [pc, #128]	; (8004ebc <TIM_Base_SetConfig+0xf0>)
 8004e3a:	4293      	cmp	r3, r2
 8004e3c:	d00b      	beq.n	8004e56 <TIM_Base_SetConfig+0x8a>
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	4a1f      	ldr	r2, [pc, #124]	; (8004ec0 <TIM_Base_SetConfig+0xf4>)
 8004e42:	4293      	cmp	r3, r2
 8004e44:	d007      	beq.n	8004e56 <TIM_Base_SetConfig+0x8a>
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	4a1e      	ldr	r2, [pc, #120]	; (8004ec4 <TIM_Base_SetConfig+0xf8>)
 8004e4a:	4293      	cmp	r3, r2
 8004e4c:	d003      	beq.n	8004e56 <TIM_Base_SetConfig+0x8a>
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	4a1d      	ldr	r2, [pc, #116]	; (8004ec8 <TIM_Base_SetConfig+0xfc>)
 8004e52:	4293      	cmp	r3, r2
 8004e54:	d108      	bne.n	8004e68 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004e5c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004e5e:	683b      	ldr	r3, [r7, #0]
 8004e60:	68db      	ldr	r3, [r3, #12]
 8004e62:	68fa      	ldr	r2, [r7, #12]
 8004e64:	4313      	orrs	r3, r2
 8004e66:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004e6e:	683b      	ldr	r3, [r7, #0]
 8004e70:	695b      	ldr	r3, [r3, #20]
 8004e72:	4313      	orrs	r3, r2
 8004e74:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	68fa      	ldr	r2, [r7, #12]
 8004e7a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004e7c:	683b      	ldr	r3, [r7, #0]
 8004e7e:	689a      	ldr	r2, [r3, #8]
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004e84:	683b      	ldr	r3, [r7, #0]
 8004e86:	681a      	ldr	r2, [r3, #0]
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	4a08      	ldr	r2, [pc, #32]	; (8004eb0 <TIM_Base_SetConfig+0xe4>)
 8004e90:	4293      	cmp	r3, r2
 8004e92:	d103      	bne.n	8004e9c <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004e94:	683b      	ldr	r3, [r7, #0]
 8004e96:	691a      	ldr	r2, [r3, #16]
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	2201      	movs	r2, #1
 8004ea0:	615a      	str	r2, [r3, #20]
}
 8004ea2:	bf00      	nop
 8004ea4:	3714      	adds	r7, #20
 8004ea6:	46bd      	mov	sp, r7
 8004ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eac:	4770      	bx	lr
 8004eae:	bf00      	nop
 8004eb0:	40010000 	.word	0x40010000
 8004eb4:	40000400 	.word	0x40000400
 8004eb8:	40000800 	.word	0x40000800
 8004ebc:	40000c00 	.word	0x40000c00
 8004ec0:	40014000 	.word	0x40014000
 8004ec4:	40014400 	.word	0x40014400
 8004ec8:	40014800 	.word	0x40014800

08004ecc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004ecc:	b480      	push	{r7}
 8004ece:	b087      	sub	sp, #28
 8004ed0:	af00      	add	r7, sp, #0
 8004ed2:	60f8      	str	r0, [r7, #12]
 8004ed4:	60b9      	str	r1, [r7, #8]
 8004ed6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	6a1b      	ldr	r3, [r3, #32]
 8004edc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	6a1b      	ldr	r3, [r3, #32]
 8004ee2:	f023 0201 	bic.w	r2, r3, #1
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	699b      	ldr	r3, [r3, #24]
 8004eee:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004ef0:	693b      	ldr	r3, [r7, #16]
 8004ef2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004ef6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	011b      	lsls	r3, r3, #4
 8004efc:	693a      	ldr	r2, [r7, #16]
 8004efe:	4313      	orrs	r3, r2
 8004f00:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004f02:	697b      	ldr	r3, [r7, #20]
 8004f04:	f023 030a 	bic.w	r3, r3, #10
 8004f08:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004f0a:	697a      	ldr	r2, [r7, #20]
 8004f0c:	68bb      	ldr	r3, [r7, #8]
 8004f0e:	4313      	orrs	r3, r2
 8004f10:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	693a      	ldr	r2, [r7, #16]
 8004f16:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	697a      	ldr	r2, [r7, #20]
 8004f1c:	621a      	str	r2, [r3, #32]
}
 8004f1e:	bf00      	nop
 8004f20:	371c      	adds	r7, #28
 8004f22:	46bd      	mov	sp, r7
 8004f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f28:	4770      	bx	lr

08004f2a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004f2a:	b480      	push	{r7}
 8004f2c:	b087      	sub	sp, #28
 8004f2e:	af00      	add	r7, sp, #0
 8004f30:	60f8      	str	r0, [r7, #12]
 8004f32:	60b9      	str	r1, [r7, #8]
 8004f34:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	6a1b      	ldr	r3, [r3, #32]
 8004f3a:	f023 0210 	bic.w	r2, r3, #16
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	699b      	ldr	r3, [r3, #24]
 8004f46:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	6a1b      	ldr	r3, [r3, #32]
 8004f4c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004f4e:	697b      	ldr	r3, [r7, #20]
 8004f50:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004f54:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	031b      	lsls	r3, r3, #12
 8004f5a:	697a      	ldr	r2, [r7, #20]
 8004f5c:	4313      	orrs	r3, r2
 8004f5e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004f60:	693b      	ldr	r3, [r7, #16]
 8004f62:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004f66:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004f68:	68bb      	ldr	r3, [r7, #8]
 8004f6a:	011b      	lsls	r3, r3, #4
 8004f6c:	693a      	ldr	r2, [r7, #16]
 8004f6e:	4313      	orrs	r3, r2
 8004f70:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	697a      	ldr	r2, [r7, #20]
 8004f76:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	693a      	ldr	r2, [r7, #16]
 8004f7c:	621a      	str	r2, [r3, #32]
}
 8004f7e:	bf00      	nop
 8004f80:	371c      	adds	r7, #28
 8004f82:	46bd      	mov	sp, r7
 8004f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f88:	4770      	bx	lr

08004f8a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004f8a:	b480      	push	{r7}
 8004f8c:	b085      	sub	sp, #20
 8004f8e:	af00      	add	r7, sp, #0
 8004f90:	6078      	str	r0, [r7, #4]
 8004f92:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	689b      	ldr	r3, [r3, #8]
 8004f98:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004fa0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004fa2:	683a      	ldr	r2, [r7, #0]
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	4313      	orrs	r3, r2
 8004fa8:	f043 0307 	orr.w	r3, r3, #7
 8004fac:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	68fa      	ldr	r2, [r7, #12]
 8004fb2:	609a      	str	r2, [r3, #8]
}
 8004fb4:	bf00      	nop
 8004fb6:	3714      	adds	r7, #20
 8004fb8:	46bd      	mov	sp, r7
 8004fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fbe:	4770      	bx	lr

08004fc0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004fc0:	b480      	push	{r7}
 8004fc2:	b087      	sub	sp, #28
 8004fc4:	af00      	add	r7, sp, #0
 8004fc6:	60f8      	str	r0, [r7, #12]
 8004fc8:	60b9      	str	r1, [r7, #8]
 8004fca:	607a      	str	r2, [r7, #4]
 8004fcc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	689b      	ldr	r3, [r3, #8]
 8004fd2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004fd4:	697b      	ldr	r3, [r7, #20]
 8004fd6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004fda:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004fdc:	683b      	ldr	r3, [r7, #0]
 8004fde:	021a      	lsls	r2, r3, #8
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	431a      	orrs	r2, r3
 8004fe4:	68bb      	ldr	r3, [r7, #8]
 8004fe6:	4313      	orrs	r3, r2
 8004fe8:	697a      	ldr	r2, [r7, #20]
 8004fea:	4313      	orrs	r3, r2
 8004fec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	697a      	ldr	r2, [r7, #20]
 8004ff2:	609a      	str	r2, [r3, #8]
}
 8004ff4:	bf00      	nop
 8004ff6:	371c      	adds	r7, #28
 8004ff8:	46bd      	mov	sp, r7
 8004ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ffe:	4770      	bx	lr

08005000 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005000:	b480      	push	{r7}
 8005002:	b085      	sub	sp, #20
 8005004:	af00      	add	r7, sp, #0
 8005006:	6078      	str	r0, [r7, #4]
 8005008:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005010:	2b01      	cmp	r3, #1
 8005012:	d101      	bne.n	8005018 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005014:	2302      	movs	r3, #2
 8005016:	e050      	b.n	80050ba <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	2201      	movs	r2, #1
 800501c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	2202      	movs	r2, #2
 8005024:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	685b      	ldr	r3, [r3, #4]
 800502e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	689b      	ldr	r3, [r3, #8]
 8005036:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800503e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005040:	683b      	ldr	r3, [r7, #0]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	68fa      	ldr	r2, [r7, #12]
 8005046:	4313      	orrs	r3, r2
 8005048:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	68fa      	ldr	r2, [r7, #12]
 8005050:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	4a1c      	ldr	r2, [pc, #112]	; (80050c8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8005058:	4293      	cmp	r3, r2
 800505a:	d018      	beq.n	800508e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005064:	d013      	beq.n	800508e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	4a18      	ldr	r2, [pc, #96]	; (80050cc <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800506c:	4293      	cmp	r3, r2
 800506e:	d00e      	beq.n	800508e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	4a16      	ldr	r2, [pc, #88]	; (80050d0 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8005076:	4293      	cmp	r3, r2
 8005078:	d009      	beq.n	800508e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	4a15      	ldr	r2, [pc, #84]	; (80050d4 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8005080:	4293      	cmp	r3, r2
 8005082:	d004      	beq.n	800508e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	4a13      	ldr	r2, [pc, #76]	; (80050d8 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800508a:	4293      	cmp	r3, r2
 800508c:	d10c      	bne.n	80050a8 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800508e:	68bb      	ldr	r3, [r7, #8]
 8005090:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005094:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005096:	683b      	ldr	r3, [r7, #0]
 8005098:	685b      	ldr	r3, [r3, #4]
 800509a:	68ba      	ldr	r2, [r7, #8]
 800509c:	4313      	orrs	r3, r2
 800509e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	68ba      	ldr	r2, [r7, #8]
 80050a6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	2201      	movs	r2, #1
 80050ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	2200      	movs	r2, #0
 80050b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80050b8:	2300      	movs	r3, #0
}
 80050ba:	4618      	mov	r0, r3
 80050bc:	3714      	adds	r7, #20
 80050be:	46bd      	mov	sp, r7
 80050c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050c4:	4770      	bx	lr
 80050c6:	bf00      	nop
 80050c8:	40010000 	.word	0x40010000
 80050cc:	40000400 	.word	0x40000400
 80050d0:	40000800 	.word	0x40000800
 80050d4:	40000c00 	.word	0x40000c00
 80050d8:	40014000 	.word	0x40014000

080050dc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80050dc:	b480      	push	{r7}
 80050de:	b083      	sub	sp, #12
 80050e0:	af00      	add	r7, sp, #0
 80050e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80050e4:	bf00      	nop
 80050e6:	370c      	adds	r7, #12
 80050e8:	46bd      	mov	sp, r7
 80050ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ee:	4770      	bx	lr

080050f0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80050f0:	b480      	push	{r7}
 80050f2:	b083      	sub	sp, #12
 80050f4:	af00      	add	r7, sp, #0
 80050f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80050f8:	bf00      	nop
 80050fa:	370c      	adds	r7, #12
 80050fc:	46bd      	mov	sp, r7
 80050fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005102:	4770      	bx	lr

08005104 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005104:	b580      	push	{r7, lr}
 8005106:	b082      	sub	sp, #8
 8005108:	af00      	add	r7, sp, #0
 800510a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	2b00      	cmp	r3, #0
 8005110:	d101      	bne.n	8005116 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005112:	2301      	movs	r3, #1
 8005114:	e03f      	b.n	8005196 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800511c:	b2db      	uxtb	r3, r3
 800511e:	2b00      	cmp	r3, #0
 8005120:	d106      	bne.n	8005130 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	2200      	movs	r2, #0
 8005126:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800512a:	6878      	ldr	r0, [r7, #4]
 800512c:	f7fc fe3e 	bl	8001dac <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	2224      	movs	r2, #36	; 0x24
 8005134:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	68da      	ldr	r2, [r3, #12]
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005146:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005148:	6878      	ldr	r0, [r7, #4]
 800514a:	f000 f829 	bl	80051a0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	691a      	ldr	r2, [r3, #16]
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800515c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	695a      	ldr	r2, [r3, #20]
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800516c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	68da      	ldr	r2, [r3, #12]
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800517c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	2200      	movs	r2, #0
 8005182:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	2220      	movs	r2, #32
 8005188:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	2220      	movs	r2, #32
 8005190:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005194:	2300      	movs	r3, #0
}
 8005196:	4618      	mov	r0, r3
 8005198:	3708      	adds	r7, #8
 800519a:	46bd      	mov	sp, r7
 800519c:	bd80      	pop	{r7, pc}
	...

080051a0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80051a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80051a4:	b09f      	sub	sp, #124	; 0x7c
 80051a6:	af00      	add	r7, sp, #0
 80051a8:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80051aa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	691b      	ldr	r3, [r3, #16]
 80051b0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80051b4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80051b6:	68d9      	ldr	r1, [r3, #12]
 80051b8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80051ba:	681a      	ldr	r2, [r3, #0]
 80051bc:	ea40 0301 	orr.w	r3, r0, r1
 80051c0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80051c2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80051c4:	689a      	ldr	r2, [r3, #8]
 80051c6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80051c8:	691b      	ldr	r3, [r3, #16]
 80051ca:	431a      	orrs	r2, r3
 80051cc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80051ce:	695b      	ldr	r3, [r3, #20]
 80051d0:	431a      	orrs	r2, r3
 80051d2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80051d4:	69db      	ldr	r3, [r3, #28]
 80051d6:	4313      	orrs	r3, r2
 80051d8:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 80051da:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	68db      	ldr	r3, [r3, #12]
 80051e0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80051e4:	f021 010c 	bic.w	r1, r1, #12
 80051e8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80051ea:	681a      	ldr	r2, [r3, #0]
 80051ec:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80051ee:	430b      	orrs	r3, r1
 80051f0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80051f2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	695b      	ldr	r3, [r3, #20]
 80051f8:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80051fc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80051fe:	6999      	ldr	r1, [r3, #24]
 8005200:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005202:	681a      	ldr	r2, [r3, #0]
 8005204:	ea40 0301 	orr.w	r3, r0, r1
 8005208:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800520a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800520c:	681a      	ldr	r2, [r3, #0]
 800520e:	4bc5      	ldr	r3, [pc, #788]	; (8005524 <UART_SetConfig+0x384>)
 8005210:	429a      	cmp	r2, r3
 8005212:	d004      	beq.n	800521e <UART_SetConfig+0x7e>
 8005214:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005216:	681a      	ldr	r2, [r3, #0]
 8005218:	4bc3      	ldr	r3, [pc, #780]	; (8005528 <UART_SetConfig+0x388>)
 800521a:	429a      	cmp	r2, r3
 800521c:	d103      	bne.n	8005226 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800521e:	f7fe ff1d 	bl	800405c <HAL_RCC_GetPCLK2Freq>
 8005222:	6778      	str	r0, [r7, #116]	; 0x74
 8005224:	e002      	b.n	800522c <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005226:	f7fe ff05 	bl	8004034 <HAL_RCC_GetPCLK1Freq>
 800522a:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800522c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800522e:	69db      	ldr	r3, [r3, #28]
 8005230:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005234:	f040 80b6 	bne.w	80053a4 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005238:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800523a:	461c      	mov	r4, r3
 800523c:	f04f 0500 	mov.w	r5, #0
 8005240:	4622      	mov	r2, r4
 8005242:	462b      	mov	r3, r5
 8005244:	1891      	adds	r1, r2, r2
 8005246:	6439      	str	r1, [r7, #64]	; 0x40
 8005248:	415b      	adcs	r3, r3
 800524a:	647b      	str	r3, [r7, #68]	; 0x44
 800524c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8005250:	1912      	adds	r2, r2, r4
 8005252:	eb45 0303 	adc.w	r3, r5, r3
 8005256:	f04f 0000 	mov.w	r0, #0
 800525a:	f04f 0100 	mov.w	r1, #0
 800525e:	00d9      	lsls	r1, r3, #3
 8005260:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005264:	00d0      	lsls	r0, r2, #3
 8005266:	4602      	mov	r2, r0
 8005268:	460b      	mov	r3, r1
 800526a:	1911      	adds	r1, r2, r4
 800526c:	6639      	str	r1, [r7, #96]	; 0x60
 800526e:	416b      	adcs	r3, r5
 8005270:	667b      	str	r3, [r7, #100]	; 0x64
 8005272:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005274:	685b      	ldr	r3, [r3, #4]
 8005276:	461a      	mov	r2, r3
 8005278:	f04f 0300 	mov.w	r3, #0
 800527c:	1891      	adds	r1, r2, r2
 800527e:	63b9      	str	r1, [r7, #56]	; 0x38
 8005280:	415b      	adcs	r3, r3
 8005282:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005284:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005288:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 800528c:	f7fb fda0 	bl	8000dd0 <__aeabi_uldivmod>
 8005290:	4602      	mov	r2, r0
 8005292:	460b      	mov	r3, r1
 8005294:	4ba5      	ldr	r3, [pc, #660]	; (800552c <UART_SetConfig+0x38c>)
 8005296:	fba3 2302 	umull	r2, r3, r3, r2
 800529a:	095b      	lsrs	r3, r3, #5
 800529c:	011e      	lsls	r6, r3, #4
 800529e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80052a0:	461c      	mov	r4, r3
 80052a2:	f04f 0500 	mov.w	r5, #0
 80052a6:	4622      	mov	r2, r4
 80052a8:	462b      	mov	r3, r5
 80052aa:	1891      	adds	r1, r2, r2
 80052ac:	6339      	str	r1, [r7, #48]	; 0x30
 80052ae:	415b      	adcs	r3, r3
 80052b0:	637b      	str	r3, [r7, #52]	; 0x34
 80052b2:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80052b6:	1912      	adds	r2, r2, r4
 80052b8:	eb45 0303 	adc.w	r3, r5, r3
 80052bc:	f04f 0000 	mov.w	r0, #0
 80052c0:	f04f 0100 	mov.w	r1, #0
 80052c4:	00d9      	lsls	r1, r3, #3
 80052c6:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80052ca:	00d0      	lsls	r0, r2, #3
 80052cc:	4602      	mov	r2, r0
 80052ce:	460b      	mov	r3, r1
 80052d0:	1911      	adds	r1, r2, r4
 80052d2:	65b9      	str	r1, [r7, #88]	; 0x58
 80052d4:	416b      	adcs	r3, r5
 80052d6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80052d8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80052da:	685b      	ldr	r3, [r3, #4]
 80052dc:	461a      	mov	r2, r3
 80052de:	f04f 0300 	mov.w	r3, #0
 80052e2:	1891      	adds	r1, r2, r2
 80052e4:	62b9      	str	r1, [r7, #40]	; 0x28
 80052e6:	415b      	adcs	r3, r3
 80052e8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80052ea:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80052ee:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 80052f2:	f7fb fd6d 	bl	8000dd0 <__aeabi_uldivmod>
 80052f6:	4602      	mov	r2, r0
 80052f8:	460b      	mov	r3, r1
 80052fa:	4b8c      	ldr	r3, [pc, #560]	; (800552c <UART_SetConfig+0x38c>)
 80052fc:	fba3 1302 	umull	r1, r3, r3, r2
 8005300:	095b      	lsrs	r3, r3, #5
 8005302:	2164      	movs	r1, #100	; 0x64
 8005304:	fb01 f303 	mul.w	r3, r1, r3
 8005308:	1ad3      	subs	r3, r2, r3
 800530a:	00db      	lsls	r3, r3, #3
 800530c:	3332      	adds	r3, #50	; 0x32
 800530e:	4a87      	ldr	r2, [pc, #540]	; (800552c <UART_SetConfig+0x38c>)
 8005310:	fba2 2303 	umull	r2, r3, r2, r3
 8005314:	095b      	lsrs	r3, r3, #5
 8005316:	005b      	lsls	r3, r3, #1
 8005318:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800531c:	441e      	add	r6, r3
 800531e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005320:	4618      	mov	r0, r3
 8005322:	f04f 0100 	mov.w	r1, #0
 8005326:	4602      	mov	r2, r0
 8005328:	460b      	mov	r3, r1
 800532a:	1894      	adds	r4, r2, r2
 800532c:	623c      	str	r4, [r7, #32]
 800532e:	415b      	adcs	r3, r3
 8005330:	627b      	str	r3, [r7, #36]	; 0x24
 8005332:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005336:	1812      	adds	r2, r2, r0
 8005338:	eb41 0303 	adc.w	r3, r1, r3
 800533c:	f04f 0400 	mov.w	r4, #0
 8005340:	f04f 0500 	mov.w	r5, #0
 8005344:	00dd      	lsls	r5, r3, #3
 8005346:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800534a:	00d4      	lsls	r4, r2, #3
 800534c:	4622      	mov	r2, r4
 800534e:	462b      	mov	r3, r5
 8005350:	1814      	adds	r4, r2, r0
 8005352:	653c      	str	r4, [r7, #80]	; 0x50
 8005354:	414b      	adcs	r3, r1
 8005356:	657b      	str	r3, [r7, #84]	; 0x54
 8005358:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800535a:	685b      	ldr	r3, [r3, #4]
 800535c:	461a      	mov	r2, r3
 800535e:	f04f 0300 	mov.w	r3, #0
 8005362:	1891      	adds	r1, r2, r2
 8005364:	61b9      	str	r1, [r7, #24]
 8005366:	415b      	adcs	r3, r3
 8005368:	61fb      	str	r3, [r7, #28]
 800536a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800536e:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8005372:	f7fb fd2d 	bl	8000dd0 <__aeabi_uldivmod>
 8005376:	4602      	mov	r2, r0
 8005378:	460b      	mov	r3, r1
 800537a:	4b6c      	ldr	r3, [pc, #432]	; (800552c <UART_SetConfig+0x38c>)
 800537c:	fba3 1302 	umull	r1, r3, r3, r2
 8005380:	095b      	lsrs	r3, r3, #5
 8005382:	2164      	movs	r1, #100	; 0x64
 8005384:	fb01 f303 	mul.w	r3, r1, r3
 8005388:	1ad3      	subs	r3, r2, r3
 800538a:	00db      	lsls	r3, r3, #3
 800538c:	3332      	adds	r3, #50	; 0x32
 800538e:	4a67      	ldr	r2, [pc, #412]	; (800552c <UART_SetConfig+0x38c>)
 8005390:	fba2 2303 	umull	r2, r3, r2, r3
 8005394:	095b      	lsrs	r3, r3, #5
 8005396:	f003 0207 	and.w	r2, r3, #7
 800539a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	4432      	add	r2, r6
 80053a0:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80053a2:	e0b9      	b.n	8005518 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80053a4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80053a6:	461c      	mov	r4, r3
 80053a8:	f04f 0500 	mov.w	r5, #0
 80053ac:	4622      	mov	r2, r4
 80053ae:	462b      	mov	r3, r5
 80053b0:	1891      	adds	r1, r2, r2
 80053b2:	6139      	str	r1, [r7, #16]
 80053b4:	415b      	adcs	r3, r3
 80053b6:	617b      	str	r3, [r7, #20]
 80053b8:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80053bc:	1912      	adds	r2, r2, r4
 80053be:	eb45 0303 	adc.w	r3, r5, r3
 80053c2:	f04f 0000 	mov.w	r0, #0
 80053c6:	f04f 0100 	mov.w	r1, #0
 80053ca:	00d9      	lsls	r1, r3, #3
 80053cc:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80053d0:	00d0      	lsls	r0, r2, #3
 80053d2:	4602      	mov	r2, r0
 80053d4:	460b      	mov	r3, r1
 80053d6:	eb12 0804 	adds.w	r8, r2, r4
 80053da:	eb43 0905 	adc.w	r9, r3, r5
 80053de:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80053e0:	685b      	ldr	r3, [r3, #4]
 80053e2:	4618      	mov	r0, r3
 80053e4:	f04f 0100 	mov.w	r1, #0
 80053e8:	f04f 0200 	mov.w	r2, #0
 80053ec:	f04f 0300 	mov.w	r3, #0
 80053f0:	008b      	lsls	r3, r1, #2
 80053f2:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80053f6:	0082      	lsls	r2, r0, #2
 80053f8:	4640      	mov	r0, r8
 80053fa:	4649      	mov	r1, r9
 80053fc:	f7fb fce8 	bl	8000dd0 <__aeabi_uldivmod>
 8005400:	4602      	mov	r2, r0
 8005402:	460b      	mov	r3, r1
 8005404:	4b49      	ldr	r3, [pc, #292]	; (800552c <UART_SetConfig+0x38c>)
 8005406:	fba3 2302 	umull	r2, r3, r3, r2
 800540a:	095b      	lsrs	r3, r3, #5
 800540c:	011e      	lsls	r6, r3, #4
 800540e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005410:	4618      	mov	r0, r3
 8005412:	f04f 0100 	mov.w	r1, #0
 8005416:	4602      	mov	r2, r0
 8005418:	460b      	mov	r3, r1
 800541a:	1894      	adds	r4, r2, r2
 800541c:	60bc      	str	r4, [r7, #8]
 800541e:	415b      	adcs	r3, r3
 8005420:	60fb      	str	r3, [r7, #12]
 8005422:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005426:	1812      	adds	r2, r2, r0
 8005428:	eb41 0303 	adc.w	r3, r1, r3
 800542c:	f04f 0400 	mov.w	r4, #0
 8005430:	f04f 0500 	mov.w	r5, #0
 8005434:	00dd      	lsls	r5, r3, #3
 8005436:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800543a:	00d4      	lsls	r4, r2, #3
 800543c:	4622      	mov	r2, r4
 800543e:	462b      	mov	r3, r5
 8005440:	1814      	adds	r4, r2, r0
 8005442:	64bc      	str	r4, [r7, #72]	; 0x48
 8005444:	414b      	adcs	r3, r1
 8005446:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005448:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800544a:	685b      	ldr	r3, [r3, #4]
 800544c:	4618      	mov	r0, r3
 800544e:	f04f 0100 	mov.w	r1, #0
 8005452:	f04f 0200 	mov.w	r2, #0
 8005456:	f04f 0300 	mov.w	r3, #0
 800545a:	008b      	lsls	r3, r1, #2
 800545c:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8005460:	0082      	lsls	r2, r0, #2
 8005462:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8005466:	f7fb fcb3 	bl	8000dd0 <__aeabi_uldivmod>
 800546a:	4602      	mov	r2, r0
 800546c:	460b      	mov	r3, r1
 800546e:	4b2f      	ldr	r3, [pc, #188]	; (800552c <UART_SetConfig+0x38c>)
 8005470:	fba3 1302 	umull	r1, r3, r3, r2
 8005474:	095b      	lsrs	r3, r3, #5
 8005476:	2164      	movs	r1, #100	; 0x64
 8005478:	fb01 f303 	mul.w	r3, r1, r3
 800547c:	1ad3      	subs	r3, r2, r3
 800547e:	011b      	lsls	r3, r3, #4
 8005480:	3332      	adds	r3, #50	; 0x32
 8005482:	4a2a      	ldr	r2, [pc, #168]	; (800552c <UART_SetConfig+0x38c>)
 8005484:	fba2 2303 	umull	r2, r3, r2, r3
 8005488:	095b      	lsrs	r3, r3, #5
 800548a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800548e:	441e      	add	r6, r3
 8005490:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005492:	4618      	mov	r0, r3
 8005494:	f04f 0100 	mov.w	r1, #0
 8005498:	4602      	mov	r2, r0
 800549a:	460b      	mov	r3, r1
 800549c:	1894      	adds	r4, r2, r2
 800549e:	603c      	str	r4, [r7, #0]
 80054a0:	415b      	adcs	r3, r3
 80054a2:	607b      	str	r3, [r7, #4]
 80054a4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80054a8:	1812      	adds	r2, r2, r0
 80054aa:	eb41 0303 	adc.w	r3, r1, r3
 80054ae:	f04f 0400 	mov.w	r4, #0
 80054b2:	f04f 0500 	mov.w	r5, #0
 80054b6:	00dd      	lsls	r5, r3, #3
 80054b8:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80054bc:	00d4      	lsls	r4, r2, #3
 80054be:	4622      	mov	r2, r4
 80054c0:	462b      	mov	r3, r5
 80054c2:	eb12 0a00 	adds.w	sl, r2, r0
 80054c6:	eb43 0b01 	adc.w	fp, r3, r1
 80054ca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80054cc:	685b      	ldr	r3, [r3, #4]
 80054ce:	4618      	mov	r0, r3
 80054d0:	f04f 0100 	mov.w	r1, #0
 80054d4:	f04f 0200 	mov.w	r2, #0
 80054d8:	f04f 0300 	mov.w	r3, #0
 80054dc:	008b      	lsls	r3, r1, #2
 80054de:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80054e2:	0082      	lsls	r2, r0, #2
 80054e4:	4650      	mov	r0, sl
 80054e6:	4659      	mov	r1, fp
 80054e8:	f7fb fc72 	bl	8000dd0 <__aeabi_uldivmod>
 80054ec:	4602      	mov	r2, r0
 80054ee:	460b      	mov	r3, r1
 80054f0:	4b0e      	ldr	r3, [pc, #56]	; (800552c <UART_SetConfig+0x38c>)
 80054f2:	fba3 1302 	umull	r1, r3, r3, r2
 80054f6:	095b      	lsrs	r3, r3, #5
 80054f8:	2164      	movs	r1, #100	; 0x64
 80054fa:	fb01 f303 	mul.w	r3, r1, r3
 80054fe:	1ad3      	subs	r3, r2, r3
 8005500:	011b      	lsls	r3, r3, #4
 8005502:	3332      	adds	r3, #50	; 0x32
 8005504:	4a09      	ldr	r2, [pc, #36]	; (800552c <UART_SetConfig+0x38c>)
 8005506:	fba2 2303 	umull	r2, r3, r2, r3
 800550a:	095b      	lsrs	r3, r3, #5
 800550c:	f003 020f 	and.w	r2, r3, #15
 8005510:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	4432      	add	r2, r6
 8005516:	609a      	str	r2, [r3, #8]
}
 8005518:	bf00      	nop
 800551a:	377c      	adds	r7, #124	; 0x7c
 800551c:	46bd      	mov	sp, r7
 800551e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005522:	bf00      	nop
 8005524:	40011000 	.word	0x40011000
 8005528:	40011400 	.word	0x40011400
 800552c:	51eb851f 	.word	0x51eb851f

08005530 <__libc_init_array>:
 8005530:	b570      	push	{r4, r5, r6, lr}
 8005532:	4d0d      	ldr	r5, [pc, #52]	; (8005568 <__libc_init_array+0x38>)
 8005534:	4c0d      	ldr	r4, [pc, #52]	; (800556c <__libc_init_array+0x3c>)
 8005536:	1b64      	subs	r4, r4, r5
 8005538:	10a4      	asrs	r4, r4, #2
 800553a:	2600      	movs	r6, #0
 800553c:	42a6      	cmp	r6, r4
 800553e:	d109      	bne.n	8005554 <__libc_init_array+0x24>
 8005540:	4d0b      	ldr	r5, [pc, #44]	; (8005570 <__libc_init_array+0x40>)
 8005542:	4c0c      	ldr	r4, [pc, #48]	; (8005574 <__libc_init_array+0x44>)
 8005544:	f001 f856 	bl	80065f4 <_init>
 8005548:	1b64      	subs	r4, r4, r5
 800554a:	10a4      	asrs	r4, r4, #2
 800554c:	2600      	movs	r6, #0
 800554e:	42a6      	cmp	r6, r4
 8005550:	d105      	bne.n	800555e <__libc_init_array+0x2e>
 8005552:	bd70      	pop	{r4, r5, r6, pc}
 8005554:	f855 3b04 	ldr.w	r3, [r5], #4
 8005558:	4798      	blx	r3
 800555a:	3601      	adds	r6, #1
 800555c:	e7ee      	b.n	800553c <__libc_init_array+0xc>
 800555e:	f855 3b04 	ldr.w	r3, [r5], #4
 8005562:	4798      	blx	r3
 8005564:	3601      	adds	r6, #1
 8005566:	e7f2      	b.n	800554e <__libc_init_array+0x1e>
 8005568:	08006810 	.word	0x08006810
 800556c:	08006810 	.word	0x08006810
 8005570:	08006810 	.word	0x08006810
 8005574:	08006814 	.word	0x08006814

08005578 <memset>:
 8005578:	4402      	add	r2, r0
 800557a:	4603      	mov	r3, r0
 800557c:	4293      	cmp	r3, r2
 800557e:	d100      	bne.n	8005582 <memset+0xa>
 8005580:	4770      	bx	lr
 8005582:	f803 1b01 	strb.w	r1, [r3], #1
 8005586:	e7f9      	b.n	800557c <memset+0x4>

08005588 <sin>:
 8005588:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800558a:	ec53 2b10 	vmov	r2, r3, d0
 800558e:	4826      	ldr	r0, [pc, #152]	; (8005628 <sin+0xa0>)
 8005590:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8005594:	4281      	cmp	r1, r0
 8005596:	dc07      	bgt.n	80055a8 <sin+0x20>
 8005598:	ed9f 1b21 	vldr	d1, [pc, #132]	; 8005620 <sin+0x98>
 800559c:	2000      	movs	r0, #0
 800559e:	f000 fe5b 	bl	8006258 <__kernel_sin>
 80055a2:	ec51 0b10 	vmov	r0, r1, d0
 80055a6:	e007      	b.n	80055b8 <sin+0x30>
 80055a8:	4820      	ldr	r0, [pc, #128]	; (800562c <sin+0xa4>)
 80055aa:	4281      	cmp	r1, r0
 80055ac:	dd09      	ble.n	80055c2 <sin+0x3a>
 80055ae:	ee10 0a10 	vmov	r0, s0
 80055b2:	4619      	mov	r1, r3
 80055b4:	f7fa fe14 	bl	80001e0 <__aeabi_dsub>
 80055b8:	ec41 0b10 	vmov	d0, r0, r1
 80055bc:	b005      	add	sp, #20
 80055be:	f85d fb04 	ldr.w	pc, [sp], #4
 80055c2:	4668      	mov	r0, sp
 80055c4:	f000 f834 	bl	8005630 <__ieee754_rem_pio2>
 80055c8:	f000 0003 	and.w	r0, r0, #3
 80055cc:	2801      	cmp	r0, #1
 80055ce:	d008      	beq.n	80055e2 <sin+0x5a>
 80055d0:	2802      	cmp	r0, #2
 80055d2:	d00d      	beq.n	80055f0 <sin+0x68>
 80055d4:	b9d0      	cbnz	r0, 800560c <sin+0x84>
 80055d6:	ed9d 1b02 	vldr	d1, [sp, #8]
 80055da:	ed9d 0b00 	vldr	d0, [sp]
 80055de:	2001      	movs	r0, #1
 80055e0:	e7dd      	b.n	800559e <sin+0x16>
 80055e2:	ed9d 1b02 	vldr	d1, [sp, #8]
 80055e6:	ed9d 0b00 	vldr	d0, [sp]
 80055ea:	f000 fa2d 	bl	8005a48 <__kernel_cos>
 80055ee:	e7d8      	b.n	80055a2 <sin+0x1a>
 80055f0:	ed9d 1b02 	vldr	d1, [sp, #8]
 80055f4:	ed9d 0b00 	vldr	d0, [sp]
 80055f8:	2001      	movs	r0, #1
 80055fa:	f000 fe2d 	bl	8006258 <__kernel_sin>
 80055fe:	ec53 2b10 	vmov	r2, r3, d0
 8005602:	ee10 0a10 	vmov	r0, s0
 8005606:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800560a:	e7d5      	b.n	80055b8 <sin+0x30>
 800560c:	ed9d 1b02 	vldr	d1, [sp, #8]
 8005610:	ed9d 0b00 	vldr	d0, [sp]
 8005614:	f000 fa18 	bl	8005a48 <__kernel_cos>
 8005618:	e7f1      	b.n	80055fe <sin+0x76>
 800561a:	bf00      	nop
 800561c:	f3af 8000 	nop.w
	...
 8005628:	3fe921fb 	.word	0x3fe921fb
 800562c:	7fefffff 	.word	0x7fefffff

08005630 <__ieee754_rem_pio2>:
 8005630:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005634:	ed2d 8b02 	vpush	{d8}
 8005638:	ec55 4b10 	vmov	r4, r5, d0
 800563c:	4bca      	ldr	r3, [pc, #808]	; (8005968 <__ieee754_rem_pio2+0x338>)
 800563e:	b08b      	sub	sp, #44	; 0x2c
 8005640:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 8005644:	4598      	cmp	r8, r3
 8005646:	4682      	mov	sl, r0
 8005648:	9502      	str	r5, [sp, #8]
 800564a:	dc08      	bgt.n	800565e <__ieee754_rem_pio2+0x2e>
 800564c:	2200      	movs	r2, #0
 800564e:	2300      	movs	r3, #0
 8005650:	ed80 0b00 	vstr	d0, [r0]
 8005654:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8005658:	f04f 0b00 	mov.w	fp, #0
 800565c:	e028      	b.n	80056b0 <__ieee754_rem_pio2+0x80>
 800565e:	4bc3      	ldr	r3, [pc, #780]	; (800596c <__ieee754_rem_pio2+0x33c>)
 8005660:	4598      	cmp	r8, r3
 8005662:	dc78      	bgt.n	8005756 <__ieee754_rem_pio2+0x126>
 8005664:	9b02      	ldr	r3, [sp, #8]
 8005666:	4ec2      	ldr	r6, [pc, #776]	; (8005970 <__ieee754_rem_pio2+0x340>)
 8005668:	2b00      	cmp	r3, #0
 800566a:	ee10 0a10 	vmov	r0, s0
 800566e:	a3b0      	add	r3, pc, #704	; (adr r3, 8005930 <__ieee754_rem_pio2+0x300>)
 8005670:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005674:	4629      	mov	r1, r5
 8005676:	dd39      	ble.n	80056ec <__ieee754_rem_pio2+0xbc>
 8005678:	f7fa fdb2 	bl	80001e0 <__aeabi_dsub>
 800567c:	45b0      	cmp	r8, r6
 800567e:	4604      	mov	r4, r0
 8005680:	460d      	mov	r5, r1
 8005682:	d01b      	beq.n	80056bc <__ieee754_rem_pio2+0x8c>
 8005684:	a3ac      	add	r3, pc, #688	; (adr r3, 8005938 <__ieee754_rem_pio2+0x308>)
 8005686:	e9d3 2300 	ldrd	r2, r3, [r3]
 800568a:	f7fa fda9 	bl	80001e0 <__aeabi_dsub>
 800568e:	4602      	mov	r2, r0
 8005690:	460b      	mov	r3, r1
 8005692:	e9ca 2300 	strd	r2, r3, [sl]
 8005696:	4620      	mov	r0, r4
 8005698:	4629      	mov	r1, r5
 800569a:	f7fa fda1 	bl	80001e0 <__aeabi_dsub>
 800569e:	a3a6      	add	r3, pc, #664	; (adr r3, 8005938 <__ieee754_rem_pio2+0x308>)
 80056a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056a4:	f7fa fd9c 	bl	80001e0 <__aeabi_dsub>
 80056a8:	e9ca 0102 	strd	r0, r1, [sl, #8]
 80056ac:	f04f 0b01 	mov.w	fp, #1
 80056b0:	4658      	mov	r0, fp
 80056b2:	b00b      	add	sp, #44	; 0x2c
 80056b4:	ecbd 8b02 	vpop	{d8}
 80056b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80056bc:	a3a0      	add	r3, pc, #640	; (adr r3, 8005940 <__ieee754_rem_pio2+0x310>)
 80056be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056c2:	f7fa fd8d 	bl	80001e0 <__aeabi_dsub>
 80056c6:	a3a0      	add	r3, pc, #640	; (adr r3, 8005948 <__ieee754_rem_pio2+0x318>)
 80056c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056cc:	4604      	mov	r4, r0
 80056ce:	460d      	mov	r5, r1
 80056d0:	f7fa fd86 	bl	80001e0 <__aeabi_dsub>
 80056d4:	4602      	mov	r2, r0
 80056d6:	460b      	mov	r3, r1
 80056d8:	e9ca 2300 	strd	r2, r3, [sl]
 80056dc:	4620      	mov	r0, r4
 80056de:	4629      	mov	r1, r5
 80056e0:	f7fa fd7e 	bl	80001e0 <__aeabi_dsub>
 80056e4:	a398      	add	r3, pc, #608	; (adr r3, 8005948 <__ieee754_rem_pio2+0x318>)
 80056e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056ea:	e7db      	b.n	80056a4 <__ieee754_rem_pio2+0x74>
 80056ec:	f7fa fd7a 	bl	80001e4 <__adddf3>
 80056f0:	45b0      	cmp	r8, r6
 80056f2:	4604      	mov	r4, r0
 80056f4:	460d      	mov	r5, r1
 80056f6:	d016      	beq.n	8005726 <__ieee754_rem_pio2+0xf6>
 80056f8:	a38f      	add	r3, pc, #572	; (adr r3, 8005938 <__ieee754_rem_pio2+0x308>)
 80056fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056fe:	f7fa fd71 	bl	80001e4 <__adddf3>
 8005702:	4602      	mov	r2, r0
 8005704:	460b      	mov	r3, r1
 8005706:	e9ca 2300 	strd	r2, r3, [sl]
 800570a:	4620      	mov	r0, r4
 800570c:	4629      	mov	r1, r5
 800570e:	f7fa fd67 	bl	80001e0 <__aeabi_dsub>
 8005712:	a389      	add	r3, pc, #548	; (adr r3, 8005938 <__ieee754_rem_pio2+0x308>)
 8005714:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005718:	f7fa fd64 	bl	80001e4 <__adddf3>
 800571c:	f04f 3bff 	mov.w	fp, #4294967295
 8005720:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8005724:	e7c4      	b.n	80056b0 <__ieee754_rem_pio2+0x80>
 8005726:	a386      	add	r3, pc, #536	; (adr r3, 8005940 <__ieee754_rem_pio2+0x310>)
 8005728:	e9d3 2300 	ldrd	r2, r3, [r3]
 800572c:	f7fa fd5a 	bl	80001e4 <__adddf3>
 8005730:	a385      	add	r3, pc, #532	; (adr r3, 8005948 <__ieee754_rem_pio2+0x318>)
 8005732:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005736:	4604      	mov	r4, r0
 8005738:	460d      	mov	r5, r1
 800573a:	f7fa fd53 	bl	80001e4 <__adddf3>
 800573e:	4602      	mov	r2, r0
 8005740:	460b      	mov	r3, r1
 8005742:	e9ca 2300 	strd	r2, r3, [sl]
 8005746:	4620      	mov	r0, r4
 8005748:	4629      	mov	r1, r5
 800574a:	f7fa fd49 	bl	80001e0 <__aeabi_dsub>
 800574e:	a37e      	add	r3, pc, #504	; (adr r3, 8005948 <__ieee754_rem_pio2+0x318>)
 8005750:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005754:	e7e0      	b.n	8005718 <__ieee754_rem_pio2+0xe8>
 8005756:	4b87      	ldr	r3, [pc, #540]	; (8005974 <__ieee754_rem_pio2+0x344>)
 8005758:	4598      	cmp	r8, r3
 800575a:	f300 80d9 	bgt.w	8005910 <__ieee754_rem_pio2+0x2e0>
 800575e:	f000 fe39 	bl	80063d4 <fabs>
 8005762:	ec55 4b10 	vmov	r4, r5, d0
 8005766:	ee10 0a10 	vmov	r0, s0
 800576a:	a379      	add	r3, pc, #484	; (adr r3, 8005950 <__ieee754_rem_pio2+0x320>)
 800576c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005770:	4629      	mov	r1, r5
 8005772:	f7fa feed 	bl	8000550 <__aeabi_dmul>
 8005776:	4b80      	ldr	r3, [pc, #512]	; (8005978 <__ieee754_rem_pio2+0x348>)
 8005778:	2200      	movs	r2, #0
 800577a:	f7fa fd33 	bl	80001e4 <__adddf3>
 800577e:	f7fb f981 	bl	8000a84 <__aeabi_d2iz>
 8005782:	4683      	mov	fp, r0
 8005784:	f7fa fe7a 	bl	800047c <__aeabi_i2d>
 8005788:	4602      	mov	r2, r0
 800578a:	460b      	mov	r3, r1
 800578c:	ec43 2b18 	vmov	d8, r2, r3
 8005790:	a367      	add	r3, pc, #412	; (adr r3, 8005930 <__ieee754_rem_pio2+0x300>)
 8005792:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005796:	f7fa fedb 	bl	8000550 <__aeabi_dmul>
 800579a:	4602      	mov	r2, r0
 800579c:	460b      	mov	r3, r1
 800579e:	4620      	mov	r0, r4
 80057a0:	4629      	mov	r1, r5
 80057a2:	f7fa fd1d 	bl	80001e0 <__aeabi_dsub>
 80057a6:	a364      	add	r3, pc, #400	; (adr r3, 8005938 <__ieee754_rem_pio2+0x308>)
 80057a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057ac:	4606      	mov	r6, r0
 80057ae:	460f      	mov	r7, r1
 80057b0:	ec51 0b18 	vmov	r0, r1, d8
 80057b4:	f7fa fecc 	bl	8000550 <__aeabi_dmul>
 80057b8:	f1bb 0f1f 	cmp.w	fp, #31
 80057bc:	4604      	mov	r4, r0
 80057be:	460d      	mov	r5, r1
 80057c0:	dc0d      	bgt.n	80057de <__ieee754_rem_pio2+0x1ae>
 80057c2:	4b6e      	ldr	r3, [pc, #440]	; (800597c <__ieee754_rem_pio2+0x34c>)
 80057c4:	f10b 32ff 	add.w	r2, fp, #4294967295
 80057c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80057cc:	4543      	cmp	r3, r8
 80057ce:	d006      	beq.n	80057de <__ieee754_rem_pio2+0x1ae>
 80057d0:	4622      	mov	r2, r4
 80057d2:	462b      	mov	r3, r5
 80057d4:	4630      	mov	r0, r6
 80057d6:	4639      	mov	r1, r7
 80057d8:	f7fa fd02 	bl	80001e0 <__aeabi_dsub>
 80057dc:	e00f      	b.n	80057fe <__ieee754_rem_pio2+0x1ce>
 80057de:	462b      	mov	r3, r5
 80057e0:	4622      	mov	r2, r4
 80057e2:	4630      	mov	r0, r6
 80057e4:	4639      	mov	r1, r7
 80057e6:	f7fa fcfb 	bl	80001e0 <__aeabi_dsub>
 80057ea:	ea4f 5328 	mov.w	r3, r8, asr #20
 80057ee:	9303      	str	r3, [sp, #12]
 80057f0:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80057f4:	ebc3 5818 	rsb	r8, r3, r8, lsr #20
 80057f8:	f1b8 0f10 	cmp.w	r8, #16
 80057fc:	dc02      	bgt.n	8005804 <__ieee754_rem_pio2+0x1d4>
 80057fe:	e9ca 0100 	strd	r0, r1, [sl]
 8005802:	e039      	b.n	8005878 <__ieee754_rem_pio2+0x248>
 8005804:	a34e      	add	r3, pc, #312	; (adr r3, 8005940 <__ieee754_rem_pio2+0x310>)
 8005806:	e9d3 2300 	ldrd	r2, r3, [r3]
 800580a:	ec51 0b18 	vmov	r0, r1, d8
 800580e:	f7fa fe9f 	bl	8000550 <__aeabi_dmul>
 8005812:	4604      	mov	r4, r0
 8005814:	460d      	mov	r5, r1
 8005816:	4602      	mov	r2, r0
 8005818:	460b      	mov	r3, r1
 800581a:	4630      	mov	r0, r6
 800581c:	4639      	mov	r1, r7
 800581e:	f7fa fcdf 	bl	80001e0 <__aeabi_dsub>
 8005822:	4602      	mov	r2, r0
 8005824:	460b      	mov	r3, r1
 8005826:	4680      	mov	r8, r0
 8005828:	4689      	mov	r9, r1
 800582a:	4630      	mov	r0, r6
 800582c:	4639      	mov	r1, r7
 800582e:	f7fa fcd7 	bl	80001e0 <__aeabi_dsub>
 8005832:	4622      	mov	r2, r4
 8005834:	462b      	mov	r3, r5
 8005836:	f7fa fcd3 	bl	80001e0 <__aeabi_dsub>
 800583a:	a343      	add	r3, pc, #268	; (adr r3, 8005948 <__ieee754_rem_pio2+0x318>)
 800583c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005840:	4604      	mov	r4, r0
 8005842:	460d      	mov	r5, r1
 8005844:	ec51 0b18 	vmov	r0, r1, d8
 8005848:	f7fa fe82 	bl	8000550 <__aeabi_dmul>
 800584c:	4622      	mov	r2, r4
 800584e:	462b      	mov	r3, r5
 8005850:	f7fa fcc6 	bl	80001e0 <__aeabi_dsub>
 8005854:	4602      	mov	r2, r0
 8005856:	460b      	mov	r3, r1
 8005858:	4604      	mov	r4, r0
 800585a:	460d      	mov	r5, r1
 800585c:	4640      	mov	r0, r8
 800585e:	4649      	mov	r1, r9
 8005860:	f7fa fcbe 	bl	80001e0 <__aeabi_dsub>
 8005864:	9a03      	ldr	r2, [sp, #12]
 8005866:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800586a:	1ad3      	subs	r3, r2, r3
 800586c:	2b31      	cmp	r3, #49	; 0x31
 800586e:	dc24      	bgt.n	80058ba <__ieee754_rem_pio2+0x28a>
 8005870:	e9ca 0100 	strd	r0, r1, [sl]
 8005874:	4646      	mov	r6, r8
 8005876:	464f      	mov	r7, r9
 8005878:	e9da 8900 	ldrd	r8, r9, [sl]
 800587c:	4630      	mov	r0, r6
 800587e:	4642      	mov	r2, r8
 8005880:	464b      	mov	r3, r9
 8005882:	4639      	mov	r1, r7
 8005884:	f7fa fcac 	bl	80001e0 <__aeabi_dsub>
 8005888:	462b      	mov	r3, r5
 800588a:	4622      	mov	r2, r4
 800588c:	f7fa fca8 	bl	80001e0 <__aeabi_dsub>
 8005890:	9b02      	ldr	r3, [sp, #8]
 8005892:	2b00      	cmp	r3, #0
 8005894:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8005898:	f6bf af0a 	bge.w	80056b0 <__ieee754_rem_pio2+0x80>
 800589c:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 80058a0:	f8ca 3004 	str.w	r3, [sl, #4]
 80058a4:	f8ca 8000 	str.w	r8, [sl]
 80058a8:	f8ca 0008 	str.w	r0, [sl, #8]
 80058ac:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80058b0:	f8ca 300c 	str.w	r3, [sl, #12]
 80058b4:	f1cb 0b00 	rsb	fp, fp, #0
 80058b8:	e6fa      	b.n	80056b0 <__ieee754_rem_pio2+0x80>
 80058ba:	a327      	add	r3, pc, #156	; (adr r3, 8005958 <__ieee754_rem_pio2+0x328>)
 80058bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058c0:	ec51 0b18 	vmov	r0, r1, d8
 80058c4:	f7fa fe44 	bl	8000550 <__aeabi_dmul>
 80058c8:	4604      	mov	r4, r0
 80058ca:	460d      	mov	r5, r1
 80058cc:	4602      	mov	r2, r0
 80058ce:	460b      	mov	r3, r1
 80058d0:	4640      	mov	r0, r8
 80058d2:	4649      	mov	r1, r9
 80058d4:	f7fa fc84 	bl	80001e0 <__aeabi_dsub>
 80058d8:	4602      	mov	r2, r0
 80058da:	460b      	mov	r3, r1
 80058dc:	4606      	mov	r6, r0
 80058de:	460f      	mov	r7, r1
 80058e0:	4640      	mov	r0, r8
 80058e2:	4649      	mov	r1, r9
 80058e4:	f7fa fc7c 	bl	80001e0 <__aeabi_dsub>
 80058e8:	4622      	mov	r2, r4
 80058ea:	462b      	mov	r3, r5
 80058ec:	f7fa fc78 	bl	80001e0 <__aeabi_dsub>
 80058f0:	a31b      	add	r3, pc, #108	; (adr r3, 8005960 <__ieee754_rem_pio2+0x330>)
 80058f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058f6:	4604      	mov	r4, r0
 80058f8:	460d      	mov	r5, r1
 80058fa:	ec51 0b18 	vmov	r0, r1, d8
 80058fe:	f7fa fe27 	bl	8000550 <__aeabi_dmul>
 8005902:	4622      	mov	r2, r4
 8005904:	462b      	mov	r3, r5
 8005906:	f7fa fc6b 	bl	80001e0 <__aeabi_dsub>
 800590a:	4604      	mov	r4, r0
 800590c:	460d      	mov	r5, r1
 800590e:	e75f      	b.n	80057d0 <__ieee754_rem_pio2+0x1a0>
 8005910:	4b1b      	ldr	r3, [pc, #108]	; (8005980 <__ieee754_rem_pio2+0x350>)
 8005912:	4598      	cmp	r8, r3
 8005914:	dd36      	ble.n	8005984 <__ieee754_rem_pio2+0x354>
 8005916:	ee10 2a10 	vmov	r2, s0
 800591a:	462b      	mov	r3, r5
 800591c:	4620      	mov	r0, r4
 800591e:	4629      	mov	r1, r5
 8005920:	f7fa fc5e 	bl	80001e0 <__aeabi_dsub>
 8005924:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8005928:	e9ca 0100 	strd	r0, r1, [sl]
 800592c:	e694      	b.n	8005658 <__ieee754_rem_pio2+0x28>
 800592e:	bf00      	nop
 8005930:	54400000 	.word	0x54400000
 8005934:	3ff921fb 	.word	0x3ff921fb
 8005938:	1a626331 	.word	0x1a626331
 800593c:	3dd0b461 	.word	0x3dd0b461
 8005940:	1a600000 	.word	0x1a600000
 8005944:	3dd0b461 	.word	0x3dd0b461
 8005948:	2e037073 	.word	0x2e037073
 800594c:	3ba3198a 	.word	0x3ba3198a
 8005950:	6dc9c883 	.word	0x6dc9c883
 8005954:	3fe45f30 	.word	0x3fe45f30
 8005958:	2e000000 	.word	0x2e000000
 800595c:	3ba3198a 	.word	0x3ba3198a
 8005960:	252049c1 	.word	0x252049c1
 8005964:	397b839a 	.word	0x397b839a
 8005968:	3fe921fb 	.word	0x3fe921fb
 800596c:	4002d97b 	.word	0x4002d97b
 8005970:	3ff921fb 	.word	0x3ff921fb
 8005974:	413921fb 	.word	0x413921fb
 8005978:	3fe00000 	.word	0x3fe00000
 800597c:	08006630 	.word	0x08006630
 8005980:	7fefffff 	.word	0x7fefffff
 8005984:	ea4f 5428 	mov.w	r4, r8, asr #20
 8005988:	f2a4 4416 	subw	r4, r4, #1046	; 0x416
 800598c:	ee10 0a10 	vmov	r0, s0
 8005990:	eba8 5104 	sub.w	r1, r8, r4, lsl #20
 8005994:	ee10 6a10 	vmov	r6, s0
 8005998:	460f      	mov	r7, r1
 800599a:	f7fb f873 	bl	8000a84 <__aeabi_d2iz>
 800599e:	f7fa fd6d 	bl	800047c <__aeabi_i2d>
 80059a2:	4602      	mov	r2, r0
 80059a4:	460b      	mov	r3, r1
 80059a6:	4630      	mov	r0, r6
 80059a8:	4639      	mov	r1, r7
 80059aa:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80059ae:	f7fa fc17 	bl	80001e0 <__aeabi_dsub>
 80059b2:	4b22      	ldr	r3, [pc, #136]	; (8005a3c <__ieee754_rem_pio2+0x40c>)
 80059b4:	2200      	movs	r2, #0
 80059b6:	f7fa fdcb 	bl	8000550 <__aeabi_dmul>
 80059ba:	460f      	mov	r7, r1
 80059bc:	4606      	mov	r6, r0
 80059be:	f7fb f861 	bl	8000a84 <__aeabi_d2iz>
 80059c2:	f7fa fd5b 	bl	800047c <__aeabi_i2d>
 80059c6:	4602      	mov	r2, r0
 80059c8:	460b      	mov	r3, r1
 80059ca:	4630      	mov	r0, r6
 80059cc:	4639      	mov	r1, r7
 80059ce:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80059d2:	f7fa fc05 	bl	80001e0 <__aeabi_dsub>
 80059d6:	4b19      	ldr	r3, [pc, #100]	; (8005a3c <__ieee754_rem_pio2+0x40c>)
 80059d8:	2200      	movs	r2, #0
 80059da:	f7fa fdb9 	bl	8000550 <__aeabi_dmul>
 80059de:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80059e2:	ad04      	add	r5, sp, #16
 80059e4:	f04f 0803 	mov.w	r8, #3
 80059e8:	46a9      	mov	r9, r5
 80059ea:	2600      	movs	r6, #0
 80059ec:	2700      	movs	r7, #0
 80059ee:	4632      	mov	r2, r6
 80059f0:	463b      	mov	r3, r7
 80059f2:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 80059f6:	46c3      	mov	fp, r8
 80059f8:	3d08      	subs	r5, #8
 80059fa:	f108 38ff 	add.w	r8, r8, #4294967295
 80059fe:	f7fb f80f 	bl	8000a20 <__aeabi_dcmpeq>
 8005a02:	2800      	cmp	r0, #0
 8005a04:	d1f3      	bne.n	80059ee <__ieee754_rem_pio2+0x3be>
 8005a06:	4b0e      	ldr	r3, [pc, #56]	; (8005a40 <__ieee754_rem_pio2+0x410>)
 8005a08:	9301      	str	r3, [sp, #4]
 8005a0a:	2302      	movs	r3, #2
 8005a0c:	9300      	str	r3, [sp, #0]
 8005a0e:	4622      	mov	r2, r4
 8005a10:	465b      	mov	r3, fp
 8005a12:	4651      	mov	r1, sl
 8005a14:	4648      	mov	r0, r9
 8005a16:	f000 f8df 	bl	8005bd8 <__kernel_rem_pio2>
 8005a1a:	9b02      	ldr	r3, [sp, #8]
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	4683      	mov	fp, r0
 8005a20:	f6bf ae46 	bge.w	80056b0 <__ieee754_rem_pio2+0x80>
 8005a24:	f8da 3004 	ldr.w	r3, [sl, #4]
 8005a28:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8005a2c:	f8ca 3004 	str.w	r3, [sl, #4]
 8005a30:	f8da 300c 	ldr.w	r3, [sl, #12]
 8005a34:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8005a38:	e73a      	b.n	80058b0 <__ieee754_rem_pio2+0x280>
 8005a3a:	bf00      	nop
 8005a3c:	41700000 	.word	0x41700000
 8005a40:	080066b0 	.word	0x080066b0
 8005a44:	00000000 	.word	0x00000000

08005a48 <__kernel_cos>:
 8005a48:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005a4c:	ec57 6b10 	vmov	r6, r7, d0
 8005a50:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 8005a54:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 8005a58:	ed8d 1b00 	vstr	d1, [sp]
 8005a5c:	da07      	bge.n	8005a6e <__kernel_cos+0x26>
 8005a5e:	ee10 0a10 	vmov	r0, s0
 8005a62:	4639      	mov	r1, r7
 8005a64:	f7fb f80e 	bl	8000a84 <__aeabi_d2iz>
 8005a68:	2800      	cmp	r0, #0
 8005a6a:	f000 8088 	beq.w	8005b7e <__kernel_cos+0x136>
 8005a6e:	4632      	mov	r2, r6
 8005a70:	463b      	mov	r3, r7
 8005a72:	4630      	mov	r0, r6
 8005a74:	4639      	mov	r1, r7
 8005a76:	f7fa fd6b 	bl	8000550 <__aeabi_dmul>
 8005a7a:	4b51      	ldr	r3, [pc, #324]	; (8005bc0 <__kernel_cos+0x178>)
 8005a7c:	2200      	movs	r2, #0
 8005a7e:	4604      	mov	r4, r0
 8005a80:	460d      	mov	r5, r1
 8005a82:	f7fa fd65 	bl	8000550 <__aeabi_dmul>
 8005a86:	a340      	add	r3, pc, #256	; (adr r3, 8005b88 <__kernel_cos+0x140>)
 8005a88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a8c:	4682      	mov	sl, r0
 8005a8e:	468b      	mov	fp, r1
 8005a90:	4620      	mov	r0, r4
 8005a92:	4629      	mov	r1, r5
 8005a94:	f7fa fd5c 	bl	8000550 <__aeabi_dmul>
 8005a98:	a33d      	add	r3, pc, #244	; (adr r3, 8005b90 <__kernel_cos+0x148>)
 8005a9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a9e:	f7fa fba1 	bl	80001e4 <__adddf3>
 8005aa2:	4622      	mov	r2, r4
 8005aa4:	462b      	mov	r3, r5
 8005aa6:	f7fa fd53 	bl	8000550 <__aeabi_dmul>
 8005aaa:	a33b      	add	r3, pc, #236	; (adr r3, 8005b98 <__kernel_cos+0x150>)
 8005aac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ab0:	f7fa fb96 	bl	80001e0 <__aeabi_dsub>
 8005ab4:	4622      	mov	r2, r4
 8005ab6:	462b      	mov	r3, r5
 8005ab8:	f7fa fd4a 	bl	8000550 <__aeabi_dmul>
 8005abc:	a338      	add	r3, pc, #224	; (adr r3, 8005ba0 <__kernel_cos+0x158>)
 8005abe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ac2:	f7fa fb8f 	bl	80001e4 <__adddf3>
 8005ac6:	4622      	mov	r2, r4
 8005ac8:	462b      	mov	r3, r5
 8005aca:	f7fa fd41 	bl	8000550 <__aeabi_dmul>
 8005ace:	a336      	add	r3, pc, #216	; (adr r3, 8005ba8 <__kernel_cos+0x160>)
 8005ad0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ad4:	f7fa fb84 	bl	80001e0 <__aeabi_dsub>
 8005ad8:	4622      	mov	r2, r4
 8005ada:	462b      	mov	r3, r5
 8005adc:	f7fa fd38 	bl	8000550 <__aeabi_dmul>
 8005ae0:	a333      	add	r3, pc, #204	; (adr r3, 8005bb0 <__kernel_cos+0x168>)
 8005ae2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ae6:	f7fa fb7d 	bl	80001e4 <__adddf3>
 8005aea:	4622      	mov	r2, r4
 8005aec:	462b      	mov	r3, r5
 8005aee:	f7fa fd2f 	bl	8000550 <__aeabi_dmul>
 8005af2:	4622      	mov	r2, r4
 8005af4:	462b      	mov	r3, r5
 8005af6:	f7fa fd2b 	bl	8000550 <__aeabi_dmul>
 8005afa:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005afe:	4604      	mov	r4, r0
 8005b00:	460d      	mov	r5, r1
 8005b02:	4630      	mov	r0, r6
 8005b04:	4639      	mov	r1, r7
 8005b06:	f7fa fd23 	bl	8000550 <__aeabi_dmul>
 8005b0a:	460b      	mov	r3, r1
 8005b0c:	4602      	mov	r2, r0
 8005b0e:	4629      	mov	r1, r5
 8005b10:	4620      	mov	r0, r4
 8005b12:	f7fa fb65 	bl	80001e0 <__aeabi_dsub>
 8005b16:	4b2b      	ldr	r3, [pc, #172]	; (8005bc4 <__kernel_cos+0x17c>)
 8005b18:	4598      	cmp	r8, r3
 8005b1a:	4606      	mov	r6, r0
 8005b1c:	460f      	mov	r7, r1
 8005b1e:	dc10      	bgt.n	8005b42 <__kernel_cos+0xfa>
 8005b20:	4602      	mov	r2, r0
 8005b22:	460b      	mov	r3, r1
 8005b24:	4650      	mov	r0, sl
 8005b26:	4659      	mov	r1, fp
 8005b28:	f7fa fb5a 	bl	80001e0 <__aeabi_dsub>
 8005b2c:	460b      	mov	r3, r1
 8005b2e:	4926      	ldr	r1, [pc, #152]	; (8005bc8 <__kernel_cos+0x180>)
 8005b30:	4602      	mov	r2, r0
 8005b32:	2000      	movs	r0, #0
 8005b34:	f7fa fb54 	bl	80001e0 <__aeabi_dsub>
 8005b38:	ec41 0b10 	vmov	d0, r0, r1
 8005b3c:	b003      	add	sp, #12
 8005b3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005b42:	4b22      	ldr	r3, [pc, #136]	; (8005bcc <__kernel_cos+0x184>)
 8005b44:	4920      	ldr	r1, [pc, #128]	; (8005bc8 <__kernel_cos+0x180>)
 8005b46:	4598      	cmp	r8, r3
 8005b48:	bfcc      	ite	gt
 8005b4a:	4d21      	ldrgt	r5, [pc, #132]	; (8005bd0 <__kernel_cos+0x188>)
 8005b4c:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 8005b50:	2400      	movs	r4, #0
 8005b52:	4622      	mov	r2, r4
 8005b54:	462b      	mov	r3, r5
 8005b56:	2000      	movs	r0, #0
 8005b58:	f7fa fb42 	bl	80001e0 <__aeabi_dsub>
 8005b5c:	4622      	mov	r2, r4
 8005b5e:	4680      	mov	r8, r0
 8005b60:	4689      	mov	r9, r1
 8005b62:	462b      	mov	r3, r5
 8005b64:	4650      	mov	r0, sl
 8005b66:	4659      	mov	r1, fp
 8005b68:	f7fa fb3a 	bl	80001e0 <__aeabi_dsub>
 8005b6c:	4632      	mov	r2, r6
 8005b6e:	463b      	mov	r3, r7
 8005b70:	f7fa fb36 	bl	80001e0 <__aeabi_dsub>
 8005b74:	4602      	mov	r2, r0
 8005b76:	460b      	mov	r3, r1
 8005b78:	4640      	mov	r0, r8
 8005b7a:	4649      	mov	r1, r9
 8005b7c:	e7da      	b.n	8005b34 <__kernel_cos+0xec>
 8005b7e:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 8005bb8 <__kernel_cos+0x170>
 8005b82:	e7db      	b.n	8005b3c <__kernel_cos+0xf4>
 8005b84:	f3af 8000 	nop.w
 8005b88:	be8838d4 	.word	0xbe8838d4
 8005b8c:	bda8fae9 	.word	0xbda8fae9
 8005b90:	bdb4b1c4 	.word	0xbdb4b1c4
 8005b94:	3e21ee9e 	.word	0x3e21ee9e
 8005b98:	809c52ad 	.word	0x809c52ad
 8005b9c:	3e927e4f 	.word	0x3e927e4f
 8005ba0:	19cb1590 	.word	0x19cb1590
 8005ba4:	3efa01a0 	.word	0x3efa01a0
 8005ba8:	16c15177 	.word	0x16c15177
 8005bac:	3f56c16c 	.word	0x3f56c16c
 8005bb0:	5555554c 	.word	0x5555554c
 8005bb4:	3fa55555 	.word	0x3fa55555
 8005bb8:	00000000 	.word	0x00000000
 8005bbc:	3ff00000 	.word	0x3ff00000
 8005bc0:	3fe00000 	.word	0x3fe00000
 8005bc4:	3fd33332 	.word	0x3fd33332
 8005bc8:	3ff00000 	.word	0x3ff00000
 8005bcc:	3fe90000 	.word	0x3fe90000
 8005bd0:	3fd20000 	.word	0x3fd20000
 8005bd4:	00000000 	.word	0x00000000

08005bd8 <__kernel_rem_pio2>:
 8005bd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005bdc:	ed2d 8b02 	vpush	{d8}
 8005be0:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 8005be4:	f112 0f14 	cmn.w	r2, #20
 8005be8:	9308      	str	r3, [sp, #32]
 8005bea:	9101      	str	r1, [sp, #4]
 8005bec:	4bc6      	ldr	r3, [pc, #792]	; (8005f08 <__kernel_rem_pio2+0x330>)
 8005bee:	99a4      	ldr	r1, [sp, #656]	; 0x290
 8005bf0:	9009      	str	r0, [sp, #36]	; 0x24
 8005bf2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8005bf6:	9304      	str	r3, [sp, #16]
 8005bf8:	9b08      	ldr	r3, [sp, #32]
 8005bfa:	f103 33ff 	add.w	r3, r3, #4294967295
 8005bfe:	bfa8      	it	ge
 8005c00:	1ed4      	subge	r4, r2, #3
 8005c02:	9306      	str	r3, [sp, #24]
 8005c04:	bfb2      	itee	lt
 8005c06:	2400      	movlt	r4, #0
 8005c08:	2318      	movge	r3, #24
 8005c0a:	fb94 f4f3 	sdivge	r4, r4, r3
 8005c0e:	f06f 0317 	mvn.w	r3, #23
 8005c12:	fb04 3303 	mla	r3, r4, r3, r3
 8005c16:	eb03 0a02 	add.w	sl, r3, r2
 8005c1a:	9b04      	ldr	r3, [sp, #16]
 8005c1c:	9a06      	ldr	r2, [sp, #24]
 8005c1e:	ed9f 8bb6 	vldr	d8, [pc, #728]	; 8005ef8 <__kernel_rem_pio2+0x320>
 8005c22:	eb03 0802 	add.w	r8, r3, r2
 8005c26:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 8005c28:	1aa7      	subs	r7, r4, r2
 8005c2a:	ae20      	add	r6, sp, #128	; 0x80
 8005c2c:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8005c30:	2500      	movs	r5, #0
 8005c32:	4545      	cmp	r5, r8
 8005c34:	dd18      	ble.n	8005c68 <__kernel_rem_pio2+0x90>
 8005c36:	9b08      	ldr	r3, [sp, #32]
 8005c38:	f8dd 8018 	ldr.w	r8, [sp, #24]
 8005c3c:	aa20      	add	r2, sp, #128	; 0x80
 8005c3e:	ed9f 8bae 	vldr	d8, [pc, #696]	; 8005ef8 <__kernel_rem_pio2+0x320>
 8005c42:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 8005c46:	f1c3 0301 	rsb	r3, r3, #1
 8005c4a:	f50d 7be0 	add.w	fp, sp, #448	; 0x1c0
 8005c4e:	9307      	str	r3, [sp, #28]
 8005c50:	9b07      	ldr	r3, [sp, #28]
 8005c52:	9a04      	ldr	r2, [sp, #16]
 8005c54:	4443      	add	r3, r8
 8005c56:	429a      	cmp	r2, r3
 8005c58:	db2f      	blt.n	8005cba <__kernel_rem_pio2+0xe2>
 8005c5a:	ed8d 8b02 	vstr	d8, [sp, #8]
 8005c5e:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8005c62:	462f      	mov	r7, r5
 8005c64:	2600      	movs	r6, #0
 8005c66:	e01b      	b.n	8005ca0 <__kernel_rem_pio2+0xc8>
 8005c68:	42ef      	cmn	r7, r5
 8005c6a:	d407      	bmi.n	8005c7c <__kernel_rem_pio2+0xa4>
 8005c6c:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8005c70:	f7fa fc04 	bl	800047c <__aeabi_i2d>
 8005c74:	e8e6 0102 	strd	r0, r1, [r6], #8
 8005c78:	3501      	adds	r5, #1
 8005c7a:	e7da      	b.n	8005c32 <__kernel_rem_pio2+0x5a>
 8005c7c:	ec51 0b18 	vmov	r0, r1, d8
 8005c80:	e7f8      	b.n	8005c74 <__kernel_rem_pio2+0x9c>
 8005c82:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005c86:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8005c8a:	f7fa fc61 	bl	8000550 <__aeabi_dmul>
 8005c8e:	4602      	mov	r2, r0
 8005c90:	460b      	mov	r3, r1
 8005c92:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005c96:	f7fa faa5 	bl	80001e4 <__adddf3>
 8005c9a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005c9e:	3601      	adds	r6, #1
 8005ca0:	9b06      	ldr	r3, [sp, #24]
 8005ca2:	429e      	cmp	r6, r3
 8005ca4:	f1a7 0708 	sub.w	r7, r7, #8
 8005ca8:	ddeb      	ble.n	8005c82 <__kernel_rem_pio2+0xaa>
 8005caa:	ed9d 7b02 	vldr	d7, [sp, #8]
 8005cae:	3508      	adds	r5, #8
 8005cb0:	ecab 7b02 	vstmia	fp!, {d7}
 8005cb4:	f108 0801 	add.w	r8, r8, #1
 8005cb8:	e7ca      	b.n	8005c50 <__kernel_rem_pio2+0x78>
 8005cba:	9b04      	ldr	r3, [sp, #16]
 8005cbc:	aa0c      	add	r2, sp, #48	; 0x30
 8005cbe:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8005cc2:	930b      	str	r3, [sp, #44]	; 0x2c
 8005cc4:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 8005cc6:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8005cca:	9c04      	ldr	r4, [sp, #16]
 8005ccc:	930a      	str	r3, [sp, #40]	; 0x28
 8005cce:	ab98      	add	r3, sp, #608	; 0x260
 8005cd0:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8005cd4:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 8005cd8:	f10d 0b30 	add.w	fp, sp, #48	; 0x30
 8005cdc:	f8cd b008 	str.w	fp, [sp, #8]
 8005ce0:	4625      	mov	r5, r4
 8005ce2:	2d00      	cmp	r5, #0
 8005ce4:	dc78      	bgt.n	8005dd8 <__kernel_rem_pio2+0x200>
 8005ce6:	ec47 6b10 	vmov	d0, r6, r7
 8005cea:	4650      	mov	r0, sl
 8005cec:	f000 fbfc 	bl	80064e8 <scalbn>
 8005cf0:	ec57 6b10 	vmov	r6, r7, d0
 8005cf4:	2200      	movs	r2, #0
 8005cf6:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8005cfa:	ee10 0a10 	vmov	r0, s0
 8005cfe:	4639      	mov	r1, r7
 8005d00:	f7fa fc26 	bl	8000550 <__aeabi_dmul>
 8005d04:	ec41 0b10 	vmov	d0, r0, r1
 8005d08:	f000 fb6e 	bl	80063e8 <floor>
 8005d0c:	4b7f      	ldr	r3, [pc, #508]	; (8005f0c <__kernel_rem_pio2+0x334>)
 8005d0e:	ec51 0b10 	vmov	r0, r1, d0
 8005d12:	2200      	movs	r2, #0
 8005d14:	f7fa fc1c 	bl	8000550 <__aeabi_dmul>
 8005d18:	4602      	mov	r2, r0
 8005d1a:	460b      	mov	r3, r1
 8005d1c:	4630      	mov	r0, r6
 8005d1e:	4639      	mov	r1, r7
 8005d20:	f7fa fa5e 	bl	80001e0 <__aeabi_dsub>
 8005d24:	460f      	mov	r7, r1
 8005d26:	4606      	mov	r6, r0
 8005d28:	f7fa feac 	bl	8000a84 <__aeabi_d2iz>
 8005d2c:	9007      	str	r0, [sp, #28]
 8005d2e:	f7fa fba5 	bl	800047c <__aeabi_i2d>
 8005d32:	4602      	mov	r2, r0
 8005d34:	460b      	mov	r3, r1
 8005d36:	4630      	mov	r0, r6
 8005d38:	4639      	mov	r1, r7
 8005d3a:	f7fa fa51 	bl	80001e0 <__aeabi_dsub>
 8005d3e:	f1ba 0f00 	cmp.w	sl, #0
 8005d42:	4606      	mov	r6, r0
 8005d44:	460f      	mov	r7, r1
 8005d46:	dd70      	ble.n	8005e2a <__kernel_rem_pio2+0x252>
 8005d48:	1e62      	subs	r2, r4, #1
 8005d4a:	ab0c      	add	r3, sp, #48	; 0x30
 8005d4c:	9d07      	ldr	r5, [sp, #28]
 8005d4e:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8005d52:	f1ca 0118 	rsb	r1, sl, #24
 8005d56:	fa40 f301 	asr.w	r3, r0, r1
 8005d5a:	441d      	add	r5, r3
 8005d5c:	408b      	lsls	r3, r1
 8005d5e:	1ac0      	subs	r0, r0, r3
 8005d60:	ab0c      	add	r3, sp, #48	; 0x30
 8005d62:	9507      	str	r5, [sp, #28]
 8005d64:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8005d68:	f1ca 0317 	rsb	r3, sl, #23
 8005d6c:	fa40 f303 	asr.w	r3, r0, r3
 8005d70:	9302      	str	r3, [sp, #8]
 8005d72:	9b02      	ldr	r3, [sp, #8]
 8005d74:	2b00      	cmp	r3, #0
 8005d76:	dd66      	ble.n	8005e46 <__kernel_rem_pio2+0x26e>
 8005d78:	9b07      	ldr	r3, [sp, #28]
 8005d7a:	2200      	movs	r2, #0
 8005d7c:	3301      	adds	r3, #1
 8005d7e:	9307      	str	r3, [sp, #28]
 8005d80:	4615      	mov	r5, r2
 8005d82:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8005d86:	4294      	cmp	r4, r2
 8005d88:	f300 8099 	bgt.w	8005ebe <__kernel_rem_pio2+0x2e6>
 8005d8c:	f1ba 0f00 	cmp.w	sl, #0
 8005d90:	dd07      	ble.n	8005da2 <__kernel_rem_pio2+0x1ca>
 8005d92:	f1ba 0f01 	cmp.w	sl, #1
 8005d96:	f000 80a5 	beq.w	8005ee4 <__kernel_rem_pio2+0x30c>
 8005d9a:	f1ba 0f02 	cmp.w	sl, #2
 8005d9e:	f000 80c1 	beq.w	8005f24 <__kernel_rem_pio2+0x34c>
 8005da2:	9b02      	ldr	r3, [sp, #8]
 8005da4:	2b02      	cmp	r3, #2
 8005da6:	d14e      	bne.n	8005e46 <__kernel_rem_pio2+0x26e>
 8005da8:	4632      	mov	r2, r6
 8005daa:	463b      	mov	r3, r7
 8005dac:	4958      	ldr	r1, [pc, #352]	; (8005f10 <__kernel_rem_pio2+0x338>)
 8005dae:	2000      	movs	r0, #0
 8005db0:	f7fa fa16 	bl	80001e0 <__aeabi_dsub>
 8005db4:	4606      	mov	r6, r0
 8005db6:	460f      	mov	r7, r1
 8005db8:	2d00      	cmp	r5, #0
 8005dba:	d044      	beq.n	8005e46 <__kernel_rem_pio2+0x26e>
 8005dbc:	4650      	mov	r0, sl
 8005dbe:	ed9f 0b50 	vldr	d0, [pc, #320]	; 8005f00 <__kernel_rem_pio2+0x328>
 8005dc2:	f000 fb91 	bl	80064e8 <scalbn>
 8005dc6:	4630      	mov	r0, r6
 8005dc8:	4639      	mov	r1, r7
 8005dca:	ec53 2b10 	vmov	r2, r3, d0
 8005dce:	f7fa fa07 	bl	80001e0 <__aeabi_dsub>
 8005dd2:	4606      	mov	r6, r0
 8005dd4:	460f      	mov	r7, r1
 8005dd6:	e036      	b.n	8005e46 <__kernel_rem_pio2+0x26e>
 8005dd8:	4b4e      	ldr	r3, [pc, #312]	; (8005f14 <__kernel_rem_pio2+0x33c>)
 8005dda:	2200      	movs	r2, #0
 8005ddc:	4630      	mov	r0, r6
 8005dde:	4639      	mov	r1, r7
 8005de0:	f7fa fbb6 	bl	8000550 <__aeabi_dmul>
 8005de4:	f7fa fe4e 	bl	8000a84 <__aeabi_d2iz>
 8005de8:	f7fa fb48 	bl	800047c <__aeabi_i2d>
 8005dec:	4b4a      	ldr	r3, [pc, #296]	; (8005f18 <__kernel_rem_pio2+0x340>)
 8005dee:	2200      	movs	r2, #0
 8005df0:	4680      	mov	r8, r0
 8005df2:	4689      	mov	r9, r1
 8005df4:	f7fa fbac 	bl	8000550 <__aeabi_dmul>
 8005df8:	4602      	mov	r2, r0
 8005dfa:	460b      	mov	r3, r1
 8005dfc:	4630      	mov	r0, r6
 8005dfe:	4639      	mov	r1, r7
 8005e00:	f7fa f9ee 	bl	80001e0 <__aeabi_dsub>
 8005e04:	f7fa fe3e 	bl	8000a84 <__aeabi_d2iz>
 8005e08:	9b02      	ldr	r3, [sp, #8]
 8005e0a:	f843 0b04 	str.w	r0, [r3], #4
 8005e0e:	3d01      	subs	r5, #1
 8005e10:	9302      	str	r3, [sp, #8]
 8005e12:	ab70      	add	r3, sp, #448	; 0x1c0
 8005e14:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8005e18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e1c:	4640      	mov	r0, r8
 8005e1e:	4649      	mov	r1, r9
 8005e20:	f7fa f9e0 	bl	80001e4 <__adddf3>
 8005e24:	4606      	mov	r6, r0
 8005e26:	460f      	mov	r7, r1
 8005e28:	e75b      	b.n	8005ce2 <__kernel_rem_pio2+0x10a>
 8005e2a:	d105      	bne.n	8005e38 <__kernel_rem_pio2+0x260>
 8005e2c:	1e63      	subs	r3, r4, #1
 8005e2e:	aa0c      	add	r2, sp, #48	; 0x30
 8005e30:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8005e34:	15c3      	asrs	r3, r0, #23
 8005e36:	e79b      	b.n	8005d70 <__kernel_rem_pio2+0x198>
 8005e38:	4b38      	ldr	r3, [pc, #224]	; (8005f1c <__kernel_rem_pio2+0x344>)
 8005e3a:	2200      	movs	r2, #0
 8005e3c:	f7fa fe0e 	bl	8000a5c <__aeabi_dcmpge>
 8005e40:	2800      	cmp	r0, #0
 8005e42:	d139      	bne.n	8005eb8 <__kernel_rem_pio2+0x2e0>
 8005e44:	9002      	str	r0, [sp, #8]
 8005e46:	2200      	movs	r2, #0
 8005e48:	2300      	movs	r3, #0
 8005e4a:	4630      	mov	r0, r6
 8005e4c:	4639      	mov	r1, r7
 8005e4e:	f7fa fde7 	bl	8000a20 <__aeabi_dcmpeq>
 8005e52:	2800      	cmp	r0, #0
 8005e54:	f000 80b4 	beq.w	8005fc0 <__kernel_rem_pio2+0x3e8>
 8005e58:	f104 3bff 	add.w	fp, r4, #4294967295
 8005e5c:	465b      	mov	r3, fp
 8005e5e:	2200      	movs	r2, #0
 8005e60:	9904      	ldr	r1, [sp, #16]
 8005e62:	428b      	cmp	r3, r1
 8005e64:	da65      	bge.n	8005f32 <__kernel_rem_pio2+0x35a>
 8005e66:	2a00      	cmp	r2, #0
 8005e68:	d07b      	beq.n	8005f62 <__kernel_rem_pio2+0x38a>
 8005e6a:	ab0c      	add	r3, sp, #48	; 0x30
 8005e6c:	f1aa 0a18 	sub.w	sl, sl, #24
 8005e70:	f853 302b 	ldr.w	r3, [r3, fp, lsl #2]
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	f000 80a0 	beq.w	8005fba <__kernel_rem_pio2+0x3e2>
 8005e7a:	ed9f 0b21 	vldr	d0, [pc, #132]	; 8005f00 <__kernel_rem_pio2+0x328>
 8005e7e:	4650      	mov	r0, sl
 8005e80:	f000 fb32 	bl	80064e8 <scalbn>
 8005e84:	4f23      	ldr	r7, [pc, #140]	; (8005f14 <__kernel_rem_pio2+0x33c>)
 8005e86:	ec55 4b10 	vmov	r4, r5, d0
 8005e8a:	46d8      	mov	r8, fp
 8005e8c:	2600      	movs	r6, #0
 8005e8e:	f1b8 0f00 	cmp.w	r8, #0
 8005e92:	f280 80cf 	bge.w	8006034 <__kernel_rem_pio2+0x45c>
 8005e96:	ed9f 8b18 	vldr	d8, [pc, #96]	; 8005ef8 <__kernel_rem_pio2+0x320>
 8005e9a:	465f      	mov	r7, fp
 8005e9c:	f04f 0800 	mov.w	r8, #0
 8005ea0:	2f00      	cmp	r7, #0
 8005ea2:	f2c0 80fd 	blt.w	80060a0 <__kernel_rem_pio2+0x4c8>
 8005ea6:	ab70      	add	r3, sp, #448	; 0x1c0
 8005ea8:	f8df a074 	ldr.w	sl, [pc, #116]	; 8005f20 <__kernel_rem_pio2+0x348>
 8005eac:	ec55 4b18 	vmov	r4, r5, d8
 8005eb0:	eb03 09c7 	add.w	r9, r3, r7, lsl #3
 8005eb4:	2600      	movs	r6, #0
 8005eb6:	e0e5      	b.n	8006084 <__kernel_rem_pio2+0x4ac>
 8005eb8:	2302      	movs	r3, #2
 8005eba:	9302      	str	r3, [sp, #8]
 8005ebc:	e75c      	b.n	8005d78 <__kernel_rem_pio2+0x1a0>
 8005ebe:	f8db 3000 	ldr.w	r3, [fp]
 8005ec2:	b955      	cbnz	r5, 8005eda <__kernel_rem_pio2+0x302>
 8005ec4:	b123      	cbz	r3, 8005ed0 <__kernel_rem_pio2+0x2f8>
 8005ec6:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 8005eca:	f8cb 3000 	str.w	r3, [fp]
 8005ece:	2301      	movs	r3, #1
 8005ed0:	3201      	adds	r2, #1
 8005ed2:	f10b 0b04 	add.w	fp, fp, #4
 8005ed6:	461d      	mov	r5, r3
 8005ed8:	e755      	b.n	8005d86 <__kernel_rem_pio2+0x1ae>
 8005eda:	1acb      	subs	r3, r1, r3
 8005edc:	f8cb 3000 	str.w	r3, [fp]
 8005ee0:	462b      	mov	r3, r5
 8005ee2:	e7f5      	b.n	8005ed0 <__kernel_rem_pio2+0x2f8>
 8005ee4:	1e62      	subs	r2, r4, #1
 8005ee6:	ab0c      	add	r3, sp, #48	; 0x30
 8005ee8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005eec:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8005ef0:	a90c      	add	r1, sp, #48	; 0x30
 8005ef2:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8005ef6:	e754      	b.n	8005da2 <__kernel_rem_pio2+0x1ca>
	...
 8005f04:	3ff00000 	.word	0x3ff00000
 8005f08:	080067f8 	.word	0x080067f8
 8005f0c:	40200000 	.word	0x40200000
 8005f10:	3ff00000 	.word	0x3ff00000
 8005f14:	3e700000 	.word	0x3e700000
 8005f18:	41700000 	.word	0x41700000
 8005f1c:	3fe00000 	.word	0x3fe00000
 8005f20:	080067b8 	.word	0x080067b8
 8005f24:	1e62      	subs	r2, r4, #1
 8005f26:	ab0c      	add	r3, sp, #48	; 0x30
 8005f28:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005f2c:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8005f30:	e7de      	b.n	8005ef0 <__kernel_rem_pio2+0x318>
 8005f32:	a90c      	add	r1, sp, #48	; 0x30
 8005f34:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8005f38:	3b01      	subs	r3, #1
 8005f3a:	430a      	orrs	r2, r1
 8005f3c:	e790      	b.n	8005e60 <__kernel_rem_pio2+0x288>
 8005f3e:	3301      	adds	r3, #1
 8005f40:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 8005f44:	2900      	cmp	r1, #0
 8005f46:	d0fa      	beq.n	8005f3e <__kernel_rem_pio2+0x366>
 8005f48:	9a08      	ldr	r2, [sp, #32]
 8005f4a:	18e3      	adds	r3, r4, r3
 8005f4c:	18a6      	adds	r6, r4, r2
 8005f4e:	aa20      	add	r2, sp, #128	; 0x80
 8005f50:	1c65      	adds	r5, r4, #1
 8005f52:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 8005f56:	9302      	str	r3, [sp, #8]
 8005f58:	9b02      	ldr	r3, [sp, #8]
 8005f5a:	42ab      	cmp	r3, r5
 8005f5c:	da04      	bge.n	8005f68 <__kernel_rem_pio2+0x390>
 8005f5e:	461c      	mov	r4, r3
 8005f60:	e6b5      	b.n	8005cce <__kernel_rem_pio2+0xf6>
 8005f62:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8005f64:	2301      	movs	r3, #1
 8005f66:	e7eb      	b.n	8005f40 <__kernel_rem_pio2+0x368>
 8005f68:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005f6a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8005f6e:	f7fa fa85 	bl	800047c <__aeabi_i2d>
 8005f72:	e8e6 0102 	strd	r0, r1, [r6], #8
 8005f76:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005f78:	46b3      	mov	fp, r6
 8005f7a:	461c      	mov	r4, r3
 8005f7c:	2700      	movs	r7, #0
 8005f7e:	f04f 0800 	mov.w	r8, #0
 8005f82:	f04f 0900 	mov.w	r9, #0
 8005f86:	9b06      	ldr	r3, [sp, #24]
 8005f88:	429f      	cmp	r7, r3
 8005f8a:	dd06      	ble.n	8005f9a <__kernel_rem_pio2+0x3c2>
 8005f8c:	ab70      	add	r3, sp, #448	; 0x1c0
 8005f8e:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8005f92:	e9c3 8900 	strd	r8, r9, [r3]
 8005f96:	3501      	adds	r5, #1
 8005f98:	e7de      	b.n	8005f58 <__kernel_rem_pio2+0x380>
 8005f9a:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 8005f9e:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 8005fa2:	f7fa fad5 	bl	8000550 <__aeabi_dmul>
 8005fa6:	4602      	mov	r2, r0
 8005fa8:	460b      	mov	r3, r1
 8005faa:	4640      	mov	r0, r8
 8005fac:	4649      	mov	r1, r9
 8005fae:	f7fa f919 	bl	80001e4 <__adddf3>
 8005fb2:	3701      	adds	r7, #1
 8005fb4:	4680      	mov	r8, r0
 8005fb6:	4689      	mov	r9, r1
 8005fb8:	e7e5      	b.n	8005f86 <__kernel_rem_pio2+0x3ae>
 8005fba:	f10b 3bff 	add.w	fp, fp, #4294967295
 8005fbe:	e754      	b.n	8005e6a <__kernel_rem_pio2+0x292>
 8005fc0:	ec47 6b10 	vmov	d0, r6, r7
 8005fc4:	f1ca 0000 	rsb	r0, sl, #0
 8005fc8:	f000 fa8e 	bl	80064e8 <scalbn>
 8005fcc:	ec57 6b10 	vmov	r6, r7, d0
 8005fd0:	4b9f      	ldr	r3, [pc, #636]	; (8006250 <__kernel_rem_pio2+0x678>)
 8005fd2:	ee10 0a10 	vmov	r0, s0
 8005fd6:	2200      	movs	r2, #0
 8005fd8:	4639      	mov	r1, r7
 8005fda:	f7fa fd3f 	bl	8000a5c <__aeabi_dcmpge>
 8005fde:	b300      	cbz	r0, 8006022 <__kernel_rem_pio2+0x44a>
 8005fe0:	4b9c      	ldr	r3, [pc, #624]	; (8006254 <__kernel_rem_pio2+0x67c>)
 8005fe2:	2200      	movs	r2, #0
 8005fe4:	4630      	mov	r0, r6
 8005fe6:	4639      	mov	r1, r7
 8005fe8:	f7fa fab2 	bl	8000550 <__aeabi_dmul>
 8005fec:	f7fa fd4a 	bl	8000a84 <__aeabi_d2iz>
 8005ff0:	4605      	mov	r5, r0
 8005ff2:	f7fa fa43 	bl	800047c <__aeabi_i2d>
 8005ff6:	4b96      	ldr	r3, [pc, #600]	; (8006250 <__kernel_rem_pio2+0x678>)
 8005ff8:	2200      	movs	r2, #0
 8005ffa:	f7fa faa9 	bl	8000550 <__aeabi_dmul>
 8005ffe:	460b      	mov	r3, r1
 8006000:	4602      	mov	r2, r0
 8006002:	4639      	mov	r1, r7
 8006004:	4630      	mov	r0, r6
 8006006:	f7fa f8eb 	bl	80001e0 <__aeabi_dsub>
 800600a:	f7fa fd3b 	bl	8000a84 <__aeabi_d2iz>
 800600e:	f104 0b01 	add.w	fp, r4, #1
 8006012:	ab0c      	add	r3, sp, #48	; 0x30
 8006014:	f10a 0a18 	add.w	sl, sl, #24
 8006018:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800601c:	f843 502b 	str.w	r5, [r3, fp, lsl #2]
 8006020:	e72b      	b.n	8005e7a <__kernel_rem_pio2+0x2a2>
 8006022:	4630      	mov	r0, r6
 8006024:	4639      	mov	r1, r7
 8006026:	f7fa fd2d 	bl	8000a84 <__aeabi_d2iz>
 800602a:	ab0c      	add	r3, sp, #48	; 0x30
 800602c:	46a3      	mov	fp, r4
 800602e:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8006032:	e722      	b.n	8005e7a <__kernel_rem_pio2+0x2a2>
 8006034:	ab70      	add	r3, sp, #448	; 0x1c0
 8006036:	eb03 09c8 	add.w	r9, r3, r8, lsl #3
 800603a:	ab0c      	add	r3, sp, #48	; 0x30
 800603c:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8006040:	f7fa fa1c 	bl	800047c <__aeabi_i2d>
 8006044:	4622      	mov	r2, r4
 8006046:	462b      	mov	r3, r5
 8006048:	f7fa fa82 	bl	8000550 <__aeabi_dmul>
 800604c:	4632      	mov	r2, r6
 800604e:	e9c9 0100 	strd	r0, r1, [r9]
 8006052:	463b      	mov	r3, r7
 8006054:	4620      	mov	r0, r4
 8006056:	4629      	mov	r1, r5
 8006058:	f7fa fa7a 	bl	8000550 <__aeabi_dmul>
 800605c:	f108 38ff 	add.w	r8, r8, #4294967295
 8006060:	4604      	mov	r4, r0
 8006062:	460d      	mov	r5, r1
 8006064:	e713      	b.n	8005e8e <__kernel_rem_pio2+0x2b6>
 8006066:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 800606a:	e8fa 0102 	ldrd	r0, r1, [sl], #8
 800606e:	f7fa fa6f 	bl	8000550 <__aeabi_dmul>
 8006072:	4602      	mov	r2, r0
 8006074:	460b      	mov	r3, r1
 8006076:	4620      	mov	r0, r4
 8006078:	4629      	mov	r1, r5
 800607a:	f7fa f8b3 	bl	80001e4 <__adddf3>
 800607e:	3601      	adds	r6, #1
 8006080:	4604      	mov	r4, r0
 8006082:	460d      	mov	r5, r1
 8006084:	9b04      	ldr	r3, [sp, #16]
 8006086:	429e      	cmp	r6, r3
 8006088:	dc01      	bgt.n	800608e <__kernel_rem_pio2+0x4b6>
 800608a:	45b0      	cmp	r8, r6
 800608c:	daeb      	bge.n	8006066 <__kernel_rem_pio2+0x48e>
 800608e:	ab48      	add	r3, sp, #288	; 0x120
 8006090:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8006094:	e9c3 4500 	strd	r4, r5, [r3]
 8006098:	3f01      	subs	r7, #1
 800609a:	f108 0801 	add.w	r8, r8, #1
 800609e:	e6ff      	b.n	8005ea0 <__kernel_rem_pio2+0x2c8>
 80060a0:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 80060a2:	2b02      	cmp	r3, #2
 80060a4:	dc0b      	bgt.n	80060be <__kernel_rem_pio2+0x4e6>
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	dc6e      	bgt.n	8006188 <__kernel_rem_pio2+0x5b0>
 80060aa:	d045      	beq.n	8006138 <__kernel_rem_pio2+0x560>
 80060ac:	9b07      	ldr	r3, [sp, #28]
 80060ae:	f003 0007 	and.w	r0, r3, #7
 80060b2:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 80060b6:	ecbd 8b02 	vpop	{d8}
 80060ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80060be:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 80060c0:	2b03      	cmp	r3, #3
 80060c2:	d1f3      	bne.n	80060ac <__kernel_rem_pio2+0x4d4>
 80060c4:	ab48      	add	r3, sp, #288	; 0x120
 80060c6:	eb03 0acb 	add.w	sl, r3, fp, lsl #3
 80060ca:	46d0      	mov	r8, sl
 80060cc:	46d9      	mov	r9, fp
 80060ce:	f1b9 0f00 	cmp.w	r9, #0
 80060d2:	f1a8 0808 	sub.w	r8, r8, #8
 80060d6:	dc64      	bgt.n	80061a2 <__kernel_rem_pio2+0x5ca>
 80060d8:	465c      	mov	r4, fp
 80060da:	2c01      	cmp	r4, #1
 80060dc:	f1aa 0a08 	sub.w	sl, sl, #8
 80060e0:	dc7e      	bgt.n	80061e0 <__kernel_rem_pio2+0x608>
 80060e2:	2000      	movs	r0, #0
 80060e4:	2100      	movs	r1, #0
 80060e6:	f1bb 0f01 	cmp.w	fp, #1
 80060ea:	f300 8097 	bgt.w	800621c <__kernel_rem_pio2+0x644>
 80060ee:	9b02      	ldr	r3, [sp, #8]
 80060f0:	e9dd 5648 	ldrd	r5, r6, [sp, #288]	; 0x120
 80060f4:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	; 0x128
 80060f8:	2b00      	cmp	r3, #0
 80060fa:	f040 8099 	bne.w	8006230 <__kernel_rem_pio2+0x658>
 80060fe:	9b01      	ldr	r3, [sp, #4]
 8006100:	e9c3 5600 	strd	r5, r6, [r3]
 8006104:	e9c3 7802 	strd	r7, r8, [r3, #8]
 8006108:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800610c:	e7ce      	b.n	80060ac <__kernel_rem_pio2+0x4d4>
 800610e:	ab48      	add	r3, sp, #288	; 0x120
 8006110:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8006114:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006118:	f7fa f864 	bl	80001e4 <__adddf3>
 800611c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8006120:	f1bb 0f00 	cmp.w	fp, #0
 8006124:	daf3      	bge.n	800610e <__kernel_rem_pio2+0x536>
 8006126:	9b02      	ldr	r3, [sp, #8]
 8006128:	b113      	cbz	r3, 8006130 <__kernel_rem_pio2+0x558>
 800612a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800612e:	4619      	mov	r1, r3
 8006130:	9b01      	ldr	r3, [sp, #4]
 8006132:	e9c3 0100 	strd	r0, r1, [r3]
 8006136:	e7b9      	b.n	80060ac <__kernel_rem_pio2+0x4d4>
 8006138:	2000      	movs	r0, #0
 800613a:	2100      	movs	r1, #0
 800613c:	e7f0      	b.n	8006120 <__kernel_rem_pio2+0x548>
 800613e:	ab48      	add	r3, sp, #288	; 0x120
 8006140:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8006144:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006148:	f7fa f84c 	bl	80001e4 <__adddf3>
 800614c:	3c01      	subs	r4, #1
 800614e:	2c00      	cmp	r4, #0
 8006150:	daf5      	bge.n	800613e <__kernel_rem_pio2+0x566>
 8006152:	9b02      	ldr	r3, [sp, #8]
 8006154:	b1e3      	cbz	r3, 8006190 <__kernel_rem_pio2+0x5b8>
 8006156:	4602      	mov	r2, r0
 8006158:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800615c:	9c01      	ldr	r4, [sp, #4]
 800615e:	e9c4 2300 	strd	r2, r3, [r4]
 8006162:	4602      	mov	r2, r0
 8006164:	460b      	mov	r3, r1
 8006166:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 800616a:	f7fa f839 	bl	80001e0 <__aeabi_dsub>
 800616e:	ad4a      	add	r5, sp, #296	; 0x128
 8006170:	2401      	movs	r4, #1
 8006172:	45a3      	cmp	fp, r4
 8006174:	da0f      	bge.n	8006196 <__kernel_rem_pio2+0x5be>
 8006176:	9b02      	ldr	r3, [sp, #8]
 8006178:	b113      	cbz	r3, 8006180 <__kernel_rem_pio2+0x5a8>
 800617a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800617e:	4619      	mov	r1, r3
 8006180:	9b01      	ldr	r3, [sp, #4]
 8006182:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8006186:	e791      	b.n	80060ac <__kernel_rem_pio2+0x4d4>
 8006188:	465c      	mov	r4, fp
 800618a:	2000      	movs	r0, #0
 800618c:	2100      	movs	r1, #0
 800618e:	e7de      	b.n	800614e <__kernel_rem_pio2+0x576>
 8006190:	4602      	mov	r2, r0
 8006192:	460b      	mov	r3, r1
 8006194:	e7e2      	b.n	800615c <__kernel_rem_pio2+0x584>
 8006196:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 800619a:	f7fa f823 	bl	80001e4 <__adddf3>
 800619e:	3401      	adds	r4, #1
 80061a0:	e7e7      	b.n	8006172 <__kernel_rem_pio2+0x59a>
 80061a2:	e9d8 4500 	ldrd	r4, r5, [r8]
 80061a6:	e9d8 6702 	ldrd	r6, r7, [r8, #8]
 80061aa:	4620      	mov	r0, r4
 80061ac:	4632      	mov	r2, r6
 80061ae:	463b      	mov	r3, r7
 80061b0:	4629      	mov	r1, r5
 80061b2:	f7fa f817 	bl	80001e4 <__adddf3>
 80061b6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80061ba:	4602      	mov	r2, r0
 80061bc:	460b      	mov	r3, r1
 80061be:	4620      	mov	r0, r4
 80061c0:	4629      	mov	r1, r5
 80061c2:	f7fa f80d 	bl	80001e0 <__aeabi_dsub>
 80061c6:	4632      	mov	r2, r6
 80061c8:	463b      	mov	r3, r7
 80061ca:	f7fa f80b 	bl	80001e4 <__adddf3>
 80061ce:	ed9d 7b04 	vldr	d7, [sp, #16]
 80061d2:	e9c8 0102 	strd	r0, r1, [r8, #8]
 80061d6:	ed88 7b00 	vstr	d7, [r8]
 80061da:	f109 39ff 	add.w	r9, r9, #4294967295
 80061de:	e776      	b.n	80060ce <__kernel_rem_pio2+0x4f6>
 80061e0:	e9da 8900 	ldrd	r8, r9, [sl]
 80061e4:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 80061e8:	4640      	mov	r0, r8
 80061ea:	4632      	mov	r2, r6
 80061ec:	463b      	mov	r3, r7
 80061ee:	4649      	mov	r1, r9
 80061f0:	f7f9 fff8 	bl	80001e4 <__adddf3>
 80061f4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80061f8:	4602      	mov	r2, r0
 80061fa:	460b      	mov	r3, r1
 80061fc:	4640      	mov	r0, r8
 80061fe:	4649      	mov	r1, r9
 8006200:	f7f9 ffee 	bl	80001e0 <__aeabi_dsub>
 8006204:	4632      	mov	r2, r6
 8006206:	463b      	mov	r3, r7
 8006208:	f7f9 ffec 	bl	80001e4 <__adddf3>
 800620c:	ed9d 7b04 	vldr	d7, [sp, #16]
 8006210:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8006214:	ed8a 7b00 	vstr	d7, [sl]
 8006218:	3c01      	subs	r4, #1
 800621a:	e75e      	b.n	80060da <__kernel_rem_pio2+0x502>
 800621c:	ab48      	add	r3, sp, #288	; 0x120
 800621e:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8006222:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006226:	f7f9 ffdd 	bl	80001e4 <__adddf3>
 800622a:	f10b 3bff 	add.w	fp, fp, #4294967295
 800622e:	e75a      	b.n	80060e6 <__kernel_rem_pio2+0x50e>
 8006230:	9b01      	ldr	r3, [sp, #4]
 8006232:	9a01      	ldr	r2, [sp, #4]
 8006234:	601d      	str	r5, [r3, #0]
 8006236:	f106 4400 	add.w	r4, r6, #2147483648	; 0x80000000
 800623a:	605c      	str	r4, [r3, #4]
 800623c:	609f      	str	r7, [r3, #8]
 800623e:	f108 4300 	add.w	r3, r8, #2147483648	; 0x80000000
 8006242:	60d3      	str	r3, [r2, #12]
 8006244:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006248:	6110      	str	r0, [r2, #16]
 800624a:	6153      	str	r3, [r2, #20]
 800624c:	e72e      	b.n	80060ac <__kernel_rem_pio2+0x4d4>
 800624e:	bf00      	nop
 8006250:	41700000 	.word	0x41700000
 8006254:	3e700000 	.word	0x3e700000

08006258 <__kernel_sin>:
 8006258:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800625c:	ed2d 8b04 	vpush	{d8-d9}
 8006260:	eeb0 8a41 	vmov.f32	s16, s2
 8006264:	eef0 8a61 	vmov.f32	s17, s3
 8006268:	ec55 4b10 	vmov	r4, r5, d0
 800626c:	b083      	sub	sp, #12
 800626e:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8006272:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 8006276:	9001      	str	r0, [sp, #4]
 8006278:	da06      	bge.n	8006288 <__kernel_sin+0x30>
 800627a:	ee10 0a10 	vmov	r0, s0
 800627e:	4629      	mov	r1, r5
 8006280:	f7fa fc00 	bl	8000a84 <__aeabi_d2iz>
 8006284:	2800      	cmp	r0, #0
 8006286:	d051      	beq.n	800632c <__kernel_sin+0xd4>
 8006288:	4622      	mov	r2, r4
 800628a:	462b      	mov	r3, r5
 800628c:	4620      	mov	r0, r4
 800628e:	4629      	mov	r1, r5
 8006290:	f7fa f95e 	bl	8000550 <__aeabi_dmul>
 8006294:	4682      	mov	sl, r0
 8006296:	468b      	mov	fp, r1
 8006298:	4602      	mov	r2, r0
 800629a:	460b      	mov	r3, r1
 800629c:	4620      	mov	r0, r4
 800629e:	4629      	mov	r1, r5
 80062a0:	f7fa f956 	bl	8000550 <__aeabi_dmul>
 80062a4:	a341      	add	r3, pc, #260	; (adr r3, 80063ac <__kernel_sin+0x154>)
 80062a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062aa:	4680      	mov	r8, r0
 80062ac:	4689      	mov	r9, r1
 80062ae:	4650      	mov	r0, sl
 80062b0:	4659      	mov	r1, fp
 80062b2:	f7fa f94d 	bl	8000550 <__aeabi_dmul>
 80062b6:	a33f      	add	r3, pc, #252	; (adr r3, 80063b4 <__kernel_sin+0x15c>)
 80062b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062bc:	f7f9 ff90 	bl	80001e0 <__aeabi_dsub>
 80062c0:	4652      	mov	r2, sl
 80062c2:	465b      	mov	r3, fp
 80062c4:	f7fa f944 	bl	8000550 <__aeabi_dmul>
 80062c8:	a33c      	add	r3, pc, #240	; (adr r3, 80063bc <__kernel_sin+0x164>)
 80062ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062ce:	f7f9 ff89 	bl	80001e4 <__adddf3>
 80062d2:	4652      	mov	r2, sl
 80062d4:	465b      	mov	r3, fp
 80062d6:	f7fa f93b 	bl	8000550 <__aeabi_dmul>
 80062da:	a33a      	add	r3, pc, #232	; (adr r3, 80063c4 <__kernel_sin+0x16c>)
 80062dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062e0:	f7f9 ff7e 	bl	80001e0 <__aeabi_dsub>
 80062e4:	4652      	mov	r2, sl
 80062e6:	465b      	mov	r3, fp
 80062e8:	f7fa f932 	bl	8000550 <__aeabi_dmul>
 80062ec:	a337      	add	r3, pc, #220	; (adr r3, 80063cc <__kernel_sin+0x174>)
 80062ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062f2:	f7f9 ff77 	bl	80001e4 <__adddf3>
 80062f6:	9b01      	ldr	r3, [sp, #4]
 80062f8:	4606      	mov	r6, r0
 80062fa:	460f      	mov	r7, r1
 80062fc:	b9eb      	cbnz	r3, 800633a <__kernel_sin+0xe2>
 80062fe:	4602      	mov	r2, r0
 8006300:	460b      	mov	r3, r1
 8006302:	4650      	mov	r0, sl
 8006304:	4659      	mov	r1, fp
 8006306:	f7fa f923 	bl	8000550 <__aeabi_dmul>
 800630a:	a325      	add	r3, pc, #148	; (adr r3, 80063a0 <__kernel_sin+0x148>)
 800630c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006310:	f7f9 ff66 	bl	80001e0 <__aeabi_dsub>
 8006314:	4642      	mov	r2, r8
 8006316:	464b      	mov	r3, r9
 8006318:	f7fa f91a 	bl	8000550 <__aeabi_dmul>
 800631c:	4602      	mov	r2, r0
 800631e:	460b      	mov	r3, r1
 8006320:	4620      	mov	r0, r4
 8006322:	4629      	mov	r1, r5
 8006324:	f7f9 ff5e 	bl	80001e4 <__adddf3>
 8006328:	4604      	mov	r4, r0
 800632a:	460d      	mov	r5, r1
 800632c:	ec45 4b10 	vmov	d0, r4, r5
 8006330:	b003      	add	sp, #12
 8006332:	ecbd 8b04 	vpop	{d8-d9}
 8006336:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800633a:	4b1b      	ldr	r3, [pc, #108]	; (80063a8 <__kernel_sin+0x150>)
 800633c:	ec51 0b18 	vmov	r0, r1, d8
 8006340:	2200      	movs	r2, #0
 8006342:	f7fa f905 	bl	8000550 <__aeabi_dmul>
 8006346:	4632      	mov	r2, r6
 8006348:	ec41 0b19 	vmov	d9, r0, r1
 800634c:	463b      	mov	r3, r7
 800634e:	4640      	mov	r0, r8
 8006350:	4649      	mov	r1, r9
 8006352:	f7fa f8fd 	bl	8000550 <__aeabi_dmul>
 8006356:	4602      	mov	r2, r0
 8006358:	460b      	mov	r3, r1
 800635a:	ec51 0b19 	vmov	r0, r1, d9
 800635e:	f7f9 ff3f 	bl	80001e0 <__aeabi_dsub>
 8006362:	4652      	mov	r2, sl
 8006364:	465b      	mov	r3, fp
 8006366:	f7fa f8f3 	bl	8000550 <__aeabi_dmul>
 800636a:	ec53 2b18 	vmov	r2, r3, d8
 800636e:	f7f9 ff37 	bl	80001e0 <__aeabi_dsub>
 8006372:	a30b      	add	r3, pc, #44	; (adr r3, 80063a0 <__kernel_sin+0x148>)
 8006374:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006378:	4606      	mov	r6, r0
 800637a:	460f      	mov	r7, r1
 800637c:	4640      	mov	r0, r8
 800637e:	4649      	mov	r1, r9
 8006380:	f7fa f8e6 	bl	8000550 <__aeabi_dmul>
 8006384:	4602      	mov	r2, r0
 8006386:	460b      	mov	r3, r1
 8006388:	4630      	mov	r0, r6
 800638a:	4639      	mov	r1, r7
 800638c:	f7f9 ff2a 	bl	80001e4 <__adddf3>
 8006390:	4602      	mov	r2, r0
 8006392:	460b      	mov	r3, r1
 8006394:	4620      	mov	r0, r4
 8006396:	4629      	mov	r1, r5
 8006398:	f7f9 ff22 	bl	80001e0 <__aeabi_dsub>
 800639c:	e7c4      	b.n	8006328 <__kernel_sin+0xd0>
 800639e:	bf00      	nop
 80063a0:	55555549 	.word	0x55555549
 80063a4:	3fc55555 	.word	0x3fc55555
 80063a8:	3fe00000 	.word	0x3fe00000
 80063ac:	5acfd57c 	.word	0x5acfd57c
 80063b0:	3de5d93a 	.word	0x3de5d93a
 80063b4:	8a2b9ceb 	.word	0x8a2b9ceb
 80063b8:	3e5ae5e6 	.word	0x3e5ae5e6
 80063bc:	57b1fe7d 	.word	0x57b1fe7d
 80063c0:	3ec71de3 	.word	0x3ec71de3
 80063c4:	19c161d5 	.word	0x19c161d5
 80063c8:	3f2a01a0 	.word	0x3f2a01a0
 80063cc:	1110f8a6 	.word	0x1110f8a6
 80063d0:	3f811111 	.word	0x3f811111

080063d4 <fabs>:
 80063d4:	ec51 0b10 	vmov	r0, r1, d0
 80063d8:	ee10 2a10 	vmov	r2, s0
 80063dc:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80063e0:	ec43 2b10 	vmov	d0, r2, r3
 80063e4:	4770      	bx	lr
	...

080063e8 <floor>:
 80063e8:	ec51 0b10 	vmov	r0, r1, d0
 80063ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80063f0:	f3c1 570a 	ubfx	r7, r1, #20, #11
 80063f4:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 80063f8:	2e13      	cmp	r6, #19
 80063fa:	ee10 5a10 	vmov	r5, s0
 80063fe:	ee10 8a10 	vmov	r8, s0
 8006402:	460c      	mov	r4, r1
 8006404:	dc32      	bgt.n	800646c <floor+0x84>
 8006406:	2e00      	cmp	r6, #0
 8006408:	da14      	bge.n	8006434 <floor+0x4c>
 800640a:	a333      	add	r3, pc, #204	; (adr r3, 80064d8 <floor+0xf0>)
 800640c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006410:	f7f9 fee8 	bl	80001e4 <__adddf3>
 8006414:	2200      	movs	r2, #0
 8006416:	2300      	movs	r3, #0
 8006418:	f7fa fb2a 	bl	8000a70 <__aeabi_dcmpgt>
 800641c:	b138      	cbz	r0, 800642e <floor+0x46>
 800641e:	2c00      	cmp	r4, #0
 8006420:	da57      	bge.n	80064d2 <floor+0xea>
 8006422:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8006426:	431d      	orrs	r5, r3
 8006428:	d001      	beq.n	800642e <floor+0x46>
 800642a:	4c2d      	ldr	r4, [pc, #180]	; (80064e0 <floor+0xf8>)
 800642c:	2500      	movs	r5, #0
 800642e:	4621      	mov	r1, r4
 8006430:	4628      	mov	r0, r5
 8006432:	e025      	b.n	8006480 <floor+0x98>
 8006434:	4f2b      	ldr	r7, [pc, #172]	; (80064e4 <floor+0xfc>)
 8006436:	4137      	asrs	r7, r6
 8006438:	ea01 0307 	and.w	r3, r1, r7
 800643c:	4303      	orrs	r3, r0
 800643e:	d01f      	beq.n	8006480 <floor+0x98>
 8006440:	a325      	add	r3, pc, #148	; (adr r3, 80064d8 <floor+0xf0>)
 8006442:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006446:	f7f9 fecd 	bl	80001e4 <__adddf3>
 800644a:	2200      	movs	r2, #0
 800644c:	2300      	movs	r3, #0
 800644e:	f7fa fb0f 	bl	8000a70 <__aeabi_dcmpgt>
 8006452:	2800      	cmp	r0, #0
 8006454:	d0eb      	beq.n	800642e <floor+0x46>
 8006456:	2c00      	cmp	r4, #0
 8006458:	bfbe      	ittt	lt
 800645a:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800645e:	fa43 f606 	asrlt.w	r6, r3, r6
 8006462:	19a4      	addlt	r4, r4, r6
 8006464:	ea24 0407 	bic.w	r4, r4, r7
 8006468:	2500      	movs	r5, #0
 800646a:	e7e0      	b.n	800642e <floor+0x46>
 800646c:	2e33      	cmp	r6, #51	; 0x33
 800646e:	dd0b      	ble.n	8006488 <floor+0xa0>
 8006470:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8006474:	d104      	bne.n	8006480 <floor+0x98>
 8006476:	ee10 2a10 	vmov	r2, s0
 800647a:	460b      	mov	r3, r1
 800647c:	f7f9 feb2 	bl	80001e4 <__adddf3>
 8006480:	ec41 0b10 	vmov	d0, r0, r1
 8006484:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006488:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 800648c:	f04f 33ff 	mov.w	r3, #4294967295
 8006490:	fa23 f707 	lsr.w	r7, r3, r7
 8006494:	4207      	tst	r7, r0
 8006496:	d0f3      	beq.n	8006480 <floor+0x98>
 8006498:	a30f      	add	r3, pc, #60	; (adr r3, 80064d8 <floor+0xf0>)
 800649a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800649e:	f7f9 fea1 	bl	80001e4 <__adddf3>
 80064a2:	2200      	movs	r2, #0
 80064a4:	2300      	movs	r3, #0
 80064a6:	f7fa fae3 	bl	8000a70 <__aeabi_dcmpgt>
 80064aa:	2800      	cmp	r0, #0
 80064ac:	d0bf      	beq.n	800642e <floor+0x46>
 80064ae:	2c00      	cmp	r4, #0
 80064b0:	da02      	bge.n	80064b8 <floor+0xd0>
 80064b2:	2e14      	cmp	r6, #20
 80064b4:	d103      	bne.n	80064be <floor+0xd6>
 80064b6:	3401      	adds	r4, #1
 80064b8:	ea25 0507 	bic.w	r5, r5, r7
 80064bc:	e7b7      	b.n	800642e <floor+0x46>
 80064be:	2301      	movs	r3, #1
 80064c0:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 80064c4:	fa03 f606 	lsl.w	r6, r3, r6
 80064c8:	4435      	add	r5, r6
 80064ca:	4545      	cmp	r5, r8
 80064cc:	bf38      	it	cc
 80064ce:	18e4      	addcc	r4, r4, r3
 80064d0:	e7f2      	b.n	80064b8 <floor+0xd0>
 80064d2:	2500      	movs	r5, #0
 80064d4:	462c      	mov	r4, r5
 80064d6:	e7aa      	b.n	800642e <floor+0x46>
 80064d8:	8800759c 	.word	0x8800759c
 80064dc:	7e37e43c 	.word	0x7e37e43c
 80064e0:	bff00000 	.word	0xbff00000
 80064e4:	000fffff 	.word	0x000fffff

080064e8 <scalbn>:
 80064e8:	b570      	push	{r4, r5, r6, lr}
 80064ea:	ec55 4b10 	vmov	r4, r5, d0
 80064ee:	f3c5 520a 	ubfx	r2, r5, #20, #11
 80064f2:	4606      	mov	r6, r0
 80064f4:	462b      	mov	r3, r5
 80064f6:	b99a      	cbnz	r2, 8006520 <scalbn+0x38>
 80064f8:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 80064fc:	4323      	orrs	r3, r4
 80064fe:	d036      	beq.n	800656e <scalbn+0x86>
 8006500:	4b39      	ldr	r3, [pc, #228]	; (80065e8 <scalbn+0x100>)
 8006502:	4629      	mov	r1, r5
 8006504:	ee10 0a10 	vmov	r0, s0
 8006508:	2200      	movs	r2, #0
 800650a:	f7fa f821 	bl	8000550 <__aeabi_dmul>
 800650e:	4b37      	ldr	r3, [pc, #220]	; (80065ec <scalbn+0x104>)
 8006510:	429e      	cmp	r6, r3
 8006512:	4604      	mov	r4, r0
 8006514:	460d      	mov	r5, r1
 8006516:	da10      	bge.n	800653a <scalbn+0x52>
 8006518:	a32b      	add	r3, pc, #172	; (adr r3, 80065c8 <scalbn+0xe0>)
 800651a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800651e:	e03a      	b.n	8006596 <scalbn+0xae>
 8006520:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8006524:	428a      	cmp	r2, r1
 8006526:	d10c      	bne.n	8006542 <scalbn+0x5a>
 8006528:	ee10 2a10 	vmov	r2, s0
 800652c:	4620      	mov	r0, r4
 800652e:	4629      	mov	r1, r5
 8006530:	f7f9 fe58 	bl	80001e4 <__adddf3>
 8006534:	4604      	mov	r4, r0
 8006536:	460d      	mov	r5, r1
 8006538:	e019      	b.n	800656e <scalbn+0x86>
 800653a:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800653e:	460b      	mov	r3, r1
 8006540:	3a36      	subs	r2, #54	; 0x36
 8006542:	4432      	add	r2, r6
 8006544:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8006548:	428a      	cmp	r2, r1
 800654a:	dd08      	ble.n	800655e <scalbn+0x76>
 800654c:	2d00      	cmp	r5, #0
 800654e:	a120      	add	r1, pc, #128	; (adr r1, 80065d0 <scalbn+0xe8>)
 8006550:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006554:	da1c      	bge.n	8006590 <scalbn+0xa8>
 8006556:	a120      	add	r1, pc, #128	; (adr r1, 80065d8 <scalbn+0xf0>)
 8006558:	e9d1 0100 	ldrd	r0, r1, [r1]
 800655c:	e018      	b.n	8006590 <scalbn+0xa8>
 800655e:	2a00      	cmp	r2, #0
 8006560:	dd08      	ble.n	8006574 <scalbn+0x8c>
 8006562:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8006566:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800656a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800656e:	ec45 4b10 	vmov	d0, r4, r5
 8006572:	bd70      	pop	{r4, r5, r6, pc}
 8006574:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8006578:	da19      	bge.n	80065ae <scalbn+0xc6>
 800657a:	f24c 3350 	movw	r3, #50000	; 0xc350
 800657e:	429e      	cmp	r6, r3
 8006580:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 8006584:	dd0a      	ble.n	800659c <scalbn+0xb4>
 8006586:	a112      	add	r1, pc, #72	; (adr r1, 80065d0 <scalbn+0xe8>)
 8006588:	e9d1 0100 	ldrd	r0, r1, [r1]
 800658c:	2b00      	cmp	r3, #0
 800658e:	d1e2      	bne.n	8006556 <scalbn+0x6e>
 8006590:	a30f      	add	r3, pc, #60	; (adr r3, 80065d0 <scalbn+0xe8>)
 8006592:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006596:	f7f9 ffdb 	bl	8000550 <__aeabi_dmul>
 800659a:	e7cb      	b.n	8006534 <scalbn+0x4c>
 800659c:	a10a      	add	r1, pc, #40	; (adr r1, 80065c8 <scalbn+0xe0>)
 800659e:	e9d1 0100 	ldrd	r0, r1, [r1]
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	d0b8      	beq.n	8006518 <scalbn+0x30>
 80065a6:	a10e      	add	r1, pc, #56	; (adr r1, 80065e0 <scalbn+0xf8>)
 80065a8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80065ac:	e7b4      	b.n	8006518 <scalbn+0x30>
 80065ae:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80065b2:	3236      	adds	r2, #54	; 0x36
 80065b4:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80065b8:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 80065bc:	4620      	mov	r0, r4
 80065be:	4b0c      	ldr	r3, [pc, #48]	; (80065f0 <scalbn+0x108>)
 80065c0:	2200      	movs	r2, #0
 80065c2:	e7e8      	b.n	8006596 <scalbn+0xae>
 80065c4:	f3af 8000 	nop.w
 80065c8:	c2f8f359 	.word	0xc2f8f359
 80065cc:	01a56e1f 	.word	0x01a56e1f
 80065d0:	8800759c 	.word	0x8800759c
 80065d4:	7e37e43c 	.word	0x7e37e43c
 80065d8:	8800759c 	.word	0x8800759c
 80065dc:	fe37e43c 	.word	0xfe37e43c
 80065e0:	c2f8f359 	.word	0xc2f8f359
 80065e4:	81a56e1f 	.word	0x81a56e1f
 80065e8:	43500000 	.word	0x43500000
 80065ec:	ffff3cb0 	.word	0xffff3cb0
 80065f0:	3c900000 	.word	0x3c900000

080065f4 <_init>:
 80065f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80065f6:	bf00      	nop
 80065f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80065fa:	bc08      	pop	{r3}
 80065fc:	469e      	mov	lr, r3
 80065fe:	4770      	bx	lr

08006600 <_fini>:
 8006600:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006602:	bf00      	nop
 8006604:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006606:	bc08      	pop	{r3}
 8006608:	469e      	mov	lr, r3
 800660a:	4770      	bx	lr
