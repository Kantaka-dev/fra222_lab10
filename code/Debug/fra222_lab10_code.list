
fra222_lab10_code.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a924  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000b20  0800aac8  0800aac8  0001aac8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b5e8  0800b5e8  000201e0  2**0
                  CONTENTS
  4 .ARM          00000008  0800b5e8  0800b5e8  0001b5e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b5f0  0800b5f0  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b5f0  0800b5f0  0001b5f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b5f4  0800b5f4  0001b5f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  0800b5f8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000278  200001e0  0800b7d8  000201e0  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000458  0800b7d8  00020458  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   000124af  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002695  00000000  00000000  000326bf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000010a8  00000000  00000000  00034d58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000fc0  00000000  00000000  00035e00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019039  00000000  00000000  00036dc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011c76  00000000  00000000  0004fdf9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009d819  00000000  00000000  00061a6f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000ff288  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005ac8  00000000  00000000  000ff2dc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001e0 	.word	0x200001e0
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800aaac 	.word	0x0800aaac

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001e4 	.word	0x200001e4
 80001dc:	0800aaac 	.word	0x0800aaac

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_frsub>:
 8000c98:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000c9c:	e002      	b.n	8000ca4 <__addsf3>
 8000c9e:	bf00      	nop

08000ca0 <__aeabi_fsub>:
 8000ca0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000ca4 <__addsf3>:
 8000ca4:	0042      	lsls	r2, r0, #1
 8000ca6:	bf1f      	itttt	ne
 8000ca8:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000cac:	ea92 0f03 	teqne	r2, r3
 8000cb0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000cb4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000cb8:	d06a      	beq.n	8000d90 <__addsf3+0xec>
 8000cba:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000cbe:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000cc2:	bfc1      	itttt	gt
 8000cc4:	18d2      	addgt	r2, r2, r3
 8000cc6:	4041      	eorgt	r1, r0
 8000cc8:	4048      	eorgt	r0, r1
 8000cca:	4041      	eorgt	r1, r0
 8000ccc:	bfb8      	it	lt
 8000cce:	425b      	neglt	r3, r3
 8000cd0:	2b19      	cmp	r3, #25
 8000cd2:	bf88      	it	hi
 8000cd4:	4770      	bxhi	lr
 8000cd6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000cda:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cde:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000ce2:	bf18      	it	ne
 8000ce4:	4240      	negne	r0, r0
 8000ce6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000cea:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000cee:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000cf2:	bf18      	it	ne
 8000cf4:	4249      	negne	r1, r1
 8000cf6:	ea92 0f03 	teq	r2, r3
 8000cfa:	d03f      	beq.n	8000d7c <__addsf3+0xd8>
 8000cfc:	f1a2 0201 	sub.w	r2, r2, #1
 8000d00:	fa41 fc03 	asr.w	ip, r1, r3
 8000d04:	eb10 000c 	adds.w	r0, r0, ip
 8000d08:	f1c3 0320 	rsb	r3, r3, #32
 8000d0c:	fa01 f103 	lsl.w	r1, r1, r3
 8000d10:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000d14:	d502      	bpl.n	8000d1c <__addsf3+0x78>
 8000d16:	4249      	negs	r1, r1
 8000d18:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000d1c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000d20:	d313      	bcc.n	8000d4a <__addsf3+0xa6>
 8000d22:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000d26:	d306      	bcc.n	8000d36 <__addsf3+0x92>
 8000d28:	0840      	lsrs	r0, r0, #1
 8000d2a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000d2e:	f102 0201 	add.w	r2, r2, #1
 8000d32:	2afe      	cmp	r2, #254	; 0xfe
 8000d34:	d251      	bcs.n	8000dda <__addsf3+0x136>
 8000d36:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000d3a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d3e:	bf08      	it	eq
 8000d40:	f020 0001 	biceq.w	r0, r0, #1
 8000d44:	ea40 0003 	orr.w	r0, r0, r3
 8000d48:	4770      	bx	lr
 8000d4a:	0049      	lsls	r1, r1, #1
 8000d4c:	eb40 0000 	adc.w	r0, r0, r0
 8000d50:	3a01      	subs	r2, #1
 8000d52:	bf28      	it	cs
 8000d54:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000d58:	d2ed      	bcs.n	8000d36 <__addsf3+0x92>
 8000d5a:	fab0 fc80 	clz	ip, r0
 8000d5e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000d62:	ebb2 020c 	subs.w	r2, r2, ip
 8000d66:	fa00 f00c 	lsl.w	r0, r0, ip
 8000d6a:	bfaa      	itet	ge
 8000d6c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000d70:	4252      	neglt	r2, r2
 8000d72:	4318      	orrge	r0, r3
 8000d74:	bfbc      	itt	lt
 8000d76:	40d0      	lsrlt	r0, r2
 8000d78:	4318      	orrlt	r0, r3
 8000d7a:	4770      	bx	lr
 8000d7c:	f092 0f00 	teq	r2, #0
 8000d80:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000d84:	bf06      	itte	eq
 8000d86:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000d8a:	3201      	addeq	r2, #1
 8000d8c:	3b01      	subne	r3, #1
 8000d8e:	e7b5      	b.n	8000cfc <__addsf3+0x58>
 8000d90:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000d94:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000d98:	bf18      	it	ne
 8000d9a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000d9e:	d021      	beq.n	8000de4 <__addsf3+0x140>
 8000da0:	ea92 0f03 	teq	r2, r3
 8000da4:	d004      	beq.n	8000db0 <__addsf3+0x10c>
 8000da6:	f092 0f00 	teq	r2, #0
 8000daa:	bf08      	it	eq
 8000dac:	4608      	moveq	r0, r1
 8000dae:	4770      	bx	lr
 8000db0:	ea90 0f01 	teq	r0, r1
 8000db4:	bf1c      	itt	ne
 8000db6:	2000      	movne	r0, #0
 8000db8:	4770      	bxne	lr
 8000dba:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000dbe:	d104      	bne.n	8000dca <__addsf3+0x126>
 8000dc0:	0040      	lsls	r0, r0, #1
 8000dc2:	bf28      	it	cs
 8000dc4:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000dc8:	4770      	bx	lr
 8000dca:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000dce:	bf3c      	itt	cc
 8000dd0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000dd4:	4770      	bxcc	lr
 8000dd6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000dda:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000dde:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000de2:	4770      	bx	lr
 8000de4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000de8:	bf16      	itet	ne
 8000dea:	4608      	movne	r0, r1
 8000dec:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000df0:	4601      	movne	r1, r0
 8000df2:	0242      	lsls	r2, r0, #9
 8000df4:	bf06      	itte	eq
 8000df6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000dfa:	ea90 0f01 	teqeq	r0, r1
 8000dfe:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000e02:	4770      	bx	lr

08000e04 <__aeabi_ui2f>:
 8000e04:	f04f 0300 	mov.w	r3, #0
 8000e08:	e004      	b.n	8000e14 <__aeabi_i2f+0x8>
 8000e0a:	bf00      	nop

08000e0c <__aeabi_i2f>:
 8000e0c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000e10:	bf48      	it	mi
 8000e12:	4240      	negmi	r0, r0
 8000e14:	ea5f 0c00 	movs.w	ip, r0
 8000e18:	bf08      	it	eq
 8000e1a:	4770      	bxeq	lr
 8000e1c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000e20:	4601      	mov	r1, r0
 8000e22:	f04f 0000 	mov.w	r0, #0
 8000e26:	e01c      	b.n	8000e62 <__aeabi_l2f+0x2a>

08000e28 <__aeabi_ul2f>:
 8000e28:	ea50 0201 	orrs.w	r2, r0, r1
 8000e2c:	bf08      	it	eq
 8000e2e:	4770      	bxeq	lr
 8000e30:	f04f 0300 	mov.w	r3, #0
 8000e34:	e00a      	b.n	8000e4c <__aeabi_l2f+0x14>
 8000e36:	bf00      	nop

08000e38 <__aeabi_l2f>:
 8000e38:	ea50 0201 	orrs.w	r2, r0, r1
 8000e3c:	bf08      	it	eq
 8000e3e:	4770      	bxeq	lr
 8000e40:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000e44:	d502      	bpl.n	8000e4c <__aeabi_l2f+0x14>
 8000e46:	4240      	negs	r0, r0
 8000e48:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000e4c:	ea5f 0c01 	movs.w	ip, r1
 8000e50:	bf02      	ittt	eq
 8000e52:	4684      	moveq	ip, r0
 8000e54:	4601      	moveq	r1, r0
 8000e56:	2000      	moveq	r0, #0
 8000e58:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000e5c:	bf08      	it	eq
 8000e5e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000e62:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000e66:	fabc f28c 	clz	r2, ip
 8000e6a:	3a08      	subs	r2, #8
 8000e6c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000e70:	db10      	blt.n	8000e94 <__aeabi_l2f+0x5c>
 8000e72:	fa01 fc02 	lsl.w	ip, r1, r2
 8000e76:	4463      	add	r3, ip
 8000e78:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e7c:	f1c2 0220 	rsb	r2, r2, #32
 8000e80:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000e84:	fa20 f202 	lsr.w	r2, r0, r2
 8000e88:	eb43 0002 	adc.w	r0, r3, r2
 8000e8c:	bf08      	it	eq
 8000e8e:	f020 0001 	biceq.w	r0, r0, #1
 8000e92:	4770      	bx	lr
 8000e94:	f102 0220 	add.w	r2, r2, #32
 8000e98:	fa01 fc02 	lsl.w	ip, r1, r2
 8000e9c:	f1c2 0220 	rsb	r2, r2, #32
 8000ea0:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000ea4:	fa21 f202 	lsr.w	r2, r1, r2
 8000ea8:	eb43 0002 	adc.w	r0, r3, r2
 8000eac:	bf08      	it	eq
 8000eae:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000eb2:	4770      	bx	lr

08000eb4 <__aeabi_uldivmod>:
 8000eb4:	b953      	cbnz	r3, 8000ecc <__aeabi_uldivmod+0x18>
 8000eb6:	b94a      	cbnz	r2, 8000ecc <__aeabi_uldivmod+0x18>
 8000eb8:	2900      	cmp	r1, #0
 8000eba:	bf08      	it	eq
 8000ebc:	2800      	cmpeq	r0, #0
 8000ebe:	bf1c      	itt	ne
 8000ec0:	f04f 31ff 	movne.w	r1, #4294967295
 8000ec4:	f04f 30ff 	movne.w	r0, #4294967295
 8000ec8:	f000 b96e 	b.w	80011a8 <__aeabi_idiv0>
 8000ecc:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ed0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ed4:	f000 f806 	bl	8000ee4 <__udivmoddi4>
 8000ed8:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000edc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ee0:	b004      	add	sp, #16
 8000ee2:	4770      	bx	lr

08000ee4 <__udivmoddi4>:
 8000ee4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ee8:	9d08      	ldr	r5, [sp, #32]
 8000eea:	4604      	mov	r4, r0
 8000eec:	468c      	mov	ip, r1
 8000eee:	2b00      	cmp	r3, #0
 8000ef0:	f040 8083 	bne.w	8000ffa <__udivmoddi4+0x116>
 8000ef4:	428a      	cmp	r2, r1
 8000ef6:	4617      	mov	r7, r2
 8000ef8:	d947      	bls.n	8000f8a <__udivmoddi4+0xa6>
 8000efa:	fab2 f282 	clz	r2, r2
 8000efe:	b142      	cbz	r2, 8000f12 <__udivmoddi4+0x2e>
 8000f00:	f1c2 0020 	rsb	r0, r2, #32
 8000f04:	fa24 f000 	lsr.w	r0, r4, r0
 8000f08:	4091      	lsls	r1, r2
 8000f0a:	4097      	lsls	r7, r2
 8000f0c:	ea40 0c01 	orr.w	ip, r0, r1
 8000f10:	4094      	lsls	r4, r2
 8000f12:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000f16:	0c23      	lsrs	r3, r4, #16
 8000f18:	fbbc f6f8 	udiv	r6, ip, r8
 8000f1c:	fa1f fe87 	uxth.w	lr, r7
 8000f20:	fb08 c116 	mls	r1, r8, r6, ip
 8000f24:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f28:	fb06 f10e 	mul.w	r1, r6, lr
 8000f2c:	4299      	cmp	r1, r3
 8000f2e:	d909      	bls.n	8000f44 <__udivmoddi4+0x60>
 8000f30:	18fb      	adds	r3, r7, r3
 8000f32:	f106 30ff 	add.w	r0, r6, #4294967295
 8000f36:	f080 8119 	bcs.w	800116c <__udivmoddi4+0x288>
 8000f3a:	4299      	cmp	r1, r3
 8000f3c:	f240 8116 	bls.w	800116c <__udivmoddi4+0x288>
 8000f40:	3e02      	subs	r6, #2
 8000f42:	443b      	add	r3, r7
 8000f44:	1a5b      	subs	r3, r3, r1
 8000f46:	b2a4      	uxth	r4, r4
 8000f48:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f4c:	fb08 3310 	mls	r3, r8, r0, r3
 8000f50:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000f54:	fb00 fe0e 	mul.w	lr, r0, lr
 8000f58:	45a6      	cmp	lr, r4
 8000f5a:	d909      	bls.n	8000f70 <__udivmoddi4+0x8c>
 8000f5c:	193c      	adds	r4, r7, r4
 8000f5e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000f62:	f080 8105 	bcs.w	8001170 <__udivmoddi4+0x28c>
 8000f66:	45a6      	cmp	lr, r4
 8000f68:	f240 8102 	bls.w	8001170 <__udivmoddi4+0x28c>
 8000f6c:	3802      	subs	r0, #2
 8000f6e:	443c      	add	r4, r7
 8000f70:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000f74:	eba4 040e 	sub.w	r4, r4, lr
 8000f78:	2600      	movs	r6, #0
 8000f7a:	b11d      	cbz	r5, 8000f84 <__udivmoddi4+0xa0>
 8000f7c:	40d4      	lsrs	r4, r2
 8000f7e:	2300      	movs	r3, #0
 8000f80:	e9c5 4300 	strd	r4, r3, [r5]
 8000f84:	4631      	mov	r1, r6
 8000f86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f8a:	b902      	cbnz	r2, 8000f8e <__udivmoddi4+0xaa>
 8000f8c:	deff      	udf	#255	; 0xff
 8000f8e:	fab2 f282 	clz	r2, r2
 8000f92:	2a00      	cmp	r2, #0
 8000f94:	d150      	bne.n	8001038 <__udivmoddi4+0x154>
 8000f96:	1bcb      	subs	r3, r1, r7
 8000f98:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000f9c:	fa1f f887 	uxth.w	r8, r7
 8000fa0:	2601      	movs	r6, #1
 8000fa2:	fbb3 fcfe 	udiv	ip, r3, lr
 8000fa6:	0c21      	lsrs	r1, r4, #16
 8000fa8:	fb0e 331c 	mls	r3, lr, ip, r3
 8000fac:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000fb0:	fb08 f30c 	mul.w	r3, r8, ip
 8000fb4:	428b      	cmp	r3, r1
 8000fb6:	d907      	bls.n	8000fc8 <__udivmoddi4+0xe4>
 8000fb8:	1879      	adds	r1, r7, r1
 8000fba:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000fbe:	d202      	bcs.n	8000fc6 <__udivmoddi4+0xe2>
 8000fc0:	428b      	cmp	r3, r1
 8000fc2:	f200 80e9 	bhi.w	8001198 <__udivmoddi4+0x2b4>
 8000fc6:	4684      	mov	ip, r0
 8000fc8:	1ac9      	subs	r1, r1, r3
 8000fca:	b2a3      	uxth	r3, r4
 8000fcc:	fbb1 f0fe 	udiv	r0, r1, lr
 8000fd0:	fb0e 1110 	mls	r1, lr, r0, r1
 8000fd4:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000fd8:	fb08 f800 	mul.w	r8, r8, r0
 8000fdc:	45a0      	cmp	r8, r4
 8000fde:	d907      	bls.n	8000ff0 <__udivmoddi4+0x10c>
 8000fe0:	193c      	adds	r4, r7, r4
 8000fe2:	f100 33ff 	add.w	r3, r0, #4294967295
 8000fe6:	d202      	bcs.n	8000fee <__udivmoddi4+0x10a>
 8000fe8:	45a0      	cmp	r8, r4
 8000fea:	f200 80d9 	bhi.w	80011a0 <__udivmoddi4+0x2bc>
 8000fee:	4618      	mov	r0, r3
 8000ff0:	eba4 0408 	sub.w	r4, r4, r8
 8000ff4:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000ff8:	e7bf      	b.n	8000f7a <__udivmoddi4+0x96>
 8000ffa:	428b      	cmp	r3, r1
 8000ffc:	d909      	bls.n	8001012 <__udivmoddi4+0x12e>
 8000ffe:	2d00      	cmp	r5, #0
 8001000:	f000 80b1 	beq.w	8001166 <__udivmoddi4+0x282>
 8001004:	2600      	movs	r6, #0
 8001006:	e9c5 0100 	strd	r0, r1, [r5]
 800100a:	4630      	mov	r0, r6
 800100c:	4631      	mov	r1, r6
 800100e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001012:	fab3 f683 	clz	r6, r3
 8001016:	2e00      	cmp	r6, #0
 8001018:	d14a      	bne.n	80010b0 <__udivmoddi4+0x1cc>
 800101a:	428b      	cmp	r3, r1
 800101c:	d302      	bcc.n	8001024 <__udivmoddi4+0x140>
 800101e:	4282      	cmp	r2, r0
 8001020:	f200 80b8 	bhi.w	8001194 <__udivmoddi4+0x2b0>
 8001024:	1a84      	subs	r4, r0, r2
 8001026:	eb61 0103 	sbc.w	r1, r1, r3
 800102a:	2001      	movs	r0, #1
 800102c:	468c      	mov	ip, r1
 800102e:	2d00      	cmp	r5, #0
 8001030:	d0a8      	beq.n	8000f84 <__udivmoddi4+0xa0>
 8001032:	e9c5 4c00 	strd	r4, ip, [r5]
 8001036:	e7a5      	b.n	8000f84 <__udivmoddi4+0xa0>
 8001038:	f1c2 0320 	rsb	r3, r2, #32
 800103c:	fa20 f603 	lsr.w	r6, r0, r3
 8001040:	4097      	lsls	r7, r2
 8001042:	fa01 f002 	lsl.w	r0, r1, r2
 8001046:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800104a:	40d9      	lsrs	r1, r3
 800104c:	4330      	orrs	r0, r6
 800104e:	0c03      	lsrs	r3, r0, #16
 8001050:	fbb1 f6fe 	udiv	r6, r1, lr
 8001054:	fa1f f887 	uxth.w	r8, r7
 8001058:	fb0e 1116 	mls	r1, lr, r6, r1
 800105c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8001060:	fb06 f108 	mul.w	r1, r6, r8
 8001064:	4299      	cmp	r1, r3
 8001066:	fa04 f402 	lsl.w	r4, r4, r2
 800106a:	d909      	bls.n	8001080 <__udivmoddi4+0x19c>
 800106c:	18fb      	adds	r3, r7, r3
 800106e:	f106 3cff 	add.w	ip, r6, #4294967295
 8001072:	f080 808d 	bcs.w	8001190 <__udivmoddi4+0x2ac>
 8001076:	4299      	cmp	r1, r3
 8001078:	f240 808a 	bls.w	8001190 <__udivmoddi4+0x2ac>
 800107c:	3e02      	subs	r6, #2
 800107e:	443b      	add	r3, r7
 8001080:	1a5b      	subs	r3, r3, r1
 8001082:	b281      	uxth	r1, r0
 8001084:	fbb3 f0fe 	udiv	r0, r3, lr
 8001088:	fb0e 3310 	mls	r3, lr, r0, r3
 800108c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8001090:	fb00 f308 	mul.w	r3, r0, r8
 8001094:	428b      	cmp	r3, r1
 8001096:	d907      	bls.n	80010a8 <__udivmoddi4+0x1c4>
 8001098:	1879      	adds	r1, r7, r1
 800109a:	f100 3cff 	add.w	ip, r0, #4294967295
 800109e:	d273      	bcs.n	8001188 <__udivmoddi4+0x2a4>
 80010a0:	428b      	cmp	r3, r1
 80010a2:	d971      	bls.n	8001188 <__udivmoddi4+0x2a4>
 80010a4:	3802      	subs	r0, #2
 80010a6:	4439      	add	r1, r7
 80010a8:	1acb      	subs	r3, r1, r3
 80010aa:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80010ae:	e778      	b.n	8000fa2 <__udivmoddi4+0xbe>
 80010b0:	f1c6 0c20 	rsb	ip, r6, #32
 80010b4:	fa03 f406 	lsl.w	r4, r3, r6
 80010b8:	fa22 f30c 	lsr.w	r3, r2, ip
 80010bc:	431c      	orrs	r4, r3
 80010be:	fa20 f70c 	lsr.w	r7, r0, ip
 80010c2:	fa01 f306 	lsl.w	r3, r1, r6
 80010c6:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80010ca:	fa21 f10c 	lsr.w	r1, r1, ip
 80010ce:	431f      	orrs	r7, r3
 80010d0:	0c3b      	lsrs	r3, r7, #16
 80010d2:	fbb1 f9fe 	udiv	r9, r1, lr
 80010d6:	fa1f f884 	uxth.w	r8, r4
 80010da:	fb0e 1119 	mls	r1, lr, r9, r1
 80010de:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80010e2:	fb09 fa08 	mul.w	sl, r9, r8
 80010e6:	458a      	cmp	sl, r1
 80010e8:	fa02 f206 	lsl.w	r2, r2, r6
 80010ec:	fa00 f306 	lsl.w	r3, r0, r6
 80010f0:	d908      	bls.n	8001104 <__udivmoddi4+0x220>
 80010f2:	1861      	adds	r1, r4, r1
 80010f4:	f109 30ff 	add.w	r0, r9, #4294967295
 80010f8:	d248      	bcs.n	800118c <__udivmoddi4+0x2a8>
 80010fa:	458a      	cmp	sl, r1
 80010fc:	d946      	bls.n	800118c <__udivmoddi4+0x2a8>
 80010fe:	f1a9 0902 	sub.w	r9, r9, #2
 8001102:	4421      	add	r1, r4
 8001104:	eba1 010a 	sub.w	r1, r1, sl
 8001108:	b2bf      	uxth	r7, r7
 800110a:	fbb1 f0fe 	udiv	r0, r1, lr
 800110e:	fb0e 1110 	mls	r1, lr, r0, r1
 8001112:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8001116:	fb00 f808 	mul.w	r8, r0, r8
 800111a:	45b8      	cmp	r8, r7
 800111c:	d907      	bls.n	800112e <__udivmoddi4+0x24a>
 800111e:	19e7      	adds	r7, r4, r7
 8001120:	f100 31ff 	add.w	r1, r0, #4294967295
 8001124:	d22e      	bcs.n	8001184 <__udivmoddi4+0x2a0>
 8001126:	45b8      	cmp	r8, r7
 8001128:	d92c      	bls.n	8001184 <__udivmoddi4+0x2a0>
 800112a:	3802      	subs	r0, #2
 800112c:	4427      	add	r7, r4
 800112e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8001132:	eba7 0708 	sub.w	r7, r7, r8
 8001136:	fba0 8902 	umull	r8, r9, r0, r2
 800113a:	454f      	cmp	r7, r9
 800113c:	46c6      	mov	lr, r8
 800113e:	4649      	mov	r1, r9
 8001140:	d31a      	bcc.n	8001178 <__udivmoddi4+0x294>
 8001142:	d017      	beq.n	8001174 <__udivmoddi4+0x290>
 8001144:	b15d      	cbz	r5, 800115e <__udivmoddi4+0x27a>
 8001146:	ebb3 020e 	subs.w	r2, r3, lr
 800114a:	eb67 0701 	sbc.w	r7, r7, r1
 800114e:	fa07 fc0c 	lsl.w	ip, r7, ip
 8001152:	40f2      	lsrs	r2, r6
 8001154:	ea4c 0202 	orr.w	r2, ip, r2
 8001158:	40f7      	lsrs	r7, r6
 800115a:	e9c5 2700 	strd	r2, r7, [r5]
 800115e:	2600      	movs	r6, #0
 8001160:	4631      	mov	r1, r6
 8001162:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001166:	462e      	mov	r6, r5
 8001168:	4628      	mov	r0, r5
 800116a:	e70b      	b.n	8000f84 <__udivmoddi4+0xa0>
 800116c:	4606      	mov	r6, r0
 800116e:	e6e9      	b.n	8000f44 <__udivmoddi4+0x60>
 8001170:	4618      	mov	r0, r3
 8001172:	e6fd      	b.n	8000f70 <__udivmoddi4+0x8c>
 8001174:	4543      	cmp	r3, r8
 8001176:	d2e5      	bcs.n	8001144 <__udivmoddi4+0x260>
 8001178:	ebb8 0e02 	subs.w	lr, r8, r2
 800117c:	eb69 0104 	sbc.w	r1, r9, r4
 8001180:	3801      	subs	r0, #1
 8001182:	e7df      	b.n	8001144 <__udivmoddi4+0x260>
 8001184:	4608      	mov	r0, r1
 8001186:	e7d2      	b.n	800112e <__udivmoddi4+0x24a>
 8001188:	4660      	mov	r0, ip
 800118a:	e78d      	b.n	80010a8 <__udivmoddi4+0x1c4>
 800118c:	4681      	mov	r9, r0
 800118e:	e7b9      	b.n	8001104 <__udivmoddi4+0x220>
 8001190:	4666      	mov	r6, ip
 8001192:	e775      	b.n	8001080 <__udivmoddi4+0x19c>
 8001194:	4630      	mov	r0, r6
 8001196:	e74a      	b.n	800102e <__udivmoddi4+0x14a>
 8001198:	f1ac 0c02 	sub.w	ip, ip, #2
 800119c:	4439      	add	r1, r7
 800119e:	e713      	b.n	8000fc8 <__udivmoddi4+0xe4>
 80011a0:	3802      	subs	r0, #2
 80011a2:	443c      	add	r4, r7
 80011a4:	e724      	b.n	8000ff0 <__udivmoddi4+0x10c>
 80011a6:	bf00      	nop

080011a8 <__aeabi_idiv0>:
 80011a8:	4770      	bx	lr
 80011aa:	bf00      	nop

080011ac <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80011ac:	b5b0      	push	{r4, r5, r7, lr}
 80011ae:	b082      	sub	sp, #8
 80011b0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80011b2:	f001 fdc5 	bl	8002d40 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80011b6:	f000 f85f 	bl	8001278 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80011ba:	f000 fa09 	bl	80015d0 <MX_GPIO_Init>
  MX_DMA_Init();
 80011be:	f000 f9e7 	bl	8001590 <MX_DMA_Init>
  MX_USART2_UART_Init();
 80011c2:	f000 f9bb 	bl	800153c <MX_USART2_UART_Init>
  MX_SPI3_Init();
 80011c6:	f000 f911 	bl	80013ec <MX_SPI3_Init>
  MX_ADC1_Init();
 80011ca:	f000 f8bd 	bl	8001348 <MX_ADC1_Init>
  MX_TIM3_Init();
 80011ce:	f000 f945 	bl	800145c <MX_TIM3_Init>
  MX_TIM11_Init();
 80011d2:	f000 f98f 	bl	80014f4 <MX_TIM11_Init>
  /* USER CODE BEGIN 2 */

	HAL_TIM_Base_Start(&htim3);
 80011d6:	481f      	ldr	r0, [pc, #124]	; (8001254 <main+0xa8>)
 80011d8:	f004 faac 	bl	8005734 <HAL_TIM_Base_Start>
	HAL_TIM_Base_Start_IT(&htim11);
 80011dc:	481e      	ldr	r0, [pc, #120]	; (8001258 <main+0xac>)
 80011de:	f004 fb03 	bl	80057e8 <HAL_TIM_Base_Start_IT>
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*) &ADCin, 1);
 80011e2:	2201      	movs	r2, #1
 80011e4:	491d      	ldr	r1, [pc, #116]	; (800125c <main+0xb0>)
 80011e6:	481e      	ldr	r0, [pc, #120]	; (8001260 <main+0xb4>)
 80011e8:	f001 ffa0 	bl	800312c <HAL_ADC_Start_DMA>

	HAL_GPIO_WritePin(LOAD_GPIO_Port, LOAD_Pin, GPIO_PIN_RESET);
 80011ec:	2200      	movs	r2, #0
 80011ee:	f44f 7100 	mov.w	r1, #512	; 0x200
 80011f2:	481c      	ldr	r0, [pc, #112]	; (8001264 <main+0xb8>)
 80011f4:	f003 fa1c 	bl	8004630 <HAL_GPIO_WritePin>

	generatorInit(&ControlVar);
 80011f8:	481b      	ldr	r0, [pc, #108]	; (8001268 <main+0xbc>)
 80011fa:	f001 f80d 	bl	8002218 <generatorInit>

	updateStatus();
 80011fe:	f000 ff01 	bl	8002004 <updateStatus>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
	{
		//Read UART
		HAL_UART_Receive_IT(&huart2,  (uint8_t*)RxDataBuffer, 32);
 8001202:	2220      	movs	r2, #32
 8001204:	4919      	ldr	r1, [pc, #100]	; (800126c <main+0xc0>)
 8001206:	481a      	ldr	r0, [pc, #104]	; (8001270 <main+0xc4>)
 8001208:	f004 ffbf 	bl	800618a <HAL_UART_Receive_IT>

		int16_t inputchar = UARTRecieveIT();
 800120c:	f000 ffd4 	bl	80021b8 <UARTRecieveIT>
 8001210:	4603      	mov	r3, r0
 8001212:	80fb      	strh	r3, [r7, #6]
		if (inputchar!=-1)
 8001214:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001218:	f1b3 3fff 	cmp.w	r3, #4294967295
 800121c:	d004      	beq.n	8001228 <main+0x7c>
		{
			updateUI(inputchar);
 800121e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001222:	4618      	mov	r0, r3
 8001224:	f000 fa74 	bl	8001710 <updateUI>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

		static uint64_t timestamp = 0;
		if (micros() - timestamp > 100) // f 10kHz or T 100uS
 8001228:	f001 fa86 	bl	8002738 <micros>
 800122c:	4b11      	ldr	r3, [pc, #68]	; (8001274 <main+0xc8>)
 800122e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001232:	1a84      	subs	r4, r0, r2
 8001234:	eb61 0503 	sbc.w	r5, r1, r3
 8001238:	2d00      	cmp	r5, #0
 800123a:	bf08      	it	eq
 800123c:	2c65      	cmpeq	r4, #101	; 0x65
 800123e:	d3e0      	bcc.n	8001202 <main+0x56>
		{
			timestamp = micros();
 8001240:	f001 fa7a 	bl	8002738 <micros>
 8001244:	4602      	mov	r2, r0
 8001246:	460b      	mov	r3, r1
 8001248:	490a      	ldr	r1, [pc, #40]	; (8001274 <main+0xc8>)
 800124a:	e9c1 2300 	strd	r2, r3, [r1]
			generator();
 800124e:	f001 f80f 	bl	8002270 <generator>
	{
 8001252:	e7d6      	b.n	8001202 <main+0x56>
 8001254:	20000270 	.word	0x20000270
 8001258:	20000358 	.word	0x20000358
 800125c:	200001fc 	.word	0x200001fc
 8001260:	20000310 	.word	0x20000310
 8001264:	40020000 	.word	0x40020000
 8001268:	20000210 	.word	0x20000210
 800126c:	20000230 	.word	0x20000230
 8001270:	20000400 	.word	0x20000400
 8001274:	20000258 	.word	0x20000258

08001278 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001278:	b580      	push	{r7, lr}
 800127a:	b094      	sub	sp, #80	; 0x50
 800127c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800127e:	f107 0320 	add.w	r3, r7, #32
 8001282:	2230      	movs	r2, #48	; 0x30
 8001284:	2100      	movs	r1, #0
 8001286:	4618      	mov	r0, r3
 8001288:	f005 fd4a 	bl	8006d20 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800128c:	f107 030c 	add.w	r3, r7, #12
 8001290:	2200      	movs	r2, #0
 8001292:	601a      	str	r2, [r3, #0]
 8001294:	605a      	str	r2, [r3, #4]
 8001296:	609a      	str	r2, [r3, #8]
 8001298:	60da      	str	r2, [r3, #12]
 800129a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800129c:	2300      	movs	r3, #0
 800129e:	60bb      	str	r3, [r7, #8]
 80012a0:	4b27      	ldr	r3, [pc, #156]	; (8001340 <SystemClock_Config+0xc8>)
 80012a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012a4:	4a26      	ldr	r2, [pc, #152]	; (8001340 <SystemClock_Config+0xc8>)
 80012a6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80012aa:	6413      	str	r3, [r2, #64]	; 0x40
 80012ac:	4b24      	ldr	r3, [pc, #144]	; (8001340 <SystemClock_Config+0xc8>)
 80012ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012b4:	60bb      	str	r3, [r7, #8]
 80012b6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80012b8:	2300      	movs	r3, #0
 80012ba:	607b      	str	r3, [r7, #4]
 80012bc:	4b21      	ldr	r3, [pc, #132]	; (8001344 <SystemClock_Config+0xcc>)
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	4a20      	ldr	r2, [pc, #128]	; (8001344 <SystemClock_Config+0xcc>)
 80012c2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80012c6:	6013      	str	r3, [r2, #0]
 80012c8:	4b1e      	ldr	r3, [pc, #120]	; (8001344 <SystemClock_Config+0xcc>)
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80012d0:	607b      	str	r3, [r7, #4]
 80012d2:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80012d4:	2302      	movs	r3, #2
 80012d6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80012d8:	2301      	movs	r3, #1
 80012da:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80012dc:	2310      	movs	r3, #16
 80012de:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80012e0:	2302      	movs	r3, #2
 80012e2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80012e4:	2300      	movs	r3, #0
 80012e6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80012e8:	2308      	movs	r3, #8
 80012ea:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 80012ec:	2364      	movs	r3, #100	; 0x64
 80012ee:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80012f0:	2302      	movs	r3, #2
 80012f2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80012f4:	2304      	movs	r3, #4
 80012f6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80012f8:	f107 0320 	add.w	r3, r7, #32
 80012fc:	4618      	mov	r0, r3
 80012fe:	f003 f9b1 	bl	8004664 <HAL_RCC_OscConfig>
 8001302:	4603      	mov	r3, r0
 8001304:	2b00      	cmp	r3, #0
 8001306:	d001      	beq.n	800130c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001308:	f001 fa30 	bl	800276c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800130c:	230f      	movs	r3, #15
 800130e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001310:	2302      	movs	r3, #2
 8001312:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001314:	2300      	movs	r3, #0
 8001316:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001318:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800131c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800131e:	2300      	movs	r3, #0
 8001320:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001322:	f107 030c 	add.w	r3, r7, #12
 8001326:	2103      	movs	r1, #3
 8001328:	4618      	mov	r0, r3
 800132a:	f003 fc13 	bl	8004b54 <HAL_RCC_ClockConfig>
 800132e:	4603      	mov	r3, r0
 8001330:	2b00      	cmp	r3, #0
 8001332:	d001      	beq.n	8001338 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8001334:	f001 fa1a 	bl	800276c <Error_Handler>
  }
}
 8001338:	bf00      	nop
 800133a:	3750      	adds	r7, #80	; 0x50
 800133c:	46bd      	mov	sp, r7
 800133e:	bd80      	pop	{r7, pc}
 8001340:	40023800 	.word	0x40023800
 8001344:	40007000 	.word	0x40007000

08001348 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001348:	b580      	push	{r7, lr}
 800134a:	b084      	sub	sp, #16
 800134c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800134e:	463b      	mov	r3, r7
 8001350:	2200      	movs	r2, #0
 8001352:	601a      	str	r2, [r3, #0]
 8001354:	605a      	str	r2, [r3, #4]
 8001356:	609a      	str	r2, [r3, #8]
 8001358:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800135a:	4b22      	ldr	r3, [pc, #136]	; (80013e4 <MX_ADC1_Init+0x9c>)
 800135c:	4a22      	ldr	r2, [pc, #136]	; (80013e8 <MX_ADC1_Init+0xa0>)
 800135e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001360:	4b20      	ldr	r3, [pc, #128]	; (80013e4 <MX_ADC1_Init+0x9c>)
 8001362:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001366:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001368:	4b1e      	ldr	r3, [pc, #120]	; (80013e4 <MX_ADC1_Init+0x9c>)
 800136a:	2200      	movs	r2, #0
 800136c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 800136e:	4b1d      	ldr	r3, [pc, #116]	; (80013e4 <MX_ADC1_Init+0x9c>)
 8001370:	2201      	movs	r2, #1
 8001372:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001374:	4b1b      	ldr	r3, [pc, #108]	; (80013e4 <MX_ADC1_Init+0x9c>)
 8001376:	2200      	movs	r2, #0
 8001378:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800137a:	4b1a      	ldr	r3, [pc, #104]	; (80013e4 <MX_ADC1_Init+0x9c>)
 800137c:	2200      	movs	r2, #0
 800137e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8001382:	4b18      	ldr	r3, [pc, #96]	; (80013e4 <MX_ADC1_Init+0x9c>)
 8001384:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001388:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T3_TRGO;
 800138a:	4b16      	ldr	r3, [pc, #88]	; (80013e4 <MX_ADC1_Init+0x9c>)
 800138c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001390:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001392:	4b14      	ldr	r3, [pc, #80]	; (80013e4 <MX_ADC1_Init+0x9c>)
 8001394:	2200      	movs	r2, #0
 8001396:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001398:	4b12      	ldr	r3, [pc, #72]	; (80013e4 <MX_ADC1_Init+0x9c>)
 800139a:	2201      	movs	r2, #1
 800139c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 800139e:	4b11      	ldr	r3, [pc, #68]	; (80013e4 <MX_ADC1_Init+0x9c>)
 80013a0:	2201      	movs	r2, #1
 80013a2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 80013a6:	4b0f      	ldr	r3, [pc, #60]	; (80013e4 <MX_ADC1_Init+0x9c>)
 80013a8:	2200      	movs	r2, #0
 80013aa:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80013ac:	480d      	ldr	r0, [pc, #52]	; (80013e4 <MX_ADC1_Init+0x9c>)
 80013ae:	f001 fd39 	bl	8002e24 <HAL_ADC_Init>
 80013b2:	4603      	mov	r3, r0
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d001      	beq.n	80013bc <MX_ADC1_Init+0x74>
  {
    Error_Handler();
 80013b8:	f001 f9d8 	bl	800276c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80013bc:	2300      	movs	r3, #0
 80013be:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80013c0:	2301      	movs	r3, #1
 80013c2:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80013c4:	2300      	movs	r3, #0
 80013c6:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80013c8:	463b      	mov	r3, r7
 80013ca:	4619      	mov	r1, r3
 80013cc:	4805      	ldr	r0, [pc, #20]	; (80013e4 <MX_ADC1_Init+0x9c>)
 80013ce:	f001 ffc5 	bl	800335c <HAL_ADC_ConfigChannel>
 80013d2:	4603      	mov	r3, r0
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d001      	beq.n	80013dc <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 80013d8:	f001 f9c8 	bl	800276c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80013dc:	bf00      	nop
 80013de:	3710      	adds	r7, #16
 80013e0:	46bd      	mov	sp, r7
 80013e2:	bd80      	pop	{r7, pc}
 80013e4:	20000310 	.word	0x20000310
 80013e8:	40012000 	.word	0x40012000

080013ec <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 80013ec:	b580      	push	{r7, lr}
 80013ee:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 80013f0:	4b18      	ldr	r3, [pc, #96]	; (8001454 <MX_SPI3_Init+0x68>)
 80013f2:	4a19      	ldr	r2, [pc, #100]	; (8001458 <MX_SPI3_Init+0x6c>)
 80013f4:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 80013f6:	4b17      	ldr	r3, [pc, #92]	; (8001454 <MX_SPI3_Init+0x68>)
 80013f8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80013fc:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 80013fe:	4b15      	ldr	r3, [pc, #84]	; (8001454 <MX_SPI3_Init+0x68>)
 8001400:	2200      	movs	r2, #0
 8001402:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_16BIT;
 8001404:	4b13      	ldr	r3, [pc, #76]	; (8001454 <MX_SPI3_Init+0x68>)
 8001406:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800140a:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 800140c:	4b11      	ldr	r3, [pc, #68]	; (8001454 <MX_SPI3_Init+0x68>)
 800140e:	2200      	movs	r2, #0
 8001410:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001412:	4b10      	ldr	r3, [pc, #64]	; (8001454 <MX_SPI3_Init+0x68>)
 8001414:	2200      	movs	r2, #0
 8001416:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8001418:	4b0e      	ldr	r3, [pc, #56]	; (8001454 <MX_SPI3_Init+0x68>)
 800141a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800141e:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8001420:	4b0c      	ldr	r3, [pc, #48]	; (8001454 <MX_SPI3_Init+0x68>)
 8001422:	2220      	movs	r2, #32
 8001424:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001426:	4b0b      	ldr	r3, [pc, #44]	; (8001454 <MX_SPI3_Init+0x68>)
 8001428:	2200      	movs	r2, #0
 800142a:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 800142c:	4b09      	ldr	r3, [pc, #36]	; (8001454 <MX_SPI3_Init+0x68>)
 800142e:	2200      	movs	r2, #0
 8001430:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001432:	4b08      	ldr	r3, [pc, #32]	; (8001454 <MX_SPI3_Init+0x68>)
 8001434:	2200      	movs	r2, #0
 8001436:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 8001438:	4b06      	ldr	r3, [pc, #24]	; (8001454 <MX_SPI3_Init+0x68>)
 800143a:	220a      	movs	r2, #10
 800143c:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 800143e:	4805      	ldr	r0, [pc, #20]	; (8001454 <MX_SPI3_Init+0x68>)
 8001440:	f003 fd84 	bl	8004f4c <HAL_SPI_Init>
 8001444:	4603      	mov	r3, r0
 8001446:	2b00      	cmp	r3, #0
 8001448:	d001      	beq.n	800144e <MX_SPI3_Init+0x62>
  {
    Error_Handler();
 800144a:	f001 f98f 	bl	800276c <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 800144e:	bf00      	nop
 8001450:	bd80      	pop	{r7, pc}
 8001452:	bf00      	nop
 8001454:	200002b8 	.word	0x200002b8
 8001458:	40003c00 	.word	0x40003c00

0800145c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800145c:	b580      	push	{r7, lr}
 800145e:	b086      	sub	sp, #24
 8001460:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001462:	f107 0308 	add.w	r3, r7, #8
 8001466:	2200      	movs	r2, #0
 8001468:	601a      	str	r2, [r3, #0]
 800146a:	605a      	str	r2, [r3, #4]
 800146c:	609a      	str	r2, [r3, #8]
 800146e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001470:	463b      	mov	r3, r7
 8001472:	2200      	movs	r2, #0
 8001474:	601a      	str	r2, [r3, #0]
 8001476:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001478:	4b1c      	ldr	r3, [pc, #112]	; (80014ec <MX_TIM3_Init+0x90>)
 800147a:	4a1d      	ldr	r2, [pc, #116]	; (80014f0 <MX_TIM3_Init+0x94>)
 800147c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 100;
 800147e:	4b1b      	ldr	r3, [pc, #108]	; (80014ec <MX_TIM3_Init+0x90>)
 8001480:	2264      	movs	r2, #100	; 0x64
 8001482:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001484:	4b19      	ldr	r3, [pc, #100]	; (80014ec <MX_TIM3_Init+0x90>)
 8001486:	2200      	movs	r2, #0
 8001488:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 100;
 800148a:	4b18      	ldr	r3, [pc, #96]	; (80014ec <MX_TIM3_Init+0x90>)
 800148c:	2264      	movs	r2, #100	; 0x64
 800148e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001490:	4b16      	ldr	r3, [pc, #88]	; (80014ec <MX_TIM3_Init+0x90>)
 8001492:	2200      	movs	r2, #0
 8001494:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001496:	4b15      	ldr	r3, [pc, #84]	; (80014ec <MX_TIM3_Init+0x90>)
 8001498:	2200      	movs	r2, #0
 800149a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800149c:	4813      	ldr	r0, [pc, #76]	; (80014ec <MX_TIM3_Init+0x90>)
 800149e:	f004 f8f9 	bl	8005694 <HAL_TIM_Base_Init>
 80014a2:	4603      	mov	r3, r0
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d001      	beq.n	80014ac <MX_TIM3_Init+0x50>
  {
    Error_Handler();
 80014a8:	f001 f960 	bl	800276c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80014ac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80014b0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80014b2:	f107 0308 	add.w	r3, r7, #8
 80014b6:	4619      	mov	r1, r3
 80014b8:	480c      	ldr	r0, [pc, #48]	; (80014ec <MX_TIM3_Init+0x90>)
 80014ba:	f004 faff 	bl	8005abc <HAL_TIM_ConfigClockSource>
 80014be:	4603      	mov	r3, r0
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d001      	beq.n	80014c8 <MX_TIM3_Init+0x6c>
  {
    Error_Handler();
 80014c4:	f001 f952 	bl	800276c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80014c8:	2320      	movs	r3, #32
 80014ca:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80014cc:	2300      	movs	r3, #0
 80014ce:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80014d0:	463b      	mov	r3, r7
 80014d2:	4619      	mov	r1, r3
 80014d4:	4805      	ldr	r0, [pc, #20]	; (80014ec <MX_TIM3_Init+0x90>)
 80014d6:	f004 fcf7 	bl	8005ec8 <HAL_TIMEx_MasterConfigSynchronization>
 80014da:	4603      	mov	r3, r0
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d001      	beq.n	80014e4 <MX_TIM3_Init+0x88>
  {
    Error_Handler();
 80014e0:	f001 f944 	bl	800276c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80014e4:	bf00      	nop
 80014e6:	3718      	adds	r7, #24
 80014e8:	46bd      	mov	sp, r7
 80014ea:	bd80      	pop	{r7, pc}
 80014ec:	20000270 	.word	0x20000270
 80014f0:	40000400 	.word	0x40000400

080014f4 <MX_TIM11_Init>:
  * @brief TIM11 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM11_Init(void)
{
 80014f4:	b580      	push	{r7, lr}
 80014f6:	af00      	add	r7, sp, #0
  /* USER CODE END TIM11_Init 0 */

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 80014f8:	4b0e      	ldr	r3, [pc, #56]	; (8001534 <MX_TIM11_Init+0x40>)
 80014fa:	4a0f      	ldr	r2, [pc, #60]	; (8001538 <MX_TIM11_Init+0x44>)
 80014fc:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 100;
 80014fe:	4b0d      	ldr	r3, [pc, #52]	; (8001534 <MX_TIM11_Init+0x40>)
 8001500:	2264      	movs	r2, #100	; 0x64
 8001502:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001504:	4b0b      	ldr	r3, [pc, #44]	; (8001534 <MX_TIM11_Init+0x40>)
 8001506:	2200      	movs	r2, #0
 8001508:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 65535;
 800150a:	4b0a      	ldr	r3, [pc, #40]	; (8001534 <MX_TIM11_Init+0x40>)
 800150c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001510:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001512:	4b08      	ldr	r3, [pc, #32]	; (8001534 <MX_TIM11_Init+0x40>)
 8001514:	2200      	movs	r2, #0
 8001516:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001518:	4b06      	ldr	r3, [pc, #24]	; (8001534 <MX_TIM11_Init+0x40>)
 800151a:	2200      	movs	r2, #0
 800151c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 800151e:	4805      	ldr	r0, [pc, #20]	; (8001534 <MX_TIM11_Init+0x40>)
 8001520:	f004 f8b8 	bl	8005694 <HAL_TIM_Base_Init>
 8001524:	4603      	mov	r3, r0
 8001526:	2b00      	cmp	r3, #0
 8001528:	d001      	beq.n	800152e <MX_TIM11_Init+0x3a>
  {
    Error_Handler();
 800152a:	f001 f91f 	bl	800276c <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
 800152e:	bf00      	nop
 8001530:	bd80      	pop	{r7, pc}
 8001532:	bf00      	nop
 8001534:	20000358 	.word	0x20000358
 8001538:	40014800 	.word	0x40014800

0800153c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800153c:	b580      	push	{r7, lr}
 800153e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001540:	4b11      	ldr	r3, [pc, #68]	; (8001588 <MX_USART2_UART_Init+0x4c>)
 8001542:	4a12      	ldr	r2, [pc, #72]	; (800158c <MX_USART2_UART_Init+0x50>)
 8001544:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001546:	4b10      	ldr	r3, [pc, #64]	; (8001588 <MX_USART2_UART_Init+0x4c>)
 8001548:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800154c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800154e:	4b0e      	ldr	r3, [pc, #56]	; (8001588 <MX_USART2_UART_Init+0x4c>)
 8001550:	2200      	movs	r2, #0
 8001552:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001554:	4b0c      	ldr	r3, [pc, #48]	; (8001588 <MX_USART2_UART_Init+0x4c>)
 8001556:	2200      	movs	r2, #0
 8001558:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800155a:	4b0b      	ldr	r3, [pc, #44]	; (8001588 <MX_USART2_UART_Init+0x4c>)
 800155c:	2200      	movs	r2, #0
 800155e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001560:	4b09      	ldr	r3, [pc, #36]	; (8001588 <MX_USART2_UART_Init+0x4c>)
 8001562:	220c      	movs	r2, #12
 8001564:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001566:	4b08      	ldr	r3, [pc, #32]	; (8001588 <MX_USART2_UART_Init+0x4c>)
 8001568:	2200      	movs	r2, #0
 800156a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800156c:	4b06      	ldr	r3, [pc, #24]	; (8001588 <MX_USART2_UART_Init+0x4c>)
 800156e:	2200      	movs	r2, #0
 8001570:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001572:	4805      	ldr	r0, [pc, #20]	; (8001588 <MX_USART2_UART_Init+0x4c>)
 8001574:	f004 fd2a 	bl	8005fcc <HAL_UART_Init>
 8001578:	4603      	mov	r3, r0
 800157a:	2b00      	cmp	r3, #0
 800157c:	d001      	beq.n	8001582 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800157e:	f001 f8f5 	bl	800276c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001582:	bf00      	nop
 8001584:	bd80      	pop	{r7, pc}
 8001586:	bf00      	nop
 8001588:	20000400 	.word	0x20000400
 800158c:	40004400 	.word	0x40004400

08001590 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001590:	b580      	push	{r7, lr}
 8001592:	b082      	sub	sp, #8
 8001594:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001596:	2300      	movs	r3, #0
 8001598:	607b      	str	r3, [r7, #4]
 800159a:	4b0c      	ldr	r3, [pc, #48]	; (80015cc <MX_DMA_Init+0x3c>)
 800159c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800159e:	4a0b      	ldr	r2, [pc, #44]	; (80015cc <MX_DMA_Init+0x3c>)
 80015a0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80015a4:	6313      	str	r3, [r2, #48]	; 0x30
 80015a6:	4b09      	ldr	r3, [pc, #36]	; (80015cc <MX_DMA_Init+0x3c>)
 80015a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015aa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80015ae:	607b      	str	r3, [r7, #4]
 80015b0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 80015b2:	2200      	movs	r2, #0
 80015b4:	2100      	movs	r1, #0
 80015b6:	2038      	movs	r0, #56	; 0x38
 80015b8:	f002 fa65 	bl	8003a86 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80015bc:	2038      	movs	r0, #56	; 0x38
 80015be:	f002 fa7e 	bl	8003abe <HAL_NVIC_EnableIRQ>

}
 80015c2:	bf00      	nop
 80015c4:	3708      	adds	r7, #8
 80015c6:	46bd      	mov	sp, r7
 80015c8:	bd80      	pop	{r7, pc}
 80015ca:	bf00      	nop
 80015cc:	40023800 	.word	0x40023800

080015d0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80015d0:	b580      	push	{r7, lr}
 80015d2:	b08a      	sub	sp, #40	; 0x28
 80015d4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015d6:	f107 0314 	add.w	r3, r7, #20
 80015da:	2200      	movs	r2, #0
 80015dc:	601a      	str	r2, [r3, #0]
 80015de:	605a      	str	r2, [r3, #4]
 80015e0:	609a      	str	r2, [r3, #8]
 80015e2:	60da      	str	r2, [r3, #12]
 80015e4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80015e6:	2300      	movs	r3, #0
 80015e8:	613b      	str	r3, [r7, #16]
 80015ea:	4b44      	ldr	r3, [pc, #272]	; (80016fc <MX_GPIO_Init+0x12c>)
 80015ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015ee:	4a43      	ldr	r2, [pc, #268]	; (80016fc <MX_GPIO_Init+0x12c>)
 80015f0:	f043 0304 	orr.w	r3, r3, #4
 80015f4:	6313      	str	r3, [r2, #48]	; 0x30
 80015f6:	4b41      	ldr	r3, [pc, #260]	; (80016fc <MX_GPIO_Init+0x12c>)
 80015f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015fa:	f003 0304 	and.w	r3, r3, #4
 80015fe:	613b      	str	r3, [r7, #16]
 8001600:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001602:	2300      	movs	r3, #0
 8001604:	60fb      	str	r3, [r7, #12]
 8001606:	4b3d      	ldr	r3, [pc, #244]	; (80016fc <MX_GPIO_Init+0x12c>)
 8001608:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800160a:	4a3c      	ldr	r2, [pc, #240]	; (80016fc <MX_GPIO_Init+0x12c>)
 800160c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001610:	6313      	str	r3, [r2, #48]	; 0x30
 8001612:	4b3a      	ldr	r3, [pc, #232]	; (80016fc <MX_GPIO_Init+0x12c>)
 8001614:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001616:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800161a:	60fb      	str	r3, [r7, #12]
 800161c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800161e:	2300      	movs	r3, #0
 8001620:	60bb      	str	r3, [r7, #8]
 8001622:	4b36      	ldr	r3, [pc, #216]	; (80016fc <MX_GPIO_Init+0x12c>)
 8001624:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001626:	4a35      	ldr	r2, [pc, #212]	; (80016fc <MX_GPIO_Init+0x12c>)
 8001628:	f043 0301 	orr.w	r3, r3, #1
 800162c:	6313      	str	r3, [r2, #48]	; 0x30
 800162e:	4b33      	ldr	r3, [pc, #204]	; (80016fc <MX_GPIO_Init+0x12c>)
 8001630:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001632:	f003 0301 	and.w	r3, r3, #1
 8001636:	60bb      	str	r3, [r7, #8]
 8001638:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800163a:	2300      	movs	r3, #0
 800163c:	607b      	str	r3, [r7, #4]
 800163e:	4b2f      	ldr	r3, [pc, #188]	; (80016fc <MX_GPIO_Init+0x12c>)
 8001640:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001642:	4a2e      	ldr	r2, [pc, #184]	; (80016fc <MX_GPIO_Init+0x12c>)
 8001644:	f043 0302 	orr.w	r3, r3, #2
 8001648:	6313      	str	r3, [r2, #48]	; 0x30
 800164a:	4b2c      	ldr	r3, [pc, #176]	; (80016fc <MX_GPIO_Init+0x12c>)
 800164c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800164e:	f003 0302 	and.w	r3, r3, #2
 8001652:	607b      	str	r3, [r7, #4]
 8001654:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001656:	2200      	movs	r2, #0
 8001658:	2120      	movs	r1, #32
 800165a:	4829      	ldr	r0, [pc, #164]	; (8001700 <MX_GPIO_Init+0x130>)
 800165c:	f002 ffe8 	bl	8004630 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI_SS_GPIO_Port, SPI_SS_Pin, GPIO_PIN_SET);
 8001660:	2201      	movs	r2, #1
 8001662:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001666:	4827      	ldr	r0, [pc, #156]	; (8001704 <MX_GPIO_Init+0x134>)
 8001668:	f002 ffe2 	bl	8004630 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SHDN_GPIO_Port, SHDN_Pin, GPIO_PIN_SET);
 800166c:	2201      	movs	r2, #1
 800166e:	2180      	movs	r1, #128	; 0x80
 8001670:	4825      	ldr	r0, [pc, #148]	; (8001708 <MX_GPIO_Init+0x138>)
 8001672:	f002 ffdd 	bl	8004630 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LOAD_GPIO_Port, LOAD_Pin, GPIO_PIN_SET);
 8001676:	2201      	movs	r2, #1
 8001678:	f44f 7100 	mov.w	r1, #512	; 0x200
 800167c:	4820      	ldr	r0, [pc, #128]	; (8001700 <MX_GPIO_Init+0x130>)
 800167e:	f002 ffd7 	bl	8004630 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001682:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001686:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001688:	4b20      	ldr	r3, [pc, #128]	; (800170c <MX_GPIO_Init+0x13c>)
 800168a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800168c:	2300      	movs	r3, #0
 800168e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001690:	f107 0314 	add.w	r3, r7, #20
 8001694:	4619      	mov	r1, r3
 8001696:	481c      	ldr	r0, [pc, #112]	; (8001708 <MX_GPIO_Init+0x138>)
 8001698:	f002 fe2e 	bl	80042f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin LOAD_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|LOAD_Pin;
 800169c:	f44f 7308 	mov.w	r3, #544	; 0x220
 80016a0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016a2:	2301      	movs	r3, #1
 80016a4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016a6:	2300      	movs	r3, #0
 80016a8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016aa:	2300      	movs	r3, #0
 80016ac:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016ae:	f107 0314 	add.w	r3, r7, #20
 80016b2:	4619      	mov	r1, r3
 80016b4:	4812      	ldr	r0, [pc, #72]	; (8001700 <MX_GPIO_Init+0x130>)
 80016b6:	f002 fe1f 	bl	80042f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI_SS_Pin */
  GPIO_InitStruct.Pin = SPI_SS_Pin;
 80016ba:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80016be:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016c0:	2301      	movs	r3, #1
 80016c2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016c4:	2300      	movs	r3, #0
 80016c6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016c8:	2300      	movs	r3, #0
 80016ca:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI_SS_GPIO_Port, &GPIO_InitStruct);
 80016cc:	f107 0314 	add.w	r3, r7, #20
 80016d0:	4619      	mov	r1, r3
 80016d2:	480c      	ldr	r0, [pc, #48]	; (8001704 <MX_GPIO_Init+0x134>)
 80016d4:	f002 fe10 	bl	80042f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : SHDN_Pin */
  GPIO_InitStruct.Pin = SHDN_Pin;
 80016d8:	2380      	movs	r3, #128	; 0x80
 80016da:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016dc:	2301      	movs	r3, #1
 80016de:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016e0:	2300      	movs	r3, #0
 80016e2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016e4:	2300      	movs	r3, #0
 80016e6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SHDN_GPIO_Port, &GPIO_InitStruct);
 80016e8:	f107 0314 	add.w	r3, r7, #20
 80016ec:	4619      	mov	r1, r3
 80016ee:	4806      	ldr	r0, [pc, #24]	; (8001708 <MX_GPIO_Init+0x138>)
 80016f0:	f002 fe02 	bl	80042f8 <HAL_GPIO_Init>

}
 80016f4:	bf00      	nop
 80016f6:	3728      	adds	r7, #40	; 0x28
 80016f8:	46bd      	mov	sp, r7
 80016fa:	bd80      	pop	{r7, pc}
 80016fc:	40023800 	.word	0x40023800
 8001700:	40020000 	.word	0x40020000
 8001704:	40020400 	.word	0x40020400
 8001708:	40020800 	.word	0x40020800
 800170c:	10210000 	.word	0x10210000

08001710 <updateUI>:

/* USER CODE BEGIN 4 */

void updateUI(int16_t dataIn)
{
 8001710:	b5b0      	push	{r4, r5, r7, lr}
 8001712:	b0c2      	sub	sp, #264	; 0x108
 8001714:	af00      	add	r7, sp, #0
 8001716:	4602      	mov	r2, r0
 8001718:	1dbb      	adds	r3, r7, #6
 800171a:	801a      	strh	r2, [r3, #0]
	char temp[256];

	switch (UIState)
 800171c:	4bc4      	ldr	r3, [pc, #784]	; (8001a30 <updateUI+0x320>)
 800171e:	781b      	ldrb	r3, [r3, #0]
 8001720:	2b05      	cmp	r3, #5
 8001722:	f200 8443 	bhi.w	8001fac <updateUI+0x89c>
 8001726:	a201      	add	r2, pc, #4	; (adr r2, 800172c <updateUI+0x1c>)
 8001728:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800172c:	08001745 	.word	0x08001745
 8001730:	080018fd 	.word	0x080018fd
 8001734:	0800194b 	.word	0x0800194b
 8001738:	08001af3 	.word	0x08001af3
 800173c:	08001ccf 	.word	0x08001ccf
 8001740:	08001ee7 	.word	0x08001ee7
	{
		case Main:
			if (dataIn == 'm')
 8001744:	1dbb      	adds	r3, r7, #6
 8001746:	f9b3 3000 	ldrsh.w	r3, [r3]
 800174a:	2b6d      	cmp	r3, #109	; 0x6d
 800174c:	d131      	bne.n	80017b2 <updateUI+0xa2>
			{
				if (ControlVar.wave_mode == 0) {		//sawtooth
 800174e:	4bb9      	ldr	r3, [pc, #740]	; (8001a34 <updateUI+0x324>)
 8001750:	7d5b      	ldrb	r3, [r3, #21]
 8001752:	2b00      	cmp	r3, #0
 8001754:	d106      	bne.n	8001764 <updateUI+0x54>
					sprintf(temp,
 8001756:	f107 0308 	add.w	r3, r7, #8
 800175a:	49b7      	ldr	r1, [pc, #732]	; (8001a38 <updateUI+0x328>)
 800175c:	4618      	mov	r0, r3
 800175e:	f005 ff51 	bl	8007604 <siprintf>
 8001762:	e014      	b.n	800178e <updateUI+0x7e>
							"========================\r\n"
					  		"[n] Sine-wave\r\n"
							"[q] Square-wave\r\n"
							"[x] back\r\n");
				}
				else if (ControlVar.wave_mode == 1) {	//sine-wave
 8001764:	4bb3      	ldr	r3, [pc, #716]	; (8001a34 <updateUI+0x324>)
 8001766:	7d5b      	ldrb	r3, [r3, #21]
 8001768:	2b01      	cmp	r3, #1
 800176a:	d106      	bne.n	800177a <updateUI+0x6a>
					sprintf(temp,
 800176c:	f107 0308 	add.w	r3, r7, #8
 8001770:	49b2      	ldr	r1, [pc, #712]	; (8001a3c <updateUI+0x32c>)
 8001772:	4618      	mov	r0, r3
 8001774:	f005 ff46 	bl	8007604 <siprintf>
 8001778:	e009      	b.n	800178e <updateUI+0x7e>
							"========================\r\n"
					  		"[w] Sawtooth\r\n"
							"[q] Square-wave\r\n"
							"[x] back\r\n");
				}
				else if (ControlVar.wave_mode == 2) {	//square-wave
 800177a:	4bae      	ldr	r3, [pc, #696]	; (8001a34 <updateUI+0x324>)
 800177c:	7d5b      	ldrb	r3, [r3, #21]
 800177e:	2b02      	cmp	r3, #2
 8001780:	d105      	bne.n	800178e <updateUI+0x7e>
					sprintf(temp,
 8001782:	f107 0308 	add.w	r3, r7, #8
 8001786:	49ae      	ldr	r1, [pc, #696]	; (8001a40 <updateUI+0x330>)
 8001788:	4618      	mov	r0, r3
 800178a:	f005 ff3b 	bl	8007604 <siprintf>
							"========================\r\n"
					  		"[w] Sawtooth\r\n"
							"[n] Sine-wave\r\n"
							"[x] back\r\n");
				}
				HAL_UART_Transmit(&huart2, (uint8_t*)temp, strlen(temp), 1000);
 800178e:	f107 0308 	add.w	r3, r7, #8
 8001792:	4618      	mov	r0, r3
 8001794:	f7fe fd24 	bl	80001e0 <strlen>
 8001798:	4603      	mov	r3, r0
 800179a:	b29a      	uxth	r2, r3
 800179c:	f107 0108 	add.w	r1, r7, #8
 80017a0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80017a4:	48a7      	ldr	r0, [pc, #668]	; (8001a44 <updateUI+0x334>)
 80017a6:	f004 fc5e 	bl	8006066 <HAL_UART_Transmit>

				UIState = Change_mode;
 80017aa:	4ba1      	ldr	r3, [pc, #644]	; (8001a30 <updateUI+0x320>)
 80017ac:	2201      	movs	r2, #1
 80017ae:	701a      	strb	r2, [r3, #0]
						ControlVar.duty_cycle);
				HAL_UART_Transmit(&huart2, (uint8_t*)temp, strlen(temp), 1000);

				UIState = Change_duty_cycle;
			}
			break;
 80017b0:	e3fe      	b.n	8001fb0 <updateUI+0x8a0>
			else if (dataIn == 'f')
 80017b2:	1dbb      	adds	r3, r7, #6
 80017b4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80017b8:	2b66      	cmp	r3, #102	; 0x66
 80017ba:	d11d      	bne.n	80017f8 <updateUI+0xe8>
						ControlVar.frequency);
 80017bc:	4b9d      	ldr	r3, [pc, #628]	; (8001a34 <updateUI+0x324>)
 80017be:	689b      	ldr	r3, [r3, #8]
				sprintf(temp,
 80017c0:	4618      	mov	r0, r3
 80017c2:	f7fe fec9 	bl	8000558 <__aeabi_f2d>
 80017c6:	4602      	mov	r2, r0
 80017c8:	460b      	mov	r3, r1
 80017ca:	f107 0008 	add.w	r0, r7, #8
 80017ce:	499e      	ldr	r1, [pc, #632]	; (8001a48 <updateUI+0x338>)
 80017d0:	f005 ff18 	bl	8007604 <siprintf>
				HAL_UART_Transmit(&huart2, (uint8_t*)temp, strlen(temp), 1000);
 80017d4:	f107 0308 	add.w	r3, r7, #8
 80017d8:	4618      	mov	r0, r3
 80017da:	f7fe fd01 	bl	80001e0 <strlen>
 80017de:	4603      	mov	r3, r0
 80017e0:	b29a      	uxth	r2, r3
 80017e2:	f107 0108 	add.w	r1, r7, #8
 80017e6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80017ea:	4896      	ldr	r0, [pc, #600]	; (8001a44 <updateUI+0x334>)
 80017ec:	f004 fc3b 	bl	8006066 <HAL_UART_Transmit>
				UIState = Change_frequency;
 80017f0:	4b8f      	ldr	r3, [pc, #572]	; (8001a30 <updateUI+0x320>)
 80017f2:	2202      	movs	r2, #2
 80017f4:	701a      	strb	r2, [r3, #0]
			break;
 80017f6:	e3db      	b.n	8001fb0 <updateUI+0x8a0>
			else if (dataIn == 'a')
 80017f8:	1dbb      	adds	r3, r7, #6
 80017fa:	f9b3 3000 	ldrsh.w	r3, [r3]
 80017fe:	2b61      	cmp	r3, #97	; 0x61
 8001800:	d11d      	bne.n	800183e <updateUI+0x12e>
						ControlVar.max_voltage);
 8001802:	4b8c      	ldr	r3, [pc, #560]	; (8001a34 <updateUI+0x324>)
 8001804:	68db      	ldr	r3, [r3, #12]
				sprintf(temp,
 8001806:	4618      	mov	r0, r3
 8001808:	f7fe fea6 	bl	8000558 <__aeabi_f2d>
 800180c:	4602      	mov	r2, r0
 800180e:	460b      	mov	r3, r1
 8001810:	f107 0008 	add.w	r0, r7, #8
 8001814:	498d      	ldr	r1, [pc, #564]	; (8001a4c <updateUI+0x33c>)
 8001816:	f005 fef5 	bl	8007604 <siprintf>
				HAL_UART_Transmit(&huart2, (uint8_t*)temp, strlen(temp), 1000);
 800181a:	f107 0308 	add.w	r3, r7, #8
 800181e:	4618      	mov	r0, r3
 8001820:	f7fe fcde 	bl	80001e0 <strlen>
 8001824:	4603      	mov	r3, r0
 8001826:	b29a      	uxth	r2, r3
 8001828:	f107 0108 	add.w	r1, r7, #8
 800182c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001830:	4884      	ldr	r0, [pc, #528]	; (8001a44 <updateUI+0x334>)
 8001832:	f004 fc18 	bl	8006066 <HAL_UART_Transmit>
				UIState = Change_max_voltage;
 8001836:	4b7e      	ldr	r3, [pc, #504]	; (8001a30 <updateUI+0x320>)
 8001838:	2203      	movs	r2, #3
 800183a:	701a      	strb	r2, [r3, #0]
			break;
 800183c:	e3b8      	b.n	8001fb0 <updateUI+0x8a0>
			else if (dataIn == 'i')
 800183e:	1dbb      	adds	r3, r7, #6
 8001840:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001844:	2b69      	cmp	r3, #105	; 0x69
 8001846:	d11d      	bne.n	8001884 <updateUI+0x174>
						ControlVar.min_voltage);
 8001848:	4b7a      	ldr	r3, [pc, #488]	; (8001a34 <updateUI+0x324>)
 800184a:	691b      	ldr	r3, [r3, #16]
				sprintf(temp,
 800184c:	4618      	mov	r0, r3
 800184e:	f7fe fe83 	bl	8000558 <__aeabi_f2d>
 8001852:	4602      	mov	r2, r0
 8001854:	460b      	mov	r3, r1
 8001856:	f107 0008 	add.w	r0, r7, #8
 800185a:	497d      	ldr	r1, [pc, #500]	; (8001a50 <updateUI+0x340>)
 800185c:	f005 fed2 	bl	8007604 <siprintf>
				HAL_UART_Transmit(&huart2, (uint8_t*)temp, strlen(temp), 1000);
 8001860:	f107 0308 	add.w	r3, r7, #8
 8001864:	4618      	mov	r0, r3
 8001866:	f7fe fcbb 	bl	80001e0 <strlen>
 800186a:	4603      	mov	r3, r0
 800186c:	b29a      	uxth	r2, r3
 800186e:	f107 0108 	add.w	r1, r7, #8
 8001872:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001876:	4873      	ldr	r0, [pc, #460]	; (8001a44 <updateUI+0x334>)
 8001878:	f004 fbf5 	bl	8006066 <HAL_UART_Transmit>
				UIState = Change_min_voltage;
 800187c:	4b6c      	ldr	r3, [pc, #432]	; (8001a30 <updateUI+0x320>)
 800187e:	2204      	movs	r2, #4
 8001880:	701a      	strb	r2, [r3, #0]
			break;
 8001882:	e395      	b.n	8001fb0 <updateUI+0x8a0>
			else if (dataIn == 's' && ControlVar.wave_mode == 0)
 8001884:	1dbb      	adds	r3, r7, #6
 8001886:	f9b3 3000 	ldrsh.w	r3, [r3]
 800188a:	2b73      	cmp	r3, #115	; 0x73
 800188c:	d110      	bne.n	80018b0 <updateUI+0x1a0>
 800188e:	4b69      	ldr	r3, [pc, #420]	; (8001a34 <updateUI+0x324>)
 8001890:	7d5b      	ldrb	r3, [r3, #21]
 8001892:	2b00      	cmp	r3, #0
 8001894:	d10c      	bne.n	80018b0 <updateUI+0x1a0>
				ControlVar.slope_down = !ControlVar.slope_down;
 8001896:	4b67      	ldr	r3, [pc, #412]	; (8001a34 <updateUI+0x324>)
 8001898:	7d9b      	ldrb	r3, [r3, #22]
 800189a:	2b00      	cmp	r3, #0
 800189c:	bf0c      	ite	eq
 800189e:	2301      	moveq	r3, #1
 80018a0:	2300      	movne	r3, #0
 80018a2:	b2db      	uxtb	r3, r3
 80018a4:	461a      	mov	r2, r3
 80018a6:	4b63      	ldr	r3, [pc, #396]	; (8001a34 <updateUI+0x324>)
 80018a8:	759a      	strb	r2, [r3, #22]
				updateStatus();
 80018aa:	f000 fbab 	bl	8002004 <updateStatus>
			break;
 80018ae:	e37f      	b.n	8001fb0 <updateUI+0x8a0>
			else if (dataIn == 'd' && ControlVar.wave_mode == 2)
 80018b0:	1dbb      	adds	r3, r7, #6
 80018b2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80018b6:	2b64      	cmp	r3, #100	; 0x64
 80018b8:	f040 837a 	bne.w	8001fb0 <updateUI+0x8a0>
 80018bc:	4b5d      	ldr	r3, [pc, #372]	; (8001a34 <updateUI+0x324>)
 80018be:	7d5b      	ldrb	r3, [r3, #21]
 80018c0:	2b02      	cmp	r3, #2
 80018c2:	f040 8375 	bne.w	8001fb0 <updateUI+0x8a0>
						ControlVar.duty_cycle);
 80018c6:	4b5b      	ldr	r3, [pc, #364]	; (8001a34 <updateUI+0x324>)
 80018c8:	7d1b      	ldrb	r3, [r3, #20]
				sprintf(temp,
 80018ca:	461a      	mov	r2, r3
 80018cc:	f107 0308 	add.w	r3, r7, #8
 80018d0:	4960      	ldr	r1, [pc, #384]	; (8001a54 <updateUI+0x344>)
 80018d2:	4618      	mov	r0, r3
 80018d4:	f005 fe96 	bl	8007604 <siprintf>
				HAL_UART_Transmit(&huart2, (uint8_t*)temp, strlen(temp), 1000);
 80018d8:	f107 0308 	add.w	r3, r7, #8
 80018dc:	4618      	mov	r0, r3
 80018de:	f7fe fc7f 	bl	80001e0 <strlen>
 80018e2:	4603      	mov	r3, r0
 80018e4:	b29a      	uxth	r2, r3
 80018e6:	f107 0108 	add.w	r1, r7, #8
 80018ea:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80018ee:	4855      	ldr	r0, [pc, #340]	; (8001a44 <updateUI+0x334>)
 80018f0:	f004 fbb9 	bl	8006066 <HAL_UART_Transmit>
				UIState = Change_duty_cycle;
 80018f4:	4b4e      	ldr	r3, [pc, #312]	; (8001a30 <updateUI+0x320>)
 80018f6:	2205      	movs	r2, #5
 80018f8:	701a      	strb	r2, [r3, #0]
			break;
 80018fa:	e359      	b.n	8001fb0 <updateUI+0x8a0>

		case Change_mode:
			if (dataIn == 'w') {
 80018fc:	1dbb      	adds	r3, r7, #6
 80018fe:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001902:	2b77      	cmp	r3, #119	; 0x77
 8001904:	d103      	bne.n	800190e <updateUI+0x1fe>
				ControlVar.wave_mode = 0;
 8001906:	4b4b      	ldr	r3, [pc, #300]	; (8001a34 <updateUI+0x324>)
 8001908:	2200      	movs	r2, #0
 800190a:	755a      	strb	r2, [r3, #21]
 800190c:	e017      	b.n	800193e <updateUI+0x22e>
			}
			else if (dataIn == 'n') {
 800190e:	1dbb      	adds	r3, r7, #6
 8001910:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001914:	2b6e      	cmp	r3, #110	; 0x6e
 8001916:	d103      	bne.n	8001920 <updateUI+0x210>
				ControlVar.wave_mode = 1;
 8001918:	4b46      	ldr	r3, [pc, #280]	; (8001a34 <updateUI+0x324>)
 800191a:	2201      	movs	r2, #1
 800191c:	755a      	strb	r2, [r3, #21]
 800191e:	e00e      	b.n	800193e <updateUI+0x22e>
			}
			else if (dataIn == 'q') {
 8001920:	1dbb      	adds	r3, r7, #6
 8001922:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001926:	2b71      	cmp	r3, #113	; 0x71
 8001928:	d103      	bne.n	8001932 <updateUI+0x222>
				ControlVar.wave_mode = 2;
 800192a:	4b42      	ldr	r3, [pc, #264]	; (8001a34 <updateUI+0x324>)
 800192c:	2202      	movs	r2, #2
 800192e:	755a      	strb	r2, [r3, #21]
 8001930:	e005      	b.n	800193e <updateUI+0x22e>
			}
			else if (dataIn == 'x') {
 8001932:	1dbb      	adds	r3, r7, #6
 8001934:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001938:	2b78      	cmp	r3, #120	; 0x78
 800193a:	f040 833b 	bne.w	8001fb4 <updateUI+0x8a4>
			}
			else {break;}

			updateStatus();
 800193e:	f000 fb61 	bl	8002004 <updateStatus>

			UIState = Main;
 8001942:	4b3b      	ldr	r3, [pc, #236]	; (8001a30 <updateUI+0x320>)
 8001944:	2200      	movs	r2, #0
 8001946:	701a      	strb	r2, [r3, #0]
			break;
 8001948:	e33d      	b.n	8001fc6 <updateUI+0x8b6>

		case Change_frequency:
			if (dataIn == '1' && ControlVar.frequency<=9.0001) {
 800194a:	1dbb      	adds	r3, r7, #6
 800194c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001950:	2b31      	cmp	r3, #49	; 0x31
 8001952:	d117      	bne.n	8001984 <updateUI+0x274>
 8001954:	4b37      	ldr	r3, [pc, #220]	; (8001a34 <updateUI+0x324>)
 8001956:	689b      	ldr	r3, [r3, #8]
 8001958:	4618      	mov	r0, r3
 800195a:	f7fe fdfd 	bl	8000558 <__aeabi_f2d>
 800195e:	a32c      	add	r3, pc, #176	; (adr r3, 8001a10 <updateUI+0x300>)
 8001960:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001964:	f7ff f8cc 	bl	8000b00 <__aeabi_dcmple>
 8001968:	4603      	mov	r3, r0
 800196a:	2b00      	cmp	r3, #0
 800196c:	d00a      	beq.n	8001984 <updateUI+0x274>
				ControlVar.frequency += 1;
 800196e:	4b31      	ldr	r3, [pc, #196]	; (8001a34 <updateUI+0x324>)
 8001970:	edd3 7a02 	vldr	s15, [r3, #8]
 8001974:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001978:	ee77 7a87 	vadd.f32	s15, s15, s14
 800197c:	4b2d      	ldr	r3, [pc, #180]	; (8001a34 <updateUI+0x324>)
 800197e:	edc3 7a02 	vstr	s15, [r3, #8]
 8001982:	e09b      	b.n	8001abc <updateUI+0x3ac>
			}
			else if (dataIn == '2' && ControlVar.frequency>=0.9999) {
 8001984:	1dbb      	adds	r3, r7, #6
 8001986:	f9b3 3000 	ldrsh.w	r3, [r3]
 800198a:	2b32      	cmp	r3, #50	; 0x32
 800198c:	d117      	bne.n	80019be <updateUI+0x2ae>
 800198e:	4b29      	ldr	r3, [pc, #164]	; (8001a34 <updateUI+0x324>)
 8001990:	689b      	ldr	r3, [r3, #8]
 8001992:	4618      	mov	r0, r3
 8001994:	f7fe fde0 	bl	8000558 <__aeabi_f2d>
 8001998:	a31f      	add	r3, pc, #124	; (adr r3, 8001a18 <updateUI+0x308>)
 800199a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800199e:	f7ff f8b9 	bl	8000b14 <__aeabi_dcmpge>
 80019a2:	4603      	mov	r3, r0
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d00a      	beq.n	80019be <updateUI+0x2ae>
				ControlVar.frequency -= 1;
 80019a8:	4b22      	ldr	r3, [pc, #136]	; (8001a34 <updateUI+0x324>)
 80019aa:	edd3 7a02 	vldr	s15, [r3, #8]
 80019ae:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80019b2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80019b6:	4b1f      	ldr	r3, [pc, #124]	; (8001a34 <updateUI+0x324>)
 80019b8:	edc3 7a02 	vstr	s15, [r3, #8]
 80019bc:	e07e      	b.n	8001abc <updateUI+0x3ac>
			}
			else if (dataIn == '3' && ControlVar.frequency<=9.9001) {
 80019be:	1dbb      	adds	r3, r7, #6
 80019c0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80019c4:	2b33      	cmp	r3, #51	; 0x33
 80019c6:	d147      	bne.n	8001a58 <updateUI+0x348>
 80019c8:	4b1a      	ldr	r3, [pc, #104]	; (8001a34 <updateUI+0x324>)
 80019ca:	689b      	ldr	r3, [r3, #8]
 80019cc:	4618      	mov	r0, r3
 80019ce:	f7fe fdc3 	bl	8000558 <__aeabi_f2d>
 80019d2:	a313      	add	r3, pc, #76	; (adr r3, 8001a20 <updateUI+0x310>)
 80019d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019d8:	f7ff f892 	bl	8000b00 <__aeabi_dcmple>
 80019dc:	4603      	mov	r3, r0
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d03a      	beq.n	8001a58 <updateUI+0x348>
				ControlVar.frequency += 0.1;
 80019e2:	4b14      	ldr	r3, [pc, #80]	; (8001a34 <updateUI+0x324>)
 80019e4:	689b      	ldr	r3, [r3, #8]
 80019e6:	4618      	mov	r0, r3
 80019e8:	f7fe fdb6 	bl	8000558 <__aeabi_f2d>
 80019ec:	a30e      	add	r3, pc, #56	; (adr r3, 8001a28 <updateUI+0x318>)
 80019ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019f2:	f7fe fc53 	bl	800029c <__adddf3>
 80019f6:	4602      	mov	r2, r0
 80019f8:	460b      	mov	r3, r1
 80019fa:	4610      	mov	r0, r2
 80019fc:	4619      	mov	r1, r3
 80019fe:	f7ff f8fb 	bl	8000bf8 <__aeabi_d2f>
 8001a02:	4603      	mov	r3, r0
 8001a04:	4a0b      	ldr	r2, [pc, #44]	; (8001a34 <updateUI+0x324>)
 8001a06:	6093      	str	r3, [r2, #8]
 8001a08:	e058      	b.n	8001abc <updateUI+0x3ac>
 8001a0a:	bf00      	nop
 8001a0c:	f3af 8000 	nop.w
 8001a10:	1b71758e 	.word	0x1b71758e
 8001a14:	4022000d 	.word	0x4022000d
 8001a18:	48e8a71e 	.word	0x48e8a71e
 8001a1c:	3fefff2e 	.word	0x3fefff2e
 8001a20:	e83e425b 	.word	0xe83e425b
 8001a24:	4023ccd9 	.word	0x4023ccd9
 8001a28:	9999999a 	.word	0x9999999a
 8001a2c:	3fb99999 	.word	0x3fb99999
 8001a30:	20000250 	.word	0x20000250
 8001a34:	20000210 	.word	0x20000210
 8001a38:	0800aac8 	.word	0x0800aac8
 8001a3c:	0800ab3c 	.word	0x0800ab3c
 8001a40:	0800abb0 	.word	0x0800abb0
 8001a44:	20000400 	.word	0x20000400
 8001a48:	0800ac24 	.word	0x0800ac24
 8001a4c:	0800acd4 	.word	0x0800acd4
 8001a50:	0800ad80 	.word	0x0800ad80
 8001a54:	0800ae2c 	.word	0x0800ae2c
			}
			else if (dataIn == '4' && ControlVar.frequency>=0.0999) {
 8001a58:	1dbb      	adds	r3, r7, #6
 8001a5a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001a5e:	2b34      	cmp	r3, #52	; 0x34
 8001a60:	d120      	bne.n	8001aa4 <updateUI+0x394>
 8001a62:	4bc3      	ldr	r3, [pc, #780]	; (8001d70 <updateUI+0x660>)
 8001a64:	689b      	ldr	r3, [r3, #8]
 8001a66:	4618      	mov	r0, r3
 8001a68:	f7fe fd76 	bl	8000558 <__aeabi_f2d>
 8001a6c:	a3b6      	add	r3, pc, #728	; (adr r3, 8001d48 <updateUI+0x638>)
 8001a6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a72:	f7ff f84f 	bl	8000b14 <__aeabi_dcmpge>
 8001a76:	4603      	mov	r3, r0
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d013      	beq.n	8001aa4 <updateUI+0x394>
				ControlVar.frequency -= 0.1;
 8001a7c:	4bbc      	ldr	r3, [pc, #752]	; (8001d70 <updateUI+0x660>)
 8001a7e:	689b      	ldr	r3, [r3, #8]
 8001a80:	4618      	mov	r0, r3
 8001a82:	f7fe fd69 	bl	8000558 <__aeabi_f2d>
 8001a86:	a3b2      	add	r3, pc, #712	; (adr r3, 8001d50 <updateUI+0x640>)
 8001a88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a8c:	f7fe fc04 	bl	8000298 <__aeabi_dsub>
 8001a90:	4602      	mov	r2, r0
 8001a92:	460b      	mov	r3, r1
 8001a94:	4610      	mov	r0, r2
 8001a96:	4619      	mov	r1, r3
 8001a98:	f7ff f8ae 	bl	8000bf8 <__aeabi_d2f>
 8001a9c:	4603      	mov	r3, r0
 8001a9e:	4ab4      	ldr	r2, [pc, #720]	; (8001d70 <updateUI+0x660>)
 8001aa0:	6093      	str	r3, [r2, #8]
 8001aa2:	e00b      	b.n	8001abc <updateUI+0x3ac>
			}
			else if (dataIn == 'x') {
 8001aa4:	1dbb      	adds	r3, r7, #6
 8001aa6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001aaa:	2b78      	cmp	r3, #120	; 0x78
 8001aac:	f040 8284 	bne.w	8001fb8 <updateUI+0x8a8>
				updateStatus();
 8001ab0:	f000 faa8 	bl	8002004 <updateStatus>

				UIState = Main;
 8001ab4:	4baf      	ldr	r3, [pc, #700]	; (8001d74 <updateUI+0x664>)
 8001ab6:	2200      	movs	r2, #0
 8001ab8:	701a      	strb	r2, [r3, #0]
				break;
 8001aba:	e284      	b.n	8001fc6 <updateUI+0x8b6>
			  		"[1] Increase +1Hz\r\n"
					"[2] Decrease -1Hz\r\n"
			  		"[3] Increase +0.1Hz\r\n"
					"[4] Decrease -0.1Hz\r\n"
					"[x] back\r\n",
					ControlVar.frequency);
 8001abc:	4bac      	ldr	r3, [pc, #688]	; (8001d70 <updateUI+0x660>)
 8001abe:	689b      	ldr	r3, [r3, #8]
			sprintf(temp,
 8001ac0:	4618      	mov	r0, r3
 8001ac2:	f7fe fd49 	bl	8000558 <__aeabi_f2d>
 8001ac6:	4602      	mov	r2, r0
 8001ac8:	460b      	mov	r3, r1
 8001aca:	f107 0008 	add.w	r0, r7, #8
 8001ace:	49aa      	ldr	r1, [pc, #680]	; (8001d78 <updateUI+0x668>)
 8001ad0:	f005 fd98 	bl	8007604 <siprintf>
			HAL_UART_Transmit(&huart2, (uint8_t*)temp, strlen(temp), 1000);
 8001ad4:	f107 0308 	add.w	r3, r7, #8
 8001ad8:	4618      	mov	r0, r3
 8001ada:	f7fe fb81 	bl	80001e0 <strlen>
 8001ade:	4603      	mov	r3, r0
 8001ae0:	b29a      	uxth	r2, r3
 8001ae2:	f107 0108 	add.w	r1, r7, #8
 8001ae6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001aea:	48a4      	ldr	r0, [pc, #656]	; (8001d7c <updateUI+0x66c>)
 8001aec:	f004 fabb 	bl	8006066 <HAL_UART_Transmit>
			break;
 8001af0:	e269      	b.n	8001fc6 <updateUI+0x8b6>

		case Change_max_voltage:
			if (dataIn == '1' && ControlVar.max_voltage<=2.3001) {
 8001af2:	1dbb      	adds	r3, r7, #6
 8001af4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001af8:	2b31      	cmp	r3, #49	; 0x31
 8001afa:	d117      	bne.n	8001b2c <updateUI+0x41c>
 8001afc:	4b9c      	ldr	r3, [pc, #624]	; (8001d70 <updateUI+0x660>)
 8001afe:	68db      	ldr	r3, [r3, #12]
 8001b00:	4618      	mov	r0, r3
 8001b02:	f7fe fd29 	bl	8000558 <__aeabi_f2d>
 8001b06:	a394      	add	r3, pc, #592	; (adr r3, 8001d58 <updateUI+0x648>)
 8001b08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b0c:	f7fe fff8 	bl	8000b00 <__aeabi_dcmple>
 8001b10:	4603      	mov	r3, r0
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d00a      	beq.n	8001b2c <updateUI+0x41c>
				ControlVar.max_voltage += 1;
 8001b16:	4b96      	ldr	r3, [pc, #600]	; (8001d70 <updateUI+0x660>)
 8001b18:	edd3 7a03 	vldr	s15, [r3, #12]
 8001b1c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001b20:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001b24:	4b92      	ldr	r3, [pc, #584]	; (8001d70 <updateUI+0x660>)
 8001b26:	edc3 7a03 	vstr	s15, [r3, #12]
 8001b2a:	e0b5      	b.n	8001c98 <updateUI+0x588>
			}
			else if (dataIn == '2' && ControlVar.max_voltage>=0.9999 &&
 8001b2c:	1dbb      	adds	r3, r7, #6
 8001b2e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001b32:	2b32      	cmp	r3, #50	; 0x32
 8001b34:	d137      	bne.n	8001ba6 <updateUI+0x496>
 8001b36:	4b8e      	ldr	r3, [pc, #568]	; (8001d70 <updateUI+0x660>)
 8001b38:	68db      	ldr	r3, [r3, #12]
 8001b3a:	4618      	mov	r0, r3
 8001b3c:	f7fe fd0c 	bl	8000558 <__aeabi_f2d>
 8001b40:	a387      	add	r3, pc, #540	; (adr r3, 8001d60 <updateUI+0x650>)
 8001b42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b46:	f7fe ffe5 	bl	8000b14 <__aeabi_dcmpge>
 8001b4a:	4603      	mov	r3, r0
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d02a      	beq.n	8001ba6 <updateUI+0x496>
					ControlVar.max_voltage-1 >= ControlVar.min_voltage+0.0999) {
 8001b50:	4b87      	ldr	r3, [pc, #540]	; (8001d70 <updateUI+0x660>)
 8001b52:	edd3 7a03 	vldr	s15, [r3, #12]
 8001b56:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001b5a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001b5e:	ee17 0a90 	vmov	r0, s15
 8001b62:	f7fe fcf9 	bl	8000558 <__aeabi_f2d>
 8001b66:	4604      	mov	r4, r0
 8001b68:	460d      	mov	r5, r1
 8001b6a:	4b81      	ldr	r3, [pc, #516]	; (8001d70 <updateUI+0x660>)
 8001b6c:	691b      	ldr	r3, [r3, #16]
 8001b6e:	4618      	mov	r0, r3
 8001b70:	f7fe fcf2 	bl	8000558 <__aeabi_f2d>
 8001b74:	a374      	add	r3, pc, #464	; (adr r3, 8001d48 <updateUI+0x638>)
 8001b76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b7a:	f7fe fb8f 	bl	800029c <__adddf3>
 8001b7e:	4602      	mov	r2, r0
 8001b80:	460b      	mov	r3, r1
			else if (dataIn == '2' && ControlVar.max_voltage>=0.9999 &&
 8001b82:	4620      	mov	r0, r4
 8001b84:	4629      	mov	r1, r5
 8001b86:	f7fe ffc5 	bl	8000b14 <__aeabi_dcmpge>
 8001b8a:	4603      	mov	r3, r0
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d00a      	beq.n	8001ba6 <updateUI+0x496>
				ControlVar.max_voltage -= 1;
 8001b90:	4b77      	ldr	r3, [pc, #476]	; (8001d70 <updateUI+0x660>)
 8001b92:	edd3 7a03 	vldr	s15, [r3, #12]
 8001b96:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001b9a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001b9e:	4b74      	ldr	r3, [pc, #464]	; (8001d70 <updateUI+0x660>)
 8001ba0:	edc3 7a03 	vstr	s15, [r3, #12]
 8001ba4:	e078      	b.n	8001c98 <updateUI+0x588>
			}
			else if (dataIn == '3' && ControlVar.max_voltage<=3.2001) {
 8001ba6:	1dbb      	adds	r3, r7, #6
 8001ba8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001bac:	2b33      	cmp	r3, #51	; 0x33
 8001bae:	d120      	bne.n	8001bf2 <updateUI+0x4e2>
 8001bb0:	4b6f      	ldr	r3, [pc, #444]	; (8001d70 <updateUI+0x660>)
 8001bb2:	68db      	ldr	r3, [r3, #12]
 8001bb4:	4618      	mov	r0, r3
 8001bb6:	f7fe fccf 	bl	8000558 <__aeabi_f2d>
 8001bba:	a36b      	add	r3, pc, #428	; (adr r3, 8001d68 <updateUI+0x658>)
 8001bbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bc0:	f7fe ff9e 	bl	8000b00 <__aeabi_dcmple>
 8001bc4:	4603      	mov	r3, r0
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d013      	beq.n	8001bf2 <updateUI+0x4e2>
				ControlVar.max_voltage += 0.1;
 8001bca:	4b69      	ldr	r3, [pc, #420]	; (8001d70 <updateUI+0x660>)
 8001bcc:	68db      	ldr	r3, [r3, #12]
 8001bce:	4618      	mov	r0, r3
 8001bd0:	f7fe fcc2 	bl	8000558 <__aeabi_f2d>
 8001bd4:	a35e      	add	r3, pc, #376	; (adr r3, 8001d50 <updateUI+0x640>)
 8001bd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bda:	f7fe fb5f 	bl	800029c <__adddf3>
 8001bde:	4602      	mov	r2, r0
 8001be0:	460b      	mov	r3, r1
 8001be2:	4610      	mov	r0, r2
 8001be4:	4619      	mov	r1, r3
 8001be6:	f7ff f807 	bl	8000bf8 <__aeabi_d2f>
 8001bea:	4603      	mov	r3, r0
 8001bec:	4a60      	ldr	r2, [pc, #384]	; (8001d70 <updateUI+0x660>)
 8001bee:	60d3      	str	r3, [r2, #12]
 8001bf0:	e052      	b.n	8001c98 <updateUI+0x588>
			}
			else if (dataIn == '4' && ControlVar.max_voltage>=0.0999 &&
 8001bf2:	1dbb      	adds	r3, r7, #6
 8001bf4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001bf8:	2b34      	cmp	r3, #52	; 0x34
 8001bfa:	d141      	bne.n	8001c80 <updateUI+0x570>
 8001bfc:	4b5c      	ldr	r3, [pc, #368]	; (8001d70 <updateUI+0x660>)
 8001bfe:	68db      	ldr	r3, [r3, #12]
 8001c00:	4618      	mov	r0, r3
 8001c02:	f7fe fca9 	bl	8000558 <__aeabi_f2d>
 8001c06:	a350      	add	r3, pc, #320	; (adr r3, 8001d48 <updateUI+0x638>)
 8001c08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c0c:	f7fe ff82 	bl	8000b14 <__aeabi_dcmpge>
 8001c10:	4603      	mov	r3, r0
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d034      	beq.n	8001c80 <updateUI+0x570>
					ControlVar.max_voltage-0.1 >= ControlVar.min_voltage+0.0999) {
 8001c16:	4b56      	ldr	r3, [pc, #344]	; (8001d70 <updateUI+0x660>)
 8001c18:	68db      	ldr	r3, [r3, #12]
 8001c1a:	4618      	mov	r0, r3
 8001c1c:	f7fe fc9c 	bl	8000558 <__aeabi_f2d>
 8001c20:	a34b      	add	r3, pc, #300	; (adr r3, 8001d50 <updateUI+0x640>)
 8001c22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c26:	f7fe fb37 	bl	8000298 <__aeabi_dsub>
 8001c2a:	4602      	mov	r2, r0
 8001c2c:	460b      	mov	r3, r1
 8001c2e:	4614      	mov	r4, r2
 8001c30:	461d      	mov	r5, r3
 8001c32:	4b4f      	ldr	r3, [pc, #316]	; (8001d70 <updateUI+0x660>)
 8001c34:	691b      	ldr	r3, [r3, #16]
 8001c36:	4618      	mov	r0, r3
 8001c38:	f7fe fc8e 	bl	8000558 <__aeabi_f2d>
 8001c3c:	a342      	add	r3, pc, #264	; (adr r3, 8001d48 <updateUI+0x638>)
 8001c3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c42:	f7fe fb2b 	bl	800029c <__adddf3>
 8001c46:	4602      	mov	r2, r0
 8001c48:	460b      	mov	r3, r1
			else if (dataIn == '4' && ControlVar.max_voltage>=0.0999 &&
 8001c4a:	4620      	mov	r0, r4
 8001c4c:	4629      	mov	r1, r5
 8001c4e:	f7fe ff61 	bl	8000b14 <__aeabi_dcmpge>
 8001c52:	4603      	mov	r3, r0
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d013      	beq.n	8001c80 <updateUI+0x570>
				ControlVar.max_voltage -= 0.1;
 8001c58:	4b45      	ldr	r3, [pc, #276]	; (8001d70 <updateUI+0x660>)
 8001c5a:	68db      	ldr	r3, [r3, #12]
 8001c5c:	4618      	mov	r0, r3
 8001c5e:	f7fe fc7b 	bl	8000558 <__aeabi_f2d>
 8001c62:	a33b      	add	r3, pc, #236	; (adr r3, 8001d50 <updateUI+0x640>)
 8001c64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c68:	f7fe fb16 	bl	8000298 <__aeabi_dsub>
 8001c6c:	4602      	mov	r2, r0
 8001c6e:	460b      	mov	r3, r1
 8001c70:	4610      	mov	r0, r2
 8001c72:	4619      	mov	r1, r3
 8001c74:	f7fe ffc0 	bl	8000bf8 <__aeabi_d2f>
 8001c78:	4603      	mov	r3, r0
 8001c7a:	4a3d      	ldr	r2, [pc, #244]	; (8001d70 <updateUI+0x660>)
 8001c7c:	60d3      	str	r3, [r2, #12]
 8001c7e:	e00b      	b.n	8001c98 <updateUI+0x588>
			}
			else if (dataIn == 'x') {
 8001c80:	1dbb      	adds	r3, r7, #6
 8001c82:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001c86:	2b78      	cmp	r3, #120	; 0x78
 8001c88:	f040 8198 	bne.w	8001fbc <updateUI+0x8ac>
				updateStatus();
 8001c8c:	f000 f9ba 	bl	8002004 <updateStatus>

				UIState = Main;
 8001c90:	4b38      	ldr	r3, [pc, #224]	; (8001d74 <updateUI+0x664>)
 8001c92:	2200      	movs	r2, #0
 8001c94:	701a      	strb	r2, [r3, #0]
				break;
 8001c96:	e196      	b.n	8001fc6 <updateUI+0x8b6>
			  		"[1] Increase +1V\r\n"
					"[2] Decrease -1V\r\n"
			  		"[3] Increase +0.1V\r\n"
					"[4] Decrease -0.1V\r\n"
					"[x] back\r\n",
					ControlVar.max_voltage);
 8001c98:	4b35      	ldr	r3, [pc, #212]	; (8001d70 <updateUI+0x660>)
 8001c9a:	68db      	ldr	r3, [r3, #12]
			sprintf(temp,
 8001c9c:	4618      	mov	r0, r3
 8001c9e:	f7fe fc5b 	bl	8000558 <__aeabi_f2d>
 8001ca2:	4602      	mov	r2, r0
 8001ca4:	460b      	mov	r3, r1
 8001ca6:	f107 0008 	add.w	r0, r7, #8
 8001caa:	4935      	ldr	r1, [pc, #212]	; (8001d80 <updateUI+0x670>)
 8001cac:	f005 fcaa 	bl	8007604 <siprintf>
			HAL_UART_Transmit(&huart2, (uint8_t*)temp, strlen(temp), 1000);
 8001cb0:	f107 0308 	add.w	r3, r7, #8
 8001cb4:	4618      	mov	r0, r3
 8001cb6:	f7fe fa93 	bl	80001e0 <strlen>
 8001cba:	4603      	mov	r3, r0
 8001cbc:	b29a      	uxth	r2, r3
 8001cbe:	f107 0108 	add.w	r1, r7, #8
 8001cc2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001cc6:	482d      	ldr	r0, [pc, #180]	; (8001d7c <updateUI+0x66c>)
 8001cc8:	f004 f9cd 	bl	8006066 <HAL_UART_Transmit>
			break;
 8001ccc:	e17b      	b.n	8001fc6 <updateUI+0x8b6>

		case Change_min_voltage:
			if (dataIn == '1' && ControlVar.min_voltage<=2.3001 &&
 8001cce:	1dbb      	adds	r3, r7, #6
 8001cd0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001cd4:	2b31      	cmp	r3, #49	; 0x31
 8001cd6:	d155      	bne.n	8001d84 <updateUI+0x674>
 8001cd8:	4b25      	ldr	r3, [pc, #148]	; (8001d70 <updateUI+0x660>)
 8001cda:	691b      	ldr	r3, [r3, #16]
 8001cdc:	4618      	mov	r0, r3
 8001cde:	f7fe fc3b 	bl	8000558 <__aeabi_f2d>
 8001ce2:	a31d      	add	r3, pc, #116	; (adr r3, 8001d58 <updateUI+0x648>)
 8001ce4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ce8:	f7fe ff0a 	bl	8000b00 <__aeabi_dcmple>
 8001cec:	4603      	mov	r3, r0
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d048      	beq.n	8001d84 <updateUI+0x674>
					ControlVar.min_voltage+1 <= ControlVar.max_voltage-0.0999) {
 8001cf2:	4b1f      	ldr	r3, [pc, #124]	; (8001d70 <updateUI+0x660>)
 8001cf4:	edd3 7a04 	vldr	s15, [r3, #16]
 8001cf8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001cfc:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001d00:	ee17 0a90 	vmov	r0, s15
 8001d04:	f7fe fc28 	bl	8000558 <__aeabi_f2d>
 8001d08:	4604      	mov	r4, r0
 8001d0a:	460d      	mov	r5, r1
 8001d0c:	4b18      	ldr	r3, [pc, #96]	; (8001d70 <updateUI+0x660>)
 8001d0e:	68db      	ldr	r3, [r3, #12]
 8001d10:	4618      	mov	r0, r3
 8001d12:	f7fe fc21 	bl	8000558 <__aeabi_f2d>
 8001d16:	a30c      	add	r3, pc, #48	; (adr r3, 8001d48 <updateUI+0x638>)
 8001d18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d1c:	f7fe fabc 	bl	8000298 <__aeabi_dsub>
 8001d20:	4602      	mov	r2, r0
 8001d22:	460b      	mov	r3, r1
			if (dataIn == '1' && ControlVar.min_voltage<=2.3001 &&
 8001d24:	4620      	mov	r0, r4
 8001d26:	4629      	mov	r1, r5
 8001d28:	f7fe feea 	bl	8000b00 <__aeabi_dcmple>
 8001d2c:	4603      	mov	r3, r0
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d028      	beq.n	8001d84 <updateUI+0x674>
				ControlVar.min_voltage += 1;
 8001d32:	4b0f      	ldr	r3, [pc, #60]	; (8001d70 <updateUI+0x660>)
 8001d34:	edd3 7a04 	vldr	s15, [r3, #16]
 8001d38:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001d3c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001d40:	4b0b      	ldr	r3, [pc, #44]	; (8001d70 <updateUI+0x660>)
 8001d42:	edc3 7a04 	vstr	s15, [r3, #16]
 8001d46:	e0b3      	b.n	8001eb0 <updateUI+0x7a0>
 8001d48:	e0ded289 	.word	0xe0ded289
 8001d4c:	3fb9930b 	.word	0x3fb9930b
 8001d50:	9999999a 	.word	0x9999999a
 8001d54:	3fb99999 	.word	0x3fb99999
 8001d58:	d42c3c9f 	.word	0xd42c3c9f
 8001d5c:	4002669a 	.word	0x4002669a
 8001d60:	48e8a71e 	.word	0x48e8a71e
 8001d64:	3fefff2e 	.word	0x3fefff2e
 8001d68:	075f6fd2 	.word	0x075f6fd2
 8001d6c:	400999ce 	.word	0x400999ce
 8001d70:	20000210 	.word	0x20000210
 8001d74:	20000250 	.word	0x20000250
 8001d78:	0800ac24 	.word	0x0800ac24
 8001d7c:	20000400 	.word	0x20000400
 8001d80:	0800acd4 	.word	0x0800acd4
			}
			else if (dataIn == '2' && ControlVar.min_voltage>=0.9999) {
 8001d84:	1dbb      	adds	r3, r7, #6
 8001d86:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001d8a:	2b32      	cmp	r3, #50	; 0x32
 8001d8c:	d117      	bne.n	8001dbe <updateUI+0x6ae>
 8001d8e:	4b98      	ldr	r3, [pc, #608]	; (8001ff0 <updateUI+0x8e0>)
 8001d90:	691b      	ldr	r3, [r3, #16]
 8001d92:	4618      	mov	r0, r3
 8001d94:	f7fe fbe0 	bl	8000558 <__aeabi_f2d>
 8001d98:	a38d      	add	r3, pc, #564	; (adr r3, 8001fd0 <updateUI+0x8c0>)
 8001d9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d9e:	f7fe feb9 	bl	8000b14 <__aeabi_dcmpge>
 8001da2:	4603      	mov	r3, r0
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d00a      	beq.n	8001dbe <updateUI+0x6ae>
				ControlVar.min_voltage -= 1;
 8001da8:	4b91      	ldr	r3, [pc, #580]	; (8001ff0 <updateUI+0x8e0>)
 8001daa:	edd3 7a04 	vldr	s15, [r3, #16]
 8001dae:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001db2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001db6:	4b8e      	ldr	r3, [pc, #568]	; (8001ff0 <updateUI+0x8e0>)
 8001db8:	edc3 7a04 	vstr	s15, [r3, #16]
 8001dbc:	e078      	b.n	8001eb0 <updateUI+0x7a0>
			}
			else if (dataIn == '3' && ControlVar.min_voltage<=3.2001 &&
 8001dbe:	1dbb      	adds	r3, r7, #6
 8001dc0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001dc4:	2b33      	cmp	r3, #51	; 0x33
 8001dc6:	d141      	bne.n	8001e4c <updateUI+0x73c>
 8001dc8:	4b89      	ldr	r3, [pc, #548]	; (8001ff0 <updateUI+0x8e0>)
 8001dca:	691b      	ldr	r3, [r3, #16]
 8001dcc:	4618      	mov	r0, r3
 8001dce:	f7fe fbc3 	bl	8000558 <__aeabi_f2d>
 8001dd2:	a381      	add	r3, pc, #516	; (adr r3, 8001fd8 <updateUI+0x8c8>)
 8001dd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001dd8:	f7fe fe92 	bl	8000b00 <__aeabi_dcmple>
 8001ddc:	4603      	mov	r3, r0
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d034      	beq.n	8001e4c <updateUI+0x73c>
					ControlVar.min_voltage+0.1 <= ControlVar.max_voltage-0.0999) {
 8001de2:	4b83      	ldr	r3, [pc, #524]	; (8001ff0 <updateUI+0x8e0>)
 8001de4:	691b      	ldr	r3, [r3, #16]
 8001de6:	4618      	mov	r0, r3
 8001de8:	f7fe fbb6 	bl	8000558 <__aeabi_f2d>
 8001dec:	a37c      	add	r3, pc, #496	; (adr r3, 8001fe0 <updateUI+0x8d0>)
 8001dee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001df2:	f7fe fa53 	bl	800029c <__adddf3>
 8001df6:	4602      	mov	r2, r0
 8001df8:	460b      	mov	r3, r1
 8001dfa:	4614      	mov	r4, r2
 8001dfc:	461d      	mov	r5, r3
 8001dfe:	4b7c      	ldr	r3, [pc, #496]	; (8001ff0 <updateUI+0x8e0>)
 8001e00:	68db      	ldr	r3, [r3, #12]
 8001e02:	4618      	mov	r0, r3
 8001e04:	f7fe fba8 	bl	8000558 <__aeabi_f2d>
 8001e08:	a377      	add	r3, pc, #476	; (adr r3, 8001fe8 <updateUI+0x8d8>)
 8001e0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e0e:	f7fe fa43 	bl	8000298 <__aeabi_dsub>
 8001e12:	4602      	mov	r2, r0
 8001e14:	460b      	mov	r3, r1
			else if (dataIn == '3' && ControlVar.min_voltage<=3.2001 &&
 8001e16:	4620      	mov	r0, r4
 8001e18:	4629      	mov	r1, r5
 8001e1a:	f7fe fe71 	bl	8000b00 <__aeabi_dcmple>
 8001e1e:	4603      	mov	r3, r0
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d013      	beq.n	8001e4c <updateUI+0x73c>
				ControlVar.min_voltage += 0.1;
 8001e24:	4b72      	ldr	r3, [pc, #456]	; (8001ff0 <updateUI+0x8e0>)
 8001e26:	691b      	ldr	r3, [r3, #16]
 8001e28:	4618      	mov	r0, r3
 8001e2a:	f7fe fb95 	bl	8000558 <__aeabi_f2d>
 8001e2e:	a36c      	add	r3, pc, #432	; (adr r3, 8001fe0 <updateUI+0x8d0>)
 8001e30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e34:	f7fe fa32 	bl	800029c <__adddf3>
 8001e38:	4602      	mov	r2, r0
 8001e3a:	460b      	mov	r3, r1
 8001e3c:	4610      	mov	r0, r2
 8001e3e:	4619      	mov	r1, r3
 8001e40:	f7fe feda 	bl	8000bf8 <__aeabi_d2f>
 8001e44:	4603      	mov	r3, r0
 8001e46:	4a6a      	ldr	r2, [pc, #424]	; (8001ff0 <updateUI+0x8e0>)
 8001e48:	6113      	str	r3, [r2, #16]
 8001e4a:	e031      	b.n	8001eb0 <updateUI+0x7a0>
			}
			else if (dataIn == '4' && ControlVar.min_voltage>=0.0999) {
 8001e4c:	1dbb      	adds	r3, r7, #6
 8001e4e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001e52:	2b34      	cmp	r3, #52	; 0x34
 8001e54:	d120      	bne.n	8001e98 <updateUI+0x788>
 8001e56:	4b66      	ldr	r3, [pc, #408]	; (8001ff0 <updateUI+0x8e0>)
 8001e58:	691b      	ldr	r3, [r3, #16]
 8001e5a:	4618      	mov	r0, r3
 8001e5c:	f7fe fb7c 	bl	8000558 <__aeabi_f2d>
 8001e60:	a361      	add	r3, pc, #388	; (adr r3, 8001fe8 <updateUI+0x8d8>)
 8001e62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e66:	f7fe fe55 	bl	8000b14 <__aeabi_dcmpge>
 8001e6a:	4603      	mov	r3, r0
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d013      	beq.n	8001e98 <updateUI+0x788>
				ControlVar.min_voltage -= 0.1;
 8001e70:	4b5f      	ldr	r3, [pc, #380]	; (8001ff0 <updateUI+0x8e0>)
 8001e72:	691b      	ldr	r3, [r3, #16]
 8001e74:	4618      	mov	r0, r3
 8001e76:	f7fe fb6f 	bl	8000558 <__aeabi_f2d>
 8001e7a:	a359      	add	r3, pc, #356	; (adr r3, 8001fe0 <updateUI+0x8d0>)
 8001e7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e80:	f7fe fa0a 	bl	8000298 <__aeabi_dsub>
 8001e84:	4602      	mov	r2, r0
 8001e86:	460b      	mov	r3, r1
 8001e88:	4610      	mov	r0, r2
 8001e8a:	4619      	mov	r1, r3
 8001e8c:	f7fe feb4 	bl	8000bf8 <__aeabi_d2f>
 8001e90:	4603      	mov	r3, r0
 8001e92:	4a57      	ldr	r2, [pc, #348]	; (8001ff0 <updateUI+0x8e0>)
 8001e94:	6113      	str	r3, [r2, #16]
 8001e96:	e00b      	b.n	8001eb0 <updateUI+0x7a0>
			}
			else if (dataIn == 'x') {
 8001e98:	1dbb      	adds	r3, r7, #6
 8001e9a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001e9e:	2b78      	cmp	r3, #120	; 0x78
 8001ea0:	f040 808e 	bne.w	8001fc0 <updateUI+0x8b0>
				updateStatus();
 8001ea4:	f000 f8ae 	bl	8002004 <updateStatus>

				UIState = Main;
 8001ea8:	4b52      	ldr	r3, [pc, #328]	; (8001ff4 <updateUI+0x8e4>)
 8001eaa:	2200      	movs	r2, #0
 8001eac:	701a      	strb	r2, [r3, #0]
				break;
 8001eae:	e08a      	b.n	8001fc6 <updateUI+0x8b6>
			  		"[1] Increase +1V\r\n"
					"[2] Decrease -1V\r\n"
			  		"[3] Increase +0.1V\r\n"
					"[4] Decrease -0.1V\r\n"
					"[x] back\r\n",
					ControlVar.min_voltage);
 8001eb0:	4b4f      	ldr	r3, [pc, #316]	; (8001ff0 <updateUI+0x8e0>)
 8001eb2:	691b      	ldr	r3, [r3, #16]
			sprintf(temp,
 8001eb4:	4618      	mov	r0, r3
 8001eb6:	f7fe fb4f 	bl	8000558 <__aeabi_f2d>
 8001eba:	4602      	mov	r2, r0
 8001ebc:	460b      	mov	r3, r1
 8001ebe:	f107 0008 	add.w	r0, r7, #8
 8001ec2:	494d      	ldr	r1, [pc, #308]	; (8001ff8 <updateUI+0x8e8>)
 8001ec4:	f005 fb9e 	bl	8007604 <siprintf>
			HAL_UART_Transmit(&huart2, (uint8_t*)temp, strlen(temp), 1000);
 8001ec8:	f107 0308 	add.w	r3, r7, #8
 8001ecc:	4618      	mov	r0, r3
 8001ece:	f7fe f987 	bl	80001e0 <strlen>
 8001ed2:	4603      	mov	r3, r0
 8001ed4:	b29a      	uxth	r2, r3
 8001ed6:	f107 0108 	add.w	r1, r7, #8
 8001eda:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001ede:	4847      	ldr	r0, [pc, #284]	; (8001ffc <updateUI+0x8ec>)
 8001ee0:	f004 f8c1 	bl	8006066 <HAL_UART_Transmit>
			break;
 8001ee4:	e06f      	b.n	8001fc6 <updateUI+0x8b6>

		case Change_duty_cycle:
			if (dataIn == '1' && ControlVar.duty_cycle<=90) {
 8001ee6:	1dbb      	adds	r3, r7, #6
 8001ee8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001eec:	2b31      	cmp	r3, #49	; 0x31
 8001eee:	d10a      	bne.n	8001f06 <updateUI+0x7f6>
 8001ef0:	4b3f      	ldr	r3, [pc, #252]	; (8001ff0 <updateUI+0x8e0>)
 8001ef2:	7d1b      	ldrb	r3, [r3, #20]
 8001ef4:	2b5a      	cmp	r3, #90	; 0x5a
 8001ef6:	d806      	bhi.n	8001f06 <updateUI+0x7f6>
				ControlVar.duty_cycle += 10;
 8001ef8:	4b3d      	ldr	r3, [pc, #244]	; (8001ff0 <updateUI+0x8e0>)
 8001efa:	7d1b      	ldrb	r3, [r3, #20]
 8001efc:	330a      	adds	r3, #10
 8001efe:	b2da      	uxtb	r2, r3
 8001f00:	4b3b      	ldr	r3, [pc, #236]	; (8001ff0 <updateUI+0x8e0>)
 8001f02:	751a      	strb	r2, [r3, #20]
 8001f04:	e03a      	b.n	8001f7c <updateUI+0x86c>
			}
			else if (dataIn == '2' && ControlVar.duty_cycle>=10) {
 8001f06:	1dbb      	adds	r3, r7, #6
 8001f08:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001f0c:	2b32      	cmp	r3, #50	; 0x32
 8001f0e:	d10a      	bne.n	8001f26 <updateUI+0x816>
 8001f10:	4b37      	ldr	r3, [pc, #220]	; (8001ff0 <updateUI+0x8e0>)
 8001f12:	7d1b      	ldrb	r3, [r3, #20]
 8001f14:	2b09      	cmp	r3, #9
 8001f16:	d906      	bls.n	8001f26 <updateUI+0x816>
				ControlVar.duty_cycle -= 10;
 8001f18:	4b35      	ldr	r3, [pc, #212]	; (8001ff0 <updateUI+0x8e0>)
 8001f1a:	7d1b      	ldrb	r3, [r3, #20]
 8001f1c:	3b0a      	subs	r3, #10
 8001f1e:	b2da      	uxtb	r2, r3
 8001f20:	4b33      	ldr	r3, [pc, #204]	; (8001ff0 <updateUI+0x8e0>)
 8001f22:	751a      	strb	r2, [r3, #20]
 8001f24:	e02a      	b.n	8001f7c <updateUI+0x86c>
			}
			else if (dataIn == '3' && ControlVar.duty_cycle<=99) {
 8001f26:	1dbb      	adds	r3, r7, #6
 8001f28:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001f2c:	2b33      	cmp	r3, #51	; 0x33
 8001f2e:	d10a      	bne.n	8001f46 <updateUI+0x836>
 8001f30:	4b2f      	ldr	r3, [pc, #188]	; (8001ff0 <updateUI+0x8e0>)
 8001f32:	7d1b      	ldrb	r3, [r3, #20]
 8001f34:	2b63      	cmp	r3, #99	; 0x63
 8001f36:	d806      	bhi.n	8001f46 <updateUI+0x836>
				ControlVar.duty_cycle += 1;
 8001f38:	4b2d      	ldr	r3, [pc, #180]	; (8001ff0 <updateUI+0x8e0>)
 8001f3a:	7d1b      	ldrb	r3, [r3, #20]
 8001f3c:	3301      	adds	r3, #1
 8001f3e:	b2da      	uxtb	r2, r3
 8001f40:	4b2b      	ldr	r3, [pc, #172]	; (8001ff0 <updateUI+0x8e0>)
 8001f42:	751a      	strb	r2, [r3, #20]
 8001f44:	e01a      	b.n	8001f7c <updateUI+0x86c>
			}
			else if (dataIn == '4' && ControlVar.duty_cycle>=1) {
 8001f46:	1dbb      	adds	r3, r7, #6
 8001f48:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001f4c:	2b34      	cmp	r3, #52	; 0x34
 8001f4e:	d10a      	bne.n	8001f66 <updateUI+0x856>
 8001f50:	4b27      	ldr	r3, [pc, #156]	; (8001ff0 <updateUI+0x8e0>)
 8001f52:	7d1b      	ldrb	r3, [r3, #20]
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d006      	beq.n	8001f66 <updateUI+0x856>
				ControlVar.duty_cycle -= 1;
 8001f58:	4b25      	ldr	r3, [pc, #148]	; (8001ff0 <updateUI+0x8e0>)
 8001f5a:	7d1b      	ldrb	r3, [r3, #20]
 8001f5c:	3b01      	subs	r3, #1
 8001f5e:	b2da      	uxtb	r2, r3
 8001f60:	4b23      	ldr	r3, [pc, #140]	; (8001ff0 <updateUI+0x8e0>)
 8001f62:	751a      	strb	r2, [r3, #20]
 8001f64:	e00a      	b.n	8001f7c <updateUI+0x86c>
			}
			else if (dataIn == 'x') {
 8001f66:	1dbb      	adds	r3, r7, #6
 8001f68:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001f6c:	2b78      	cmp	r3, #120	; 0x78
 8001f6e:	d129      	bne.n	8001fc4 <updateUI+0x8b4>
				updateStatus();
 8001f70:	f000 f848 	bl	8002004 <updateStatus>

				UIState = Main;
 8001f74:	4b1f      	ldr	r3, [pc, #124]	; (8001ff4 <updateUI+0x8e4>)
 8001f76:	2200      	movs	r2, #0
 8001f78:	701a      	strb	r2, [r3, #0]
				break;
 8001f7a:	e024      	b.n	8001fc6 <updateUI+0x8b6>
			  		"[1] Increase +10%\r\n"
					"[2] Decrease -10%\r\n"
			  		"[3] Increase  +1%\r\n"
					"[4] Decrease  -1%\r\n"
					"[x] back\r\n",
					ControlVar.duty_cycle);
 8001f7c:	4b1c      	ldr	r3, [pc, #112]	; (8001ff0 <updateUI+0x8e0>)
 8001f7e:	7d1b      	ldrb	r3, [r3, #20]
			sprintf(temp,
 8001f80:	461a      	mov	r2, r3
 8001f82:	f107 0308 	add.w	r3, r7, #8
 8001f86:	491e      	ldr	r1, [pc, #120]	; (8002000 <updateUI+0x8f0>)
 8001f88:	4618      	mov	r0, r3
 8001f8a:	f005 fb3b 	bl	8007604 <siprintf>
			HAL_UART_Transmit(&huart2, (uint8_t*)temp, strlen(temp), 1000);
 8001f8e:	f107 0308 	add.w	r3, r7, #8
 8001f92:	4618      	mov	r0, r3
 8001f94:	f7fe f924 	bl	80001e0 <strlen>
 8001f98:	4603      	mov	r3, r0
 8001f9a:	b29a      	uxth	r2, r3
 8001f9c:	f107 0108 	add.w	r1, r7, #8
 8001fa0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001fa4:	4815      	ldr	r0, [pc, #84]	; (8001ffc <updateUI+0x8ec>)
 8001fa6:	f004 f85e 	bl	8006066 <HAL_UART_Transmit>
			break;
 8001faa:	e00c      	b.n	8001fc6 <updateUI+0x8b6>

		default:
			break;
 8001fac:	bf00      	nop
 8001fae:	e00a      	b.n	8001fc6 <updateUI+0x8b6>
			break;
 8001fb0:	bf00      	nop
 8001fb2:	e008      	b.n	8001fc6 <updateUI+0x8b6>
			else {break;}
 8001fb4:	bf00      	nop
 8001fb6:	e006      	b.n	8001fc6 <updateUI+0x8b6>
			else {break;}
 8001fb8:	bf00      	nop
 8001fba:	e004      	b.n	8001fc6 <updateUI+0x8b6>
			else {break;}
 8001fbc:	bf00      	nop
 8001fbe:	e002      	b.n	8001fc6 <updateUI+0x8b6>
			else {break;}
 8001fc0:	bf00      	nop
 8001fc2:	e000      	b.n	8001fc6 <updateUI+0x8b6>
			else {break;}
 8001fc4:	bf00      	nop
	}
}
 8001fc6:	bf00      	nop
 8001fc8:	f507 7784 	add.w	r7, r7, #264	; 0x108
 8001fcc:	46bd      	mov	sp, r7
 8001fce:	bdb0      	pop	{r4, r5, r7, pc}
 8001fd0:	48e8a71e 	.word	0x48e8a71e
 8001fd4:	3fefff2e 	.word	0x3fefff2e
 8001fd8:	075f6fd2 	.word	0x075f6fd2
 8001fdc:	400999ce 	.word	0x400999ce
 8001fe0:	9999999a 	.word	0x9999999a
 8001fe4:	3fb99999 	.word	0x3fb99999
 8001fe8:	e0ded289 	.word	0xe0ded289
 8001fec:	3fb9930b 	.word	0x3fb9930b
 8001ff0:	20000210 	.word	0x20000210
 8001ff4:	20000250 	.word	0x20000250
 8001ff8:	0800ad80 	.word	0x0800ad80
 8001ffc:	20000400 	.word	0x20000400
 8002000:	0800ae2c 	.word	0x0800ae2c

08002004 <updateStatus>:

void updateStatus()
{
 8002004:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002008:	b0ba      	sub	sp, #232	; 0xe8
 800200a:	af04      	add	r7, sp, #16
	char temp[] = "\r\n"
 800200c:	4a60      	ldr	r2, [pc, #384]	; (8002190 <updateStatus+0x18c>)
 800200e:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8002012:	4611      	mov	r1, r2
 8002014:	2255      	movs	r2, #85	; 0x55
 8002016:	4618      	mov	r0, r3
 8002018:	f004 fe74 	bl	8006d04 <memcpy>
			"========================\r\n"
			"MAIN MENU\r\n"
			"========================\r\n"
	  		"[m] Change Mode		: ";
	HAL_UART_Transmit(&huart2, (uint8_t*)temp, strlen(temp), 1000);
 800201c:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8002020:	4618      	mov	r0, r3
 8002022:	f7fe f8dd 	bl	80001e0 <strlen>
 8002026:	4603      	mov	r3, r0
 8002028:	b29a      	uxth	r2, r3
 800202a:	f107 0180 	add.w	r1, r7, #128	; 0x80
 800202e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002032:	4858      	ldr	r0, [pc, #352]	; (8002194 <updateStatus+0x190>)
 8002034:	f004 f817 	bl	8006066 <HAL_UART_Transmit>

	switch (ControlVar.wave_mode) {
 8002038:	4b57      	ldr	r3, [pc, #348]	; (8002198 <updateStatus+0x194>)
 800203a:	7d5b      	ldrb	r3, [r3, #21]
 800203c:	2b02      	cmp	r3, #2
 800203e:	d014      	beq.n	800206a <updateStatus+0x66>
 8002040:	2b02      	cmp	r3, #2
 8002042:	dc19      	bgt.n	8002078 <updateStatus+0x74>
 8002044:	2b00      	cmp	r3, #0
 8002046:	d002      	beq.n	800204e <updateStatus+0x4a>
 8002048:	2b01      	cmp	r3, #1
 800204a:	d007      	beq.n	800205c <updateStatus+0x58>
		case 2:
			sprintf(temp,
					"Square-wave\r\n");
			break;
		default:
			break;
 800204c:	e014      	b.n	8002078 <updateStatus+0x74>
			sprintf(temp,
 800204e:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8002052:	4952      	ldr	r1, [pc, #328]	; (800219c <updateStatus+0x198>)
 8002054:	4618      	mov	r0, r3
 8002056:	f005 fad5 	bl	8007604 <siprintf>
			break;
 800205a:	e00e      	b.n	800207a <updateStatus+0x76>
			sprintf(temp,
 800205c:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8002060:	494f      	ldr	r1, [pc, #316]	; (80021a0 <updateStatus+0x19c>)
 8002062:	4618      	mov	r0, r3
 8002064:	f005 face 	bl	8007604 <siprintf>
			break;
 8002068:	e007      	b.n	800207a <updateStatus+0x76>
			sprintf(temp,
 800206a:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800206e:	494d      	ldr	r1, [pc, #308]	; (80021a4 <updateStatus+0x1a0>)
 8002070:	4618      	mov	r0, r3
 8002072:	f005 fac7 	bl	8007604 <siprintf>
			break;
 8002076:	e000      	b.n	800207a <updateStatus+0x76>
			break;
 8002078:	bf00      	nop
	}
	HAL_UART_Transmit(&huart2, (uint8_t*)temp, strlen(temp), 1000);
 800207a:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800207e:	4618      	mov	r0, r3
 8002080:	f7fe f8ae 	bl	80001e0 <strlen>
 8002084:	4603      	mov	r3, r0
 8002086:	b29a      	uxth	r2, r3
 8002088:	f107 0180 	add.w	r1, r7, #128	; 0x80
 800208c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002090:	4840      	ldr	r0, [pc, #256]	; (8002194 <updateStatus+0x190>)
 8002092:	f003 ffe8 	bl	8006066 <HAL_UART_Transmit>
	char temp2[128];
	sprintf(temp2,
	  		"[f] Change Frequency	: %.1f Hz\r\n"
			"[a] Change Max-voltage	: %.1f V\r\n"
			"[i] Change Min-voltage	: %.1f V\r\n",
			ControlVar.frequency,
 8002096:	4b40      	ldr	r3, [pc, #256]	; (8002198 <updateStatus+0x194>)
 8002098:	689b      	ldr	r3, [r3, #8]
	sprintf(temp2,
 800209a:	4618      	mov	r0, r3
 800209c:	f7fe fa5c 	bl	8000558 <__aeabi_f2d>
 80020a0:	4680      	mov	r8, r0
 80020a2:	4689      	mov	r9, r1
			ControlVar.max_voltage,
 80020a4:	4b3c      	ldr	r3, [pc, #240]	; (8002198 <updateStatus+0x194>)
 80020a6:	68db      	ldr	r3, [r3, #12]
	sprintf(temp2,
 80020a8:	4618      	mov	r0, r3
 80020aa:	f7fe fa55 	bl	8000558 <__aeabi_f2d>
 80020ae:	4604      	mov	r4, r0
 80020b0:	460d      	mov	r5, r1
			ControlVar.min_voltage);
 80020b2:	4b39      	ldr	r3, [pc, #228]	; (8002198 <updateStatus+0x194>)
 80020b4:	691b      	ldr	r3, [r3, #16]
	sprintf(temp2,
 80020b6:	4618      	mov	r0, r3
 80020b8:	f7fe fa4e 	bl	8000558 <__aeabi_f2d>
 80020bc:	4602      	mov	r2, r0
 80020be:	460b      	mov	r3, r1
 80020c0:	4638      	mov	r0, r7
 80020c2:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80020c6:	e9cd 4500 	strd	r4, r5, [sp]
 80020ca:	4642      	mov	r2, r8
 80020cc:	464b      	mov	r3, r9
 80020ce:	4936      	ldr	r1, [pc, #216]	; (80021a8 <updateStatus+0x1a4>)
 80020d0:	f005 fa98 	bl	8007604 <siprintf>
	HAL_UART_Transmit(&huart2, (uint8_t*)temp2, strlen(temp2), 1000);
 80020d4:	463b      	mov	r3, r7
 80020d6:	4618      	mov	r0, r3
 80020d8:	f7fe f882 	bl	80001e0 <strlen>
 80020dc:	4603      	mov	r3, r0
 80020de:	b29a      	uxth	r2, r3
 80020e0:	4639      	mov	r1, r7
 80020e2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80020e6:	482b      	ldr	r0, [pc, #172]	; (8002194 <updateStatus+0x190>)
 80020e8:	f003 ffbd 	bl	8006066 <HAL_UART_Transmit>

	if (ControlVar.wave_mode==0 && ControlVar.slope_down) {
 80020ec:	4b2a      	ldr	r3, [pc, #168]	; (8002198 <updateStatus+0x194>)
 80020ee:	7d5b      	ldrb	r3, [r3, #21]
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d115      	bne.n	8002120 <updateStatus+0x11c>
 80020f4:	4b28      	ldr	r3, [pc, #160]	; (8002198 <updateStatus+0x194>)
 80020f6:	7d9b      	ldrb	r3, [r3, #22]
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d011      	beq.n	8002120 <updateStatus+0x11c>
		sprintf(temp2,
 80020fc:	463b      	mov	r3, r7
 80020fe:	492b      	ldr	r1, [pc, #172]	; (80021ac <updateStatus+0x1a8>)
 8002100:	4618      	mov	r0, r3
 8002102:	f005 fa7f 	bl	8007604 <siprintf>
				"[s] Change Slope	: Down\r\n");
		HAL_UART_Transmit(&huart2, (uint8_t*)temp2, strlen(temp2), 1000);
 8002106:	463b      	mov	r3, r7
 8002108:	4618      	mov	r0, r3
 800210a:	f7fe f869 	bl	80001e0 <strlen>
 800210e:	4603      	mov	r3, r0
 8002110:	b29a      	uxth	r2, r3
 8002112:	4639      	mov	r1, r7
 8002114:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002118:	481e      	ldr	r0, [pc, #120]	; (8002194 <updateStatus+0x190>)
 800211a:	f003 ffa4 	bl	8006066 <HAL_UART_Transmit>
 800211e:	e032      	b.n	8002186 <updateStatus+0x182>
	}
	else if (ControlVar.wave_mode==0 && !ControlVar.slope_down) {
 8002120:	4b1d      	ldr	r3, [pc, #116]	; (8002198 <updateStatus+0x194>)
 8002122:	7d5b      	ldrb	r3, [r3, #21]
 8002124:	2b00      	cmp	r3, #0
 8002126:	d115      	bne.n	8002154 <updateStatus+0x150>
 8002128:	4b1b      	ldr	r3, [pc, #108]	; (8002198 <updateStatus+0x194>)
 800212a:	7d9b      	ldrb	r3, [r3, #22]
 800212c:	2b00      	cmp	r3, #0
 800212e:	d111      	bne.n	8002154 <updateStatus+0x150>
		sprintf(temp2,
 8002130:	463b      	mov	r3, r7
 8002132:	491f      	ldr	r1, [pc, #124]	; (80021b0 <updateStatus+0x1ac>)
 8002134:	4618      	mov	r0, r3
 8002136:	f005 fa65 	bl	8007604 <siprintf>
				"[s] Change Slope	: Up\r\n");
		HAL_UART_Transmit(&huart2, (uint8_t*)temp2, strlen(temp2), 1000);
 800213a:	463b      	mov	r3, r7
 800213c:	4618      	mov	r0, r3
 800213e:	f7fe f84f 	bl	80001e0 <strlen>
 8002142:	4603      	mov	r3, r0
 8002144:	b29a      	uxth	r2, r3
 8002146:	4639      	mov	r1, r7
 8002148:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800214c:	4811      	ldr	r0, [pc, #68]	; (8002194 <updateStatus+0x190>)
 800214e:	f003 ff8a 	bl	8006066 <HAL_UART_Transmit>
 8002152:	e018      	b.n	8002186 <updateStatus+0x182>
	}
	else if (ControlVar.wave_mode==2) {
 8002154:	4b10      	ldr	r3, [pc, #64]	; (8002198 <updateStatus+0x194>)
 8002156:	7d5b      	ldrb	r3, [r3, #21]
 8002158:	2b02      	cmp	r3, #2
 800215a:	d114      	bne.n	8002186 <updateStatus+0x182>
		sprintf(temp2,
				"[d] Change Duty-cycle	: %d %\r\n",
				ControlVar.duty_cycle);
 800215c:	4b0e      	ldr	r3, [pc, #56]	; (8002198 <updateStatus+0x194>)
 800215e:	7d1b      	ldrb	r3, [r3, #20]
		sprintf(temp2,
 8002160:	461a      	mov	r2, r3
 8002162:	463b      	mov	r3, r7
 8002164:	4913      	ldr	r1, [pc, #76]	; (80021b4 <updateStatus+0x1b0>)
 8002166:	4618      	mov	r0, r3
 8002168:	f005 fa4c 	bl	8007604 <siprintf>
		HAL_UART_Transmit(&huart2, (uint8_t*)temp2, strlen(temp2), 1000);
 800216c:	463b      	mov	r3, r7
 800216e:	4618      	mov	r0, r3
 8002170:	f7fe f836 	bl	80001e0 <strlen>
 8002174:	4603      	mov	r3, r0
 8002176:	b29a      	uxth	r2, r3
 8002178:	4639      	mov	r1, r7
 800217a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800217e:	4805      	ldr	r0, [pc, #20]	; (8002194 <updateStatus+0x190>)
 8002180:	f003 ff71 	bl	8006066 <HAL_UART_Transmit>
	}
}
 8002184:	e7ff      	b.n	8002186 <updateStatus+0x182>
 8002186:	bf00      	nop
 8002188:	37d8      	adds	r7, #216	; 0xd8
 800218a:	46bd      	mov	sp, r7
 800218c:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002190:	0800afb4 	.word	0x0800afb4
 8002194:	20000400 	.word	0x20000400
 8002198:	20000210 	.word	0x20000210
 800219c:	0800aed4 	.word	0x0800aed4
 80021a0:	0800aee0 	.word	0x0800aee0
 80021a4:	0800aeec 	.word	0x0800aeec
 80021a8:	0800aefc 	.word	0x0800aefc
 80021ac:	0800af60 	.word	0x0800af60
 80021b0:	0800af7c 	.word	0x0800af7c
 80021b4:	0800af94 	.word	0x0800af94

080021b8 <UARTRecieveIT>:

int16_t UARTRecieveIT()
{
 80021b8:	b480      	push	{r7}
 80021ba:	b083      	sub	sp, #12
 80021bc:	af00      	add	r7, sp, #0
	//store last data position
	static uint32_t dataPos = 0;
	//create dummy data
	int16_t data=-1;
 80021be:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80021c2:	80fb      	strh	r3, [r7, #6]
	//check
	if(huart2.RxXferSize - huart2.RxXferCount!=dataPos)
 80021c4:	4b11      	ldr	r3, [pc, #68]	; (800220c <UARTRecieveIT+0x54>)
 80021c6:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80021c8:	461a      	mov	r2, r3
 80021ca:	4b10      	ldr	r3, [pc, #64]	; (800220c <UARTRecieveIT+0x54>)
 80021cc:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80021ce:	b29b      	uxth	r3, r3
 80021d0:	1ad3      	subs	r3, r2, r3
 80021d2:	4a0f      	ldr	r2, [pc, #60]	; (8002210 <UARTRecieveIT+0x58>)
 80021d4:	6812      	ldr	r2, [r2, #0]
 80021d6:	4293      	cmp	r3, r2
 80021d8:	d010      	beq.n	80021fc <UARTRecieveIT+0x44>
	{
		data=RxDataBuffer[dataPos];
 80021da:	4b0d      	ldr	r3, [pc, #52]	; (8002210 <UARTRecieveIT+0x58>)
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	4a0d      	ldr	r2, [pc, #52]	; (8002214 <UARTRecieveIT+0x5c>)
 80021e0:	5cd3      	ldrb	r3, [r2, r3]
 80021e2:	80fb      	strh	r3, [r7, #6]
		dataPos= (dataPos+1)%huart2.RxXferSize;
 80021e4:	4b0a      	ldr	r3, [pc, #40]	; (8002210 <UARTRecieveIT+0x58>)
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	3301      	adds	r3, #1
 80021ea:	4a08      	ldr	r2, [pc, #32]	; (800220c <UARTRecieveIT+0x54>)
 80021ec:	8d92      	ldrh	r2, [r2, #44]	; 0x2c
 80021ee:	fbb3 f1f2 	udiv	r1, r3, r2
 80021f2:	fb02 f201 	mul.w	r2, r2, r1
 80021f6:	1a9b      	subs	r3, r3, r2
 80021f8:	4a05      	ldr	r2, [pc, #20]	; (8002210 <UARTRecieveIT+0x58>)
 80021fa:	6013      	str	r3, [r2, #0]
	}
	return data;
 80021fc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 8002200:	4618      	mov	r0, r3
 8002202:	370c      	adds	r7, #12
 8002204:	46bd      	mov	sp, r7
 8002206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800220a:	4770      	bx	lr
 800220c:	20000400 	.word	0x20000400
 8002210:	20000260 	.word	0x20000260
 8002214:	20000230 	.word	0x20000230

08002218 <generatorInit>:

void generatorInit(Generator *var)
{
 8002218:	b580      	push	{r7, lr}
 800221a:	b082      	sub	sp, #8
 800221c:	af00      	add	r7, sp, #0
 800221e:	6078      	str	r0, [r7, #4]
	var->wave_mode		= 0;
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	2200      	movs	r2, #0
 8002224:	755a      	strb	r2, [r3, #21]
						//0:sawtooth
						//1:sinewave
						//2:squarewave
	var->count			= 0; 		//0-99 %
 8002226:	6879      	ldr	r1, [r7, #4]
 8002228:	f04f 0200 	mov.w	r2, #0
 800222c:	f04f 0300 	mov.w	r3, #0
 8002230:	e9c1 2300 	strd	r2, r3, [r1]
	var->frequency 		= 1;		//0-10 Hz
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800223a:	609a      	str	r2, [r3, #8]
	var->max_voltage	= 3.3;		//0-3.3 V
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	4a0b      	ldr	r2, [pc, #44]	; (800226c <generatorInit+0x54>)
 8002240:	60da      	str	r2, [r3, #12]
	var->min_voltage	= 0;		//0-3.3 V
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	f04f 0200 	mov.w	r2, #0
 8002248:	611a      	str	r2, [r3, #16]
	var->duty_cycle		= 50;		//0-100 %
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	2232      	movs	r2, #50	; 0x32
 800224e:	751a      	strb	r2, [r3, #20]
	var->slope_down		= 0;		//0:slope up 1:slope down (sawtooth mode)
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	2200      	movs	r2, #0
 8002254:	759a      	strb	r2, [r3, #22]
	var->periodstamp	= micros();	//uS
 8002256:	f000 fa6f 	bl	8002738 <micros>
 800225a:	4602      	mov	r2, r0
 800225c:	460b      	mov	r3, r1
 800225e:	6879      	ldr	r1, [r7, #4]
 8002260:	e9c1 2306 	strd	r2, r3, [r1, #24]
}
 8002264:	bf00      	nop
 8002266:	3708      	adds	r7, #8
 8002268:	46bd      	mov	sp, r7
 800226a:	bd80      	pop	{r7, pc}
 800226c:	40533333 	.word	0x40533333

08002270 <generator>:

void generator()
{
 8002270:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002274:	af00      	add	r7, sp, #0
	//Count by normalized to 0-100
	ControlVar.count += 100 * ControlVar.frequency /10000.0;
 8002276:	4bca      	ldr	r3, [pc, #808]	; (80025a0 <generator+0x330>)
 8002278:	e9d3 8900 	ldrd	r8, r9, [r3]
 800227c:	4bc8      	ldr	r3, [pc, #800]	; (80025a0 <generator+0x330>)
 800227e:	edd3 7a02 	vldr	s15, [r3, #8]
 8002282:	ed9f 7ac8 	vldr	s14, [pc, #800]	; 80025a4 <generator+0x334>
 8002286:	ee67 7a87 	vmul.f32	s15, s15, s14
 800228a:	ee17 0a90 	vmov	r0, s15
 800228e:	f7fe f963 	bl	8000558 <__aeabi_f2d>
 8002292:	a3b9      	add	r3, pc, #740	; (adr r3, 8002578 <generator+0x308>)
 8002294:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002298:	f7fe fae0 	bl	800085c <__aeabi_ddiv>
 800229c:	4602      	mov	r2, r0
 800229e:	460b      	mov	r3, r1
 80022a0:	4640      	mov	r0, r8
 80022a2:	4649      	mov	r1, r9
 80022a4:	f7fd fffa 	bl	800029c <__adddf3>
 80022a8:	4602      	mov	r2, r0
 80022aa:	460b      	mov	r3, r1
 80022ac:	49bc      	ldr	r1, [pc, #752]	; (80025a0 <generator+0x330>)
 80022ae:	e9c1 2300 	strd	r2, r3, [r1]
	//Overflow
	if (ControlVar.frequency > 0.0001 &&
 80022b2:	4bbb      	ldr	r3, [pc, #748]	; (80025a0 <generator+0x330>)
 80022b4:	689b      	ldr	r3, [r3, #8]
 80022b6:	4618      	mov	r0, r3
 80022b8:	f7fe f94e 	bl	8000558 <__aeabi_f2d>
 80022bc:	a3b0      	add	r3, pc, #704	; (adr r3, 8002580 <generator+0x310>)
 80022be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022c2:	f7fe fc31 	bl	8000b28 <__aeabi_dcmpgt>
 80022c6:	4603      	mov	r3, r0
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d02b      	beq.n	8002324 <generator+0xb4>
			micros()-ControlVar.periodstamp > 1/ControlVar.frequency*1000000) {
 80022cc:	f000 fa34 	bl	8002738 <micros>
 80022d0:	4bb3      	ldr	r3, [pc, #716]	; (80025a0 <generator+0x330>)
 80022d2:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 80022d6:	1a84      	subs	r4, r0, r2
 80022d8:	eb61 0503 	sbc.w	r5, r1, r3
 80022dc:	4620      	mov	r0, r4
 80022de:	4629      	mov	r1, r5
 80022e0:	f7fe fda2 	bl	8000e28 <__aeabi_ul2f>
 80022e4:	ee06 0a10 	vmov	s12, r0
 80022e8:	4bad      	ldr	r3, [pc, #692]	; (80025a0 <generator+0x330>)
 80022ea:	ed93 7a02 	vldr	s14, [r3, #8]
 80022ee:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80022f2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80022f6:	ed9f 7aac 	vldr	s14, [pc, #688]	; 80025a8 <generator+0x338>
 80022fa:	ee67 7a87 	vmul.f32	s15, s15, s14
	if (ControlVar.frequency > 0.0001 &&
 80022fe:	eeb4 6ae7 	vcmpe.f32	s12, s15
 8002302:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002306:	dd0d      	ble.n	8002324 <generator+0xb4>
		ControlVar.count = 0; ControlVar.periodstamp = micros();}
 8002308:	49a5      	ldr	r1, [pc, #660]	; (80025a0 <generator+0x330>)
 800230a:	f04f 0200 	mov.w	r2, #0
 800230e:	f04f 0300 	mov.w	r3, #0
 8002312:	e9c1 2300 	strd	r2, r3, [r1]
 8002316:	f000 fa0f 	bl	8002738 <micros>
 800231a:	4602      	mov	r2, r0
 800231c:	460b      	mov	r3, r1
 800231e:	49a0      	ldr	r1, [pc, #640]	; (80025a0 <generator+0x330>)
 8002320:	e9c1 2306 	strd	r2, r3, [r1, #24]

	//Amplify to 12 bits (0-4096)
	switch (ControlVar.wave_mode)
 8002324:	4b9e      	ldr	r3, [pc, #632]	; (80025a0 <generator+0x330>)
 8002326:	7d5b      	ldrb	r3, [r3, #21]
 8002328:	2b02      	cmp	r3, #2
 800232a:	f000 8145 	beq.w	80025b8 <generator+0x348>
 800232e:	2b02      	cmp	r3, #2
 8002330:	f300 817d 	bgt.w	800262e <generator+0x3be>
 8002334:	2b00      	cmp	r3, #0
 8002336:	d003      	beq.n	8002340 <generator+0xd0>
 8002338:	2b01      	cmp	r3, #1
 800233a:	f000 80ac 	beq.w	8002496 <generator+0x226>
				dataOut = 4096/3.3*ControlVar.min_voltage;
			}
			break;

		default:
			break;
 800233e:	e176      	b.n	800262e <generator+0x3be>
			if (ControlVar.slope_down) {							//slope down
 8002340:	4b97      	ldr	r3, [pc, #604]	; (80025a0 <generator+0x330>)
 8002342:	7d9b      	ldrb	r3, [r3, #22]
 8002344:	2b00      	cmp	r3, #0
 8002346:	d057      	beq.n	80023f8 <generator+0x188>
				dataOut = (100-ControlVar.count) * (
 8002348:	4b95      	ldr	r3, [pc, #596]	; (80025a0 <generator+0x330>)
 800234a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800234e:	f04f 0000 	mov.w	r0, #0
 8002352:	4996      	ldr	r1, [pc, #600]	; (80025ac <generator+0x33c>)
 8002354:	f7fd ffa0 	bl	8000298 <__aeabi_dsub>
 8002358:	4602      	mov	r2, r0
 800235a:	460b      	mov	r3, r1
 800235c:	4614      	mov	r4, r2
 800235e:	461d      	mov	r5, r3
						4096/3.3*ControlVar.max_voltage - 4096/3.3*ControlVar.min_voltage) /100
 8002360:	4b8f      	ldr	r3, [pc, #572]	; (80025a0 <generator+0x330>)
 8002362:	68db      	ldr	r3, [r3, #12]
 8002364:	4618      	mov	r0, r3
 8002366:	f7fe f8f7 	bl	8000558 <__aeabi_f2d>
 800236a:	a387      	add	r3, pc, #540	; (adr r3, 8002588 <generator+0x318>)
 800236c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002370:	f7fe f94a 	bl	8000608 <__aeabi_dmul>
 8002374:	4602      	mov	r2, r0
 8002376:	460b      	mov	r3, r1
 8002378:	4690      	mov	r8, r2
 800237a:	4699      	mov	r9, r3
 800237c:	4b88      	ldr	r3, [pc, #544]	; (80025a0 <generator+0x330>)
 800237e:	691b      	ldr	r3, [r3, #16]
 8002380:	4618      	mov	r0, r3
 8002382:	f7fe f8e9 	bl	8000558 <__aeabi_f2d>
 8002386:	a380      	add	r3, pc, #512	; (adr r3, 8002588 <generator+0x318>)
 8002388:	e9d3 2300 	ldrd	r2, r3, [r3]
 800238c:	f7fe f93c 	bl	8000608 <__aeabi_dmul>
 8002390:	4602      	mov	r2, r0
 8002392:	460b      	mov	r3, r1
 8002394:	4640      	mov	r0, r8
 8002396:	4649      	mov	r1, r9
 8002398:	f7fd ff7e 	bl	8000298 <__aeabi_dsub>
 800239c:	4602      	mov	r2, r0
 800239e:	460b      	mov	r3, r1
				dataOut = (100-ControlVar.count) * (
 80023a0:	4620      	mov	r0, r4
 80023a2:	4629      	mov	r1, r5
 80023a4:	f7fe f930 	bl	8000608 <__aeabi_dmul>
 80023a8:	4602      	mov	r2, r0
 80023aa:	460b      	mov	r3, r1
 80023ac:	4610      	mov	r0, r2
 80023ae:	4619      	mov	r1, r3
						4096/3.3*ControlVar.max_voltage - 4096/3.3*ControlVar.min_voltage) /100
 80023b0:	f04f 0200 	mov.w	r2, #0
 80023b4:	4b7d      	ldr	r3, [pc, #500]	; (80025ac <generator+0x33c>)
 80023b6:	f7fe fa51 	bl	800085c <__aeabi_ddiv>
 80023ba:	4602      	mov	r2, r0
 80023bc:	460b      	mov	r3, r1
 80023be:	4614      	mov	r4, r2
 80023c0:	461d      	mov	r5, r3
								+ 4096/3.3*ControlVar.min_voltage;
 80023c2:	4b77      	ldr	r3, [pc, #476]	; (80025a0 <generator+0x330>)
 80023c4:	691b      	ldr	r3, [r3, #16]
 80023c6:	4618      	mov	r0, r3
 80023c8:	f7fe f8c6 	bl	8000558 <__aeabi_f2d>
 80023cc:	a36e      	add	r3, pc, #440	; (adr r3, 8002588 <generator+0x318>)
 80023ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023d2:	f7fe f919 	bl	8000608 <__aeabi_dmul>
 80023d6:	4602      	mov	r2, r0
 80023d8:	460b      	mov	r3, r1
 80023da:	4620      	mov	r0, r4
 80023dc:	4629      	mov	r1, r5
 80023de:	f7fd ff5d 	bl	800029c <__adddf3>
 80023e2:	4602      	mov	r2, r0
 80023e4:	460b      	mov	r3, r1
				dataOut = (100-ControlVar.count) * (
 80023e6:	4610      	mov	r0, r2
 80023e8:	4619      	mov	r1, r3
 80023ea:	f7fe fbe5 	bl	8000bb8 <__aeabi_d2uiz>
 80023ee:	4603      	mov	r3, r0
 80023f0:	b29a      	uxth	r2, r3
 80023f2:	4b6f      	ldr	r3, [pc, #444]	; (80025b0 <generator+0x340>)
 80023f4:	801a      	strh	r2, [r3, #0]
			break;
 80023f6:	e11b      	b.n	8002630 <generator+0x3c0>
				dataOut = ControlVar.count * (
 80023f8:	4b69      	ldr	r3, [pc, #420]	; (80025a0 <generator+0x330>)
 80023fa:	e9d3 4500 	ldrd	r4, r5, [r3]
						4096/3.3*ControlVar.max_voltage - 4096/3.3*ControlVar.min_voltage) /100
 80023fe:	4b68      	ldr	r3, [pc, #416]	; (80025a0 <generator+0x330>)
 8002400:	68db      	ldr	r3, [r3, #12]
 8002402:	4618      	mov	r0, r3
 8002404:	f7fe f8a8 	bl	8000558 <__aeabi_f2d>
 8002408:	a35f      	add	r3, pc, #380	; (adr r3, 8002588 <generator+0x318>)
 800240a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800240e:	f7fe f8fb 	bl	8000608 <__aeabi_dmul>
 8002412:	4602      	mov	r2, r0
 8002414:	460b      	mov	r3, r1
 8002416:	4690      	mov	r8, r2
 8002418:	4699      	mov	r9, r3
 800241a:	4b61      	ldr	r3, [pc, #388]	; (80025a0 <generator+0x330>)
 800241c:	691b      	ldr	r3, [r3, #16]
 800241e:	4618      	mov	r0, r3
 8002420:	f7fe f89a 	bl	8000558 <__aeabi_f2d>
 8002424:	a358      	add	r3, pc, #352	; (adr r3, 8002588 <generator+0x318>)
 8002426:	e9d3 2300 	ldrd	r2, r3, [r3]
 800242a:	f7fe f8ed 	bl	8000608 <__aeabi_dmul>
 800242e:	4602      	mov	r2, r0
 8002430:	460b      	mov	r3, r1
 8002432:	4640      	mov	r0, r8
 8002434:	4649      	mov	r1, r9
 8002436:	f7fd ff2f 	bl	8000298 <__aeabi_dsub>
 800243a:	4602      	mov	r2, r0
 800243c:	460b      	mov	r3, r1
				dataOut = ControlVar.count * (
 800243e:	4620      	mov	r0, r4
 8002440:	4629      	mov	r1, r5
 8002442:	f7fe f8e1 	bl	8000608 <__aeabi_dmul>
 8002446:	4602      	mov	r2, r0
 8002448:	460b      	mov	r3, r1
 800244a:	4610      	mov	r0, r2
 800244c:	4619      	mov	r1, r3
						4096/3.3*ControlVar.max_voltage - 4096/3.3*ControlVar.min_voltage) /100
 800244e:	f04f 0200 	mov.w	r2, #0
 8002452:	4b56      	ldr	r3, [pc, #344]	; (80025ac <generator+0x33c>)
 8002454:	f7fe fa02 	bl	800085c <__aeabi_ddiv>
 8002458:	4602      	mov	r2, r0
 800245a:	460b      	mov	r3, r1
 800245c:	4614      	mov	r4, r2
 800245e:	461d      	mov	r5, r3
								+ 4096/3.3*ControlVar.min_voltage;
 8002460:	4b4f      	ldr	r3, [pc, #316]	; (80025a0 <generator+0x330>)
 8002462:	691b      	ldr	r3, [r3, #16]
 8002464:	4618      	mov	r0, r3
 8002466:	f7fe f877 	bl	8000558 <__aeabi_f2d>
 800246a:	a347      	add	r3, pc, #284	; (adr r3, 8002588 <generator+0x318>)
 800246c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002470:	f7fe f8ca 	bl	8000608 <__aeabi_dmul>
 8002474:	4602      	mov	r2, r0
 8002476:	460b      	mov	r3, r1
 8002478:	4620      	mov	r0, r4
 800247a:	4629      	mov	r1, r5
 800247c:	f7fd ff0e 	bl	800029c <__adddf3>
 8002480:	4602      	mov	r2, r0
 8002482:	460b      	mov	r3, r1
				dataOut = ControlVar.count * (
 8002484:	4610      	mov	r0, r2
 8002486:	4619      	mov	r1, r3
 8002488:	f7fe fb96 	bl	8000bb8 <__aeabi_d2uiz>
 800248c:	4603      	mov	r3, r0
 800248e:	b29a      	uxth	r2, r3
 8002490:	4b47      	ldr	r3, [pc, #284]	; (80025b0 <generator+0x340>)
 8002492:	801a      	strh	r2, [r3, #0]
			break;
 8002494:	e0cc      	b.n	8002630 <generator+0x3c0>
			dataOut = (2048/3.3*ControlVar.max_voltage - 2048/3.3*ControlVar.min_voltage) * (
 8002496:	4b42      	ldr	r3, [pc, #264]	; (80025a0 <generator+0x330>)
 8002498:	68db      	ldr	r3, [r3, #12]
 800249a:	4618      	mov	r0, r3
 800249c:	f7fe f85c 	bl	8000558 <__aeabi_f2d>
 80024a0:	a33b      	add	r3, pc, #236	; (adr r3, 8002590 <generator+0x320>)
 80024a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024a6:	f7fe f8af 	bl	8000608 <__aeabi_dmul>
 80024aa:	4602      	mov	r2, r0
 80024ac:	460b      	mov	r3, r1
 80024ae:	4614      	mov	r4, r2
 80024b0:	461d      	mov	r5, r3
 80024b2:	4b3b      	ldr	r3, [pc, #236]	; (80025a0 <generator+0x330>)
 80024b4:	691b      	ldr	r3, [r3, #16]
 80024b6:	4618      	mov	r0, r3
 80024b8:	f7fe f84e 	bl	8000558 <__aeabi_f2d>
 80024bc:	a334      	add	r3, pc, #208	; (adr r3, 8002590 <generator+0x320>)
 80024be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024c2:	f7fe f8a1 	bl	8000608 <__aeabi_dmul>
 80024c6:	4602      	mov	r2, r0
 80024c8:	460b      	mov	r3, r1
 80024ca:	4620      	mov	r0, r4
 80024cc:	4629      	mov	r1, r5
 80024ce:	f7fd fee3 	bl	8000298 <__aeabi_dsub>
 80024d2:	4602      	mov	r2, r0
 80024d4:	460b      	mov	r3, r1
 80024d6:	4614      	mov	r4, r2
 80024d8:	461d      	mov	r5, r3
					sin(ControlVar.count*2.0/100.0*M_PI) + 1) + 4096/3.3*ControlVar.min_voltage;
 80024da:	4b31      	ldr	r3, [pc, #196]	; (80025a0 <generator+0x330>)
 80024dc:	e9d3 0100 	ldrd	r0, r1, [r3]
 80024e0:	4602      	mov	r2, r0
 80024e2:	460b      	mov	r3, r1
 80024e4:	f7fd feda 	bl	800029c <__adddf3>
 80024e8:	4602      	mov	r2, r0
 80024ea:	460b      	mov	r3, r1
 80024ec:	4610      	mov	r0, r2
 80024ee:	4619      	mov	r1, r3
 80024f0:	f04f 0200 	mov.w	r2, #0
 80024f4:	4b2d      	ldr	r3, [pc, #180]	; (80025ac <generator+0x33c>)
 80024f6:	f7fe f9b1 	bl	800085c <__aeabi_ddiv>
 80024fa:	4602      	mov	r2, r0
 80024fc:	460b      	mov	r3, r1
 80024fe:	4610      	mov	r0, r2
 8002500:	4619      	mov	r1, r3
 8002502:	a325      	add	r3, pc, #148	; (adr r3, 8002598 <generator+0x328>)
 8002504:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002508:	f7fe f87e 	bl	8000608 <__aeabi_dmul>
 800250c:	4602      	mov	r2, r0
 800250e:	460b      	mov	r3, r1
 8002510:	ec43 2b17 	vmov	d7, r2, r3
 8002514:	eeb0 0a47 	vmov.f32	s0, s14
 8002518:	eef0 0a67 	vmov.f32	s1, s15
 800251c:	f007 fa90 	bl	8009a40 <sin>
 8002520:	ec51 0b10 	vmov	r0, r1, d0
 8002524:	f04f 0200 	mov.w	r2, #0
 8002528:	4b22      	ldr	r3, [pc, #136]	; (80025b4 <generator+0x344>)
 800252a:	f7fd feb7 	bl	800029c <__adddf3>
 800252e:	4602      	mov	r2, r0
 8002530:	460b      	mov	r3, r1
			dataOut = (2048/3.3*ControlVar.max_voltage - 2048/3.3*ControlVar.min_voltage) * (
 8002532:	4620      	mov	r0, r4
 8002534:	4629      	mov	r1, r5
 8002536:	f7fe f867 	bl	8000608 <__aeabi_dmul>
 800253a:	4602      	mov	r2, r0
 800253c:	460b      	mov	r3, r1
 800253e:	4614      	mov	r4, r2
 8002540:	461d      	mov	r5, r3
					sin(ControlVar.count*2.0/100.0*M_PI) + 1) + 4096/3.3*ControlVar.min_voltage;
 8002542:	4b17      	ldr	r3, [pc, #92]	; (80025a0 <generator+0x330>)
 8002544:	691b      	ldr	r3, [r3, #16]
 8002546:	4618      	mov	r0, r3
 8002548:	f7fe f806 	bl	8000558 <__aeabi_f2d>
 800254c:	a30e      	add	r3, pc, #56	; (adr r3, 8002588 <generator+0x318>)
 800254e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002552:	f7fe f859 	bl	8000608 <__aeabi_dmul>
 8002556:	4602      	mov	r2, r0
 8002558:	460b      	mov	r3, r1
 800255a:	4620      	mov	r0, r4
 800255c:	4629      	mov	r1, r5
 800255e:	f7fd fe9d 	bl	800029c <__adddf3>
 8002562:	4602      	mov	r2, r0
 8002564:	460b      	mov	r3, r1
			dataOut = (2048/3.3*ControlVar.max_voltage - 2048/3.3*ControlVar.min_voltage) * (
 8002566:	4610      	mov	r0, r2
 8002568:	4619      	mov	r1, r3
 800256a:	f7fe fb25 	bl	8000bb8 <__aeabi_d2uiz>
 800256e:	4603      	mov	r3, r0
 8002570:	b29a      	uxth	r2, r3
 8002572:	4b0f      	ldr	r3, [pc, #60]	; (80025b0 <generator+0x340>)
 8002574:	801a      	strh	r2, [r3, #0]
			break;
 8002576:	e05b      	b.n	8002630 <generator+0x3c0>
 8002578:	00000000 	.word	0x00000000
 800257c:	40c38800 	.word	0x40c38800
 8002580:	eb1c432d 	.word	0xeb1c432d
 8002584:	3f1a36e2 	.word	0x3f1a36e2
 8002588:	364d9365 	.word	0x364d9365
 800258c:	409364d9 	.word	0x409364d9
 8002590:	364d9365 	.word	0x364d9365
 8002594:	408364d9 	.word	0x408364d9
 8002598:	54442d18 	.word	0x54442d18
 800259c:	400921fb 	.word	0x400921fb
 80025a0:	20000210 	.word	0x20000210
 80025a4:	42c80000 	.word	0x42c80000
 80025a8:	49742400 	.word	0x49742400
 80025ac:	40590000 	.word	0x40590000
 80025b0:	20000208 	.word	0x20000208
 80025b4:	3ff00000 	.word	0x3ff00000
			if (ControlVar.count < ControlVar.duty_cycle) {
 80025b8:	4b2d      	ldr	r3, [pc, #180]	; (8002670 <generator+0x400>)
 80025ba:	e9d3 4500 	ldrd	r4, r5, [r3]
 80025be:	4b2c      	ldr	r3, [pc, #176]	; (8002670 <generator+0x400>)
 80025c0:	7d1b      	ldrb	r3, [r3, #20]
 80025c2:	4618      	mov	r0, r3
 80025c4:	f7fd ffb6 	bl	8000534 <__aeabi_i2d>
 80025c8:	4602      	mov	r2, r0
 80025ca:	460b      	mov	r3, r1
 80025cc:	4620      	mov	r0, r4
 80025ce:	4629      	mov	r1, r5
 80025d0:	f7fe fa8c 	bl	8000aec <__aeabi_dcmplt>
 80025d4:	4603      	mov	r3, r0
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d014      	beq.n	8002604 <generator+0x394>
				dataOut = 4096/3.3*ControlVar.max_voltage;
 80025da:	4b25      	ldr	r3, [pc, #148]	; (8002670 <generator+0x400>)
 80025dc:	68db      	ldr	r3, [r3, #12]
 80025de:	4618      	mov	r0, r3
 80025e0:	f7fd ffba 	bl	8000558 <__aeabi_f2d>
 80025e4:	a320      	add	r3, pc, #128	; (adr r3, 8002668 <generator+0x3f8>)
 80025e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025ea:	f7fe f80d 	bl	8000608 <__aeabi_dmul>
 80025ee:	4602      	mov	r2, r0
 80025f0:	460b      	mov	r3, r1
 80025f2:	4610      	mov	r0, r2
 80025f4:	4619      	mov	r1, r3
 80025f6:	f7fe fadf 	bl	8000bb8 <__aeabi_d2uiz>
 80025fa:	4603      	mov	r3, r0
 80025fc:	b29a      	uxth	r2, r3
 80025fe:	4b1d      	ldr	r3, [pc, #116]	; (8002674 <generator+0x404>)
 8002600:	801a      	strh	r2, [r3, #0]
			break;
 8002602:	e015      	b.n	8002630 <generator+0x3c0>
				dataOut = 4096/3.3*ControlVar.min_voltage;
 8002604:	4b1a      	ldr	r3, [pc, #104]	; (8002670 <generator+0x400>)
 8002606:	691b      	ldr	r3, [r3, #16]
 8002608:	4618      	mov	r0, r3
 800260a:	f7fd ffa5 	bl	8000558 <__aeabi_f2d>
 800260e:	a316      	add	r3, pc, #88	; (adr r3, 8002668 <generator+0x3f8>)
 8002610:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002614:	f7fd fff8 	bl	8000608 <__aeabi_dmul>
 8002618:	4602      	mov	r2, r0
 800261a:	460b      	mov	r3, r1
 800261c:	4610      	mov	r0, r2
 800261e:	4619      	mov	r1, r3
 8002620:	f7fe faca 	bl	8000bb8 <__aeabi_d2uiz>
 8002624:	4603      	mov	r3, r0
 8002626:	b29a      	uxth	r2, r3
 8002628:	4b12      	ldr	r3, [pc, #72]	; (8002674 <generator+0x404>)
 800262a:	801a      	strh	r2, [r3, #0]
			break;
 800262c:	e000      	b.n	8002630 <generator+0x3c0>
			break;
 800262e:	bf00      	nop
	}

	//Send the SPI data
	if (hspi3.State == HAL_SPI_STATE_READY
 8002630:	4b11      	ldr	r3, [pc, #68]	; (8002678 <generator+0x408>)
 8002632:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002636:	b2db      	uxtb	r3, r3
 8002638:	2b01      	cmp	r3, #1
 800263a:	d10f      	bne.n	800265c <generator+0x3ec>
			&& HAL_GPIO_ReadPin(SPI_SS_GPIO_Port, SPI_SS_Pin) == GPIO_PIN_SET)
 800263c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002640:	480e      	ldr	r0, [pc, #56]	; (800267c <generator+0x40c>)
 8002642:	f001 ffdd 	bl	8004600 <HAL_GPIO_ReadPin>
 8002646:	4603      	mov	r3, r0
 8002648:	2b01      	cmp	r3, #1
 800264a:	d107      	bne.n	800265c <generator+0x3ec>
	{
		MCP4922SetOutput(DACConfig, dataOut);
 800264c:	4b0c      	ldr	r3, [pc, #48]	; (8002680 <generator+0x410>)
 800264e:	781b      	ldrb	r3, [r3, #0]
 8002650:	4a08      	ldr	r2, [pc, #32]	; (8002674 <generator+0x404>)
 8002652:	8812      	ldrh	r2, [r2, #0]
 8002654:	4611      	mov	r1, r2
 8002656:	4618      	mov	r0, r3
 8002658:	f000 f814 	bl	8002684 <MCP4922SetOutput>
	}
}
 800265c:	bf00      	nop
 800265e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002662:	bf00      	nop
 8002664:	f3af 8000 	nop.w
 8002668:	364d9365 	.word	0x364d9365
 800266c:	409364d9 	.word	0x409364d9
 8002670:	20000210 	.word	0x20000210
 8002674:	20000208 	.word	0x20000208
 8002678:	200002b8 	.word	0x200002b8
 800267c:	40020400 	.word	0x40020400
 8002680:	20000000 	.word	0x20000000

08002684 <MCP4922SetOutput>:

void MCP4922SetOutput(uint8_t Config, uint16_t DACOutput)
{
 8002684:	b580      	push	{r7, lr}
 8002686:	b084      	sub	sp, #16
 8002688:	af00      	add	r7, sp, #0
 800268a:	4603      	mov	r3, r0
 800268c:	460a      	mov	r2, r1
 800268e:	71fb      	strb	r3, [r7, #7]
 8002690:	4613      	mov	r3, r2
 8002692:	80bb      	strh	r3, [r7, #4]
	uint32_t OutputPacket = (DACOutput & 0x0fff) | ((Config & 0xf) << 12);
 8002694:	88bb      	ldrh	r3, [r7, #4]
 8002696:	f3c3 020b 	ubfx	r2, r3, #0, #12
 800269a:	79fb      	ldrb	r3, [r7, #7]
 800269c:	031b      	lsls	r3, r3, #12
 800269e:	b29b      	uxth	r3, r3
 80026a0:	4313      	orrs	r3, r2
 80026a2:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_WritePin(SPI_SS_GPIO_Port, SPI_SS_Pin, GPIO_PIN_RESET);
 80026a4:	2200      	movs	r2, #0
 80026a6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80026aa:	4807      	ldr	r0, [pc, #28]	; (80026c8 <MCP4922SetOutput+0x44>)
 80026ac:	f001 ffc0 	bl	8004630 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit_IT(&hspi3, &OutputPacket, 1);
 80026b0:	f107 030c 	add.w	r3, r7, #12
 80026b4:	2201      	movs	r2, #1
 80026b6:	4619      	mov	r1, r3
 80026b8:	4804      	ldr	r0, [pc, #16]	; (80026cc <MCP4922SetOutput+0x48>)
 80026ba:	f002 fcd1 	bl	8005060 <HAL_SPI_Transmit_IT>
}
 80026be:	bf00      	nop
 80026c0:	3710      	adds	r7, #16
 80026c2:	46bd      	mov	sp, r7
 80026c4:	bd80      	pop	{r7, pc}
 80026c6:	bf00      	nop
 80026c8:	40020400 	.word	0x40020400
 80026cc:	200002b8 	.word	0x200002b8

080026d0 <HAL_SPI_TxCpltCallback>:

void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 80026d0:	b580      	push	{r7, lr}
 80026d2:	b082      	sub	sp, #8
 80026d4:	af00      	add	r7, sp, #0
 80026d6:	6078      	str	r0, [r7, #4]
	if (hspi == &hspi3)
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	4a06      	ldr	r2, [pc, #24]	; (80026f4 <HAL_SPI_TxCpltCallback+0x24>)
 80026dc:	4293      	cmp	r3, r2
 80026de:	d105      	bne.n	80026ec <HAL_SPI_TxCpltCallback+0x1c>
	{
		HAL_GPIO_WritePin(SPI_SS_GPIO_Port, SPI_SS_Pin, GPIO_PIN_SET);
 80026e0:	2201      	movs	r2, #1
 80026e2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80026e6:	4804      	ldr	r0, [pc, #16]	; (80026f8 <HAL_SPI_TxCpltCallback+0x28>)
 80026e8:	f001 ffa2 	bl	8004630 <HAL_GPIO_WritePin>
	}
}
 80026ec:	bf00      	nop
 80026ee:	3708      	adds	r7, #8
 80026f0:	46bd      	mov	sp, r7
 80026f2:	bd80      	pop	{r7, pc}
 80026f4:	200002b8 	.word	0x200002b8
 80026f8:	40020400 	.word	0x40020400

080026fc <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80026fc:	b4b0      	push	{r4, r5, r7}
 80026fe:	b083      	sub	sp, #12
 8002700:	af00      	add	r7, sp, #0
 8002702:	6078      	str	r0, [r7, #4]
	if (htim == &htim11)
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	4a0a      	ldr	r2, [pc, #40]	; (8002730 <HAL_TIM_PeriodElapsedCallback+0x34>)
 8002708:	4293      	cmp	r3, r2
 800270a:	d10c      	bne.n	8002726 <HAL_TIM_PeriodElapsedCallback+0x2a>
	{
		_micro += 65535;
 800270c:	4b09      	ldr	r3, [pc, #36]	; (8002734 <HAL_TIM_PeriodElapsedCallback+0x38>)
 800270e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002712:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8002716:	f04f 0100 	mov.w	r1, #0
 800271a:	1814      	adds	r4, r2, r0
 800271c:	eb43 0501 	adc.w	r5, r3, r1
 8002720:	4b04      	ldr	r3, [pc, #16]	; (8002734 <HAL_TIM_PeriodElapsedCallback+0x38>)
 8002722:	e9c3 4500 	strd	r4, r5, [r3]
	}
}
 8002726:	bf00      	nop
 8002728:	370c      	adds	r7, #12
 800272a:	46bd      	mov	sp, r7
 800272c:	bcb0      	pop	{r4, r5, r7}
 800272e:	4770      	bx	lr
 8002730:	20000358 	.word	0x20000358
 8002734:	20000200 	.word	0x20000200

08002738 <micros>:

inline uint64_t micros()
{
 8002738:	b4b0      	push	{r4, r5, r7}
 800273a:	af00      	add	r7, sp, #0
	return htim11.Instance->CNT + _micro;
 800273c:	4b09      	ldr	r3, [pc, #36]	; (8002764 <micros+0x2c>)
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002742:	4618      	mov	r0, r3
 8002744:	f04f 0100 	mov.w	r1, #0
 8002748:	4b07      	ldr	r3, [pc, #28]	; (8002768 <micros+0x30>)
 800274a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800274e:	1884      	adds	r4, r0, r2
 8002750:	eb41 0503 	adc.w	r5, r1, r3
 8002754:	4622      	mov	r2, r4
 8002756:	462b      	mov	r3, r5
}
 8002758:	4610      	mov	r0, r2
 800275a:	4619      	mov	r1, r3
 800275c:	46bd      	mov	sp, r7
 800275e:	bcb0      	pop	{r4, r5, r7}
 8002760:	4770      	bx	lr
 8002762:	bf00      	nop
 8002764:	20000358 	.word	0x20000358
 8002768:	20000200 	.word	0x20000200

0800276c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800276c:	b480      	push	{r7}
 800276e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002770:	b672      	cpsid	i
}
 8002772:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8002774:	e7fe      	b.n	8002774 <Error_Handler+0x8>
	...

08002778 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002778:	b580      	push	{r7, lr}
 800277a:	b082      	sub	sp, #8
 800277c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800277e:	2300      	movs	r3, #0
 8002780:	607b      	str	r3, [r7, #4]
 8002782:	4b10      	ldr	r3, [pc, #64]	; (80027c4 <HAL_MspInit+0x4c>)
 8002784:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002786:	4a0f      	ldr	r2, [pc, #60]	; (80027c4 <HAL_MspInit+0x4c>)
 8002788:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800278c:	6453      	str	r3, [r2, #68]	; 0x44
 800278e:	4b0d      	ldr	r3, [pc, #52]	; (80027c4 <HAL_MspInit+0x4c>)
 8002790:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002792:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002796:	607b      	str	r3, [r7, #4]
 8002798:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800279a:	2300      	movs	r3, #0
 800279c:	603b      	str	r3, [r7, #0]
 800279e:	4b09      	ldr	r3, [pc, #36]	; (80027c4 <HAL_MspInit+0x4c>)
 80027a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027a2:	4a08      	ldr	r2, [pc, #32]	; (80027c4 <HAL_MspInit+0x4c>)
 80027a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80027a8:	6413      	str	r3, [r2, #64]	; 0x40
 80027aa:	4b06      	ldr	r3, [pc, #24]	; (80027c4 <HAL_MspInit+0x4c>)
 80027ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027b2:	603b      	str	r3, [r7, #0]
 80027b4:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80027b6:	2007      	movs	r0, #7
 80027b8:	f001 f95a 	bl	8003a70 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80027bc:	bf00      	nop
 80027be:	3708      	adds	r7, #8
 80027c0:	46bd      	mov	sp, r7
 80027c2:	bd80      	pop	{r7, pc}
 80027c4:	40023800 	.word	0x40023800

080027c8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80027c8:	b580      	push	{r7, lr}
 80027ca:	b08a      	sub	sp, #40	; 0x28
 80027cc:	af00      	add	r7, sp, #0
 80027ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027d0:	f107 0314 	add.w	r3, r7, #20
 80027d4:	2200      	movs	r2, #0
 80027d6:	601a      	str	r2, [r3, #0]
 80027d8:	605a      	str	r2, [r3, #4]
 80027da:	609a      	str	r2, [r3, #8]
 80027dc:	60da      	str	r2, [r3, #12]
 80027de:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	4a33      	ldr	r2, [pc, #204]	; (80028b4 <HAL_ADC_MspInit+0xec>)
 80027e6:	4293      	cmp	r3, r2
 80027e8:	d15f      	bne.n	80028aa <HAL_ADC_MspInit+0xe2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80027ea:	2300      	movs	r3, #0
 80027ec:	613b      	str	r3, [r7, #16]
 80027ee:	4b32      	ldr	r3, [pc, #200]	; (80028b8 <HAL_ADC_MspInit+0xf0>)
 80027f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027f2:	4a31      	ldr	r2, [pc, #196]	; (80028b8 <HAL_ADC_MspInit+0xf0>)
 80027f4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80027f8:	6453      	str	r3, [r2, #68]	; 0x44
 80027fa:	4b2f      	ldr	r3, [pc, #188]	; (80028b8 <HAL_ADC_MspInit+0xf0>)
 80027fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002802:	613b      	str	r3, [r7, #16]
 8002804:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002806:	2300      	movs	r3, #0
 8002808:	60fb      	str	r3, [r7, #12]
 800280a:	4b2b      	ldr	r3, [pc, #172]	; (80028b8 <HAL_ADC_MspInit+0xf0>)
 800280c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800280e:	4a2a      	ldr	r2, [pc, #168]	; (80028b8 <HAL_ADC_MspInit+0xf0>)
 8002810:	f043 0301 	orr.w	r3, r3, #1
 8002814:	6313      	str	r3, [r2, #48]	; 0x30
 8002816:	4b28      	ldr	r3, [pc, #160]	; (80028b8 <HAL_ADC_MspInit+0xf0>)
 8002818:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800281a:	f003 0301 	and.w	r3, r3, #1
 800281e:	60fb      	str	r3, [r7, #12]
 8002820:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002822:	2301      	movs	r3, #1
 8002824:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002826:	2303      	movs	r3, #3
 8002828:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800282a:	2300      	movs	r3, #0
 800282c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800282e:	f107 0314 	add.w	r3, r7, #20
 8002832:	4619      	mov	r1, r3
 8002834:	4821      	ldr	r0, [pc, #132]	; (80028bc <HAL_ADC_MspInit+0xf4>)
 8002836:	f001 fd5f 	bl	80042f8 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 800283a:	4b21      	ldr	r3, [pc, #132]	; (80028c0 <HAL_ADC_MspInit+0xf8>)
 800283c:	4a21      	ldr	r2, [pc, #132]	; (80028c4 <HAL_ADC_MspInit+0xfc>)
 800283e:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8002840:	4b1f      	ldr	r3, [pc, #124]	; (80028c0 <HAL_ADC_MspInit+0xf8>)
 8002842:	2200      	movs	r2, #0
 8002844:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002846:	4b1e      	ldr	r3, [pc, #120]	; (80028c0 <HAL_ADC_MspInit+0xf8>)
 8002848:	2200      	movs	r2, #0
 800284a:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800284c:	4b1c      	ldr	r3, [pc, #112]	; (80028c0 <HAL_ADC_MspInit+0xf8>)
 800284e:	2200      	movs	r2, #0
 8002850:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8002852:	4b1b      	ldr	r3, [pc, #108]	; (80028c0 <HAL_ADC_MspInit+0xf8>)
 8002854:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002858:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800285a:	4b19      	ldr	r3, [pc, #100]	; (80028c0 <HAL_ADC_MspInit+0xf8>)
 800285c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002860:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002862:	4b17      	ldr	r3, [pc, #92]	; (80028c0 <HAL_ADC_MspInit+0xf8>)
 8002864:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002868:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800286a:	4b15      	ldr	r3, [pc, #84]	; (80028c0 <HAL_ADC_MspInit+0xf8>)
 800286c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002870:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8002872:	4b13      	ldr	r3, [pc, #76]	; (80028c0 <HAL_ADC_MspInit+0xf8>)
 8002874:	2200      	movs	r2, #0
 8002876:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002878:	4b11      	ldr	r3, [pc, #68]	; (80028c0 <HAL_ADC_MspInit+0xf8>)
 800287a:	2200      	movs	r2, #0
 800287c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800287e:	4810      	ldr	r0, [pc, #64]	; (80028c0 <HAL_ADC_MspInit+0xf8>)
 8002880:	f001 f938 	bl	8003af4 <HAL_DMA_Init>
 8002884:	4603      	mov	r3, r0
 8002886:	2b00      	cmp	r3, #0
 8002888:	d001      	beq.n	800288e <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 800288a:	f7ff ff6f 	bl	800276c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	4a0b      	ldr	r2, [pc, #44]	; (80028c0 <HAL_ADC_MspInit+0xf8>)
 8002892:	639a      	str	r2, [r3, #56]	; 0x38
 8002894:	4a0a      	ldr	r2, [pc, #40]	; (80028c0 <HAL_ADC_MspInit+0xf8>)
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	6393      	str	r3, [r2, #56]	; 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 800289a:	2200      	movs	r2, #0
 800289c:	2100      	movs	r1, #0
 800289e:	2012      	movs	r0, #18
 80028a0:	f001 f8f1 	bl	8003a86 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 80028a4:	2012      	movs	r0, #18
 80028a6:	f001 f90a 	bl	8003abe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80028aa:	bf00      	nop
 80028ac:	3728      	adds	r7, #40	; 0x28
 80028ae:	46bd      	mov	sp, r7
 80028b0:	bd80      	pop	{r7, pc}
 80028b2:	bf00      	nop
 80028b4:	40012000 	.word	0x40012000
 80028b8:	40023800 	.word	0x40023800
 80028bc:	40020000 	.word	0x40020000
 80028c0:	200003a0 	.word	0x200003a0
 80028c4:	40026410 	.word	0x40026410

080028c8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80028c8:	b580      	push	{r7, lr}
 80028ca:	b08a      	sub	sp, #40	; 0x28
 80028cc:	af00      	add	r7, sp, #0
 80028ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80028d0:	f107 0314 	add.w	r3, r7, #20
 80028d4:	2200      	movs	r2, #0
 80028d6:	601a      	str	r2, [r3, #0]
 80028d8:	605a      	str	r2, [r3, #4]
 80028da:	609a      	str	r2, [r3, #8]
 80028dc:	60da      	str	r2, [r3, #12]
 80028de:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	4a1d      	ldr	r2, [pc, #116]	; (800295c <HAL_SPI_MspInit+0x94>)
 80028e6:	4293      	cmp	r3, r2
 80028e8:	d133      	bne.n	8002952 <HAL_SPI_MspInit+0x8a>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 80028ea:	2300      	movs	r3, #0
 80028ec:	613b      	str	r3, [r7, #16]
 80028ee:	4b1c      	ldr	r3, [pc, #112]	; (8002960 <HAL_SPI_MspInit+0x98>)
 80028f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028f2:	4a1b      	ldr	r2, [pc, #108]	; (8002960 <HAL_SPI_MspInit+0x98>)
 80028f4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80028f8:	6413      	str	r3, [r2, #64]	; 0x40
 80028fa:	4b19      	ldr	r3, [pc, #100]	; (8002960 <HAL_SPI_MspInit+0x98>)
 80028fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028fe:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002902:	613b      	str	r3, [r7, #16]
 8002904:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002906:	2300      	movs	r3, #0
 8002908:	60fb      	str	r3, [r7, #12]
 800290a:	4b15      	ldr	r3, [pc, #84]	; (8002960 <HAL_SPI_MspInit+0x98>)
 800290c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800290e:	4a14      	ldr	r2, [pc, #80]	; (8002960 <HAL_SPI_MspInit+0x98>)
 8002910:	f043 0302 	orr.w	r3, r3, #2
 8002914:	6313      	str	r3, [r2, #48]	; 0x30
 8002916:	4b12      	ldr	r3, [pc, #72]	; (8002960 <HAL_SPI_MspInit+0x98>)
 8002918:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800291a:	f003 0302 	and.w	r3, r3, #2
 800291e:	60fb      	str	r3, [r7, #12]
 8002920:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PB3     ------> SPI3_SCK
    PB4     ------> SPI3_MISO
    PB5     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8002922:	2338      	movs	r3, #56	; 0x38
 8002924:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002926:	2302      	movs	r3, #2
 8002928:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800292a:	2300      	movs	r3, #0
 800292c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800292e:	2303      	movs	r3, #3
 8002930:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8002932:	2306      	movs	r3, #6
 8002934:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002936:	f107 0314 	add.w	r3, r7, #20
 800293a:	4619      	mov	r1, r3
 800293c:	4809      	ldr	r0, [pc, #36]	; (8002964 <HAL_SPI_MspInit+0x9c>)
 800293e:	f001 fcdb 	bl	80042f8 <HAL_GPIO_Init>

    /* SPI3 interrupt Init */
    HAL_NVIC_SetPriority(SPI3_IRQn, 0, 0);
 8002942:	2200      	movs	r2, #0
 8002944:	2100      	movs	r1, #0
 8002946:	2033      	movs	r0, #51	; 0x33
 8002948:	f001 f89d 	bl	8003a86 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI3_IRQn);
 800294c:	2033      	movs	r0, #51	; 0x33
 800294e:	f001 f8b6 	bl	8003abe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8002952:	bf00      	nop
 8002954:	3728      	adds	r7, #40	; 0x28
 8002956:	46bd      	mov	sp, r7
 8002958:	bd80      	pop	{r7, pc}
 800295a:	bf00      	nop
 800295c:	40003c00 	.word	0x40003c00
 8002960:	40023800 	.word	0x40023800
 8002964:	40020400 	.word	0x40020400

08002968 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002968:	b580      	push	{r7, lr}
 800296a:	b084      	sub	sp, #16
 800296c:	af00      	add	r7, sp, #0
 800296e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	4a18      	ldr	r2, [pc, #96]	; (80029d8 <HAL_TIM_Base_MspInit+0x70>)
 8002976:	4293      	cmp	r3, r2
 8002978:	d10e      	bne.n	8002998 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800297a:	2300      	movs	r3, #0
 800297c:	60fb      	str	r3, [r7, #12]
 800297e:	4b17      	ldr	r3, [pc, #92]	; (80029dc <HAL_TIM_Base_MspInit+0x74>)
 8002980:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002982:	4a16      	ldr	r2, [pc, #88]	; (80029dc <HAL_TIM_Base_MspInit+0x74>)
 8002984:	f043 0302 	orr.w	r3, r3, #2
 8002988:	6413      	str	r3, [r2, #64]	; 0x40
 800298a:	4b14      	ldr	r3, [pc, #80]	; (80029dc <HAL_TIM_Base_MspInit+0x74>)
 800298c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800298e:	f003 0302 	and.w	r3, r3, #2
 8002992:	60fb      	str	r3, [r7, #12]
 8002994:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }

}
 8002996:	e01a      	b.n	80029ce <HAL_TIM_Base_MspInit+0x66>
  else if(htim_base->Instance==TIM11)
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	4a10      	ldr	r2, [pc, #64]	; (80029e0 <HAL_TIM_Base_MspInit+0x78>)
 800299e:	4293      	cmp	r3, r2
 80029a0:	d115      	bne.n	80029ce <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM11_CLK_ENABLE();
 80029a2:	2300      	movs	r3, #0
 80029a4:	60bb      	str	r3, [r7, #8]
 80029a6:	4b0d      	ldr	r3, [pc, #52]	; (80029dc <HAL_TIM_Base_MspInit+0x74>)
 80029a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029aa:	4a0c      	ldr	r2, [pc, #48]	; (80029dc <HAL_TIM_Base_MspInit+0x74>)
 80029ac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80029b0:	6453      	str	r3, [r2, #68]	; 0x44
 80029b2:	4b0a      	ldr	r3, [pc, #40]	; (80029dc <HAL_TIM_Base_MspInit+0x74>)
 80029b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029b6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80029ba:	60bb      	str	r3, [r7, #8]
 80029bc:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 80029be:	2200      	movs	r2, #0
 80029c0:	2100      	movs	r1, #0
 80029c2:	201a      	movs	r0, #26
 80029c4:	f001 f85f 	bl	8003a86 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 80029c8:	201a      	movs	r0, #26
 80029ca:	f001 f878 	bl	8003abe <HAL_NVIC_EnableIRQ>
}
 80029ce:	bf00      	nop
 80029d0:	3710      	adds	r7, #16
 80029d2:	46bd      	mov	sp, r7
 80029d4:	bd80      	pop	{r7, pc}
 80029d6:	bf00      	nop
 80029d8:	40000400 	.word	0x40000400
 80029dc:	40023800 	.word	0x40023800
 80029e0:	40014800 	.word	0x40014800

080029e4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80029e4:	b580      	push	{r7, lr}
 80029e6:	b08a      	sub	sp, #40	; 0x28
 80029e8:	af00      	add	r7, sp, #0
 80029ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80029ec:	f107 0314 	add.w	r3, r7, #20
 80029f0:	2200      	movs	r2, #0
 80029f2:	601a      	str	r2, [r3, #0]
 80029f4:	605a      	str	r2, [r3, #4]
 80029f6:	609a      	str	r2, [r3, #8]
 80029f8:	60da      	str	r2, [r3, #12]
 80029fa:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	4a1d      	ldr	r2, [pc, #116]	; (8002a78 <HAL_UART_MspInit+0x94>)
 8002a02:	4293      	cmp	r3, r2
 8002a04:	d133      	bne.n	8002a6e <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002a06:	2300      	movs	r3, #0
 8002a08:	613b      	str	r3, [r7, #16]
 8002a0a:	4b1c      	ldr	r3, [pc, #112]	; (8002a7c <HAL_UART_MspInit+0x98>)
 8002a0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a0e:	4a1b      	ldr	r2, [pc, #108]	; (8002a7c <HAL_UART_MspInit+0x98>)
 8002a10:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002a14:	6413      	str	r3, [r2, #64]	; 0x40
 8002a16:	4b19      	ldr	r3, [pc, #100]	; (8002a7c <HAL_UART_MspInit+0x98>)
 8002a18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a1e:	613b      	str	r3, [r7, #16]
 8002a20:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a22:	2300      	movs	r3, #0
 8002a24:	60fb      	str	r3, [r7, #12]
 8002a26:	4b15      	ldr	r3, [pc, #84]	; (8002a7c <HAL_UART_MspInit+0x98>)
 8002a28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a2a:	4a14      	ldr	r2, [pc, #80]	; (8002a7c <HAL_UART_MspInit+0x98>)
 8002a2c:	f043 0301 	orr.w	r3, r3, #1
 8002a30:	6313      	str	r3, [r2, #48]	; 0x30
 8002a32:	4b12      	ldr	r3, [pc, #72]	; (8002a7c <HAL_UART_MspInit+0x98>)
 8002a34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a36:	f003 0301 	and.w	r3, r3, #1
 8002a3a:	60fb      	str	r3, [r7, #12]
 8002a3c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8002a3e:	230c      	movs	r3, #12
 8002a40:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a42:	2302      	movs	r3, #2
 8002a44:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a46:	2300      	movs	r3, #0
 8002a48:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a4a:	2303      	movs	r3, #3
 8002a4c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002a4e:	2307      	movs	r3, #7
 8002a50:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a52:	f107 0314 	add.w	r3, r7, #20
 8002a56:	4619      	mov	r1, r3
 8002a58:	4809      	ldr	r0, [pc, #36]	; (8002a80 <HAL_UART_MspInit+0x9c>)
 8002a5a:	f001 fc4d 	bl	80042f8 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8002a5e:	2200      	movs	r2, #0
 8002a60:	2100      	movs	r1, #0
 8002a62:	2026      	movs	r0, #38	; 0x26
 8002a64:	f001 f80f 	bl	8003a86 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002a68:	2026      	movs	r0, #38	; 0x26
 8002a6a:	f001 f828 	bl	8003abe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002a6e:	bf00      	nop
 8002a70:	3728      	adds	r7, #40	; 0x28
 8002a72:	46bd      	mov	sp, r7
 8002a74:	bd80      	pop	{r7, pc}
 8002a76:	bf00      	nop
 8002a78:	40004400 	.word	0x40004400
 8002a7c:	40023800 	.word	0x40023800
 8002a80:	40020000 	.word	0x40020000

08002a84 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002a84:	b480      	push	{r7}
 8002a86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002a88:	e7fe      	b.n	8002a88 <NMI_Handler+0x4>

08002a8a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002a8a:	b480      	push	{r7}
 8002a8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002a8e:	e7fe      	b.n	8002a8e <HardFault_Handler+0x4>

08002a90 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002a90:	b480      	push	{r7}
 8002a92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002a94:	e7fe      	b.n	8002a94 <MemManage_Handler+0x4>

08002a96 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002a96:	b480      	push	{r7}
 8002a98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002a9a:	e7fe      	b.n	8002a9a <BusFault_Handler+0x4>

08002a9c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002a9c:	b480      	push	{r7}
 8002a9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002aa0:	e7fe      	b.n	8002aa0 <UsageFault_Handler+0x4>

08002aa2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002aa2:	b480      	push	{r7}
 8002aa4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002aa6:	bf00      	nop
 8002aa8:	46bd      	mov	sp, r7
 8002aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aae:	4770      	bx	lr

08002ab0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002ab0:	b480      	push	{r7}
 8002ab2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002ab4:	bf00      	nop
 8002ab6:	46bd      	mov	sp, r7
 8002ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002abc:	4770      	bx	lr

08002abe <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002abe:	b480      	push	{r7}
 8002ac0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002ac2:	bf00      	nop
 8002ac4:	46bd      	mov	sp, r7
 8002ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aca:	4770      	bx	lr

08002acc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002acc:	b580      	push	{r7, lr}
 8002ace:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002ad0:	f000 f988 	bl	8002de4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002ad4:	bf00      	nop
 8002ad6:	bd80      	pop	{r7, pc}

08002ad8 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC_IRQHandler(void)
{
 8002ad8:	b580      	push	{r7, lr}
 8002ada:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8002adc:	4802      	ldr	r0, [pc, #8]	; (8002ae8 <ADC_IRQHandler+0x10>)
 8002ade:	f000 f9e4 	bl	8002eaa <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8002ae2:	bf00      	nop
 8002ae4:	bd80      	pop	{r7, pc}
 8002ae6:	bf00      	nop
 8002ae8:	20000310 	.word	0x20000310

08002aec <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8002aec:	b580      	push	{r7, lr}
 8002aee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim11);
 8002af0:	4802      	ldr	r0, [pc, #8]	; (8002afc <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 8002af2:	f002 fedb 	bl	80058ac <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 8002af6:	bf00      	nop
 8002af8:	bd80      	pop	{r7, pc}
 8002afa:	bf00      	nop
 8002afc:	20000358 	.word	0x20000358

08002b00 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8002b00:	b580      	push	{r7, lr}
 8002b02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002b04:	4802      	ldr	r0, [pc, #8]	; (8002b10 <USART2_IRQHandler+0x10>)
 8002b06:	f003 fb71 	bl	80061ec <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8002b0a:	bf00      	nop
 8002b0c:	bd80      	pop	{r7, pc}
 8002b0e:	bf00      	nop
 8002b10:	20000400 	.word	0x20000400

08002b14 <SPI3_IRQHandler>:

/**
  * @brief This function handles SPI3 global interrupt.
  */
void SPI3_IRQHandler(void)
{
 8002b14:	b580      	push	{r7, lr}
 8002b16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI3_IRQn 0 */

  /* USER CODE END SPI3_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi3);
 8002b18:	4802      	ldr	r0, [pc, #8]	; (8002b24 <SPI3_IRQHandler+0x10>)
 8002b1a:	f002 fb2b 	bl	8005174 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI3_IRQn 1 */

  /* USER CODE END SPI3_IRQn 1 */
}
 8002b1e:	bf00      	nop
 8002b20:	bd80      	pop	{r7, pc}
 8002b22:	bf00      	nop
 8002b24:	200002b8 	.word	0x200002b8

08002b28 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8002b28:	b580      	push	{r7, lr}
 8002b2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002b2c:	4802      	ldr	r0, [pc, #8]	; (8002b38 <DMA2_Stream0_IRQHandler+0x10>)
 8002b2e:	f001 f979 	bl	8003e24 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8002b32:	bf00      	nop
 8002b34:	bd80      	pop	{r7, pc}
 8002b36:	bf00      	nop
 8002b38:	200003a0 	.word	0x200003a0

08002b3c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002b3c:	b480      	push	{r7}
 8002b3e:	af00      	add	r7, sp, #0
	return 1;
 8002b40:	2301      	movs	r3, #1
}
 8002b42:	4618      	mov	r0, r3
 8002b44:	46bd      	mov	sp, r7
 8002b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b4a:	4770      	bx	lr

08002b4c <_kill>:

int _kill(int pid, int sig)
{
 8002b4c:	b580      	push	{r7, lr}
 8002b4e:	b082      	sub	sp, #8
 8002b50:	af00      	add	r7, sp, #0
 8002b52:	6078      	str	r0, [r7, #4]
 8002b54:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002b56:	f004 f8ab 	bl	8006cb0 <__errno>
 8002b5a:	4603      	mov	r3, r0
 8002b5c:	2216      	movs	r2, #22
 8002b5e:	601a      	str	r2, [r3, #0]
	return -1;
 8002b60:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002b64:	4618      	mov	r0, r3
 8002b66:	3708      	adds	r7, #8
 8002b68:	46bd      	mov	sp, r7
 8002b6a:	bd80      	pop	{r7, pc}

08002b6c <_exit>:

void _exit (int status)
{
 8002b6c:	b580      	push	{r7, lr}
 8002b6e:	b082      	sub	sp, #8
 8002b70:	af00      	add	r7, sp, #0
 8002b72:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002b74:	f04f 31ff 	mov.w	r1, #4294967295
 8002b78:	6878      	ldr	r0, [r7, #4]
 8002b7a:	f7ff ffe7 	bl	8002b4c <_kill>
	while (1) {}		/* Make sure we hang here */
 8002b7e:	e7fe      	b.n	8002b7e <_exit+0x12>

08002b80 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002b80:	b580      	push	{r7, lr}
 8002b82:	b086      	sub	sp, #24
 8002b84:	af00      	add	r7, sp, #0
 8002b86:	60f8      	str	r0, [r7, #12]
 8002b88:	60b9      	str	r1, [r7, #8]
 8002b8a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002b8c:	2300      	movs	r3, #0
 8002b8e:	617b      	str	r3, [r7, #20]
 8002b90:	e00a      	b.n	8002ba8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002b92:	f3af 8000 	nop.w
 8002b96:	4601      	mov	r1, r0
 8002b98:	68bb      	ldr	r3, [r7, #8]
 8002b9a:	1c5a      	adds	r2, r3, #1
 8002b9c:	60ba      	str	r2, [r7, #8]
 8002b9e:	b2ca      	uxtb	r2, r1
 8002ba0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002ba2:	697b      	ldr	r3, [r7, #20]
 8002ba4:	3301      	adds	r3, #1
 8002ba6:	617b      	str	r3, [r7, #20]
 8002ba8:	697a      	ldr	r2, [r7, #20]
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	429a      	cmp	r2, r3
 8002bae:	dbf0      	blt.n	8002b92 <_read+0x12>
	}

return len;
 8002bb0:	687b      	ldr	r3, [r7, #4]
}
 8002bb2:	4618      	mov	r0, r3
 8002bb4:	3718      	adds	r7, #24
 8002bb6:	46bd      	mov	sp, r7
 8002bb8:	bd80      	pop	{r7, pc}

08002bba <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002bba:	b580      	push	{r7, lr}
 8002bbc:	b086      	sub	sp, #24
 8002bbe:	af00      	add	r7, sp, #0
 8002bc0:	60f8      	str	r0, [r7, #12]
 8002bc2:	60b9      	str	r1, [r7, #8]
 8002bc4:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002bc6:	2300      	movs	r3, #0
 8002bc8:	617b      	str	r3, [r7, #20]
 8002bca:	e009      	b.n	8002be0 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002bcc:	68bb      	ldr	r3, [r7, #8]
 8002bce:	1c5a      	adds	r2, r3, #1
 8002bd0:	60ba      	str	r2, [r7, #8]
 8002bd2:	781b      	ldrb	r3, [r3, #0]
 8002bd4:	4618      	mov	r0, r3
 8002bd6:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002bda:	697b      	ldr	r3, [r7, #20]
 8002bdc:	3301      	adds	r3, #1
 8002bde:	617b      	str	r3, [r7, #20]
 8002be0:	697a      	ldr	r2, [r7, #20]
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	429a      	cmp	r2, r3
 8002be6:	dbf1      	blt.n	8002bcc <_write+0x12>
	}
	return len;
 8002be8:	687b      	ldr	r3, [r7, #4]
}
 8002bea:	4618      	mov	r0, r3
 8002bec:	3718      	adds	r7, #24
 8002bee:	46bd      	mov	sp, r7
 8002bf0:	bd80      	pop	{r7, pc}

08002bf2 <_close>:

int _close(int file)
{
 8002bf2:	b480      	push	{r7}
 8002bf4:	b083      	sub	sp, #12
 8002bf6:	af00      	add	r7, sp, #0
 8002bf8:	6078      	str	r0, [r7, #4]
	return -1;
 8002bfa:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002bfe:	4618      	mov	r0, r3
 8002c00:	370c      	adds	r7, #12
 8002c02:	46bd      	mov	sp, r7
 8002c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c08:	4770      	bx	lr

08002c0a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002c0a:	b480      	push	{r7}
 8002c0c:	b083      	sub	sp, #12
 8002c0e:	af00      	add	r7, sp, #0
 8002c10:	6078      	str	r0, [r7, #4]
 8002c12:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002c14:	683b      	ldr	r3, [r7, #0]
 8002c16:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002c1a:	605a      	str	r2, [r3, #4]
	return 0;
 8002c1c:	2300      	movs	r3, #0
}
 8002c1e:	4618      	mov	r0, r3
 8002c20:	370c      	adds	r7, #12
 8002c22:	46bd      	mov	sp, r7
 8002c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c28:	4770      	bx	lr

08002c2a <_isatty>:

int _isatty(int file)
{
 8002c2a:	b480      	push	{r7}
 8002c2c:	b083      	sub	sp, #12
 8002c2e:	af00      	add	r7, sp, #0
 8002c30:	6078      	str	r0, [r7, #4]
	return 1;
 8002c32:	2301      	movs	r3, #1
}
 8002c34:	4618      	mov	r0, r3
 8002c36:	370c      	adds	r7, #12
 8002c38:	46bd      	mov	sp, r7
 8002c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c3e:	4770      	bx	lr

08002c40 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002c40:	b480      	push	{r7}
 8002c42:	b085      	sub	sp, #20
 8002c44:	af00      	add	r7, sp, #0
 8002c46:	60f8      	str	r0, [r7, #12]
 8002c48:	60b9      	str	r1, [r7, #8]
 8002c4a:	607a      	str	r2, [r7, #4]
	return 0;
 8002c4c:	2300      	movs	r3, #0
}
 8002c4e:	4618      	mov	r0, r3
 8002c50:	3714      	adds	r7, #20
 8002c52:	46bd      	mov	sp, r7
 8002c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c58:	4770      	bx	lr
	...

08002c5c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002c5c:	b580      	push	{r7, lr}
 8002c5e:	b086      	sub	sp, #24
 8002c60:	af00      	add	r7, sp, #0
 8002c62:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002c64:	4a14      	ldr	r2, [pc, #80]	; (8002cb8 <_sbrk+0x5c>)
 8002c66:	4b15      	ldr	r3, [pc, #84]	; (8002cbc <_sbrk+0x60>)
 8002c68:	1ad3      	subs	r3, r2, r3
 8002c6a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002c6c:	697b      	ldr	r3, [r7, #20]
 8002c6e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002c70:	4b13      	ldr	r3, [pc, #76]	; (8002cc0 <_sbrk+0x64>)
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d102      	bne.n	8002c7e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002c78:	4b11      	ldr	r3, [pc, #68]	; (8002cc0 <_sbrk+0x64>)
 8002c7a:	4a12      	ldr	r2, [pc, #72]	; (8002cc4 <_sbrk+0x68>)
 8002c7c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002c7e:	4b10      	ldr	r3, [pc, #64]	; (8002cc0 <_sbrk+0x64>)
 8002c80:	681a      	ldr	r2, [r3, #0]
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	4413      	add	r3, r2
 8002c86:	693a      	ldr	r2, [r7, #16]
 8002c88:	429a      	cmp	r2, r3
 8002c8a:	d207      	bcs.n	8002c9c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002c8c:	f004 f810 	bl	8006cb0 <__errno>
 8002c90:	4603      	mov	r3, r0
 8002c92:	220c      	movs	r2, #12
 8002c94:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002c96:	f04f 33ff 	mov.w	r3, #4294967295
 8002c9a:	e009      	b.n	8002cb0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002c9c:	4b08      	ldr	r3, [pc, #32]	; (8002cc0 <_sbrk+0x64>)
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002ca2:	4b07      	ldr	r3, [pc, #28]	; (8002cc0 <_sbrk+0x64>)
 8002ca4:	681a      	ldr	r2, [r3, #0]
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	4413      	add	r3, r2
 8002caa:	4a05      	ldr	r2, [pc, #20]	; (8002cc0 <_sbrk+0x64>)
 8002cac:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002cae:	68fb      	ldr	r3, [r7, #12]
}
 8002cb0:	4618      	mov	r0, r3
 8002cb2:	3718      	adds	r7, #24
 8002cb4:	46bd      	mov	sp, r7
 8002cb6:	bd80      	pop	{r7, pc}
 8002cb8:	20020000 	.word	0x20020000
 8002cbc:	00000400 	.word	0x00000400
 8002cc0:	20000264 	.word	0x20000264
 8002cc4:	20000458 	.word	0x20000458

08002cc8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002cc8:	b480      	push	{r7}
 8002cca:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002ccc:	4b06      	ldr	r3, [pc, #24]	; (8002ce8 <SystemInit+0x20>)
 8002cce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002cd2:	4a05      	ldr	r2, [pc, #20]	; (8002ce8 <SystemInit+0x20>)
 8002cd4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002cd8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002cdc:	bf00      	nop
 8002cde:	46bd      	mov	sp, r7
 8002ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce4:	4770      	bx	lr
 8002ce6:	bf00      	nop
 8002ce8:	e000ed00 	.word	0xe000ed00

08002cec <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8002cec:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002d24 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002cf0:	480d      	ldr	r0, [pc, #52]	; (8002d28 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002cf2:	490e      	ldr	r1, [pc, #56]	; (8002d2c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002cf4:	4a0e      	ldr	r2, [pc, #56]	; (8002d30 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002cf6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002cf8:	e002      	b.n	8002d00 <LoopCopyDataInit>

08002cfa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002cfa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002cfc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002cfe:	3304      	adds	r3, #4

08002d00 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002d00:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002d02:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002d04:	d3f9      	bcc.n	8002cfa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002d06:	4a0b      	ldr	r2, [pc, #44]	; (8002d34 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002d08:	4c0b      	ldr	r4, [pc, #44]	; (8002d38 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002d0a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002d0c:	e001      	b.n	8002d12 <LoopFillZerobss>

08002d0e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002d0e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002d10:	3204      	adds	r2, #4

08002d12 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002d12:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002d14:	d3fb      	bcc.n	8002d0e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002d16:	f7ff ffd7 	bl	8002cc8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002d1a:	f003 ffcf 	bl	8006cbc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002d1e:	f7fe fa45 	bl	80011ac <main>
  bx  lr    
 8002d22:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8002d24:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002d28:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002d2c:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 8002d30:	0800b5f8 	.word	0x0800b5f8
  ldr r2, =_sbss
 8002d34:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 8002d38:	20000458 	.word	0x20000458

08002d3c <DMA1_Stream0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002d3c:	e7fe      	b.n	8002d3c <DMA1_Stream0_IRQHandler>
	...

08002d40 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002d40:	b580      	push	{r7, lr}
 8002d42:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002d44:	4b0e      	ldr	r3, [pc, #56]	; (8002d80 <HAL_Init+0x40>)
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	4a0d      	ldr	r2, [pc, #52]	; (8002d80 <HAL_Init+0x40>)
 8002d4a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002d4e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002d50:	4b0b      	ldr	r3, [pc, #44]	; (8002d80 <HAL_Init+0x40>)
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	4a0a      	ldr	r2, [pc, #40]	; (8002d80 <HAL_Init+0x40>)
 8002d56:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002d5a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002d5c:	4b08      	ldr	r3, [pc, #32]	; (8002d80 <HAL_Init+0x40>)
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	4a07      	ldr	r2, [pc, #28]	; (8002d80 <HAL_Init+0x40>)
 8002d62:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d66:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002d68:	2003      	movs	r0, #3
 8002d6a:	f000 fe81 	bl	8003a70 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002d6e:	2000      	movs	r0, #0
 8002d70:	f000 f808 	bl	8002d84 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002d74:	f7ff fd00 	bl	8002778 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002d78:	2300      	movs	r3, #0
}
 8002d7a:	4618      	mov	r0, r3
 8002d7c:	bd80      	pop	{r7, pc}
 8002d7e:	bf00      	nop
 8002d80:	40023c00 	.word	0x40023c00

08002d84 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002d84:	b580      	push	{r7, lr}
 8002d86:	b082      	sub	sp, #8
 8002d88:	af00      	add	r7, sp, #0
 8002d8a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002d8c:	4b12      	ldr	r3, [pc, #72]	; (8002dd8 <HAL_InitTick+0x54>)
 8002d8e:	681a      	ldr	r2, [r3, #0]
 8002d90:	4b12      	ldr	r3, [pc, #72]	; (8002ddc <HAL_InitTick+0x58>)
 8002d92:	781b      	ldrb	r3, [r3, #0]
 8002d94:	4619      	mov	r1, r3
 8002d96:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002d9a:	fbb3 f3f1 	udiv	r3, r3, r1
 8002d9e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002da2:	4618      	mov	r0, r3
 8002da4:	f000 fe99 	bl	8003ada <HAL_SYSTICK_Config>
 8002da8:	4603      	mov	r3, r0
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d001      	beq.n	8002db2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002dae:	2301      	movs	r3, #1
 8002db0:	e00e      	b.n	8002dd0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	2b0f      	cmp	r3, #15
 8002db6:	d80a      	bhi.n	8002dce <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002db8:	2200      	movs	r2, #0
 8002dba:	6879      	ldr	r1, [r7, #4]
 8002dbc:	f04f 30ff 	mov.w	r0, #4294967295
 8002dc0:	f000 fe61 	bl	8003a86 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002dc4:	4a06      	ldr	r2, [pc, #24]	; (8002de0 <HAL_InitTick+0x5c>)
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002dca:	2300      	movs	r3, #0
 8002dcc:	e000      	b.n	8002dd0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002dce:	2301      	movs	r3, #1
}
 8002dd0:	4618      	mov	r0, r3
 8002dd2:	3708      	adds	r7, #8
 8002dd4:	46bd      	mov	sp, r7
 8002dd6:	bd80      	pop	{r7, pc}
 8002dd8:	20000004 	.word	0x20000004
 8002ddc:	2000000c 	.word	0x2000000c
 8002de0:	20000008 	.word	0x20000008

08002de4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002de4:	b480      	push	{r7}
 8002de6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002de8:	4b06      	ldr	r3, [pc, #24]	; (8002e04 <HAL_IncTick+0x20>)
 8002dea:	781b      	ldrb	r3, [r3, #0]
 8002dec:	461a      	mov	r2, r3
 8002dee:	4b06      	ldr	r3, [pc, #24]	; (8002e08 <HAL_IncTick+0x24>)
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	4413      	add	r3, r2
 8002df4:	4a04      	ldr	r2, [pc, #16]	; (8002e08 <HAL_IncTick+0x24>)
 8002df6:	6013      	str	r3, [r2, #0]
}
 8002df8:	bf00      	nop
 8002dfa:	46bd      	mov	sp, r7
 8002dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e00:	4770      	bx	lr
 8002e02:	bf00      	nop
 8002e04:	2000000c 	.word	0x2000000c
 8002e08:	20000444 	.word	0x20000444

08002e0c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002e0c:	b480      	push	{r7}
 8002e0e:	af00      	add	r7, sp, #0
  return uwTick;
 8002e10:	4b03      	ldr	r3, [pc, #12]	; (8002e20 <HAL_GetTick+0x14>)
 8002e12:	681b      	ldr	r3, [r3, #0]
}
 8002e14:	4618      	mov	r0, r3
 8002e16:	46bd      	mov	sp, r7
 8002e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e1c:	4770      	bx	lr
 8002e1e:	bf00      	nop
 8002e20:	20000444 	.word	0x20000444

08002e24 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002e24:	b580      	push	{r7, lr}
 8002e26:	b084      	sub	sp, #16
 8002e28:	af00      	add	r7, sp, #0
 8002e2a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002e2c:	2300      	movs	r3, #0
 8002e2e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d101      	bne.n	8002e3a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002e36:	2301      	movs	r3, #1
 8002e38:	e033      	b.n	8002ea2 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d109      	bne.n	8002e56 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002e42:	6878      	ldr	r0, [r7, #4]
 8002e44:	f7ff fcc0 	bl	80027c8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	2200      	movs	r2, #0
 8002e4c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	2200      	movs	r2, #0
 8002e52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e5a:	f003 0310 	and.w	r3, r3, #16
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d118      	bne.n	8002e94 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e66:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002e6a:	f023 0302 	bic.w	r3, r3, #2
 8002e6e:	f043 0202 	orr.w	r2, r3, #2
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8002e76:	6878      	ldr	r0, [r7, #4]
 8002e78:	f000 fba2 	bl	80035c0 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	2200      	movs	r2, #0
 8002e80:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e86:	f023 0303 	bic.w	r3, r3, #3
 8002e8a:	f043 0201 	orr.w	r2, r3, #1
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	641a      	str	r2, [r3, #64]	; 0x40
 8002e92:	e001      	b.n	8002e98 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002e94:	2301      	movs	r3, #1
 8002e96:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	2200      	movs	r2, #0
 8002e9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002ea0:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ea2:	4618      	mov	r0, r3
 8002ea4:	3710      	adds	r7, #16
 8002ea6:	46bd      	mov	sp, r7
 8002ea8:	bd80      	pop	{r7, pc}

08002eaa <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8002eaa:	b580      	push	{r7, lr}
 8002eac:	b084      	sub	sp, #16
 8002eae:	af00      	add	r7, sp, #0
 8002eb0:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8002eb2:	2300      	movs	r3, #0
 8002eb4:	60fb      	str	r3, [r7, #12]
 8002eb6:	2300      	movs	r3, #0
 8002eb8:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC);
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	f003 0302 	and.w	r3, r3, #2
 8002ec4:	2b02      	cmp	r3, #2
 8002ec6:	bf0c      	ite	eq
 8002ec8:	2301      	moveq	r3, #1
 8002eca:	2300      	movne	r3, #0
 8002ecc:	b2db      	uxtb	r3, r3
 8002ece:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC);
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	685b      	ldr	r3, [r3, #4]
 8002ed6:	f003 0320 	and.w	r3, r3, #32
 8002eda:	2b20      	cmp	r3, #32
 8002edc:	bf0c      	ite	eq
 8002ede:	2301      	moveq	r3, #1
 8002ee0:	2300      	movne	r3, #0
 8002ee2:	b2db      	uxtb	r3, r3
 8002ee4:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d049      	beq.n	8002f80 <HAL_ADC_IRQHandler+0xd6>
 8002eec:	68bb      	ldr	r3, [r7, #8]
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d046      	beq.n	8002f80 <HAL_ADC_IRQHandler+0xd6>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ef6:	f003 0310 	and.w	r3, r3, #16
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d105      	bne.n	8002f0a <HAL_ADC_IRQHandler+0x60>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f02:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	689b      	ldr	r3, [r3, #8]
 8002f10:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d12b      	bne.n	8002f70 <HAL_ADC_IRQHandler+0xc6>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d127      	bne.n	8002f70 <HAL_ADC_IRQHandler+0xc6>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f26:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d006      	beq.n	8002f3c <HAL_ADC_IRQHandler+0x92>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	689b      	ldr	r3, [r3, #8]
 8002f34:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d119      	bne.n	8002f70 <HAL_ADC_IRQHandler+0xc6>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	685a      	ldr	r2, [r3, #4]
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	f022 0220 	bic.w	r2, r2, #32
 8002f4a:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f50:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f5c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d105      	bne.n	8002f70 <HAL_ADC_IRQHandler+0xc6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f68:	f043 0201 	orr.w	r2, r3, #1
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002f70:	6878      	ldr	r0, [r7, #4]
 8002f72:	f000 f9cb 	bl	800330c <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	f06f 0212 	mvn.w	r2, #18
 8002f7e:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC);
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	f003 0304 	and.w	r3, r3, #4
 8002f8a:	2b04      	cmp	r3, #4
 8002f8c:	bf0c      	ite	eq
 8002f8e:	2301      	moveq	r3, #1
 8002f90:	2300      	movne	r3, #0
 8002f92:	b2db      	uxtb	r3, r3
 8002f94:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC);                               
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	685b      	ldr	r3, [r3, #4]
 8002f9c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002fa0:	2b80      	cmp	r3, #128	; 0x80
 8002fa2:	bf0c      	ite	eq
 8002fa4:	2301      	moveq	r3, #1
 8002fa6:	2300      	movne	r3, #0
 8002fa8:	b2db      	uxtb	r3, r3
 8002faa:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d057      	beq.n	8003062 <HAL_ADC_IRQHandler+0x1b8>
 8002fb2:	68bb      	ldr	r3, [r7, #8]
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d054      	beq.n	8003062 <HAL_ADC_IRQHandler+0x1b8>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fbc:	f003 0310 	and.w	r3, r3, #16
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d105      	bne.n	8002fd0 <HAL_ADC_IRQHandler+0x126>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fc8:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	689b      	ldr	r3, [r3, #8]
 8002fd6:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d139      	bne.n	8003052 <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fe4:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d006      	beq.n	8002ffa <HAL_ADC_IRQHandler+0x150>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	689b      	ldr	r3, [r3, #8]
 8002ff2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d12b      	bne.n	8003052 <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	685b      	ldr	r3, [r3, #4]
 8003000:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8003004:	2b00      	cmp	r3, #0
 8003006:	d124      	bne.n	8003052 <HAL_ADC_IRQHandler+0x1a8>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	689b      	ldr	r3, [r3, #8]
 800300e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8003012:	2b00      	cmp	r3, #0
 8003014:	d11d      	bne.n	8003052 <HAL_ADC_IRQHandler+0x1a8>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 800301a:	2b00      	cmp	r3, #0
 800301c:	d119      	bne.n	8003052 <HAL_ADC_IRQHandler+0x1a8>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	685a      	ldr	r2, [r3, #4]
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800302c:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003032:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800303e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003042:	2b00      	cmp	r3, #0
 8003044:	d105      	bne.n	8003052 <HAL_ADC_IRQHandler+0x1a8>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800304a:	f043 0201 	orr.w	r2, r3, #1
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	641a      	str	r2, [r3, #64]	; 0x40
    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8003052:	6878      	ldr	r0, [r7, #4]
 8003054:	f000 fc32 	bl	80038bc <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	f06f 020c 	mvn.w	r2, #12
 8003060:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD);
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	f003 0301 	and.w	r3, r3, #1
 800306c:	2b01      	cmp	r3, #1
 800306e:	bf0c      	ite	eq
 8003070:	2301      	moveq	r3, #1
 8003072:	2300      	movne	r3, #0
 8003074:	b2db      	uxtb	r3, r3
 8003076:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD);                          
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	685b      	ldr	r3, [r3, #4]
 800307e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003082:	2b40      	cmp	r3, #64	; 0x40
 8003084:	bf0c      	ite	eq
 8003086:	2301      	moveq	r3, #1
 8003088:	2300      	movne	r3, #0
 800308a:	b2db      	uxtb	r3, r3
 800308c:	60bb      	str	r3, [r7, #8]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	2b00      	cmp	r3, #0
 8003092:	d017      	beq.n	80030c4 <HAL_ADC_IRQHandler+0x21a>
 8003094:	68bb      	ldr	r3, [r7, #8]
 8003096:	2b00      	cmp	r3, #0
 8003098:	d014      	beq.n	80030c4 <HAL_ADC_IRQHandler+0x21a>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	f003 0301 	and.w	r3, r3, #1
 80030a4:	2b01      	cmp	r3, #1
 80030a6:	d10d      	bne.n	80030c4 <HAL_ADC_IRQHandler+0x21a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030ac:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 80030b4:	6878      	ldr	r0, [r7, #4]
 80030b6:	f000 f93d 	bl	8003334 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	f06f 0201 	mvn.w	r2, #1
 80030c2:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR);
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	f003 0320 	and.w	r3, r3, #32
 80030ce:	2b20      	cmp	r3, #32
 80030d0:	bf0c      	ite	eq
 80030d2:	2301      	moveq	r3, #1
 80030d4:	2300      	movne	r3, #0
 80030d6:	b2db      	uxtb	r3, r3
 80030d8:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR);
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	685b      	ldr	r3, [r3, #4]
 80030e0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80030e4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80030e8:	bf0c      	ite	eq
 80030ea:	2301      	moveq	r3, #1
 80030ec:	2300      	movne	r3, #0
 80030ee:	b2db      	uxtb	r3, r3
 80030f0:	60bb      	str	r3, [r7, #8]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d015      	beq.n	8003124 <HAL_ADC_IRQHandler+0x27a>
 80030f8:	68bb      	ldr	r3, [r7, #8]
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d012      	beq.n	8003124 <HAL_ADC_IRQHandler+0x27a>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003102:	f043 0202 	orr.w	r2, r3, #2
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	f06f 0220 	mvn.w	r2, #32
 8003112:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8003114:	6878      	ldr	r0, [r7, #4]
 8003116:	f000 f917 	bl	8003348 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	f06f 0220 	mvn.w	r2, #32
 8003122:	601a      	str	r2, [r3, #0]
  }
}
 8003124:	bf00      	nop
 8003126:	3710      	adds	r7, #16
 8003128:	46bd      	mov	sp, r7
 800312a:	bd80      	pop	{r7, pc}

0800312c <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 800312c:	b580      	push	{r7, lr}
 800312e:	b086      	sub	sp, #24
 8003130:	af00      	add	r7, sp, #0
 8003132:	60f8      	str	r0, [r7, #12]
 8003134:	60b9      	str	r1, [r7, #8]
 8003136:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8003138:	2300      	movs	r3, #0
 800313a:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003142:	2b01      	cmp	r3, #1
 8003144:	d101      	bne.n	800314a <HAL_ADC_Start_DMA+0x1e>
 8003146:	2302      	movs	r3, #2
 8003148:	e0ce      	b.n	80032e8 <HAL_ADC_Start_DMA+0x1bc>
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	2201      	movs	r2, #1
 800314e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	689b      	ldr	r3, [r3, #8]
 8003158:	f003 0301 	and.w	r3, r3, #1
 800315c:	2b01      	cmp	r3, #1
 800315e:	d018      	beq.n	8003192 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	689a      	ldr	r2, [r3, #8]
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	f042 0201 	orr.w	r2, r2, #1
 800316e:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8003170:	4b5f      	ldr	r3, [pc, #380]	; (80032f0 <HAL_ADC_Start_DMA+0x1c4>)
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	4a5f      	ldr	r2, [pc, #380]	; (80032f4 <HAL_ADC_Start_DMA+0x1c8>)
 8003176:	fba2 2303 	umull	r2, r3, r2, r3
 800317a:	0c9a      	lsrs	r2, r3, #18
 800317c:	4613      	mov	r3, r2
 800317e:	005b      	lsls	r3, r3, #1
 8003180:	4413      	add	r3, r2
 8003182:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8003184:	e002      	b.n	800318c <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8003186:	693b      	ldr	r3, [r7, #16]
 8003188:	3b01      	subs	r3, #1
 800318a:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 800318c:	693b      	ldr	r3, [r7, #16]
 800318e:	2b00      	cmp	r3, #0
 8003190:	d1f9      	bne.n	8003186 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	689b      	ldr	r3, [r3, #8]
 8003198:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800319c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80031a0:	d107      	bne.n	80031b2 <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	689a      	ldr	r2, [r3, #8]
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80031b0:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	689b      	ldr	r3, [r3, #8]
 80031b8:	f003 0301 	and.w	r3, r3, #1
 80031bc:	2b01      	cmp	r3, #1
 80031be:	f040 8086 	bne.w	80032ce <HAL_ADC_Start_DMA+0x1a2>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031c6:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80031ca:	f023 0301 	bic.w	r3, r3, #1
 80031ce:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	685b      	ldr	r3, [r3, #4]
 80031dc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d007      	beq.n	80031f4 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031e8:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80031ec:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031f8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80031fc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003200:	d106      	bne.n	8003210 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003206:	f023 0206 	bic.w	r2, r3, #6
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	645a      	str	r2, [r3, #68]	; 0x44
 800320e:	e002      	b.n	8003216 <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	2200      	movs	r2, #0
 8003214:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	2200      	movs	r2, #0
 800321a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800321e:	4b36      	ldr	r3, [pc, #216]	; (80032f8 <HAL_ADC_Start_DMA+0x1cc>)
 8003220:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003226:	4a35      	ldr	r2, [pc, #212]	; (80032fc <HAL_ADC_Start_DMA+0x1d0>)
 8003228:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800322e:	4a34      	ldr	r2, [pc, #208]	; (8003300 <HAL_ADC_Start_DMA+0x1d4>)
 8003230:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003236:	4a33      	ldr	r2, [pc, #204]	; (8003304 <HAL_ADC_Start_DMA+0x1d8>)
 8003238:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8003242:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	685a      	ldr	r2, [r3, #4]
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8003252:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	689a      	ldr	r2, [r3, #8]
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003262:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	334c      	adds	r3, #76	; 0x4c
 800326e:	4619      	mov	r1, r3
 8003270:	68ba      	ldr	r2, [r7, #8]
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	f000 fcec 	bl	8003c50 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8003278:	697b      	ldr	r3, [r7, #20]
 800327a:	685b      	ldr	r3, [r3, #4]
 800327c:	f003 031f 	and.w	r3, r3, #31
 8003280:	2b00      	cmp	r3, #0
 8003282:	d10f      	bne.n	80032a4 <HAL_ADC_Start_DMA+0x178>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	689b      	ldr	r3, [r3, #8]
 800328a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800328e:	2b00      	cmp	r3, #0
 8003290:	d129      	bne.n	80032e6 <HAL_ADC_Start_DMA+0x1ba>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	689a      	ldr	r2, [r3, #8]
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80032a0:	609a      	str	r2, [r3, #8]
 80032a2:	e020      	b.n	80032e6 <HAL_ADC_Start_DMA+0x1ba>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	4a17      	ldr	r2, [pc, #92]	; (8003308 <HAL_ADC_Start_DMA+0x1dc>)
 80032aa:	4293      	cmp	r3, r2
 80032ac:	d11b      	bne.n	80032e6 <HAL_ADC_Start_DMA+0x1ba>
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	689b      	ldr	r3, [r3, #8]
 80032b4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d114      	bne.n	80032e6 <HAL_ADC_Start_DMA+0x1ba>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	689a      	ldr	r2, [r3, #8]
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80032ca:	609a      	str	r2, [r3, #8]
 80032cc:	e00b      	b.n	80032e6 <HAL_ADC_Start_DMA+0x1ba>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032d2:	f043 0210 	orr.w	r2, r3, #16
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032de:	f043 0201 	orr.w	r2, r3, #1
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 80032e6:	2300      	movs	r3, #0
}
 80032e8:	4618      	mov	r0, r3
 80032ea:	3718      	adds	r7, #24
 80032ec:	46bd      	mov	sp, r7
 80032ee:	bd80      	pop	{r7, pc}
 80032f0:	20000004 	.word	0x20000004
 80032f4:	431bde83 	.word	0x431bde83
 80032f8:	40012300 	.word	0x40012300
 80032fc:	080037b9 	.word	0x080037b9
 8003300:	08003873 	.word	0x08003873
 8003304:	0800388f 	.word	0x0800388f
 8003308:	40012000 	.word	0x40012000

0800330c <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 800330c:	b480      	push	{r7}
 800330e:	b083      	sub	sp, #12
 8003310:	af00      	add	r7, sp, #0
 8003312:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8003314:	bf00      	nop
 8003316:	370c      	adds	r7, #12
 8003318:	46bd      	mov	sp, r7
 800331a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800331e:	4770      	bx	lr

08003320 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8003320:	b480      	push	{r7}
 8003322:	b083      	sub	sp, #12
 8003324:	af00      	add	r7, sp, #0
 8003326:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8003328:	bf00      	nop
 800332a:	370c      	adds	r7, #12
 800332c:	46bd      	mov	sp, r7
 800332e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003332:	4770      	bx	lr

08003334 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8003334:	b480      	push	{r7}
 8003336:	b083      	sub	sp, #12
 8003338:	af00      	add	r7, sp, #0
 800333a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 800333c:	bf00      	nop
 800333e:	370c      	adds	r7, #12
 8003340:	46bd      	mov	sp, r7
 8003342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003346:	4770      	bx	lr

08003348 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003348:	b480      	push	{r7}
 800334a:	b083      	sub	sp, #12
 800334c:	af00      	add	r7, sp, #0
 800334e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8003350:	bf00      	nop
 8003352:	370c      	adds	r7, #12
 8003354:	46bd      	mov	sp, r7
 8003356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800335a:	4770      	bx	lr

0800335c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800335c:	b480      	push	{r7}
 800335e:	b085      	sub	sp, #20
 8003360:	af00      	add	r7, sp, #0
 8003362:	6078      	str	r0, [r7, #4]
 8003364:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8003366:	2300      	movs	r3, #0
 8003368:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003370:	2b01      	cmp	r3, #1
 8003372:	d101      	bne.n	8003378 <HAL_ADC_ConfigChannel+0x1c>
 8003374:	2302      	movs	r3, #2
 8003376:	e113      	b.n	80035a0 <HAL_ADC_ConfigChannel+0x244>
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	2201      	movs	r2, #1
 800337c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8003380:	683b      	ldr	r3, [r7, #0]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	2b09      	cmp	r3, #9
 8003386:	d925      	bls.n	80033d4 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	68d9      	ldr	r1, [r3, #12]
 800338e:	683b      	ldr	r3, [r7, #0]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	b29b      	uxth	r3, r3
 8003394:	461a      	mov	r2, r3
 8003396:	4613      	mov	r3, r2
 8003398:	005b      	lsls	r3, r3, #1
 800339a:	4413      	add	r3, r2
 800339c:	3b1e      	subs	r3, #30
 800339e:	2207      	movs	r2, #7
 80033a0:	fa02 f303 	lsl.w	r3, r2, r3
 80033a4:	43da      	mvns	r2, r3
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	400a      	ands	r2, r1
 80033ac:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	68d9      	ldr	r1, [r3, #12]
 80033b4:	683b      	ldr	r3, [r7, #0]
 80033b6:	689a      	ldr	r2, [r3, #8]
 80033b8:	683b      	ldr	r3, [r7, #0]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	b29b      	uxth	r3, r3
 80033be:	4618      	mov	r0, r3
 80033c0:	4603      	mov	r3, r0
 80033c2:	005b      	lsls	r3, r3, #1
 80033c4:	4403      	add	r3, r0
 80033c6:	3b1e      	subs	r3, #30
 80033c8:	409a      	lsls	r2, r3
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	430a      	orrs	r2, r1
 80033d0:	60da      	str	r2, [r3, #12]
 80033d2:	e022      	b.n	800341a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	6919      	ldr	r1, [r3, #16]
 80033da:	683b      	ldr	r3, [r7, #0]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	b29b      	uxth	r3, r3
 80033e0:	461a      	mov	r2, r3
 80033e2:	4613      	mov	r3, r2
 80033e4:	005b      	lsls	r3, r3, #1
 80033e6:	4413      	add	r3, r2
 80033e8:	2207      	movs	r2, #7
 80033ea:	fa02 f303 	lsl.w	r3, r2, r3
 80033ee:	43da      	mvns	r2, r3
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	400a      	ands	r2, r1
 80033f6:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	6919      	ldr	r1, [r3, #16]
 80033fe:	683b      	ldr	r3, [r7, #0]
 8003400:	689a      	ldr	r2, [r3, #8]
 8003402:	683b      	ldr	r3, [r7, #0]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	b29b      	uxth	r3, r3
 8003408:	4618      	mov	r0, r3
 800340a:	4603      	mov	r3, r0
 800340c:	005b      	lsls	r3, r3, #1
 800340e:	4403      	add	r3, r0
 8003410:	409a      	lsls	r2, r3
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	430a      	orrs	r2, r1
 8003418:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800341a:	683b      	ldr	r3, [r7, #0]
 800341c:	685b      	ldr	r3, [r3, #4]
 800341e:	2b06      	cmp	r3, #6
 8003420:	d824      	bhi.n	800346c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003428:	683b      	ldr	r3, [r7, #0]
 800342a:	685a      	ldr	r2, [r3, #4]
 800342c:	4613      	mov	r3, r2
 800342e:	009b      	lsls	r3, r3, #2
 8003430:	4413      	add	r3, r2
 8003432:	3b05      	subs	r3, #5
 8003434:	221f      	movs	r2, #31
 8003436:	fa02 f303 	lsl.w	r3, r2, r3
 800343a:	43da      	mvns	r2, r3
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	400a      	ands	r2, r1
 8003442:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800344a:	683b      	ldr	r3, [r7, #0]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	b29b      	uxth	r3, r3
 8003450:	4618      	mov	r0, r3
 8003452:	683b      	ldr	r3, [r7, #0]
 8003454:	685a      	ldr	r2, [r3, #4]
 8003456:	4613      	mov	r3, r2
 8003458:	009b      	lsls	r3, r3, #2
 800345a:	4413      	add	r3, r2
 800345c:	3b05      	subs	r3, #5
 800345e:	fa00 f203 	lsl.w	r2, r0, r3
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	430a      	orrs	r2, r1
 8003468:	635a      	str	r2, [r3, #52]	; 0x34
 800346a:	e04c      	b.n	8003506 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800346c:	683b      	ldr	r3, [r7, #0]
 800346e:	685b      	ldr	r3, [r3, #4]
 8003470:	2b0c      	cmp	r3, #12
 8003472:	d824      	bhi.n	80034be <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800347a:	683b      	ldr	r3, [r7, #0]
 800347c:	685a      	ldr	r2, [r3, #4]
 800347e:	4613      	mov	r3, r2
 8003480:	009b      	lsls	r3, r3, #2
 8003482:	4413      	add	r3, r2
 8003484:	3b23      	subs	r3, #35	; 0x23
 8003486:	221f      	movs	r2, #31
 8003488:	fa02 f303 	lsl.w	r3, r2, r3
 800348c:	43da      	mvns	r2, r3
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	400a      	ands	r2, r1
 8003494:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800349c:	683b      	ldr	r3, [r7, #0]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	b29b      	uxth	r3, r3
 80034a2:	4618      	mov	r0, r3
 80034a4:	683b      	ldr	r3, [r7, #0]
 80034a6:	685a      	ldr	r2, [r3, #4]
 80034a8:	4613      	mov	r3, r2
 80034aa:	009b      	lsls	r3, r3, #2
 80034ac:	4413      	add	r3, r2
 80034ae:	3b23      	subs	r3, #35	; 0x23
 80034b0:	fa00 f203 	lsl.w	r2, r0, r3
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	430a      	orrs	r2, r1
 80034ba:	631a      	str	r2, [r3, #48]	; 0x30
 80034bc:	e023      	b.n	8003506 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80034c4:	683b      	ldr	r3, [r7, #0]
 80034c6:	685a      	ldr	r2, [r3, #4]
 80034c8:	4613      	mov	r3, r2
 80034ca:	009b      	lsls	r3, r3, #2
 80034cc:	4413      	add	r3, r2
 80034ce:	3b41      	subs	r3, #65	; 0x41
 80034d0:	221f      	movs	r2, #31
 80034d2:	fa02 f303 	lsl.w	r3, r2, r3
 80034d6:	43da      	mvns	r2, r3
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	400a      	ands	r2, r1
 80034de:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80034e6:	683b      	ldr	r3, [r7, #0]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	b29b      	uxth	r3, r3
 80034ec:	4618      	mov	r0, r3
 80034ee:	683b      	ldr	r3, [r7, #0]
 80034f0:	685a      	ldr	r2, [r3, #4]
 80034f2:	4613      	mov	r3, r2
 80034f4:	009b      	lsls	r3, r3, #2
 80034f6:	4413      	add	r3, r2
 80034f8:	3b41      	subs	r3, #65	; 0x41
 80034fa:	fa00 f203 	lsl.w	r2, r0, r3
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	430a      	orrs	r2, r1
 8003504:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003506:	4b29      	ldr	r3, [pc, #164]	; (80035ac <HAL_ADC_ConfigChannel+0x250>)
 8003508:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	4a28      	ldr	r2, [pc, #160]	; (80035b0 <HAL_ADC_ConfigChannel+0x254>)
 8003510:	4293      	cmp	r3, r2
 8003512:	d10f      	bne.n	8003534 <HAL_ADC_ConfigChannel+0x1d8>
 8003514:	683b      	ldr	r3, [r7, #0]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	2b12      	cmp	r3, #18
 800351a:	d10b      	bne.n	8003534 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	685b      	ldr	r3, [r3, #4]
 8003520:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	685b      	ldr	r3, [r3, #4]
 800352c:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	4a1d      	ldr	r2, [pc, #116]	; (80035b0 <HAL_ADC_ConfigChannel+0x254>)
 800353a:	4293      	cmp	r3, r2
 800353c:	d12b      	bne.n	8003596 <HAL_ADC_ConfigChannel+0x23a>
 800353e:	683b      	ldr	r3, [r7, #0]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	4a1c      	ldr	r2, [pc, #112]	; (80035b4 <HAL_ADC_ConfigChannel+0x258>)
 8003544:	4293      	cmp	r3, r2
 8003546:	d003      	beq.n	8003550 <HAL_ADC_ConfigChannel+0x1f4>
 8003548:	683b      	ldr	r3, [r7, #0]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	2b11      	cmp	r3, #17
 800354e:	d122      	bne.n	8003596 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	685b      	ldr	r3, [r3, #4]
 8003554:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	685b      	ldr	r3, [r3, #4]
 8003560:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8003568:	683b      	ldr	r3, [r7, #0]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	4a11      	ldr	r2, [pc, #68]	; (80035b4 <HAL_ADC_ConfigChannel+0x258>)
 800356e:	4293      	cmp	r3, r2
 8003570:	d111      	bne.n	8003596 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003572:	4b11      	ldr	r3, [pc, #68]	; (80035b8 <HAL_ADC_ConfigChannel+0x25c>)
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	4a11      	ldr	r2, [pc, #68]	; (80035bc <HAL_ADC_ConfigChannel+0x260>)
 8003578:	fba2 2303 	umull	r2, r3, r2, r3
 800357c:	0c9a      	lsrs	r2, r3, #18
 800357e:	4613      	mov	r3, r2
 8003580:	009b      	lsls	r3, r3, #2
 8003582:	4413      	add	r3, r2
 8003584:	005b      	lsls	r3, r3, #1
 8003586:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003588:	e002      	b.n	8003590 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 800358a:	68bb      	ldr	r3, [r7, #8]
 800358c:	3b01      	subs	r3, #1
 800358e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003590:	68bb      	ldr	r3, [r7, #8]
 8003592:	2b00      	cmp	r3, #0
 8003594:	d1f9      	bne.n	800358a <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	2200      	movs	r2, #0
 800359a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800359e:	2300      	movs	r3, #0
}
 80035a0:	4618      	mov	r0, r3
 80035a2:	3714      	adds	r7, #20
 80035a4:	46bd      	mov	sp, r7
 80035a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035aa:	4770      	bx	lr
 80035ac:	40012300 	.word	0x40012300
 80035b0:	40012000 	.word	0x40012000
 80035b4:	10000012 	.word	0x10000012
 80035b8:	20000004 	.word	0x20000004
 80035bc:	431bde83 	.word	0x431bde83

080035c0 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80035c0:	b480      	push	{r7}
 80035c2:	b085      	sub	sp, #20
 80035c4:	af00      	add	r7, sp, #0
 80035c6:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80035c8:	4b79      	ldr	r3, [pc, #484]	; (80037b0 <ADC_Init+0x1f0>)
 80035ca:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	685b      	ldr	r3, [r3, #4]
 80035d0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	685a      	ldr	r2, [r3, #4]
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	685b      	ldr	r3, [r3, #4]
 80035e0:	431a      	orrs	r2, r3
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	685a      	ldr	r2, [r3, #4]
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80035f4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	6859      	ldr	r1, [r3, #4]
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	691b      	ldr	r3, [r3, #16]
 8003600:	021a      	lsls	r2, r3, #8
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	430a      	orrs	r2, r1
 8003608:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	685a      	ldr	r2, [r3, #4]
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8003618:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	6859      	ldr	r1, [r3, #4]
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	689a      	ldr	r2, [r3, #8]
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	430a      	orrs	r2, r1
 800362a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	689a      	ldr	r2, [r3, #8]
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800363a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	6899      	ldr	r1, [r3, #8]
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	68da      	ldr	r2, [r3, #12]
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	430a      	orrs	r2, r1
 800364c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003652:	4a58      	ldr	r2, [pc, #352]	; (80037b4 <ADC_Init+0x1f4>)
 8003654:	4293      	cmp	r3, r2
 8003656:	d022      	beq.n	800369e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	689a      	ldr	r2, [r3, #8]
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003666:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	6899      	ldr	r1, [r3, #8]
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	430a      	orrs	r2, r1
 8003678:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	689a      	ldr	r2, [r3, #8]
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003688:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	6899      	ldr	r1, [r3, #8]
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	430a      	orrs	r2, r1
 800369a:	609a      	str	r2, [r3, #8]
 800369c:	e00f      	b.n	80036be <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	689a      	ldr	r2, [r3, #8]
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80036ac:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	689a      	ldr	r2, [r3, #8]
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80036bc:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	689a      	ldr	r2, [r3, #8]
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	f022 0202 	bic.w	r2, r2, #2
 80036cc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	6899      	ldr	r1, [r3, #8]
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	7e1b      	ldrb	r3, [r3, #24]
 80036d8:	005a      	lsls	r2, r3, #1
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	430a      	orrs	r2, r1
 80036e0:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d01b      	beq.n	8003724 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	685a      	ldr	r2, [r3, #4]
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80036fa:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	685a      	ldr	r2, [r3, #4]
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800370a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	6859      	ldr	r1, [r3, #4]
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003716:	3b01      	subs	r3, #1
 8003718:	035a      	lsls	r2, r3, #13
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	430a      	orrs	r2, r1
 8003720:	605a      	str	r2, [r3, #4]
 8003722:	e007      	b.n	8003734 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	685a      	ldr	r2, [r3, #4]
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003732:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8003742:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	69db      	ldr	r3, [r3, #28]
 800374e:	3b01      	subs	r3, #1
 8003750:	051a      	lsls	r2, r3, #20
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	430a      	orrs	r2, r1
 8003758:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	689a      	ldr	r2, [r3, #8]
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003768:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	6899      	ldr	r1, [r3, #8]
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003776:	025a      	lsls	r2, r3, #9
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	430a      	orrs	r2, r1
 800377e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	689a      	ldr	r2, [r3, #8]
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800378e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	6899      	ldr	r1, [r3, #8]
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	695b      	ldr	r3, [r3, #20]
 800379a:	029a      	lsls	r2, r3, #10
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	430a      	orrs	r2, r1
 80037a2:	609a      	str	r2, [r3, #8]
}
 80037a4:	bf00      	nop
 80037a6:	3714      	adds	r7, #20
 80037a8:	46bd      	mov	sp, r7
 80037aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ae:	4770      	bx	lr
 80037b0:	40012300 	.word	0x40012300
 80037b4:	0f000001 	.word	0x0f000001

080037b8 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 80037b8:	b580      	push	{r7, lr}
 80037ba:	b084      	sub	sp, #16
 80037bc:	af00      	add	r7, sp, #0
 80037be:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037c4:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037ca:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d13c      	bne.n	800384c <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037d6:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	689b      	ldr	r3, [r3, #8]
 80037e4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d12b      	bne.n	8003844 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d127      	bne.n	8003844 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037fa:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d006      	beq.n	8003810 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	689b      	ldr	r3, [r3, #8]
 8003808:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800380c:	2b00      	cmp	r3, #0
 800380e:	d119      	bne.n	8003844 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	685a      	ldr	r2, [r3, #4]
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	f022 0220 	bic.w	r2, r2, #32
 800381e:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003824:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003830:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003834:	2b00      	cmp	r3, #0
 8003836:	d105      	bne.n	8003844 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800383c:	f043 0201 	orr.w	r2, r3, #1
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003844:	68f8      	ldr	r0, [r7, #12]
 8003846:	f7ff fd61 	bl	800330c <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800384a:	e00e      	b.n	800386a <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003850:	f003 0310 	and.w	r3, r3, #16
 8003854:	2b00      	cmp	r3, #0
 8003856:	d003      	beq.n	8003860 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8003858:	68f8      	ldr	r0, [r7, #12]
 800385a:	f7ff fd75 	bl	8003348 <HAL_ADC_ErrorCallback>
}
 800385e:	e004      	b.n	800386a <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003864:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003866:	6878      	ldr	r0, [r7, #4]
 8003868:	4798      	blx	r3
}
 800386a:	bf00      	nop
 800386c:	3710      	adds	r7, #16
 800386e:	46bd      	mov	sp, r7
 8003870:	bd80      	pop	{r7, pc}

08003872 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8003872:	b580      	push	{r7, lr}
 8003874:	b084      	sub	sp, #16
 8003876:	af00      	add	r7, sp, #0
 8003878:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800387e:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8003880:	68f8      	ldr	r0, [r7, #12]
 8003882:	f7ff fd4d 	bl	8003320 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003886:	bf00      	nop
 8003888:	3710      	adds	r7, #16
 800388a:	46bd      	mov	sp, r7
 800388c:	bd80      	pop	{r7, pc}

0800388e <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 800388e:	b580      	push	{r7, lr}
 8003890:	b084      	sub	sp, #16
 8003892:	af00      	add	r7, sp, #0
 8003894:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800389a:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	2240      	movs	r2, #64	; 0x40
 80038a0:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038a6:	f043 0204 	orr.w	r2, r3, #4
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80038ae:	68f8      	ldr	r0, [r7, #12]
 80038b0:	f7ff fd4a 	bl	8003348 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80038b4:	bf00      	nop
 80038b6:	3710      	adds	r7, #16
 80038b8:	46bd      	mov	sp, r7
 80038ba:	bd80      	pop	{r7, pc}

080038bc <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80038bc:	b480      	push	{r7}
 80038be:	b083      	sub	sp, #12
 80038c0:	af00      	add	r7, sp, #0
 80038c2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 80038c4:	bf00      	nop
 80038c6:	370c      	adds	r7, #12
 80038c8:	46bd      	mov	sp, r7
 80038ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ce:	4770      	bx	lr

080038d0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80038d0:	b480      	push	{r7}
 80038d2:	b085      	sub	sp, #20
 80038d4:	af00      	add	r7, sp, #0
 80038d6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	f003 0307 	and.w	r3, r3, #7
 80038de:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80038e0:	4b0c      	ldr	r3, [pc, #48]	; (8003914 <__NVIC_SetPriorityGrouping+0x44>)
 80038e2:	68db      	ldr	r3, [r3, #12]
 80038e4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80038e6:	68ba      	ldr	r2, [r7, #8]
 80038e8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80038ec:	4013      	ands	r3, r2
 80038ee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80038f4:	68bb      	ldr	r3, [r7, #8]
 80038f6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80038f8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80038fc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003900:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003902:	4a04      	ldr	r2, [pc, #16]	; (8003914 <__NVIC_SetPriorityGrouping+0x44>)
 8003904:	68bb      	ldr	r3, [r7, #8]
 8003906:	60d3      	str	r3, [r2, #12]
}
 8003908:	bf00      	nop
 800390a:	3714      	adds	r7, #20
 800390c:	46bd      	mov	sp, r7
 800390e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003912:	4770      	bx	lr
 8003914:	e000ed00 	.word	0xe000ed00

08003918 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003918:	b480      	push	{r7}
 800391a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800391c:	4b04      	ldr	r3, [pc, #16]	; (8003930 <__NVIC_GetPriorityGrouping+0x18>)
 800391e:	68db      	ldr	r3, [r3, #12]
 8003920:	0a1b      	lsrs	r3, r3, #8
 8003922:	f003 0307 	and.w	r3, r3, #7
}
 8003926:	4618      	mov	r0, r3
 8003928:	46bd      	mov	sp, r7
 800392a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800392e:	4770      	bx	lr
 8003930:	e000ed00 	.word	0xe000ed00

08003934 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003934:	b480      	push	{r7}
 8003936:	b083      	sub	sp, #12
 8003938:	af00      	add	r7, sp, #0
 800393a:	4603      	mov	r3, r0
 800393c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800393e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003942:	2b00      	cmp	r3, #0
 8003944:	db0b      	blt.n	800395e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003946:	79fb      	ldrb	r3, [r7, #7]
 8003948:	f003 021f 	and.w	r2, r3, #31
 800394c:	4907      	ldr	r1, [pc, #28]	; (800396c <__NVIC_EnableIRQ+0x38>)
 800394e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003952:	095b      	lsrs	r3, r3, #5
 8003954:	2001      	movs	r0, #1
 8003956:	fa00 f202 	lsl.w	r2, r0, r2
 800395a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800395e:	bf00      	nop
 8003960:	370c      	adds	r7, #12
 8003962:	46bd      	mov	sp, r7
 8003964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003968:	4770      	bx	lr
 800396a:	bf00      	nop
 800396c:	e000e100 	.word	0xe000e100

08003970 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003970:	b480      	push	{r7}
 8003972:	b083      	sub	sp, #12
 8003974:	af00      	add	r7, sp, #0
 8003976:	4603      	mov	r3, r0
 8003978:	6039      	str	r1, [r7, #0]
 800397a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800397c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003980:	2b00      	cmp	r3, #0
 8003982:	db0a      	blt.n	800399a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003984:	683b      	ldr	r3, [r7, #0]
 8003986:	b2da      	uxtb	r2, r3
 8003988:	490c      	ldr	r1, [pc, #48]	; (80039bc <__NVIC_SetPriority+0x4c>)
 800398a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800398e:	0112      	lsls	r2, r2, #4
 8003990:	b2d2      	uxtb	r2, r2
 8003992:	440b      	add	r3, r1
 8003994:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003998:	e00a      	b.n	80039b0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800399a:	683b      	ldr	r3, [r7, #0]
 800399c:	b2da      	uxtb	r2, r3
 800399e:	4908      	ldr	r1, [pc, #32]	; (80039c0 <__NVIC_SetPriority+0x50>)
 80039a0:	79fb      	ldrb	r3, [r7, #7]
 80039a2:	f003 030f 	and.w	r3, r3, #15
 80039a6:	3b04      	subs	r3, #4
 80039a8:	0112      	lsls	r2, r2, #4
 80039aa:	b2d2      	uxtb	r2, r2
 80039ac:	440b      	add	r3, r1
 80039ae:	761a      	strb	r2, [r3, #24]
}
 80039b0:	bf00      	nop
 80039b2:	370c      	adds	r7, #12
 80039b4:	46bd      	mov	sp, r7
 80039b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ba:	4770      	bx	lr
 80039bc:	e000e100 	.word	0xe000e100
 80039c0:	e000ed00 	.word	0xe000ed00

080039c4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80039c4:	b480      	push	{r7}
 80039c6:	b089      	sub	sp, #36	; 0x24
 80039c8:	af00      	add	r7, sp, #0
 80039ca:	60f8      	str	r0, [r7, #12]
 80039cc:	60b9      	str	r1, [r7, #8]
 80039ce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	f003 0307 	and.w	r3, r3, #7
 80039d6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80039d8:	69fb      	ldr	r3, [r7, #28]
 80039da:	f1c3 0307 	rsb	r3, r3, #7
 80039de:	2b04      	cmp	r3, #4
 80039e0:	bf28      	it	cs
 80039e2:	2304      	movcs	r3, #4
 80039e4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80039e6:	69fb      	ldr	r3, [r7, #28]
 80039e8:	3304      	adds	r3, #4
 80039ea:	2b06      	cmp	r3, #6
 80039ec:	d902      	bls.n	80039f4 <NVIC_EncodePriority+0x30>
 80039ee:	69fb      	ldr	r3, [r7, #28]
 80039f0:	3b03      	subs	r3, #3
 80039f2:	e000      	b.n	80039f6 <NVIC_EncodePriority+0x32>
 80039f4:	2300      	movs	r3, #0
 80039f6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80039f8:	f04f 32ff 	mov.w	r2, #4294967295
 80039fc:	69bb      	ldr	r3, [r7, #24]
 80039fe:	fa02 f303 	lsl.w	r3, r2, r3
 8003a02:	43da      	mvns	r2, r3
 8003a04:	68bb      	ldr	r3, [r7, #8]
 8003a06:	401a      	ands	r2, r3
 8003a08:	697b      	ldr	r3, [r7, #20]
 8003a0a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003a0c:	f04f 31ff 	mov.w	r1, #4294967295
 8003a10:	697b      	ldr	r3, [r7, #20]
 8003a12:	fa01 f303 	lsl.w	r3, r1, r3
 8003a16:	43d9      	mvns	r1, r3
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003a1c:	4313      	orrs	r3, r2
         );
}
 8003a1e:	4618      	mov	r0, r3
 8003a20:	3724      	adds	r7, #36	; 0x24
 8003a22:	46bd      	mov	sp, r7
 8003a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a28:	4770      	bx	lr
	...

08003a2c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003a2c:	b580      	push	{r7, lr}
 8003a2e:	b082      	sub	sp, #8
 8003a30:	af00      	add	r7, sp, #0
 8003a32:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	3b01      	subs	r3, #1
 8003a38:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003a3c:	d301      	bcc.n	8003a42 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003a3e:	2301      	movs	r3, #1
 8003a40:	e00f      	b.n	8003a62 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003a42:	4a0a      	ldr	r2, [pc, #40]	; (8003a6c <SysTick_Config+0x40>)
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	3b01      	subs	r3, #1
 8003a48:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003a4a:	210f      	movs	r1, #15
 8003a4c:	f04f 30ff 	mov.w	r0, #4294967295
 8003a50:	f7ff ff8e 	bl	8003970 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003a54:	4b05      	ldr	r3, [pc, #20]	; (8003a6c <SysTick_Config+0x40>)
 8003a56:	2200      	movs	r2, #0
 8003a58:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003a5a:	4b04      	ldr	r3, [pc, #16]	; (8003a6c <SysTick_Config+0x40>)
 8003a5c:	2207      	movs	r2, #7
 8003a5e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003a60:	2300      	movs	r3, #0
}
 8003a62:	4618      	mov	r0, r3
 8003a64:	3708      	adds	r7, #8
 8003a66:	46bd      	mov	sp, r7
 8003a68:	bd80      	pop	{r7, pc}
 8003a6a:	bf00      	nop
 8003a6c:	e000e010 	.word	0xe000e010

08003a70 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003a70:	b580      	push	{r7, lr}
 8003a72:	b082      	sub	sp, #8
 8003a74:	af00      	add	r7, sp, #0
 8003a76:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003a78:	6878      	ldr	r0, [r7, #4]
 8003a7a:	f7ff ff29 	bl	80038d0 <__NVIC_SetPriorityGrouping>
}
 8003a7e:	bf00      	nop
 8003a80:	3708      	adds	r7, #8
 8003a82:	46bd      	mov	sp, r7
 8003a84:	bd80      	pop	{r7, pc}

08003a86 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003a86:	b580      	push	{r7, lr}
 8003a88:	b086      	sub	sp, #24
 8003a8a:	af00      	add	r7, sp, #0
 8003a8c:	4603      	mov	r3, r0
 8003a8e:	60b9      	str	r1, [r7, #8]
 8003a90:	607a      	str	r2, [r7, #4]
 8003a92:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003a94:	2300      	movs	r3, #0
 8003a96:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003a98:	f7ff ff3e 	bl	8003918 <__NVIC_GetPriorityGrouping>
 8003a9c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003a9e:	687a      	ldr	r2, [r7, #4]
 8003aa0:	68b9      	ldr	r1, [r7, #8]
 8003aa2:	6978      	ldr	r0, [r7, #20]
 8003aa4:	f7ff ff8e 	bl	80039c4 <NVIC_EncodePriority>
 8003aa8:	4602      	mov	r2, r0
 8003aaa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003aae:	4611      	mov	r1, r2
 8003ab0:	4618      	mov	r0, r3
 8003ab2:	f7ff ff5d 	bl	8003970 <__NVIC_SetPriority>
}
 8003ab6:	bf00      	nop
 8003ab8:	3718      	adds	r7, #24
 8003aba:	46bd      	mov	sp, r7
 8003abc:	bd80      	pop	{r7, pc}

08003abe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003abe:	b580      	push	{r7, lr}
 8003ac0:	b082      	sub	sp, #8
 8003ac2:	af00      	add	r7, sp, #0
 8003ac4:	4603      	mov	r3, r0
 8003ac6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003ac8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003acc:	4618      	mov	r0, r3
 8003ace:	f7ff ff31 	bl	8003934 <__NVIC_EnableIRQ>
}
 8003ad2:	bf00      	nop
 8003ad4:	3708      	adds	r7, #8
 8003ad6:	46bd      	mov	sp, r7
 8003ad8:	bd80      	pop	{r7, pc}

08003ada <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003ada:	b580      	push	{r7, lr}
 8003adc:	b082      	sub	sp, #8
 8003ade:	af00      	add	r7, sp, #0
 8003ae0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003ae2:	6878      	ldr	r0, [r7, #4]
 8003ae4:	f7ff ffa2 	bl	8003a2c <SysTick_Config>
 8003ae8:	4603      	mov	r3, r0
}
 8003aea:	4618      	mov	r0, r3
 8003aec:	3708      	adds	r7, #8
 8003aee:	46bd      	mov	sp, r7
 8003af0:	bd80      	pop	{r7, pc}
	...

08003af4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003af4:	b580      	push	{r7, lr}
 8003af6:	b086      	sub	sp, #24
 8003af8:	af00      	add	r7, sp, #0
 8003afa:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003afc:	2300      	movs	r3, #0
 8003afe:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003b00:	f7ff f984 	bl	8002e0c <HAL_GetTick>
 8003b04:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d101      	bne.n	8003b10 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003b0c:	2301      	movs	r3, #1
 8003b0e:	e099      	b.n	8003c44 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	2200      	movs	r2, #0
 8003b14:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	2202      	movs	r2, #2
 8003b1c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	681a      	ldr	r2, [r3, #0]
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	f022 0201 	bic.w	r2, r2, #1
 8003b2e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003b30:	e00f      	b.n	8003b52 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003b32:	f7ff f96b 	bl	8002e0c <HAL_GetTick>
 8003b36:	4602      	mov	r2, r0
 8003b38:	693b      	ldr	r3, [r7, #16]
 8003b3a:	1ad3      	subs	r3, r2, r3
 8003b3c:	2b05      	cmp	r3, #5
 8003b3e:	d908      	bls.n	8003b52 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	2220      	movs	r2, #32
 8003b44:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	2203      	movs	r2, #3
 8003b4a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8003b4e:	2303      	movs	r3, #3
 8003b50:	e078      	b.n	8003c44 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	f003 0301 	and.w	r3, r3, #1
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d1e8      	bne.n	8003b32 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003b68:	697a      	ldr	r2, [r7, #20]
 8003b6a:	4b38      	ldr	r3, [pc, #224]	; (8003c4c <HAL_DMA_Init+0x158>)
 8003b6c:	4013      	ands	r3, r2
 8003b6e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	685a      	ldr	r2, [r3, #4]
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	689b      	ldr	r3, [r3, #8]
 8003b78:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003b7e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	691b      	ldr	r3, [r3, #16]
 8003b84:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003b8a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	699b      	ldr	r3, [r3, #24]
 8003b90:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003b96:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	6a1b      	ldr	r3, [r3, #32]
 8003b9c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003b9e:	697a      	ldr	r2, [r7, #20]
 8003ba0:	4313      	orrs	r3, r2
 8003ba2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ba8:	2b04      	cmp	r3, #4
 8003baa:	d107      	bne.n	8003bbc <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bb4:	4313      	orrs	r3, r2
 8003bb6:	697a      	ldr	r2, [r7, #20]
 8003bb8:	4313      	orrs	r3, r2
 8003bba:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	697a      	ldr	r2, [r7, #20]
 8003bc2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	695b      	ldr	r3, [r3, #20]
 8003bca:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003bcc:	697b      	ldr	r3, [r7, #20]
 8003bce:	f023 0307 	bic.w	r3, r3, #7
 8003bd2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bd8:	697a      	ldr	r2, [r7, #20]
 8003bda:	4313      	orrs	r3, r2
 8003bdc:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003be2:	2b04      	cmp	r3, #4
 8003be4:	d117      	bne.n	8003c16 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bea:	697a      	ldr	r2, [r7, #20]
 8003bec:	4313      	orrs	r3, r2
 8003bee:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d00e      	beq.n	8003c16 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003bf8:	6878      	ldr	r0, [r7, #4]
 8003bfa:	f000 fb01 	bl	8004200 <DMA_CheckFifoParam>
 8003bfe:	4603      	mov	r3, r0
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d008      	beq.n	8003c16 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	2240      	movs	r2, #64	; 0x40
 8003c08:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	2201      	movs	r2, #1
 8003c0e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8003c12:	2301      	movs	r3, #1
 8003c14:	e016      	b.n	8003c44 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	697a      	ldr	r2, [r7, #20]
 8003c1c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003c1e:	6878      	ldr	r0, [r7, #4]
 8003c20:	f000 fab8 	bl	8004194 <DMA_CalcBaseAndBitshift>
 8003c24:	4603      	mov	r3, r0
 8003c26:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c2c:	223f      	movs	r2, #63	; 0x3f
 8003c2e:	409a      	lsls	r2, r3
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	2200      	movs	r2, #0
 8003c38:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	2201      	movs	r2, #1
 8003c3e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003c42:	2300      	movs	r3, #0
}
 8003c44:	4618      	mov	r0, r3
 8003c46:	3718      	adds	r7, #24
 8003c48:	46bd      	mov	sp, r7
 8003c4a:	bd80      	pop	{r7, pc}
 8003c4c:	f010803f 	.word	0xf010803f

08003c50 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003c50:	b580      	push	{r7, lr}
 8003c52:	b086      	sub	sp, #24
 8003c54:	af00      	add	r7, sp, #0
 8003c56:	60f8      	str	r0, [r7, #12]
 8003c58:	60b9      	str	r1, [r7, #8]
 8003c5a:	607a      	str	r2, [r7, #4]
 8003c5c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003c5e:	2300      	movs	r3, #0
 8003c60:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c66:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003c6e:	2b01      	cmp	r3, #1
 8003c70:	d101      	bne.n	8003c76 <HAL_DMA_Start_IT+0x26>
 8003c72:	2302      	movs	r3, #2
 8003c74:	e040      	b.n	8003cf8 <HAL_DMA_Start_IT+0xa8>
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	2201      	movs	r2, #1
 8003c7a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003c84:	b2db      	uxtb	r3, r3
 8003c86:	2b01      	cmp	r3, #1
 8003c88:	d12f      	bne.n	8003cea <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	2202      	movs	r2, #2
 8003c8e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	2200      	movs	r2, #0
 8003c96:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003c98:	683b      	ldr	r3, [r7, #0]
 8003c9a:	687a      	ldr	r2, [r7, #4]
 8003c9c:	68b9      	ldr	r1, [r7, #8]
 8003c9e:	68f8      	ldr	r0, [r7, #12]
 8003ca0:	f000 fa4a 	bl	8004138 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ca8:	223f      	movs	r2, #63	; 0x3f
 8003caa:	409a      	lsls	r2, r3
 8003cac:	693b      	ldr	r3, [r7, #16]
 8003cae:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	681a      	ldr	r2, [r3, #0]
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	f042 0216 	orr.w	r2, r2, #22
 8003cbe:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d007      	beq.n	8003cd8 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	681a      	ldr	r2, [r3, #0]
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	f042 0208 	orr.w	r2, r2, #8
 8003cd6:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	681a      	ldr	r2, [r3, #0]
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	f042 0201 	orr.w	r2, r2, #1
 8003ce6:	601a      	str	r2, [r3, #0]
 8003ce8:	e005      	b.n	8003cf6 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	2200      	movs	r2, #0
 8003cee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8003cf2:	2302      	movs	r3, #2
 8003cf4:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8003cf6:	7dfb      	ldrb	r3, [r7, #23]
}
 8003cf8:	4618      	mov	r0, r3
 8003cfa:	3718      	adds	r7, #24
 8003cfc:	46bd      	mov	sp, r7
 8003cfe:	bd80      	pop	{r7, pc}

08003d00 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003d00:	b580      	push	{r7, lr}
 8003d02:	b084      	sub	sp, #16
 8003d04:	af00      	add	r7, sp, #0
 8003d06:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d0c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8003d0e:	f7ff f87d 	bl	8002e0c <HAL_GetTick>
 8003d12:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003d1a:	b2db      	uxtb	r3, r3
 8003d1c:	2b02      	cmp	r3, #2
 8003d1e:	d008      	beq.n	8003d32 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	2280      	movs	r2, #128	; 0x80
 8003d24:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	2200      	movs	r2, #0
 8003d2a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8003d2e:	2301      	movs	r3, #1
 8003d30:	e052      	b.n	8003dd8 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	681a      	ldr	r2, [r3, #0]
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	f022 0216 	bic.w	r2, r2, #22
 8003d40:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	695a      	ldr	r2, [r3, #20]
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003d50:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d103      	bne.n	8003d62 <HAL_DMA_Abort+0x62>
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d007      	beq.n	8003d72 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	681a      	ldr	r2, [r3, #0]
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	f022 0208 	bic.w	r2, r2, #8
 8003d70:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	681a      	ldr	r2, [r3, #0]
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	f022 0201 	bic.w	r2, r2, #1
 8003d80:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003d82:	e013      	b.n	8003dac <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003d84:	f7ff f842 	bl	8002e0c <HAL_GetTick>
 8003d88:	4602      	mov	r2, r0
 8003d8a:	68bb      	ldr	r3, [r7, #8]
 8003d8c:	1ad3      	subs	r3, r2, r3
 8003d8e:	2b05      	cmp	r3, #5
 8003d90:	d90c      	bls.n	8003dac <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	2220      	movs	r2, #32
 8003d96:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	2200      	movs	r2, #0
 8003d9c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	2203      	movs	r2, #3
 8003da4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 8003da8:	2303      	movs	r3, #3
 8003daa:	e015      	b.n	8003dd8 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	f003 0301 	and.w	r3, r3, #1
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d1e4      	bne.n	8003d84 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003dbe:	223f      	movs	r2, #63	; 0x3f
 8003dc0:	409a      	lsls	r2, r3
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	2200      	movs	r2, #0
 8003dca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	2201      	movs	r2, #1
 8003dd2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 8003dd6:	2300      	movs	r3, #0
}
 8003dd8:	4618      	mov	r0, r3
 8003dda:	3710      	adds	r7, #16
 8003ddc:	46bd      	mov	sp, r7
 8003dde:	bd80      	pop	{r7, pc}

08003de0 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003de0:	b480      	push	{r7}
 8003de2:	b083      	sub	sp, #12
 8003de4:	af00      	add	r7, sp, #0
 8003de6:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003dee:	b2db      	uxtb	r3, r3
 8003df0:	2b02      	cmp	r3, #2
 8003df2:	d004      	beq.n	8003dfe <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	2280      	movs	r2, #128	; 0x80
 8003df8:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003dfa:	2301      	movs	r3, #1
 8003dfc:	e00c      	b.n	8003e18 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	2205      	movs	r2, #5
 8003e02:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	681a      	ldr	r2, [r3, #0]
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	f022 0201 	bic.w	r2, r2, #1
 8003e14:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003e16:	2300      	movs	r3, #0
}
 8003e18:	4618      	mov	r0, r3
 8003e1a:	370c      	adds	r7, #12
 8003e1c:	46bd      	mov	sp, r7
 8003e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e22:	4770      	bx	lr

08003e24 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003e24:	b580      	push	{r7, lr}
 8003e26:	b086      	sub	sp, #24
 8003e28:	af00      	add	r7, sp, #0
 8003e2a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003e2c:	2300      	movs	r3, #0
 8003e2e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003e30:	4b92      	ldr	r3, [pc, #584]	; (800407c <HAL_DMA_IRQHandler+0x258>)
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	4a92      	ldr	r2, [pc, #584]	; (8004080 <HAL_DMA_IRQHandler+0x25c>)
 8003e36:	fba2 2303 	umull	r2, r3, r2, r3
 8003e3a:	0a9b      	lsrs	r3, r3, #10
 8003e3c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e42:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003e44:	693b      	ldr	r3, [r7, #16]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e4e:	2208      	movs	r2, #8
 8003e50:	409a      	lsls	r2, r3
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	4013      	ands	r3, r2
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d01a      	beq.n	8003e90 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	f003 0304 	and.w	r3, r3, #4
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d013      	beq.n	8003e90 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	681a      	ldr	r2, [r3, #0]
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	f022 0204 	bic.w	r2, r2, #4
 8003e76:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e7c:	2208      	movs	r2, #8
 8003e7e:	409a      	lsls	r2, r3
 8003e80:	693b      	ldr	r3, [r7, #16]
 8003e82:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e88:	f043 0201 	orr.w	r2, r3, #1
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e94:	2201      	movs	r2, #1
 8003e96:	409a      	lsls	r2, r3
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	4013      	ands	r3, r2
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d012      	beq.n	8003ec6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	695b      	ldr	r3, [r3, #20]
 8003ea6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d00b      	beq.n	8003ec6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003eb2:	2201      	movs	r2, #1
 8003eb4:	409a      	lsls	r2, r3
 8003eb6:	693b      	ldr	r3, [r7, #16]
 8003eb8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ebe:	f043 0202 	orr.w	r2, r3, #2
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003eca:	2204      	movs	r2, #4
 8003ecc:	409a      	lsls	r2, r3
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	4013      	ands	r3, r2
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d012      	beq.n	8003efc <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	f003 0302 	and.w	r3, r3, #2
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d00b      	beq.n	8003efc <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ee8:	2204      	movs	r2, #4
 8003eea:	409a      	lsls	r2, r3
 8003eec:	693b      	ldr	r3, [r7, #16]
 8003eee:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ef4:	f043 0204 	orr.w	r2, r3, #4
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f00:	2210      	movs	r2, #16
 8003f02:	409a      	lsls	r2, r3
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	4013      	ands	r3, r2
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d043      	beq.n	8003f94 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	f003 0308 	and.w	r3, r3, #8
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d03c      	beq.n	8003f94 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f1e:	2210      	movs	r2, #16
 8003f20:	409a      	lsls	r2, r3
 8003f22:	693b      	ldr	r3, [r7, #16]
 8003f24:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d018      	beq.n	8003f66 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d108      	bne.n	8003f54 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d024      	beq.n	8003f94 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f4e:	6878      	ldr	r0, [r7, #4]
 8003f50:	4798      	blx	r3
 8003f52:	e01f      	b.n	8003f94 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d01b      	beq.n	8003f94 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003f60:	6878      	ldr	r0, [r7, #4]
 8003f62:	4798      	blx	r3
 8003f64:	e016      	b.n	8003f94 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d107      	bne.n	8003f84 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	681a      	ldr	r2, [r3, #0]
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	f022 0208 	bic.w	r2, r2, #8
 8003f82:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d003      	beq.n	8003f94 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f90:	6878      	ldr	r0, [r7, #4]
 8003f92:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f98:	2220      	movs	r2, #32
 8003f9a:	409a      	lsls	r2, r3
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	4013      	ands	r3, r2
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	f000 808e 	beq.w	80040c2 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	f003 0310 	and.w	r3, r3, #16
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	f000 8086 	beq.w	80040c2 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003fba:	2220      	movs	r2, #32
 8003fbc:	409a      	lsls	r2, r3
 8003fbe:	693b      	ldr	r3, [r7, #16]
 8003fc0:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003fc8:	b2db      	uxtb	r3, r3
 8003fca:	2b05      	cmp	r3, #5
 8003fcc:	d136      	bne.n	800403c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	681a      	ldr	r2, [r3, #0]
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	f022 0216 	bic.w	r2, r2, #22
 8003fdc:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	695a      	ldr	r2, [r3, #20]
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003fec:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d103      	bne.n	8003ffe <HAL_DMA_IRQHandler+0x1da>
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d007      	beq.n	800400e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	681a      	ldr	r2, [r3, #0]
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	f022 0208 	bic.w	r2, r2, #8
 800400c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004012:	223f      	movs	r2, #63	; 0x3f
 8004014:	409a      	lsls	r2, r3
 8004016:	693b      	ldr	r3, [r7, #16]
 8004018:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	2200      	movs	r2, #0
 800401e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	2201      	movs	r2, #1
 8004026:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800402e:	2b00      	cmp	r3, #0
 8004030:	d07d      	beq.n	800412e <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004036:	6878      	ldr	r0, [r7, #4]
 8004038:	4798      	blx	r3
        }
        return;
 800403a:	e078      	b.n	800412e <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004046:	2b00      	cmp	r3, #0
 8004048:	d01c      	beq.n	8004084 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004054:	2b00      	cmp	r3, #0
 8004056:	d108      	bne.n	800406a <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800405c:	2b00      	cmp	r3, #0
 800405e:	d030      	beq.n	80040c2 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004064:	6878      	ldr	r0, [r7, #4]
 8004066:	4798      	blx	r3
 8004068:	e02b      	b.n	80040c2 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800406e:	2b00      	cmp	r3, #0
 8004070:	d027      	beq.n	80040c2 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004076:	6878      	ldr	r0, [r7, #4]
 8004078:	4798      	blx	r3
 800407a:	e022      	b.n	80040c2 <HAL_DMA_IRQHandler+0x29e>
 800407c:	20000004 	.word	0x20000004
 8004080:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800408e:	2b00      	cmp	r3, #0
 8004090:	d10f      	bne.n	80040b2 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	681a      	ldr	r2, [r3, #0]
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	f022 0210 	bic.w	r2, r2, #16
 80040a0:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	2200      	movs	r2, #0
 80040a6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	2201      	movs	r2, #1
 80040ae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d003      	beq.n	80040c2 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80040be:	6878      	ldr	r0, [r7, #4]
 80040c0:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d032      	beq.n	8004130 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040ce:	f003 0301 	and.w	r3, r3, #1
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d022      	beq.n	800411c <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	2205      	movs	r2, #5
 80040da:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	681a      	ldr	r2, [r3, #0]
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	f022 0201 	bic.w	r2, r2, #1
 80040ec:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80040ee:	68bb      	ldr	r3, [r7, #8]
 80040f0:	3301      	adds	r3, #1
 80040f2:	60bb      	str	r3, [r7, #8]
 80040f4:	697a      	ldr	r2, [r7, #20]
 80040f6:	429a      	cmp	r2, r3
 80040f8:	d307      	bcc.n	800410a <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	f003 0301 	and.w	r3, r3, #1
 8004104:	2b00      	cmp	r3, #0
 8004106:	d1f2      	bne.n	80040ee <HAL_DMA_IRQHandler+0x2ca>
 8004108:	e000      	b.n	800410c <HAL_DMA_IRQHandler+0x2e8>
          break;
 800410a:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	2200      	movs	r2, #0
 8004110:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	2201      	movs	r2, #1
 8004118:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004120:	2b00      	cmp	r3, #0
 8004122:	d005      	beq.n	8004130 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004128:	6878      	ldr	r0, [r7, #4]
 800412a:	4798      	blx	r3
 800412c:	e000      	b.n	8004130 <HAL_DMA_IRQHandler+0x30c>
        return;
 800412e:	bf00      	nop
    }
  }
}
 8004130:	3718      	adds	r7, #24
 8004132:	46bd      	mov	sp, r7
 8004134:	bd80      	pop	{r7, pc}
 8004136:	bf00      	nop

08004138 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004138:	b480      	push	{r7}
 800413a:	b085      	sub	sp, #20
 800413c:	af00      	add	r7, sp, #0
 800413e:	60f8      	str	r0, [r7, #12]
 8004140:	60b9      	str	r1, [r7, #8]
 8004142:	607a      	str	r2, [r7, #4]
 8004144:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	681a      	ldr	r2, [r3, #0]
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004154:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	683a      	ldr	r2, [r7, #0]
 800415c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	689b      	ldr	r3, [r3, #8]
 8004162:	2b40      	cmp	r3, #64	; 0x40
 8004164:	d108      	bne.n	8004178 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	687a      	ldr	r2, [r7, #4]
 800416c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	68ba      	ldr	r2, [r7, #8]
 8004174:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8004176:	e007      	b.n	8004188 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	68ba      	ldr	r2, [r7, #8]
 800417e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	687a      	ldr	r2, [r7, #4]
 8004186:	60da      	str	r2, [r3, #12]
}
 8004188:	bf00      	nop
 800418a:	3714      	adds	r7, #20
 800418c:	46bd      	mov	sp, r7
 800418e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004192:	4770      	bx	lr

08004194 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004194:	b480      	push	{r7}
 8004196:	b085      	sub	sp, #20
 8004198:	af00      	add	r7, sp, #0
 800419a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	b2db      	uxtb	r3, r3
 80041a2:	3b10      	subs	r3, #16
 80041a4:	4a14      	ldr	r2, [pc, #80]	; (80041f8 <DMA_CalcBaseAndBitshift+0x64>)
 80041a6:	fba2 2303 	umull	r2, r3, r2, r3
 80041aa:	091b      	lsrs	r3, r3, #4
 80041ac:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80041ae:	4a13      	ldr	r2, [pc, #76]	; (80041fc <DMA_CalcBaseAndBitshift+0x68>)
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	4413      	add	r3, r2
 80041b4:	781b      	ldrb	r3, [r3, #0]
 80041b6:	461a      	mov	r2, r3
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	2b03      	cmp	r3, #3
 80041c0:	d909      	bls.n	80041d6 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80041ca:	f023 0303 	bic.w	r3, r3, #3
 80041ce:	1d1a      	adds	r2, r3, #4
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	659a      	str	r2, [r3, #88]	; 0x58
 80041d4:	e007      	b.n	80041e6 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80041de:	f023 0303 	bic.w	r3, r3, #3
 80041e2:	687a      	ldr	r2, [r7, #4]
 80041e4:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80041ea:	4618      	mov	r0, r3
 80041ec:	3714      	adds	r7, #20
 80041ee:	46bd      	mov	sp, r7
 80041f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041f4:	4770      	bx	lr
 80041f6:	bf00      	nop
 80041f8:	aaaaaaab 	.word	0xaaaaaaab
 80041fc:	0800b024 	.word	0x0800b024

08004200 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004200:	b480      	push	{r7}
 8004202:	b085      	sub	sp, #20
 8004204:	af00      	add	r7, sp, #0
 8004206:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004208:	2300      	movs	r3, #0
 800420a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004210:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	699b      	ldr	r3, [r3, #24]
 8004216:	2b00      	cmp	r3, #0
 8004218:	d11f      	bne.n	800425a <DMA_CheckFifoParam+0x5a>
 800421a:	68bb      	ldr	r3, [r7, #8]
 800421c:	2b03      	cmp	r3, #3
 800421e:	d856      	bhi.n	80042ce <DMA_CheckFifoParam+0xce>
 8004220:	a201      	add	r2, pc, #4	; (adr r2, 8004228 <DMA_CheckFifoParam+0x28>)
 8004222:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004226:	bf00      	nop
 8004228:	08004239 	.word	0x08004239
 800422c:	0800424b 	.word	0x0800424b
 8004230:	08004239 	.word	0x08004239
 8004234:	080042cf 	.word	0x080042cf
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800423c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004240:	2b00      	cmp	r3, #0
 8004242:	d046      	beq.n	80042d2 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8004244:	2301      	movs	r3, #1
 8004246:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004248:	e043      	b.n	80042d2 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800424e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004252:	d140      	bne.n	80042d6 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8004254:	2301      	movs	r3, #1
 8004256:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004258:	e03d      	b.n	80042d6 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	699b      	ldr	r3, [r3, #24]
 800425e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004262:	d121      	bne.n	80042a8 <DMA_CheckFifoParam+0xa8>
 8004264:	68bb      	ldr	r3, [r7, #8]
 8004266:	2b03      	cmp	r3, #3
 8004268:	d837      	bhi.n	80042da <DMA_CheckFifoParam+0xda>
 800426a:	a201      	add	r2, pc, #4	; (adr r2, 8004270 <DMA_CheckFifoParam+0x70>)
 800426c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004270:	08004281 	.word	0x08004281
 8004274:	08004287 	.word	0x08004287
 8004278:	08004281 	.word	0x08004281
 800427c:	08004299 	.word	0x08004299
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8004280:	2301      	movs	r3, #1
 8004282:	73fb      	strb	r3, [r7, #15]
      break;
 8004284:	e030      	b.n	80042e8 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800428a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800428e:	2b00      	cmp	r3, #0
 8004290:	d025      	beq.n	80042de <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8004292:	2301      	movs	r3, #1
 8004294:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004296:	e022      	b.n	80042de <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800429c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80042a0:	d11f      	bne.n	80042e2 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80042a2:	2301      	movs	r3, #1
 80042a4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80042a6:	e01c      	b.n	80042e2 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80042a8:	68bb      	ldr	r3, [r7, #8]
 80042aa:	2b02      	cmp	r3, #2
 80042ac:	d903      	bls.n	80042b6 <DMA_CheckFifoParam+0xb6>
 80042ae:	68bb      	ldr	r3, [r7, #8]
 80042b0:	2b03      	cmp	r3, #3
 80042b2:	d003      	beq.n	80042bc <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80042b4:	e018      	b.n	80042e8 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80042b6:	2301      	movs	r3, #1
 80042b8:	73fb      	strb	r3, [r7, #15]
      break;
 80042ba:	e015      	b.n	80042e8 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042c0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d00e      	beq.n	80042e6 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80042c8:	2301      	movs	r3, #1
 80042ca:	73fb      	strb	r3, [r7, #15]
      break;
 80042cc:	e00b      	b.n	80042e6 <DMA_CheckFifoParam+0xe6>
      break;
 80042ce:	bf00      	nop
 80042d0:	e00a      	b.n	80042e8 <DMA_CheckFifoParam+0xe8>
      break;
 80042d2:	bf00      	nop
 80042d4:	e008      	b.n	80042e8 <DMA_CheckFifoParam+0xe8>
      break;
 80042d6:	bf00      	nop
 80042d8:	e006      	b.n	80042e8 <DMA_CheckFifoParam+0xe8>
      break;
 80042da:	bf00      	nop
 80042dc:	e004      	b.n	80042e8 <DMA_CheckFifoParam+0xe8>
      break;
 80042de:	bf00      	nop
 80042e0:	e002      	b.n	80042e8 <DMA_CheckFifoParam+0xe8>
      break;   
 80042e2:	bf00      	nop
 80042e4:	e000      	b.n	80042e8 <DMA_CheckFifoParam+0xe8>
      break;
 80042e6:	bf00      	nop
    }
  } 
  
  return status; 
 80042e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80042ea:	4618      	mov	r0, r3
 80042ec:	3714      	adds	r7, #20
 80042ee:	46bd      	mov	sp, r7
 80042f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042f4:	4770      	bx	lr
 80042f6:	bf00      	nop

080042f8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80042f8:	b480      	push	{r7}
 80042fa:	b089      	sub	sp, #36	; 0x24
 80042fc:	af00      	add	r7, sp, #0
 80042fe:	6078      	str	r0, [r7, #4]
 8004300:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004302:	2300      	movs	r3, #0
 8004304:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004306:	2300      	movs	r3, #0
 8004308:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800430a:	2300      	movs	r3, #0
 800430c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800430e:	2300      	movs	r3, #0
 8004310:	61fb      	str	r3, [r7, #28]
 8004312:	e159      	b.n	80045c8 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004314:	2201      	movs	r2, #1
 8004316:	69fb      	ldr	r3, [r7, #28]
 8004318:	fa02 f303 	lsl.w	r3, r2, r3
 800431c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800431e:	683b      	ldr	r3, [r7, #0]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	697a      	ldr	r2, [r7, #20]
 8004324:	4013      	ands	r3, r2
 8004326:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004328:	693a      	ldr	r2, [r7, #16]
 800432a:	697b      	ldr	r3, [r7, #20]
 800432c:	429a      	cmp	r2, r3
 800432e:	f040 8148 	bne.w	80045c2 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004332:	683b      	ldr	r3, [r7, #0]
 8004334:	685b      	ldr	r3, [r3, #4]
 8004336:	f003 0303 	and.w	r3, r3, #3
 800433a:	2b01      	cmp	r3, #1
 800433c:	d005      	beq.n	800434a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800433e:	683b      	ldr	r3, [r7, #0]
 8004340:	685b      	ldr	r3, [r3, #4]
 8004342:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004346:	2b02      	cmp	r3, #2
 8004348:	d130      	bne.n	80043ac <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	689b      	ldr	r3, [r3, #8]
 800434e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004350:	69fb      	ldr	r3, [r7, #28]
 8004352:	005b      	lsls	r3, r3, #1
 8004354:	2203      	movs	r2, #3
 8004356:	fa02 f303 	lsl.w	r3, r2, r3
 800435a:	43db      	mvns	r3, r3
 800435c:	69ba      	ldr	r2, [r7, #24]
 800435e:	4013      	ands	r3, r2
 8004360:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004362:	683b      	ldr	r3, [r7, #0]
 8004364:	68da      	ldr	r2, [r3, #12]
 8004366:	69fb      	ldr	r3, [r7, #28]
 8004368:	005b      	lsls	r3, r3, #1
 800436a:	fa02 f303 	lsl.w	r3, r2, r3
 800436e:	69ba      	ldr	r2, [r7, #24]
 8004370:	4313      	orrs	r3, r2
 8004372:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	69ba      	ldr	r2, [r7, #24]
 8004378:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	685b      	ldr	r3, [r3, #4]
 800437e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004380:	2201      	movs	r2, #1
 8004382:	69fb      	ldr	r3, [r7, #28]
 8004384:	fa02 f303 	lsl.w	r3, r2, r3
 8004388:	43db      	mvns	r3, r3
 800438a:	69ba      	ldr	r2, [r7, #24]
 800438c:	4013      	ands	r3, r2
 800438e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8004390:	683b      	ldr	r3, [r7, #0]
 8004392:	685b      	ldr	r3, [r3, #4]
 8004394:	091b      	lsrs	r3, r3, #4
 8004396:	f003 0201 	and.w	r2, r3, #1
 800439a:	69fb      	ldr	r3, [r7, #28]
 800439c:	fa02 f303 	lsl.w	r3, r2, r3
 80043a0:	69ba      	ldr	r2, [r7, #24]
 80043a2:	4313      	orrs	r3, r2
 80043a4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	69ba      	ldr	r2, [r7, #24]
 80043aa:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80043ac:	683b      	ldr	r3, [r7, #0]
 80043ae:	685b      	ldr	r3, [r3, #4]
 80043b0:	f003 0303 	and.w	r3, r3, #3
 80043b4:	2b03      	cmp	r3, #3
 80043b6:	d017      	beq.n	80043e8 <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	68db      	ldr	r3, [r3, #12]
 80043bc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80043be:	69fb      	ldr	r3, [r7, #28]
 80043c0:	005b      	lsls	r3, r3, #1
 80043c2:	2203      	movs	r2, #3
 80043c4:	fa02 f303 	lsl.w	r3, r2, r3
 80043c8:	43db      	mvns	r3, r3
 80043ca:	69ba      	ldr	r2, [r7, #24]
 80043cc:	4013      	ands	r3, r2
 80043ce:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80043d0:	683b      	ldr	r3, [r7, #0]
 80043d2:	689a      	ldr	r2, [r3, #8]
 80043d4:	69fb      	ldr	r3, [r7, #28]
 80043d6:	005b      	lsls	r3, r3, #1
 80043d8:	fa02 f303 	lsl.w	r3, r2, r3
 80043dc:	69ba      	ldr	r2, [r7, #24]
 80043de:	4313      	orrs	r3, r2
 80043e0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	69ba      	ldr	r2, [r7, #24]
 80043e6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80043e8:	683b      	ldr	r3, [r7, #0]
 80043ea:	685b      	ldr	r3, [r3, #4]
 80043ec:	f003 0303 	and.w	r3, r3, #3
 80043f0:	2b02      	cmp	r3, #2
 80043f2:	d123      	bne.n	800443c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80043f4:	69fb      	ldr	r3, [r7, #28]
 80043f6:	08da      	lsrs	r2, r3, #3
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	3208      	adds	r2, #8
 80043fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004400:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004402:	69fb      	ldr	r3, [r7, #28]
 8004404:	f003 0307 	and.w	r3, r3, #7
 8004408:	009b      	lsls	r3, r3, #2
 800440a:	220f      	movs	r2, #15
 800440c:	fa02 f303 	lsl.w	r3, r2, r3
 8004410:	43db      	mvns	r3, r3
 8004412:	69ba      	ldr	r2, [r7, #24]
 8004414:	4013      	ands	r3, r2
 8004416:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004418:	683b      	ldr	r3, [r7, #0]
 800441a:	691a      	ldr	r2, [r3, #16]
 800441c:	69fb      	ldr	r3, [r7, #28]
 800441e:	f003 0307 	and.w	r3, r3, #7
 8004422:	009b      	lsls	r3, r3, #2
 8004424:	fa02 f303 	lsl.w	r3, r2, r3
 8004428:	69ba      	ldr	r2, [r7, #24]
 800442a:	4313      	orrs	r3, r2
 800442c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800442e:	69fb      	ldr	r3, [r7, #28]
 8004430:	08da      	lsrs	r2, r3, #3
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	3208      	adds	r2, #8
 8004436:	69b9      	ldr	r1, [r7, #24]
 8004438:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004442:	69fb      	ldr	r3, [r7, #28]
 8004444:	005b      	lsls	r3, r3, #1
 8004446:	2203      	movs	r2, #3
 8004448:	fa02 f303 	lsl.w	r3, r2, r3
 800444c:	43db      	mvns	r3, r3
 800444e:	69ba      	ldr	r2, [r7, #24]
 8004450:	4013      	ands	r3, r2
 8004452:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004454:	683b      	ldr	r3, [r7, #0]
 8004456:	685b      	ldr	r3, [r3, #4]
 8004458:	f003 0203 	and.w	r2, r3, #3
 800445c:	69fb      	ldr	r3, [r7, #28]
 800445e:	005b      	lsls	r3, r3, #1
 8004460:	fa02 f303 	lsl.w	r3, r2, r3
 8004464:	69ba      	ldr	r2, [r7, #24]
 8004466:	4313      	orrs	r3, r2
 8004468:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	69ba      	ldr	r2, [r7, #24]
 800446e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004470:	683b      	ldr	r3, [r7, #0]
 8004472:	685b      	ldr	r3, [r3, #4]
 8004474:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004478:	2b00      	cmp	r3, #0
 800447a:	f000 80a2 	beq.w	80045c2 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800447e:	2300      	movs	r3, #0
 8004480:	60fb      	str	r3, [r7, #12]
 8004482:	4b57      	ldr	r3, [pc, #348]	; (80045e0 <HAL_GPIO_Init+0x2e8>)
 8004484:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004486:	4a56      	ldr	r2, [pc, #344]	; (80045e0 <HAL_GPIO_Init+0x2e8>)
 8004488:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800448c:	6453      	str	r3, [r2, #68]	; 0x44
 800448e:	4b54      	ldr	r3, [pc, #336]	; (80045e0 <HAL_GPIO_Init+0x2e8>)
 8004490:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004492:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004496:	60fb      	str	r3, [r7, #12]
 8004498:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800449a:	4a52      	ldr	r2, [pc, #328]	; (80045e4 <HAL_GPIO_Init+0x2ec>)
 800449c:	69fb      	ldr	r3, [r7, #28]
 800449e:	089b      	lsrs	r3, r3, #2
 80044a0:	3302      	adds	r3, #2
 80044a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80044a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80044a8:	69fb      	ldr	r3, [r7, #28]
 80044aa:	f003 0303 	and.w	r3, r3, #3
 80044ae:	009b      	lsls	r3, r3, #2
 80044b0:	220f      	movs	r2, #15
 80044b2:	fa02 f303 	lsl.w	r3, r2, r3
 80044b6:	43db      	mvns	r3, r3
 80044b8:	69ba      	ldr	r2, [r7, #24]
 80044ba:	4013      	ands	r3, r2
 80044bc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	4a49      	ldr	r2, [pc, #292]	; (80045e8 <HAL_GPIO_Init+0x2f0>)
 80044c2:	4293      	cmp	r3, r2
 80044c4:	d019      	beq.n	80044fa <HAL_GPIO_Init+0x202>
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	4a48      	ldr	r2, [pc, #288]	; (80045ec <HAL_GPIO_Init+0x2f4>)
 80044ca:	4293      	cmp	r3, r2
 80044cc:	d013      	beq.n	80044f6 <HAL_GPIO_Init+0x1fe>
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	4a47      	ldr	r2, [pc, #284]	; (80045f0 <HAL_GPIO_Init+0x2f8>)
 80044d2:	4293      	cmp	r3, r2
 80044d4:	d00d      	beq.n	80044f2 <HAL_GPIO_Init+0x1fa>
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	4a46      	ldr	r2, [pc, #280]	; (80045f4 <HAL_GPIO_Init+0x2fc>)
 80044da:	4293      	cmp	r3, r2
 80044dc:	d007      	beq.n	80044ee <HAL_GPIO_Init+0x1f6>
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	4a45      	ldr	r2, [pc, #276]	; (80045f8 <HAL_GPIO_Init+0x300>)
 80044e2:	4293      	cmp	r3, r2
 80044e4:	d101      	bne.n	80044ea <HAL_GPIO_Init+0x1f2>
 80044e6:	2304      	movs	r3, #4
 80044e8:	e008      	b.n	80044fc <HAL_GPIO_Init+0x204>
 80044ea:	2307      	movs	r3, #7
 80044ec:	e006      	b.n	80044fc <HAL_GPIO_Init+0x204>
 80044ee:	2303      	movs	r3, #3
 80044f0:	e004      	b.n	80044fc <HAL_GPIO_Init+0x204>
 80044f2:	2302      	movs	r3, #2
 80044f4:	e002      	b.n	80044fc <HAL_GPIO_Init+0x204>
 80044f6:	2301      	movs	r3, #1
 80044f8:	e000      	b.n	80044fc <HAL_GPIO_Init+0x204>
 80044fa:	2300      	movs	r3, #0
 80044fc:	69fa      	ldr	r2, [r7, #28]
 80044fe:	f002 0203 	and.w	r2, r2, #3
 8004502:	0092      	lsls	r2, r2, #2
 8004504:	4093      	lsls	r3, r2
 8004506:	69ba      	ldr	r2, [r7, #24]
 8004508:	4313      	orrs	r3, r2
 800450a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800450c:	4935      	ldr	r1, [pc, #212]	; (80045e4 <HAL_GPIO_Init+0x2ec>)
 800450e:	69fb      	ldr	r3, [r7, #28]
 8004510:	089b      	lsrs	r3, r3, #2
 8004512:	3302      	adds	r3, #2
 8004514:	69ba      	ldr	r2, [r7, #24]
 8004516:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800451a:	4b38      	ldr	r3, [pc, #224]	; (80045fc <HAL_GPIO_Init+0x304>)
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004520:	693b      	ldr	r3, [r7, #16]
 8004522:	43db      	mvns	r3, r3
 8004524:	69ba      	ldr	r2, [r7, #24]
 8004526:	4013      	ands	r3, r2
 8004528:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800452a:	683b      	ldr	r3, [r7, #0]
 800452c:	685b      	ldr	r3, [r3, #4]
 800452e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004532:	2b00      	cmp	r3, #0
 8004534:	d003      	beq.n	800453e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8004536:	69ba      	ldr	r2, [r7, #24]
 8004538:	693b      	ldr	r3, [r7, #16]
 800453a:	4313      	orrs	r3, r2
 800453c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800453e:	4a2f      	ldr	r2, [pc, #188]	; (80045fc <HAL_GPIO_Init+0x304>)
 8004540:	69bb      	ldr	r3, [r7, #24]
 8004542:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8004544:	4b2d      	ldr	r3, [pc, #180]	; (80045fc <HAL_GPIO_Init+0x304>)
 8004546:	685b      	ldr	r3, [r3, #4]
 8004548:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800454a:	693b      	ldr	r3, [r7, #16]
 800454c:	43db      	mvns	r3, r3
 800454e:	69ba      	ldr	r2, [r7, #24]
 8004550:	4013      	ands	r3, r2
 8004552:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004554:	683b      	ldr	r3, [r7, #0]
 8004556:	685b      	ldr	r3, [r3, #4]
 8004558:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800455c:	2b00      	cmp	r3, #0
 800455e:	d003      	beq.n	8004568 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8004560:	69ba      	ldr	r2, [r7, #24]
 8004562:	693b      	ldr	r3, [r7, #16]
 8004564:	4313      	orrs	r3, r2
 8004566:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004568:	4a24      	ldr	r2, [pc, #144]	; (80045fc <HAL_GPIO_Init+0x304>)
 800456a:	69bb      	ldr	r3, [r7, #24]
 800456c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800456e:	4b23      	ldr	r3, [pc, #140]	; (80045fc <HAL_GPIO_Init+0x304>)
 8004570:	689b      	ldr	r3, [r3, #8]
 8004572:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004574:	693b      	ldr	r3, [r7, #16]
 8004576:	43db      	mvns	r3, r3
 8004578:	69ba      	ldr	r2, [r7, #24]
 800457a:	4013      	ands	r3, r2
 800457c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800457e:	683b      	ldr	r3, [r7, #0]
 8004580:	685b      	ldr	r3, [r3, #4]
 8004582:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004586:	2b00      	cmp	r3, #0
 8004588:	d003      	beq.n	8004592 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800458a:	69ba      	ldr	r2, [r7, #24]
 800458c:	693b      	ldr	r3, [r7, #16]
 800458e:	4313      	orrs	r3, r2
 8004590:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004592:	4a1a      	ldr	r2, [pc, #104]	; (80045fc <HAL_GPIO_Init+0x304>)
 8004594:	69bb      	ldr	r3, [r7, #24]
 8004596:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004598:	4b18      	ldr	r3, [pc, #96]	; (80045fc <HAL_GPIO_Init+0x304>)
 800459a:	68db      	ldr	r3, [r3, #12]
 800459c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800459e:	693b      	ldr	r3, [r7, #16]
 80045a0:	43db      	mvns	r3, r3
 80045a2:	69ba      	ldr	r2, [r7, #24]
 80045a4:	4013      	ands	r3, r2
 80045a6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80045a8:	683b      	ldr	r3, [r7, #0]
 80045aa:	685b      	ldr	r3, [r3, #4]
 80045ac:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d003      	beq.n	80045bc <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80045b4:	69ba      	ldr	r2, [r7, #24]
 80045b6:	693b      	ldr	r3, [r7, #16]
 80045b8:	4313      	orrs	r3, r2
 80045ba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80045bc:	4a0f      	ldr	r2, [pc, #60]	; (80045fc <HAL_GPIO_Init+0x304>)
 80045be:	69bb      	ldr	r3, [r7, #24]
 80045c0:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80045c2:	69fb      	ldr	r3, [r7, #28]
 80045c4:	3301      	adds	r3, #1
 80045c6:	61fb      	str	r3, [r7, #28]
 80045c8:	69fb      	ldr	r3, [r7, #28]
 80045ca:	2b0f      	cmp	r3, #15
 80045cc:	f67f aea2 	bls.w	8004314 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80045d0:	bf00      	nop
 80045d2:	bf00      	nop
 80045d4:	3724      	adds	r7, #36	; 0x24
 80045d6:	46bd      	mov	sp, r7
 80045d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045dc:	4770      	bx	lr
 80045de:	bf00      	nop
 80045e0:	40023800 	.word	0x40023800
 80045e4:	40013800 	.word	0x40013800
 80045e8:	40020000 	.word	0x40020000
 80045ec:	40020400 	.word	0x40020400
 80045f0:	40020800 	.word	0x40020800
 80045f4:	40020c00 	.word	0x40020c00
 80045f8:	40021000 	.word	0x40021000
 80045fc:	40013c00 	.word	0x40013c00

08004600 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004600:	b480      	push	{r7}
 8004602:	b085      	sub	sp, #20
 8004604:	af00      	add	r7, sp, #0
 8004606:	6078      	str	r0, [r7, #4]
 8004608:	460b      	mov	r3, r1
 800460a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	691a      	ldr	r2, [r3, #16]
 8004610:	887b      	ldrh	r3, [r7, #2]
 8004612:	4013      	ands	r3, r2
 8004614:	2b00      	cmp	r3, #0
 8004616:	d002      	beq.n	800461e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004618:	2301      	movs	r3, #1
 800461a:	73fb      	strb	r3, [r7, #15]
 800461c:	e001      	b.n	8004622 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800461e:	2300      	movs	r3, #0
 8004620:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004622:	7bfb      	ldrb	r3, [r7, #15]
}
 8004624:	4618      	mov	r0, r3
 8004626:	3714      	adds	r7, #20
 8004628:	46bd      	mov	sp, r7
 800462a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800462e:	4770      	bx	lr

08004630 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004630:	b480      	push	{r7}
 8004632:	b083      	sub	sp, #12
 8004634:	af00      	add	r7, sp, #0
 8004636:	6078      	str	r0, [r7, #4]
 8004638:	460b      	mov	r3, r1
 800463a:	807b      	strh	r3, [r7, #2]
 800463c:	4613      	mov	r3, r2
 800463e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004640:	787b      	ldrb	r3, [r7, #1]
 8004642:	2b00      	cmp	r3, #0
 8004644:	d003      	beq.n	800464e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004646:	887a      	ldrh	r2, [r7, #2]
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800464c:	e003      	b.n	8004656 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800464e:	887b      	ldrh	r3, [r7, #2]
 8004650:	041a      	lsls	r2, r3, #16
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	619a      	str	r2, [r3, #24]
}
 8004656:	bf00      	nop
 8004658:	370c      	adds	r7, #12
 800465a:	46bd      	mov	sp, r7
 800465c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004660:	4770      	bx	lr
	...

08004664 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004664:	b580      	push	{r7, lr}
 8004666:	b086      	sub	sp, #24
 8004668:	af00      	add	r7, sp, #0
 800466a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	2b00      	cmp	r3, #0
 8004670:	d101      	bne.n	8004676 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004672:	2301      	movs	r3, #1
 8004674:	e264      	b.n	8004b40 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	f003 0301 	and.w	r3, r3, #1
 800467e:	2b00      	cmp	r3, #0
 8004680:	d075      	beq.n	800476e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004682:	4ba3      	ldr	r3, [pc, #652]	; (8004910 <HAL_RCC_OscConfig+0x2ac>)
 8004684:	689b      	ldr	r3, [r3, #8]
 8004686:	f003 030c 	and.w	r3, r3, #12
 800468a:	2b04      	cmp	r3, #4
 800468c:	d00c      	beq.n	80046a8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800468e:	4ba0      	ldr	r3, [pc, #640]	; (8004910 <HAL_RCC_OscConfig+0x2ac>)
 8004690:	689b      	ldr	r3, [r3, #8]
 8004692:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004696:	2b08      	cmp	r3, #8
 8004698:	d112      	bne.n	80046c0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800469a:	4b9d      	ldr	r3, [pc, #628]	; (8004910 <HAL_RCC_OscConfig+0x2ac>)
 800469c:	685b      	ldr	r3, [r3, #4]
 800469e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80046a2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80046a6:	d10b      	bne.n	80046c0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80046a8:	4b99      	ldr	r3, [pc, #612]	; (8004910 <HAL_RCC_OscConfig+0x2ac>)
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d05b      	beq.n	800476c <HAL_RCC_OscConfig+0x108>
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	685b      	ldr	r3, [r3, #4]
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d157      	bne.n	800476c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80046bc:	2301      	movs	r3, #1
 80046be:	e23f      	b.n	8004b40 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	685b      	ldr	r3, [r3, #4]
 80046c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80046c8:	d106      	bne.n	80046d8 <HAL_RCC_OscConfig+0x74>
 80046ca:	4b91      	ldr	r3, [pc, #580]	; (8004910 <HAL_RCC_OscConfig+0x2ac>)
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	4a90      	ldr	r2, [pc, #576]	; (8004910 <HAL_RCC_OscConfig+0x2ac>)
 80046d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80046d4:	6013      	str	r3, [r2, #0]
 80046d6:	e01d      	b.n	8004714 <HAL_RCC_OscConfig+0xb0>
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	685b      	ldr	r3, [r3, #4]
 80046dc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80046e0:	d10c      	bne.n	80046fc <HAL_RCC_OscConfig+0x98>
 80046e2:	4b8b      	ldr	r3, [pc, #556]	; (8004910 <HAL_RCC_OscConfig+0x2ac>)
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	4a8a      	ldr	r2, [pc, #552]	; (8004910 <HAL_RCC_OscConfig+0x2ac>)
 80046e8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80046ec:	6013      	str	r3, [r2, #0]
 80046ee:	4b88      	ldr	r3, [pc, #544]	; (8004910 <HAL_RCC_OscConfig+0x2ac>)
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	4a87      	ldr	r2, [pc, #540]	; (8004910 <HAL_RCC_OscConfig+0x2ac>)
 80046f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80046f8:	6013      	str	r3, [r2, #0]
 80046fa:	e00b      	b.n	8004714 <HAL_RCC_OscConfig+0xb0>
 80046fc:	4b84      	ldr	r3, [pc, #528]	; (8004910 <HAL_RCC_OscConfig+0x2ac>)
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	4a83      	ldr	r2, [pc, #524]	; (8004910 <HAL_RCC_OscConfig+0x2ac>)
 8004702:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004706:	6013      	str	r3, [r2, #0]
 8004708:	4b81      	ldr	r3, [pc, #516]	; (8004910 <HAL_RCC_OscConfig+0x2ac>)
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	4a80      	ldr	r2, [pc, #512]	; (8004910 <HAL_RCC_OscConfig+0x2ac>)
 800470e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004712:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	685b      	ldr	r3, [r3, #4]
 8004718:	2b00      	cmp	r3, #0
 800471a:	d013      	beq.n	8004744 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800471c:	f7fe fb76 	bl	8002e0c <HAL_GetTick>
 8004720:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004722:	e008      	b.n	8004736 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004724:	f7fe fb72 	bl	8002e0c <HAL_GetTick>
 8004728:	4602      	mov	r2, r0
 800472a:	693b      	ldr	r3, [r7, #16]
 800472c:	1ad3      	subs	r3, r2, r3
 800472e:	2b64      	cmp	r3, #100	; 0x64
 8004730:	d901      	bls.n	8004736 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004732:	2303      	movs	r3, #3
 8004734:	e204      	b.n	8004b40 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004736:	4b76      	ldr	r3, [pc, #472]	; (8004910 <HAL_RCC_OscConfig+0x2ac>)
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800473e:	2b00      	cmp	r3, #0
 8004740:	d0f0      	beq.n	8004724 <HAL_RCC_OscConfig+0xc0>
 8004742:	e014      	b.n	800476e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004744:	f7fe fb62 	bl	8002e0c <HAL_GetTick>
 8004748:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800474a:	e008      	b.n	800475e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800474c:	f7fe fb5e 	bl	8002e0c <HAL_GetTick>
 8004750:	4602      	mov	r2, r0
 8004752:	693b      	ldr	r3, [r7, #16]
 8004754:	1ad3      	subs	r3, r2, r3
 8004756:	2b64      	cmp	r3, #100	; 0x64
 8004758:	d901      	bls.n	800475e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800475a:	2303      	movs	r3, #3
 800475c:	e1f0      	b.n	8004b40 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800475e:	4b6c      	ldr	r3, [pc, #432]	; (8004910 <HAL_RCC_OscConfig+0x2ac>)
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004766:	2b00      	cmp	r3, #0
 8004768:	d1f0      	bne.n	800474c <HAL_RCC_OscConfig+0xe8>
 800476a:	e000      	b.n	800476e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800476c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	f003 0302 	and.w	r3, r3, #2
 8004776:	2b00      	cmp	r3, #0
 8004778:	d063      	beq.n	8004842 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800477a:	4b65      	ldr	r3, [pc, #404]	; (8004910 <HAL_RCC_OscConfig+0x2ac>)
 800477c:	689b      	ldr	r3, [r3, #8]
 800477e:	f003 030c 	and.w	r3, r3, #12
 8004782:	2b00      	cmp	r3, #0
 8004784:	d00b      	beq.n	800479e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004786:	4b62      	ldr	r3, [pc, #392]	; (8004910 <HAL_RCC_OscConfig+0x2ac>)
 8004788:	689b      	ldr	r3, [r3, #8]
 800478a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800478e:	2b08      	cmp	r3, #8
 8004790:	d11c      	bne.n	80047cc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004792:	4b5f      	ldr	r3, [pc, #380]	; (8004910 <HAL_RCC_OscConfig+0x2ac>)
 8004794:	685b      	ldr	r3, [r3, #4]
 8004796:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800479a:	2b00      	cmp	r3, #0
 800479c:	d116      	bne.n	80047cc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800479e:	4b5c      	ldr	r3, [pc, #368]	; (8004910 <HAL_RCC_OscConfig+0x2ac>)
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	f003 0302 	and.w	r3, r3, #2
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d005      	beq.n	80047b6 <HAL_RCC_OscConfig+0x152>
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	68db      	ldr	r3, [r3, #12]
 80047ae:	2b01      	cmp	r3, #1
 80047b0:	d001      	beq.n	80047b6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80047b2:	2301      	movs	r3, #1
 80047b4:	e1c4      	b.n	8004b40 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80047b6:	4b56      	ldr	r3, [pc, #344]	; (8004910 <HAL_RCC_OscConfig+0x2ac>)
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	691b      	ldr	r3, [r3, #16]
 80047c2:	00db      	lsls	r3, r3, #3
 80047c4:	4952      	ldr	r1, [pc, #328]	; (8004910 <HAL_RCC_OscConfig+0x2ac>)
 80047c6:	4313      	orrs	r3, r2
 80047c8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80047ca:	e03a      	b.n	8004842 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	68db      	ldr	r3, [r3, #12]
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d020      	beq.n	8004816 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80047d4:	4b4f      	ldr	r3, [pc, #316]	; (8004914 <HAL_RCC_OscConfig+0x2b0>)
 80047d6:	2201      	movs	r2, #1
 80047d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047da:	f7fe fb17 	bl	8002e0c <HAL_GetTick>
 80047de:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80047e0:	e008      	b.n	80047f4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80047e2:	f7fe fb13 	bl	8002e0c <HAL_GetTick>
 80047e6:	4602      	mov	r2, r0
 80047e8:	693b      	ldr	r3, [r7, #16]
 80047ea:	1ad3      	subs	r3, r2, r3
 80047ec:	2b02      	cmp	r3, #2
 80047ee:	d901      	bls.n	80047f4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80047f0:	2303      	movs	r3, #3
 80047f2:	e1a5      	b.n	8004b40 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80047f4:	4b46      	ldr	r3, [pc, #280]	; (8004910 <HAL_RCC_OscConfig+0x2ac>)
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	f003 0302 	and.w	r3, r3, #2
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d0f0      	beq.n	80047e2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004800:	4b43      	ldr	r3, [pc, #268]	; (8004910 <HAL_RCC_OscConfig+0x2ac>)
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	691b      	ldr	r3, [r3, #16]
 800480c:	00db      	lsls	r3, r3, #3
 800480e:	4940      	ldr	r1, [pc, #256]	; (8004910 <HAL_RCC_OscConfig+0x2ac>)
 8004810:	4313      	orrs	r3, r2
 8004812:	600b      	str	r3, [r1, #0]
 8004814:	e015      	b.n	8004842 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004816:	4b3f      	ldr	r3, [pc, #252]	; (8004914 <HAL_RCC_OscConfig+0x2b0>)
 8004818:	2200      	movs	r2, #0
 800481a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800481c:	f7fe faf6 	bl	8002e0c <HAL_GetTick>
 8004820:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004822:	e008      	b.n	8004836 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004824:	f7fe faf2 	bl	8002e0c <HAL_GetTick>
 8004828:	4602      	mov	r2, r0
 800482a:	693b      	ldr	r3, [r7, #16]
 800482c:	1ad3      	subs	r3, r2, r3
 800482e:	2b02      	cmp	r3, #2
 8004830:	d901      	bls.n	8004836 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004832:	2303      	movs	r3, #3
 8004834:	e184      	b.n	8004b40 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004836:	4b36      	ldr	r3, [pc, #216]	; (8004910 <HAL_RCC_OscConfig+0x2ac>)
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	f003 0302 	and.w	r3, r3, #2
 800483e:	2b00      	cmp	r3, #0
 8004840:	d1f0      	bne.n	8004824 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	f003 0308 	and.w	r3, r3, #8
 800484a:	2b00      	cmp	r3, #0
 800484c:	d030      	beq.n	80048b0 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	695b      	ldr	r3, [r3, #20]
 8004852:	2b00      	cmp	r3, #0
 8004854:	d016      	beq.n	8004884 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004856:	4b30      	ldr	r3, [pc, #192]	; (8004918 <HAL_RCC_OscConfig+0x2b4>)
 8004858:	2201      	movs	r2, #1
 800485a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800485c:	f7fe fad6 	bl	8002e0c <HAL_GetTick>
 8004860:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004862:	e008      	b.n	8004876 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004864:	f7fe fad2 	bl	8002e0c <HAL_GetTick>
 8004868:	4602      	mov	r2, r0
 800486a:	693b      	ldr	r3, [r7, #16]
 800486c:	1ad3      	subs	r3, r2, r3
 800486e:	2b02      	cmp	r3, #2
 8004870:	d901      	bls.n	8004876 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004872:	2303      	movs	r3, #3
 8004874:	e164      	b.n	8004b40 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004876:	4b26      	ldr	r3, [pc, #152]	; (8004910 <HAL_RCC_OscConfig+0x2ac>)
 8004878:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800487a:	f003 0302 	and.w	r3, r3, #2
 800487e:	2b00      	cmp	r3, #0
 8004880:	d0f0      	beq.n	8004864 <HAL_RCC_OscConfig+0x200>
 8004882:	e015      	b.n	80048b0 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004884:	4b24      	ldr	r3, [pc, #144]	; (8004918 <HAL_RCC_OscConfig+0x2b4>)
 8004886:	2200      	movs	r2, #0
 8004888:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800488a:	f7fe fabf 	bl	8002e0c <HAL_GetTick>
 800488e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004890:	e008      	b.n	80048a4 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004892:	f7fe fabb 	bl	8002e0c <HAL_GetTick>
 8004896:	4602      	mov	r2, r0
 8004898:	693b      	ldr	r3, [r7, #16]
 800489a:	1ad3      	subs	r3, r2, r3
 800489c:	2b02      	cmp	r3, #2
 800489e:	d901      	bls.n	80048a4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80048a0:	2303      	movs	r3, #3
 80048a2:	e14d      	b.n	8004b40 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80048a4:	4b1a      	ldr	r3, [pc, #104]	; (8004910 <HAL_RCC_OscConfig+0x2ac>)
 80048a6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80048a8:	f003 0302 	and.w	r3, r3, #2
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d1f0      	bne.n	8004892 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	f003 0304 	and.w	r3, r3, #4
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	f000 80a0 	beq.w	80049fe <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80048be:	2300      	movs	r3, #0
 80048c0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80048c2:	4b13      	ldr	r3, [pc, #76]	; (8004910 <HAL_RCC_OscConfig+0x2ac>)
 80048c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d10f      	bne.n	80048ee <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80048ce:	2300      	movs	r3, #0
 80048d0:	60bb      	str	r3, [r7, #8]
 80048d2:	4b0f      	ldr	r3, [pc, #60]	; (8004910 <HAL_RCC_OscConfig+0x2ac>)
 80048d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048d6:	4a0e      	ldr	r2, [pc, #56]	; (8004910 <HAL_RCC_OscConfig+0x2ac>)
 80048d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80048dc:	6413      	str	r3, [r2, #64]	; 0x40
 80048de:	4b0c      	ldr	r3, [pc, #48]	; (8004910 <HAL_RCC_OscConfig+0x2ac>)
 80048e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80048e6:	60bb      	str	r3, [r7, #8]
 80048e8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80048ea:	2301      	movs	r3, #1
 80048ec:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80048ee:	4b0b      	ldr	r3, [pc, #44]	; (800491c <HAL_RCC_OscConfig+0x2b8>)
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d121      	bne.n	800493e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80048fa:	4b08      	ldr	r3, [pc, #32]	; (800491c <HAL_RCC_OscConfig+0x2b8>)
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	4a07      	ldr	r2, [pc, #28]	; (800491c <HAL_RCC_OscConfig+0x2b8>)
 8004900:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004904:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004906:	f7fe fa81 	bl	8002e0c <HAL_GetTick>
 800490a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800490c:	e011      	b.n	8004932 <HAL_RCC_OscConfig+0x2ce>
 800490e:	bf00      	nop
 8004910:	40023800 	.word	0x40023800
 8004914:	42470000 	.word	0x42470000
 8004918:	42470e80 	.word	0x42470e80
 800491c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004920:	f7fe fa74 	bl	8002e0c <HAL_GetTick>
 8004924:	4602      	mov	r2, r0
 8004926:	693b      	ldr	r3, [r7, #16]
 8004928:	1ad3      	subs	r3, r2, r3
 800492a:	2b02      	cmp	r3, #2
 800492c:	d901      	bls.n	8004932 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800492e:	2303      	movs	r3, #3
 8004930:	e106      	b.n	8004b40 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004932:	4b85      	ldr	r3, [pc, #532]	; (8004b48 <HAL_RCC_OscConfig+0x4e4>)
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800493a:	2b00      	cmp	r3, #0
 800493c:	d0f0      	beq.n	8004920 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	689b      	ldr	r3, [r3, #8]
 8004942:	2b01      	cmp	r3, #1
 8004944:	d106      	bne.n	8004954 <HAL_RCC_OscConfig+0x2f0>
 8004946:	4b81      	ldr	r3, [pc, #516]	; (8004b4c <HAL_RCC_OscConfig+0x4e8>)
 8004948:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800494a:	4a80      	ldr	r2, [pc, #512]	; (8004b4c <HAL_RCC_OscConfig+0x4e8>)
 800494c:	f043 0301 	orr.w	r3, r3, #1
 8004950:	6713      	str	r3, [r2, #112]	; 0x70
 8004952:	e01c      	b.n	800498e <HAL_RCC_OscConfig+0x32a>
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	689b      	ldr	r3, [r3, #8]
 8004958:	2b05      	cmp	r3, #5
 800495a:	d10c      	bne.n	8004976 <HAL_RCC_OscConfig+0x312>
 800495c:	4b7b      	ldr	r3, [pc, #492]	; (8004b4c <HAL_RCC_OscConfig+0x4e8>)
 800495e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004960:	4a7a      	ldr	r2, [pc, #488]	; (8004b4c <HAL_RCC_OscConfig+0x4e8>)
 8004962:	f043 0304 	orr.w	r3, r3, #4
 8004966:	6713      	str	r3, [r2, #112]	; 0x70
 8004968:	4b78      	ldr	r3, [pc, #480]	; (8004b4c <HAL_RCC_OscConfig+0x4e8>)
 800496a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800496c:	4a77      	ldr	r2, [pc, #476]	; (8004b4c <HAL_RCC_OscConfig+0x4e8>)
 800496e:	f043 0301 	orr.w	r3, r3, #1
 8004972:	6713      	str	r3, [r2, #112]	; 0x70
 8004974:	e00b      	b.n	800498e <HAL_RCC_OscConfig+0x32a>
 8004976:	4b75      	ldr	r3, [pc, #468]	; (8004b4c <HAL_RCC_OscConfig+0x4e8>)
 8004978:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800497a:	4a74      	ldr	r2, [pc, #464]	; (8004b4c <HAL_RCC_OscConfig+0x4e8>)
 800497c:	f023 0301 	bic.w	r3, r3, #1
 8004980:	6713      	str	r3, [r2, #112]	; 0x70
 8004982:	4b72      	ldr	r3, [pc, #456]	; (8004b4c <HAL_RCC_OscConfig+0x4e8>)
 8004984:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004986:	4a71      	ldr	r2, [pc, #452]	; (8004b4c <HAL_RCC_OscConfig+0x4e8>)
 8004988:	f023 0304 	bic.w	r3, r3, #4
 800498c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	689b      	ldr	r3, [r3, #8]
 8004992:	2b00      	cmp	r3, #0
 8004994:	d015      	beq.n	80049c2 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004996:	f7fe fa39 	bl	8002e0c <HAL_GetTick>
 800499a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800499c:	e00a      	b.n	80049b4 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800499e:	f7fe fa35 	bl	8002e0c <HAL_GetTick>
 80049a2:	4602      	mov	r2, r0
 80049a4:	693b      	ldr	r3, [r7, #16]
 80049a6:	1ad3      	subs	r3, r2, r3
 80049a8:	f241 3288 	movw	r2, #5000	; 0x1388
 80049ac:	4293      	cmp	r3, r2
 80049ae:	d901      	bls.n	80049b4 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80049b0:	2303      	movs	r3, #3
 80049b2:	e0c5      	b.n	8004b40 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80049b4:	4b65      	ldr	r3, [pc, #404]	; (8004b4c <HAL_RCC_OscConfig+0x4e8>)
 80049b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049b8:	f003 0302 	and.w	r3, r3, #2
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d0ee      	beq.n	800499e <HAL_RCC_OscConfig+0x33a>
 80049c0:	e014      	b.n	80049ec <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80049c2:	f7fe fa23 	bl	8002e0c <HAL_GetTick>
 80049c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80049c8:	e00a      	b.n	80049e0 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80049ca:	f7fe fa1f 	bl	8002e0c <HAL_GetTick>
 80049ce:	4602      	mov	r2, r0
 80049d0:	693b      	ldr	r3, [r7, #16]
 80049d2:	1ad3      	subs	r3, r2, r3
 80049d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80049d8:	4293      	cmp	r3, r2
 80049da:	d901      	bls.n	80049e0 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80049dc:	2303      	movs	r3, #3
 80049de:	e0af      	b.n	8004b40 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80049e0:	4b5a      	ldr	r3, [pc, #360]	; (8004b4c <HAL_RCC_OscConfig+0x4e8>)
 80049e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049e4:	f003 0302 	and.w	r3, r3, #2
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d1ee      	bne.n	80049ca <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80049ec:	7dfb      	ldrb	r3, [r7, #23]
 80049ee:	2b01      	cmp	r3, #1
 80049f0:	d105      	bne.n	80049fe <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80049f2:	4b56      	ldr	r3, [pc, #344]	; (8004b4c <HAL_RCC_OscConfig+0x4e8>)
 80049f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049f6:	4a55      	ldr	r2, [pc, #340]	; (8004b4c <HAL_RCC_OscConfig+0x4e8>)
 80049f8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80049fc:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	699b      	ldr	r3, [r3, #24]
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	f000 809b 	beq.w	8004b3e <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004a08:	4b50      	ldr	r3, [pc, #320]	; (8004b4c <HAL_RCC_OscConfig+0x4e8>)
 8004a0a:	689b      	ldr	r3, [r3, #8]
 8004a0c:	f003 030c 	and.w	r3, r3, #12
 8004a10:	2b08      	cmp	r3, #8
 8004a12:	d05c      	beq.n	8004ace <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	699b      	ldr	r3, [r3, #24]
 8004a18:	2b02      	cmp	r3, #2
 8004a1a:	d141      	bne.n	8004aa0 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004a1c:	4b4c      	ldr	r3, [pc, #304]	; (8004b50 <HAL_RCC_OscConfig+0x4ec>)
 8004a1e:	2200      	movs	r2, #0
 8004a20:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a22:	f7fe f9f3 	bl	8002e0c <HAL_GetTick>
 8004a26:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004a28:	e008      	b.n	8004a3c <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004a2a:	f7fe f9ef 	bl	8002e0c <HAL_GetTick>
 8004a2e:	4602      	mov	r2, r0
 8004a30:	693b      	ldr	r3, [r7, #16]
 8004a32:	1ad3      	subs	r3, r2, r3
 8004a34:	2b02      	cmp	r3, #2
 8004a36:	d901      	bls.n	8004a3c <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8004a38:	2303      	movs	r3, #3
 8004a3a:	e081      	b.n	8004b40 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004a3c:	4b43      	ldr	r3, [pc, #268]	; (8004b4c <HAL_RCC_OscConfig+0x4e8>)
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d1f0      	bne.n	8004a2a <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	69da      	ldr	r2, [r3, #28]
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	6a1b      	ldr	r3, [r3, #32]
 8004a50:	431a      	orrs	r2, r3
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a56:	019b      	lsls	r3, r3, #6
 8004a58:	431a      	orrs	r2, r3
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a5e:	085b      	lsrs	r3, r3, #1
 8004a60:	3b01      	subs	r3, #1
 8004a62:	041b      	lsls	r3, r3, #16
 8004a64:	431a      	orrs	r2, r3
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a6a:	061b      	lsls	r3, r3, #24
 8004a6c:	4937      	ldr	r1, [pc, #220]	; (8004b4c <HAL_RCC_OscConfig+0x4e8>)
 8004a6e:	4313      	orrs	r3, r2
 8004a70:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004a72:	4b37      	ldr	r3, [pc, #220]	; (8004b50 <HAL_RCC_OscConfig+0x4ec>)
 8004a74:	2201      	movs	r2, #1
 8004a76:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a78:	f7fe f9c8 	bl	8002e0c <HAL_GetTick>
 8004a7c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004a7e:	e008      	b.n	8004a92 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004a80:	f7fe f9c4 	bl	8002e0c <HAL_GetTick>
 8004a84:	4602      	mov	r2, r0
 8004a86:	693b      	ldr	r3, [r7, #16]
 8004a88:	1ad3      	subs	r3, r2, r3
 8004a8a:	2b02      	cmp	r3, #2
 8004a8c:	d901      	bls.n	8004a92 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8004a8e:	2303      	movs	r3, #3
 8004a90:	e056      	b.n	8004b40 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004a92:	4b2e      	ldr	r3, [pc, #184]	; (8004b4c <HAL_RCC_OscConfig+0x4e8>)
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d0f0      	beq.n	8004a80 <HAL_RCC_OscConfig+0x41c>
 8004a9e:	e04e      	b.n	8004b3e <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004aa0:	4b2b      	ldr	r3, [pc, #172]	; (8004b50 <HAL_RCC_OscConfig+0x4ec>)
 8004aa2:	2200      	movs	r2, #0
 8004aa4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004aa6:	f7fe f9b1 	bl	8002e0c <HAL_GetTick>
 8004aaa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004aac:	e008      	b.n	8004ac0 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004aae:	f7fe f9ad 	bl	8002e0c <HAL_GetTick>
 8004ab2:	4602      	mov	r2, r0
 8004ab4:	693b      	ldr	r3, [r7, #16]
 8004ab6:	1ad3      	subs	r3, r2, r3
 8004ab8:	2b02      	cmp	r3, #2
 8004aba:	d901      	bls.n	8004ac0 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8004abc:	2303      	movs	r3, #3
 8004abe:	e03f      	b.n	8004b40 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004ac0:	4b22      	ldr	r3, [pc, #136]	; (8004b4c <HAL_RCC_OscConfig+0x4e8>)
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d1f0      	bne.n	8004aae <HAL_RCC_OscConfig+0x44a>
 8004acc:	e037      	b.n	8004b3e <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	699b      	ldr	r3, [r3, #24]
 8004ad2:	2b01      	cmp	r3, #1
 8004ad4:	d101      	bne.n	8004ada <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8004ad6:	2301      	movs	r3, #1
 8004ad8:	e032      	b.n	8004b40 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004ada:	4b1c      	ldr	r3, [pc, #112]	; (8004b4c <HAL_RCC_OscConfig+0x4e8>)
 8004adc:	685b      	ldr	r3, [r3, #4]
 8004ade:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	699b      	ldr	r3, [r3, #24]
 8004ae4:	2b01      	cmp	r3, #1
 8004ae6:	d028      	beq.n	8004b3a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004af2:	429a      	cmp	r2, r3
 8004af4:	d121      	bne.n	8004b3a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004b00:	429a      	cmp	r2, r3
 8004b02:	d11a      	bne.n	8004b3a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004b04:	68fa      	ldr	r2, [r7, #12]
 8004b06:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004b0a:	4013      	ands	r3, r2
 8004b0c:	687a      	ldr	r2, [r7, #4]
 8004b0e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004b10:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004b12:	4293      	cmp	r3, r2
 8004b14:	d111      	bne.n	8004b3a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b20:	085b      	lsrs	r3, r3, #1
 8004b22:	3b01      	subs	r3, #1
 8004b24:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004b26:	429a      	cmp	r2, r3
 8004b28:	d107      	bne.n	8004b3a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b34:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004b36:	429a      	cmp	r2, r3
 8004b38:	d001      	beq.n	8004b3e <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8004b3a:	2301      	movs	r3, #1
 8004b3c:	e000      	b.n	8004b40 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8004b3e:	2300      	movs	r3, #0
}
 8004b40:	4618      	mov	r0, r3
 8004b42:	3718      	adds	r7, #24
 8004b44:	46bd      	mov	sp, r7
 8004b46:	bd80      	pop	{r7, pc}
 8004b48:	40007000 	.word	0x40007000
 8004b4c:	40023800 	.word	0x40023800
 8004b50:	42470060 	.word	0x42470060

08004b54 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004b54:	b580      	push	{r7, lr}
 8004b56:	b084      	sub	sp, #16
 8004b58:	af00      	add	r7, sp, #0
 8004b5a:	6078      	str	r0, [r7, #4]
 8004b5c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d101      	bne.n	8004b68 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004b64:	2301      	movs	r3, #1
 8004b66:	e0cc      	b.n	8004d02 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004b68:	4b68      	ldr	r3, [pc, #416]	; (8004d0c <HAL_RCC_ClockConfig+0x1b8>)
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	f003 0307 	and.w	r3, r3, #7
 8004b70:	683a      	ldr	r2, [r7, #0]
 8004b72:	429a      	cmp	r2, r3
 8004b74:	d90c      	bls.n	8004b90 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004b76:	4b65      	ldr	r3, [pc, #404]	; (8004d0c <HAL_RCC_ClockConfig+0x1b8>)
 8004b78:	683a      	ldr	r2, [r7, #0]
 8004b7a:	b2d2      	uxtb	r2, r2
 8004b7c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004b7e:	4b63      	ldr	r3, [pc, #396]	; (8004d0c <HAL_RCC_ClockConfig+0x1b8>)
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	f003 0307 	and.w	r3, r3, #7
 8004b86:	683a      	ldr	r2, [r7, #0]
 8004b88:	429a      	cmp	r2, r3
 8004b8a:	d001      	beq.n	8004b90 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004b8c:	2301      	movs	r3, #1
 8004b8e:	e0b8      	b.n	8004d02 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	f003 0302 	and.w	r3, r3, #2
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d020      	beq.n	8004bde <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	f003 0304 	and.w	r3, r3, #4
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d005      	beq.n	8004bb4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004ba8:	4b59      	ldr	r3, [pc, #356]	; (8004d10 <HAL_RCC_ClockConfig+0x1bc>)
 8004baa:	689b      	ldr	r3, [r3, #8]
 8004bac:	4a58      	ldr	r2, [pc, #352]	; (8004d10 <HAL_RCC_ClockConfig+0x1bc>)
 8004bae:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004bb2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	f003 0308 	and.w	r3, r3, #8
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d005      	beq.n	8004bcc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004bc0:	4b53      	ldr	r3, [pc, #332]	; (8004d10 <HAL_RCC_ClockConfig+0x1bc>)
 8004bc2:	689b      	ldr	r3, [r3, #8]
 8004bc4:	4a52      	ldr	r2, [pc, #328]	; (8004d10 <HAL_RCC_ClockConfig+0x1bc>)
 8004bc6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004bca:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004bcc:	4b50      	ldr	r3, [pc, #320]	; (8004d10 <HAL_RCC_ClockConfig+0x1bc>)
 8004bce:	689b      	ldr	r3, [r3, #8]
 8004bd0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	689b      	ldr	r3, [r3, #8]
 8004bd8:	494d      	ldr	r1, [pc, #308]	; (8004d10 <HAL_RCC_ClockConfig+0x1bc>)
 8004bda:	4313      	orrs	r3, r2
 8004bdc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	f003 0301 	and.w	r3, r3, #1
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d044      	beq.n	8004c74 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	685b      	ldr	r3, [r3, #4]
 8004bee:	2b01      	cmp	r3, #1
 8004bf0:	d107      	bne.n	8004c02 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004bf2:	4b47      	ldr	r3, [pc, #284]	; (8004d10 <HAL_RCC_ClockConfig+0x1bc>)
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d119      	bne.n	8004c32 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004bfe:	2301      	movs	r3, #1
 8004c00:	e07f      	b.n	8004d02 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	685b      	ldr	r3, [r3, #4]
 8004c06:	2b02      	cmp	r3, #2
 8004c08:	d003      	beq.n	8004c12 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004c0e:	2b03      	cmp	r3, #3
 8004c10:	d107      	bne.n	8004c22 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004c12:	4b3f      	ldr	r3, [pc, #252]	; (8004d10 <HAL_RCC_ClockConfig+0x1bc>)
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d109      	bne.n	8004c32 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004c1e:	2301      	movs	r3, #1
 8004c20:	e06f      	b.n	8004d02 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004c22:	4b3b      	ldr	r3, [pc, #236]	; (8004d10 <HAL_RCC_ClockConfig+0x1bc>)
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	f003 0302 	and.w	r3, r3, #2
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d101      	bne.n	8004c32 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004c2e:	2301      	movs	r3, #1
 8004c30:	e067      	b.n	8004d02 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004c32:	4b37      	ldr	r3, [pc, #220]	; (8004d10 <HAL_RCC_ClockConfig+0x1bc>)
 8004c34:	689b      	ldr	r3, [r3, #8]
 8004c36:	f023 0203 	bic.w	r2, r3, #3
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	685b      	ldr	r3, [r3, #4]
 8004c3e:	4934      	ldr	r1, [pc, #208]	; (8004d10 <HAL_RCC_ClockConfig+0x1bc>)
 8004c40:	4313      	orrs	r3, r2
 8004c42:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004c44:	f7fe f8e2 	bl	8002e0c <HAL_GetTick>
 8004c48:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004c4a:	e00a      	b.n	8004c62 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004c4c:	f7fe f8de 	bl	8002e0c <HAL_GetTick>
 8004c50:	4602      	mov	r2, r0
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	1ad3      	subs	r3, r2, r3
 8004c56:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c5a:	4293      	cmp	r3, r2
 8004c5c:	d901      	bls.n	8004c62 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004c5e:	2303      	movs	r3, #3
 8004c60:	e04f      	b.n	8004d02 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004c62:	4b2b      	ldr	r3, [pc, #172]	; (8004d10 <HAL_RCC_ClockConfig+0x1bc>)
 8004c64:	689b      	ldr	r3, [r3, #8]
 8004c66:	f003 020c 	and.w	r2, r3, #12
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	685b      	ldr	r3, [r3, #4]
 8004c6e:	009b      	lsls	r3, r3, #2
 8004c70:	429a      	cmp	r2, r3
 8004c72:	d1eb      	bne.n	8004c4c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004c74:	4b25      	ldr	r3, [pc, #148]	; (8004d0c <HAL_RCC_ClockConfig+0x1b8>)
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	f003 0307 	and.w	r3, r3, #7
 8004c7c:	683a      	ldr	r2, [r7, #0]
 8004c7e:	429a      	cmp	r2, r3
 8004c80:	d20c      	bcs.n	8004c9c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004c82:	4b22      	ldr	r3, [pc, #136]	; (8004d0c <HAL_RCC_ClockConfig+0x1b8>)
 8004c84:	683a      	ldr	r2, [r7, #0]
 8004c86:	b2d2      	uxtb	r2, r2
 8004c88:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004c8a:	4b20      	ldr	r3, [pc, #128]	; (8004d0c <HAL_RCC_ClockConfig+0x1b8>)
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	f003 0307 	and.w	r3, r3, #7
 8004c92:	683a      	ldr	r2, [r7, #0]
 8004c94:	429a      	cmp	r2, r3
 8004c96:	d001      	beq.n	8004c9c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004c98:	2301      	movs	r3, #1
 8004c9a:	e032      	b.n	8004d02 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	f003 0304 	and.w	r3, r3, #4
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d008      	beq.n	8004cba <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004ca8:	4b19      	ldr	r3, [pc, #100]	; (8004d10 <HAL_RCC_ClockConfig+0x1bc>)
 8004caa:	689b      	ldr	r3, [r3, #8]
 8004cac:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	68db      	ldr	r3, [r3, #12]
 8004cb4:	4916      	ldr	r1, [pc, #88]	; (8004d10 <HAL_RCC_ClockConfig+0x1bc>)
 8004cb6:	4313      	orrs	r3, r2
 8004cb8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	f003 0308 	and.w	r3, r3, #8
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d009      	beq.n	8004cda <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004cc6:	4b12      	ldr	r3, [pc, #72]	; (8004d10 <HAL_RCC_ClockConfig+0x1bc>)
 8004cc8:	689b      	ldr	r3, [r3, #8]
 8004cca:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	691b      	ldr	r3, [r3, #16]
 8004cd2:	00db      	lsls	r3, r3, #3
 8004cd4:	490e      	ldr	r1, [pc, #56]	; (8004d10 <HAL_RCC_ClockConfig+0x1bc>)
 8004cd6:	4313      	orrs	r3, r2
 8004cd8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004cda:	f000 f821 	bl	8004d20 <HAL_RCC_GetSysClockFreq>
 8004cde:	4602      	mov	r2, r0
 8004ce0:	4b0b      	ldr	r3, [pc, #44]	; (8004d10 <HAL_RCC_ClockConfig+0x1bc>)
 8004ce2:	689b      	ldr	r3, [r3, #8]
 8004ce4:	091b      	lsrs	r3, r3, #4
 8004ce6:	f003 030f 	and.w	r3, r3, #15
 8004cea:	490a      	ldr	r1, [pc, #40]	; (8004d14 <HAL_RCC_ClockConfig+0x1c0>)
 8004cec:	5ccb      	ldrb	r3, [r1, r3]
 8004cee:	fa22 f303 	lsr.w	r3, r2, r3
 8004cf2:	4a09      	ldr	r2, [pc, #36]	; (8004d18 <HAL_RCC_ClockConfig+0x1c4>)
 8004cf4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004cf6:	4b09      	ldr	r3, [pc, #36]	; (8004d1c <HAL_RCC_ClockConfig+0x1c8>)
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	4618      	mov	r0, r3
 8004cfc:	f7fe f842 	bl	8002d84 <HAL_InitTick>

  return HAL_OK;
 8004d00:	2300      	movs	r3, #0
}
 8004d02:	4618      	mov	r0, r3
 8004d04:	3710      	adds	r7, #16
 8004d06:	46bd      	mov	sp, r7
 8004d08:	bd80      	pop	{r7, pc}
 8004d0a:	bf00      	nop
 8004d0c:	40023c00 	.word	0x40023c00
 8004d10:	40023800 	.word	0x40023800
 8004d14:	0800b00c 	.word	0x0800b00c
 8004d18:	20000004 	.word	0x20000004
 8004d1c:	20000008 	.word	0x20000008

08004d20 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004d20:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8004d24:	b084      	sub	sp, #16
 8004d26:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004d28:	2300      	movs	r3, #0
 8004d2a:	607b      	str	r3, [r7, #4]
 8004d2c:	2300      	movs	r3, #0
 8004d2e:	60fb      	str	r3, [r7, #12]
 8004d30:	2300      	movs	r3, #0
 8004d32:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8004d34:	2300      	movs	r3, #0
 8004d36:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004d38:	4b67      	ldr	r3, [pc, #412]	; (8004ed8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004d3a:	689b      	ldr	r3, [r3, #8]
 8004d3c:	f003 030c 	and.w	r3, r3, #12
 8004d40:	2b08      	cmp	r3, #8
 8004d42:	d00d      	beq.n	8004d60 <HAL_RCC_GetSysClockFreq+0x40>
 8004d44:	2b08      	cmp	r3, #8
 8004d46:	f200 80bd 	bhi.w	8004ec4 <HAL_RCC_GetSysClockFreq+0x1a4>
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d002      	beq.n	8004d54 <HAL_RCC_GetSysClockFreq+0x34>
 8004d4e:	2b04      	cmp	r3, #4
 8004d50:	d003      	beq.n	8004d5a <HAL_RCC_GetSysClockFreq+0x3a>
 8004d52:	e0b7      	b.n	8004ec4 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004d54:	4b61      	ldr	r3, [pc, #388]	; (8004edc <HAL_RCC_GetSysClockFreq+0x1bc>)
 8004d56:	60bb      	str	r3, [r7, #8]
       break;
 8004d58:	e0b7      	b.n	8004eca <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004d5a:	4b61      	ldr	r3, [pc, #388]	; (8004ee0 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8004d5c:	60bb      	str	r3, [r7, #8]
      break;
 8004d5e:	e0b4      	b.n	8004eca <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004d60:	4b5d      	ldr	r3, [pc, #372]	; (8004ed8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004d62:	685b      	ldr	r3, [r3, #4]
 8004d64:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004d68:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004d6a:	4b5b      	ldr	r3, [pc, #364]	; (8004ed8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004d6c:	685b      	ldr	r3, [r3, #4]
 8004d6e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d04d      	beq.n	8004e12 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004d76:	4b58      	ldr	r3, [pc, #352]	; (8004ed8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004d78:	685b      	ldr	r3, [r3, #4]
 8004d7a:	099b      	lsrs	r3, r3, #6
 8004d7c:	461a      	mov	r2, r3
 8004d7e:	f04f 0300 	mov.w	r3, #0
 8004d82:	f240 10ff 	movw	r0, #511	; 0x1ff
 8004d86:	f04f 0100 	mov.w	r1, #0
 8004d8a:	ea02 0800 	and.w	r8, r2, r0
 8004d8e:	ea03 0901 	and.w	r9, r3, r1
 8004d92:	4640      	mov	r0, r8
 8004d94:	4649      	mov	r1, r9
 8004d96:	f04f 0200 	mov.w	r2, #0
 8004d9a:	f04f 0300 	mov.w	r3, #0
 8004d9e:	014b      	lsls	r3, r1, #5
 8004da0:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004da4:	0142      	lsls	r2, r0, #5
 8004da6:	4610      	mov	r0, r2
 8004da8:	4619      	mov	r1, r3
 8004daa:	ebb0 0008 	subs.w	r0, r0, r8
 8004dae:	eb61 0109 	sbc.w	r1, r1, r9
 8004db2:	f04f 0200 	mov.w	r2, #0
 8004db6:	f04f 0300 	mov.w	r3, #0
 8004dba:	018b      	lsls	r3, r1, #6
 8004dbc:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8004dc0:	0182      	lsls	r2, r0, #6
 8004dc2:	1a12      	subs	r2, r2, r0
 8004dc4:	eb63 0301 	sbc.w	r3, r3, r1
 8004dc8:	f04f 0000 	mov.w	r0, #0
 8004dcc:	f04f 0100 	mov.w	r1, #0
 8004dd0:	00d9      	lsls	r1, r3, #3
 8004dd2:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004dd6:	00d0      	lsls	r0, r2, #3
 8004dd8:	4602      	mov	r2, r0
 8004dda:	460b      	mov	r3, r1
 8004ddc:	eb12 0208 	adds.w	r2, r2, r8
 8004de0:	eb43 0309 	adc.w	r3, r3, r9
 8004de4:	f04f 0000 	mov.w	r0, #0
 8004de8:	f04f 0100 	mov.w	r1, #0
 8004dec:	0259      	lsls	r1, r3, #9
 8004dee:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8004df2:	0250      	lsls	r0, r2, #9
 8004df4:	4602      	mov	r2, r0
 8004df6:	460b      	mov	r3, r1
 8004df8:	4610      	mov	r0, r2
 8004dfa:	4619      	mov	r1, r3
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	461a      	mov	r2, r3
 8004e00:	f04f 0300 	mov.w	r3, #0
 8004e04:	f7fc f856 	bl	8000eb4 <__aeabi_uldivmod>
 8004e08:	4602      	mov	r2, r0
 8004e0a:	460b      	mov	r3, r1
 8004e0c:	4613      	mov	r3, r2
 8004e0e:	60fb      	str	r3, [r7, #12]
 8004e10:	e04a      	b.n	8004ea8 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004e12:	4b31      	ldr	r3, [pc, #196]	; (8004ed8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004e14:	685b      	ldr	r3, [r3, #4]
 8004e16:	099b      	lsrs	r3, r3, #6
 8004e18:	461a      	mov	r2, r3
 8004e1a:	f04f 0300 	mov.w	r3, #0
 8004e1e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8004e22:	f04f 0100 	mov.w	r1, #0
 8004e26:	ea02 0400 	and.w	r4, r2, r0
 8004e2a:	ea03 0501 	and.w	r5, r3, r1
 8004e2e:	4620      	mov	r0, r4
 8004e30:	4629      	mov	r1, r5
 8004e32:	f04f 0200 	mov.w	r2, #0
 8004e36:	f04f 0300 	mov.w	r3, #0
 8004e3a:	014b      	lsls	r3, r1, #5
 8004e3c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004e40:	0142      	lsls	r2, r0, #5
 8004e42:	4610      	mov	r0, r2
 8004e44:	4619      	mov	r1, r3
 8004e46:	1b00      	subs	r0, r0, r4
 8004e48:	eb61 0105 	sbc.w	r1, r1, r5
 8004e4c:	f04f 0200 	mov.w	r2, #0
 8004e50:	f04f 0300 	mov.w	r3, #0
 8004e54:	018b      	lsls	r3, r1, #6
 8004e56:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8004e5a:	0182      	lsls	r2, r0, #6
 8004e5c:	1a12      	subs	r2, r2, r0
 8004e5e:	eb63 0301 	sbc.w	r3, r3, r1
 8004e62:	f04f 0000 	mov.w	r0, #0
 8004e66:	f04f 0100 	mov.w	r1, #0
 8004e6a:	00d9      	lsls	r1, r3, #3
 8004e6c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004e70:	00d0      	lsls	r0, r2, #3
 8004e72:	4602      	mov	r2, r0
 8004e74:	460b      	mov	r3, r1
 8004e76:	1912      	adds	r2, r2, r4
 8004e78:	eb45 0303 	adc.w	r3, r5, r3
 8004e7c:	f04f 0000 	mov.w	r0, #0
 8004e80:	f04f 0100 	mov.w	r1, #0
 8004e84:	0299      	lsls	r1, r3, #10
 8004e86:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8004e8a:	0290      	lsls	r0, r2, #10
 8004e8c:	4602      	mov	r2, r0
 8004e8e:	460b      	mov	r3, r1
 8004e90:	4610      	mov	r0, r2
 8004e92:	4619      	mov	r1, r3
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	461a      	mov	r2, r3
 8004e98:	f04f 0300 	mov.w	r3, #0
 8004e9c:	f7fc f80a 	bl	8000eb4 <__aeabi_uldivmod>
 8004ea0:	4602      	mov	r2, r0
 8004ea2:	460b      	mov	r3, r1
 8004ea4:	4613      	mov	r3, r2
 8004ea6:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004ea8:	4b0b      	ldr	r3, [pc, #44]	; (8004ed8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004eaa:	685b      	ldr	r3, [r3, #4]
 8004eac:	0c1b      	lsrs	r3, r3, #16
 8004eae:	f003 0303 	and.w	r3, r3, #3
 8004eb2:	3301      	adds	r3, #1
 8004eb4:	005b      	lsls	r3, r3, #1
 8004eb6:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8004eb8:	68fa      	ldr	r2, [r7, #12]
 8004eba:	683b      	ldr	r3, [r7, #0]
 8004ebc:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ec0:	60bb      	str	r3, [r7, #8]
      break;
 8004ec2:	e002      	b.n	8004eca <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004ec4:	4b05      	ldr	r3, [pc, #20]	; (8004edc <HAL_RCC_GetSysClockFreq+0x1bc>)
 8004ec6:	60bb      	str	r3, [r7, #8]
      break;
 8004ec8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004eca:	68bb      	ldr	r3, [r7, #8]
}
 8004ecc:	4618      	mov	r0, r3
 8004ece:	3710      	adds	r7, #16
 8004ed0:	46bd      	mov	sp, r7
 8004ed2:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8004ed6:	bf00      	nop
 8004ed8:	40023800 	.word	0x40023800
 8004edc:	00f42400 	.word	0x00f42400
 8004ee0:	007a1200 	.word	0x007a1200

08004ee4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004ee4:	b480      	push	{r7}
 8004ee6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004ee8:	4b03      	ldr	r3, [pc, #12]	; (8004ef8 <HAL_RCC_GetHCLKFreq+0x14>)
 8004eea:	681b      	ldr	r3, [r3, #0]
}
 8004eec:	4618      	mov	r0, r3
 8004eee:	46bd      	mov	sp, r7
 8004ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ef4:	4770      	bx	lr
 8004ef6:	bf00      	nop
 8004ef8:	20000004 	.word	0x20000004

08004efc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004efc:	b580      	push	{r7, lr}
 8004efe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004f00:	f7ff fff0 	bl	8004ee4 <HAL_RCC_GetHCLKFreq>
 8004f04:	4602      	mov	r2, r0
 8004f06:	4b05      	ldr	r3, [pc, #20]	; (8004f1c <HAL_RCC_GetPCLK1Freq+0x20>)
 8004f08:	689b      	ldr	r3, [r3, #8]
 8004f0a:	0a9b      	lsrs	r3, r3, #10
 8004f0c:	f003 0307 	and.w	r3, r3, #7
 8004f10:	4903      	ldr	r1, [pc, #12]	; (8004f20 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004f12:	5ccb      	ldrb	r3, [r1, r3]
 8004f14:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004f18:	4618      	mov	r0, r3
 8004f1a:	bd80      	pop	{r7, pc}
 8004f1c:	40023800 	.word	0x40023800
 8004f20:	0800b01c 	.word	0x0800b01c

08004f24 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004f24:	b580      	push	{r7, lr}
 8004f26:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004f28:	f7ff ffdc 	bl	8004ee4 <HAL_RCC_GetHCLKFreq>
 8004f2c:	4602      	mov	r2, r0
 8004f2e:	4b05      	ldr	r3, [pc, #20]	; (8004f44 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004f30:	689b      	ldr	r3, [r3, #8]
 8004f32:	0b5b      	lsrs	r3, r3, #13
 8004f34:	f003 0307 	and.w	r3, r3, #7
 8004f38:	4903      	ldr	r1, [pc, #12]	; (8004f48 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004f3a:	5ccb      	ldrb	r3, [r1, r3]
 8004f3c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004f40:	4618      	mov	r0, r3
 8004f42:	bd80      	pop	{r7, pc}
 8004f44:	40023800 	.word	0x40023800
 8004f48:	0800b01c 	.word	0x0800b01c

08004f4c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004f4c:	b580      	push	{r7, lr}
 8004f4e:	b082      	sub	sp, #8
 8004f50:	af00      	add	r7, sp, #0
 8004f52:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d101      	bne.n	8004f5e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004f5a:	2301      	movs	r3, #1
 8004f5c:	e07b      	b.n	8005056 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d108      	bne.n	8004f78 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	685b      	ldr	r3, [r3, #4]
 8004f6a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004f6e:	d009      	beq.n	8004f84 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	2200      	movs	r2, #0
 8004f74:	61da      	str	r2, [r3, #28]
 8004f76:	e005      	b.n	8004f84 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	2200      	movs	r2, #0
 8004f7c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	2200      	movs	r2, #0
 8004f82:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	2200      	movs	r2, #0
 8004f88:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004f90:	b2db      	uxtb	r3, r3
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d106      	bne.n	8004fa4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	2200      	movs	r2, #0
 8004f9a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004f9e:	6878      	ldr	r0, [r7, #4]
 8004fa0:	f7fd fc92 	bl	80028c8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	2202      	movs	r2, #2
 8004fa8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	681a      	ldr	r2, [r3, #0]
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004fba:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	685b      	ldr	r3, [r3, #4]
 8004fc0:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	689b      	ldr	r3, [r3, #8]
 8004fc8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004fcc:	431a      	orrs	r2, r3
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	68db      	ldr	r3, [r3, #12]
 8004fd2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004fd6:	431a      	orrs	r2, r3
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	691b      	ldr	r3, [r3, #16]
 8004fdc:	f003 0302 	and.w	r3, r3, #2
 8004fe0:	431a      	orrs	r2, r3
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	695b      	ldr	r3, [r3, #20]
 8004fe6:	f003 0301 	and.w	r3, r3, #1
 8004fea:	431a      	orrs	r2, r3
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	699b      	ldr	r3, [r3, #24]
 8004ff0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004ff4:	431a      	orrs	r2, r3
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	69db      	ldr	r3, [r3, #28]
 8004ffa:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004ffe:	431a      	orrs	r2, r3
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	6a1b      	ldr	r3, [r3, #32]
 8005004:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005008:	ea42 0103 	orr.w	r1, r2, r3
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005010:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	430a      	orrs	r2, r1
 800501a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	699b      	ldr	r3, [r3, #24]
 8005020:	0c1b      	lsrs	r3, r3, #16
 8005022:	f003 0104 	and.w	r1, r3, #4
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800502a:	f003 0210 	and.w	r2, r3, #16
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	430a      	orrs	r2, r1
 8005034:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	69da      	ldr	r2, [r3, #28]
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005044:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	2200      	movs	r2, #0
 800504a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	2201      	movs	r2, #1
 8005050:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8005054:	2300      	movs	r3, #0
}
 8005056:	4618      	mov	r0, r3
 8005058:	3708      	adds	r7, #8
 800505a:	46bd      	mov	sp, r7
 800505c:	bd80      	pop	{r7, pc}
	...

08005060 <HAL_SPI_Transmit_IT>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_IT(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8005060:	b480      	push	{r7}
 8005062:	b087      	sub	sp, #28
 8005064:	af00      	add	r7, sp, #0
 8005066:	60f8      	str	r0, [r7, #12]
 8005068:	60b9      	str	r1, [r7, #8]
 800506a:	4613      	mov	r3, r2
 800506c:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 800506e:	2300      	movs	r3, #0
 8005070:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005078:	2b01      	cmp	r3, #1
 800507a:	d101      	bne.n	8005080 <HAL_SPI_Transmit_IT+0x20>
 800507c:	2302      	movs	r3, #2
 800507e:	e06f      	b.n	8005160 <HAL_SPI_Transmit_IT+0x100>
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	2201      	movs	r2, #1
 8005084:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if ((pData == NULL) || (Size == 0U))
 8005088:	68bb      	ldr	r3, [r7, #8]
 800508a:	2b00      	cmp	r3, #0
 800508c:	d002      	beq.n	8005094 <HAL_SPI_Transmit_IT+0x34>
 800508e:	88fb      	ldrh	r3, [r7, #6]
 8005090:	2b00      	cmp	r3, #0
 8005092:	d102      	bne.n	800509a <HAL_SPI_Transmit_IT+0x3a>
  {
    errorcode = HAL_ERROR;
 8005094:	2301      	movs	r3, #1
 8005096:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005098:	e05d      	b.n	8005156 <HAL_SPI_Transmit_IT+0xf6>
  }

  if (hspi->State != HAL_SPI_STATE_READY)
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80050a0:	b2db      	uxtb	r3, r3
 80050a2:	2b01      	cmp	r3, #1
 80050a4:	d002      	beq.n	80050ac <HAL_SPI_Transmit_IT+0x4c>
  {
    errorcode = HAL_BUSY;
 80050a6:	2302      	movs	r3, #2
 80050a8:	75fb      	strb	r3, [r7, #23]
    goto error;
 80050aa:	e054      	b.n	8005156 <HAL_SPI_Transmit_IT+0xf6>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	2203      	movs	r2, #3
 80050b0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	2200      	movs	r2, #0
 80050b8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	68ba      	ldr	r2, [r7, #8]
 80050be:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	88fa      	ldrh	r2, [r7, #6]
 80050c4:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	88fa      	ldrh	r2, [r7, #6]
 80050ca:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	2200      	movs	r2, #0
 80050d0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	2200      	movs	r2, #0
 80050d6:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	2200      	movs	r2, #0
 80050dc:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	2200      	movs	r2, #0
 80050e2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	68db      	ldr	r3, [r3, #12]
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d003      	beq.n	80050f4 <HAL_SPI_Transmit_IT+0x94>
  {
    hspi->TxISR = SPI_TxISR_16BIT;
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	4a1f      	ldr	r2, [pc, #124]	; (800516c <HAL_SPI_Transmit_IT+0x10c>)
 80050f0:	645a      	str	r2, [r3, #68]	; 0x44
 80050f2:	e002      	b.n	80050fa <HAL_SPI_Transmit_IT+0x9a>
  }
  else
  {
    hspi->TxISR = SPI_TxISR_8BIT;
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	4a1e      	ldr	r2, [pc, #120]	; (8005170 <HAL_SPI_Transmit_IT+0x110>)
 80050f8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	689b      	ldr	r3, [r3, #8]
 80050fe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005102:	d10f      	bne.n	8005124 <HAL_SPI_Transmit_IT+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	681a      	ldr	r2, [r3, #0]
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005112:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	681a      	ldr	r2, [r3, #0]
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005122:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Enable TXE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_ERR));
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	685a      	ldr	r2, [r3, #4]
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	f042 02a0 	orr.w	r2, r2, #160	; 0xa0
 8005132:	605a      	str	r2, [r3, #4]


  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800513e:	2b40      	cmp	r3, #64	; 0x40
 8005140:	d008      	beq.n	8005154 <HAL_SPI_Transmit_IT+0xf4>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	681a      	ldr	r2, [r3, #0]
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005150:	601a      	str	r2, [r3, #0]
 8005152:	e000      	b.n	8005156 <HAL_SPI_Transmit_IT+0xf6>
  }

error :
 8005154:	bf00      	nop
  __HAL_UNLOCK(hspi);
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	2200      	movs	r2, #0
 800515a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800515e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005160:	4618      	mov	r0, r3
 8005162:	371c      	adds	r7, #28
 8005164:	46bd      	mov	sp, r7
 8005166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800516a:	4770      	bx	lr
 800516c:	080053f7 	.word	0x080053f7
 8005170:	080053b1 	.word	0x080053b1

08005174 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8005174:	b580      	push	{r7, lr}
 8005176:	b088      	sub	sp, #32
 8005178:	af00      	add	r7, sp, #0
 800517a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	685b      	ldr	r3, [r3, #4]
 8005182:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	689b      	ldr	r3, [r3, #8]
 800518a:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800518c:	69bb      	ldr	r3, [r7, #24]
 800518e:	099b      	lsrs	r3, r3, #6
 8005190:	f003 0301 	and.w	r3, r3, #1
 8005194:	2b00      	cmp	r3, #0
 8005196:	d10f      	bne.n	80051b8 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8005198:	69bb      	ldr	r3, [r7, #24]
 800519a:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d00a      	beq.n	80051b8 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80051a2:	69fb      	ldr	r3, [r7, #28]
 80051a4:	099b      	lsrs	r3, r3, #6
 80051a6:	f003 0301 	and.w	r3, r3, #1
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d004      	beq.n	80051b8 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051b2:	6878      	ldr	r0, [r7, #4]
 80051b4:	4798      	blx	r3
    return;
 80051b6:	e0d7      	b.n	8005368 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 80051b8:	69bb      	ldr	r3, [r7, #24]
 80051ba:	085b      	lsrs	r3, r3, #1
 80051bc:	f003 0301 	and.w	r3, r3, #1
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d00a      	beq.n	80051da <HAL_SPI_IRQHandler+0x66>
 80051c4:	69fb      	ldr	r3, [r7, #28]
 80051c6:	09db      	lsrs	r3, r3, #7
 80051c8:	f003 0301 	and.w	r3, r3, #1
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d004      	beq.n	80051da <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80051d4:	6878      	ldr	r0, [r7, #4]
 80051d6:	4798      	blx	r3
    return;
 80051d8:	e0c6      	b.n	8005368 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80051da:	69bb      	ldr	r3, [r7, #24]
 80051dc:	095b      	lsrs	r3, r3, #5
 80051de:	f003 0301 	and.w	r3, r3, #1
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d10c      	bne.n	8005200 <HAL_SPI_IRQHandler+0x8c>
 80051e6:	69bb      	ldr	r3, [r7, #24]
 80051e8:	099b      	lsrs	r3, r3, #6
 80051ea:	f003 0301 	and.w	r3, r3, #1
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d106      	bne.n	8005200 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 80051f2:	69bb      	ldr	r3, [r7, #24]
 80051f4:	0a1b      	lsrs	r3, r3, #8
 80051f6:	f003 0301 	and.w	r3, r3, #1
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	f000 80b4 	beq.w	8005368 <HAL_SPI_IRQHandler+0x1f4>
 8005200:	69fb      	ldr	r3, [r7, #28]
 8005202:	095b      	lsrs	r3, r3, #5
 8005204:	f003 0301 	and.w	r3, r3, #1
 8005208:	2b00      	cmp	r3, #0
 800520a:	f000 80ad 	beq.w	8005368 <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800520e:	69bb      	ldr	r3, [r7, #24]
 8005210:	099b      	lsrs	r3, r3, #6
 8005212:	f003 0301 	and.w	r3, r3, #1
 8005216:	2b00      	cmp	r3, #0
 8005218:	d023      	beq.n	8005262 <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005220:	b2db      	uxtb	r3, r3
 8005222:	2b03      	cmp	r3, #3
 8005224:	d011      	beq.n	800524a <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800522a:	f043 0204 	orr.w	r2, r3, #4
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005232:	2300      	movs	r3, #0
 8005234:	617b      	str	r3, [r7, #20]
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	68db      	ldr	r3, [r3, #12]
 800523c:	617b      	str	r3, [r7, #20]
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	689b      	ldr	r3, [r3, #8]
 8005244:	617b      	str	r3, [r7, #20]
 8005246:	697b      	ldr	r3, [r7, #20]
 8005248:	e00b      	b.n	8005262 <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800524a:	2300      	movs	r3, #0
 800524c:	613b      	str	r3, [r7, #16]
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	68db      	ldr	r3, [r3, #12]
 8005254:	613b      	str	r3, [r7, #16]
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	689b      	ldr	r3, [r3, #8]
 800525c:	613b      	str	r3, [r7, #16]
 800525e:	693b      	ldr	r3, [r7, #16]
        return;
 8005260:	e082      	b.n	8005368 <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8005262:	69bb      	ldr	r3, [r7, #24]
 8005264:	095b      	lsrs	r3, r3, #5
 8005266:	f003 0301 	and.w	r3, r3, #1
 800526a:	2b00      	cmp	r3, #0
 800526c:	d014      	beq.n	8005298 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005272:	f043 0201 	orr.w	r2, r3, #1
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800527a:	2300      	movs	r3, #0
 800527c:	60fb      	str	r3, [r7, #12]
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	689b      	ldr	r3, [r3, #8]
 8005284:	60fb      	str	r3, [r7, #12]
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	681a      	ldr	r2, [r3, #0]
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005294:	601a      	str	r2, [r3, #0]
 8005296:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8005298:	69bb      	ldr	r3, [r7, #24]
 800529a:	0a1b      	lsrs	r3, r3, #8
 800529c:	f003 0301 	and.w	r3, r3, #1
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d00c      	beq.n	80052be <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80052a8:	f043 0208 	orr.w	r2, r3, #8
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 80052b0:	2300      	movs	r3, #0
 80052b2:	60bb      	str	r3, [r7, #8]
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	689b      	ldr	r3, [r3, #8]
 80052ba:	60bb      	str	r3, [r7, #8]
 80052bc:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d04f      	beq.n	8005366 <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	685a      	ldr	r2, [r3, #4]
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80052d4:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	2201      	movs	r2, #1
 80052da:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 80052de:	69fb      	ldr	r3, [r7, #28]
 80052e0:	f003 0302 	and.w	r3, r3, #2
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d104      	bne.n	80052f2 <HAL_SPI_IRQHandler+0x17e>
 80052e8:	69fb      	ldr	r3, [r7, #28]
 80052ea:	f003 0301 	and.w	r3, r3, #1
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d034      	beq.n	800535c <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	685a      	ldr	r2, [r3, #4]
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	f022 0203 	bic.w	r2, r2, #3
 8005300:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005306:	2b00      	cmp	r3, #0
 8005308:	d011      	beq.n	800532e <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800530e:	4a18      	ldr	r2, [pc, #96]	; (8005370 <HAL_SPI_IRQHandler+0x1fc>)
 8005310:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005316:	4618      	mov	r0, r3
 8005318:	f7fe fd62 	bl	8003de0 <HAL_DMA_Abort_IT>
 800531c:	4603      	mov	r3, r0
 800531e:	2b00      	cmp	r3, #0
 8005320:	d005      	beq.n	800532e <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005326:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005332:	2b00      	cmp	r3, #0
 8005334:	d016      	beq.n	8005364 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800533a:	4a0d      	ldr	r2, [pc, #52]	; (8005370 <HAL_SPI_IRQHandler+0x1fc>)
 800533c:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005342:	4618      	mov	r0, r3
 8005344:	f7fe fd4c 	bl	8003de0 <HAL_DMA_Abort_IT>
 8005348:	4603      	mov	r3, r0
 800534a:	2b00      	cmp	r3, #0
 800534c:	d00a      	beq.n	8005364 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005352:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 800535a:	e003      	b.n	8005364 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 800535c:	6878      	ldr	r0, [r7, #4]
 800535e:	f000 f809 	bl	8005374 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8005362:	e000      	b.n	8005366 <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 8005364:	bf00      	nop
    return;
 8005366:	bf00      	nop
  }
}
 8005368:	3720      	adds	r7, #32
 800536a:	46bd      	mov	sp, r7
 800536c:	bd80      	pop	{r7, pc}
 800536e:	bf00      	nop
 8005370:	08005389 	.word	0x08005389

08005374 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8005374:	b480      	push	{r7}
 8005376:	b083      	sub	sp, #12
 8005378:	af00      	add	r7, sp, #0
 800537a:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 800537c:	bf00      	nop
 800537e:	370c      	adds	r7, #12
 8005380:	46bd      	mov	sp, r7
 8005382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005386:	4770      	bx	lr

08005388 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005388:	b580      	push	{r7, lr}
 800538a:	b084      	sub	sp, #16
 800538c:	af00      	add	r7, sp, #0
 800538e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005394:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	2200      	movs	r2, #0
 800539a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	2200      	movs	r2, #0
 80053a0:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80053a2:	68f8      	ldr	r0, [r7, #12]
 80053a4:	f7ff ffe6 	bl	8005374 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80053a8:	bf00      	nop
 80053aa:	3710      	adds	r7, #16
 80053ac:	46bd      	mov	sp, r7
 80053ae:	bd80      	pop	{r7, pc}

080053b0 <SPI_TxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_TxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 80053b0:	b580      	push	{r7, lr}
 80053b2:	b082      	sub	sp, #8
 80053b4:	af00      	add	r7, sp, #0
 80053b6:	6078      	str	r0, [r7, #4]
  *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	330c      	adds	r3, #12
 80053c2:	7812      	ldrb	r2, [r2, #0]
 80053c4:	701a      	strb	r2, [r3, #0]
  hspi->pTxBuffPtr++;
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053ca:	1c5a      	adds	r2, r3, #1
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount--;
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80053d4:	b29b      	uxth	r3, r3
 80053d6:	3b01      	subs	r3, #1
 80053d8:	b29a      	uxth	r2, r3
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	86da      	strh	r2, [r3, #54]	; 0x36

  if (hspi->TxXferCount == 0U)
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80053e2:	b29b      	uxth	r3, r3
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d102      	bne.n	80053ee <SPI_TxISR_8BIT+0x3e>
    {
      /* Enable CRC Transmission */
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
    }
#endif /* USE_SPI_CRC */
    SPI_CloseTx_ISR(hspi);
 80053e8:	6878      	ldr	r0, [r7, #4]
 80053ea:	f000 f8f1 	bl	80055d0 <SPI_CloseTx_ISR>
  }
}
 80053ee:	bf00      	nop
 80053f0:	3708      	adds	r7, #8
 80053f2:	46bd      	mov	sp, r7
 80053f4:	bd80      	pop	{r7, pc}

080053f6 <SPI_TxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_TxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 80053f6:	b580      	push	{r7, lr}
 80053f8:	b082      	sub	sp, #8
 80053fa:	af00      	add	r7, sp, #0
 80053fc:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005402:	881a      	ldrh	r2, [r3, #0]
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800540e:	1c9a      	adds	r2, r3, #2
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount--;
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005418:	b29b      	uxth	r3, r3
 800541a:	3b01      	subs	r3, #1
 800541c:	b29a      	uxth	r2, r3
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	86da      	strh	r2, [r3, #54]	; 0x36

  if (hspi->TxXferCount == 0U)
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005426:	b29b      	uxth	r3, r3
 8005428:	2b00      	cmp	r3, #0
 800542a:	d102      	bne.n	8005432 <SPI_TxISR_16BIT+0x3c>
    {
      /* Enable CRC Transmission */
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
    }
#endif /* USE_SPI_CRC */
    SPI_CloseTx_ISR(hspi);
 800542c:	6878      	ldr	r0, [r7, #4]
 800542e:	f000 f8cf 	bl	80055d0 <SPI_CloseTx_ISR>
  }
}
 8005432:	bf00      	nop
 8005434:	3708      	adds	r7, #8
 8005436:	46bd      	mov	sp, r7
 8005438:	bd80      	pop	{r7, pc}
	...

0800543c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800543c:	b580      	push	{r7, lr}
 800543e:	b088      	sub	sp, #32
 8005440:	af00      	add	r7, sp, #0
 8005442:	60f8      	str	r0, [r7, #12]
 8005444:	60b9      	str	r1, [r7, #8]
 8005446:	603b      	str	r3, [r7, #0]
 8005448:	4613      	mov	r3, r2
 800544a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800544c:	f7fd fcde 	bl	8002e0c <HAL_GetTick>
 8005450:	4602      	mov	r2, r0
 8005452:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005454:	1a9b      	subs	r3, r3, r2
 8005456:	683a      	ldr	r2, [r7, #0]
 8005458:	4413      	add	r3, r2
 800545a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800545c:	f7fd fcd6 	bl	8002e0c <HAL_GetTick>
 8005460:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005462:	4b39      	ldr	r3, [pc, #228]	; (8005548 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	015b      	lsls	r3, r3, #5
 8005468:	0d1b      	lsrs	r3, r3, #20
 800546a:	69fa      	ldr	r2, [r7, #28]
 800546c:	fb02 f303 	mul.w	r3, r2, r3
 8005470:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005472:	e054      	b.n	800551e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005474:	683b      	ldr	r3, [r7, #0]
 8005476:	f1b3 3fff 	cmp.w	r3, #4294967295
 800547a:	d050      	beq.n	800551e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800547c:	f7fd fcc6 	bl	8002e0c <HAL_GetTick>
 8005480:	4602      	mov	r2, r0
 8005482:	69bb      	ldr	r3, [r7, #24]
 8005484:	1ad3      	subs	r3, r2, r3
 8005486:	69fa      	ldr	r2, [r7, #28]
 8005488:	429a      	cmp	r2, r3
 800548a:	d902      	bls.n	8005492 <SPI_WaitFlagStateUntilTimeout+0x56>
 800548c:	69fb      	ldr	r3, [r7, #28]
 800548e:	2b00      	cmp	r3, #0
 8005490:	d13d      	bne.n	800550e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	685a      	ldr	r2, [r3, #4]
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80054a0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	685b      	ldr	r3, [r3, #4]
 80054a6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80054aa:	d111      	bne.n	80054d0 <SPI_WaitFlagStateUntilTimeout+0x94>
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	689b      	ldr	r3, [r3, #8]
 80054b0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80054b4:	d004      	beq.n	80054c0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	689b      	ldr	r3, [r3, #8]
 80054ba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80054be:	d107      	bne.n	80054d0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	681a      	ldr	r2, [r3, #0]
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80054ce:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054d4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80054d8:	d10f      	bne.n	80054fa <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	681a      	ldr	r2, [r3, #0]
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80054e8:	601a      	str	r2, [r3, #0]
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	681a      	ldr	r2, [r3, #0]
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80054f8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	2201      	movs	r2, #1
 80054fe:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	2200      	movs	r2, #0
 8005506:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800550a:	2303      	movs	r3, #3
 800550c:	e017      	b.n	800553e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800550e:	697b      	ldr	r3, [r7, #20]
 8005510:	2b00      	cmp	r3, #0
 8005512:	d101      	bne.n	8005518 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005514:	2300      	movs	r3, #0
 8005516:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005518:	697b      	ldr	r3, [r7, #20]
 800551a:	3b01      	subs	r3, #1
 800551c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	689a      	ldr	r2, [r3, #8]
 8005524:	68bb      	ldr	r3, [r7, #8]
 8005526:	4013      	ands	r3, r2
 8005528:	68ba      	ldr	r2, [r7, #8]
 800552a:	429a      	cmp	r2, r3
 800552c:	bf0c      	ite	eq
 800552e:	2301      	moveq	r3, #1
 8005530:	2300      	movne	r3, #0
 8005532:	b2db      	uxtb	r3, r3
 8005534:	461a      	mov	r2, r3
 8005536:	79fb      	ldrb	r3, [r7, #7]
 8005538:	429a      	cmp	r2, r3
 800553a:	d19b      	bne.n	8005474 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800553c:	2300      	movs	r3, #0
}
 800553e:	4618      	mov	r0, r3
 8005540:	3720      	adds	r7, #32
 8005542:	46bd      	mov	sp, r7
 8005544:	bd80      	pop	{r7, pc}
 8005546:	bf00      	nop
 8005548:	20000004 	.word	0x20000004

0800554c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800554c:	b580      	push	{r7, lr}
 800554e:	b088      	sub	sp, #32
 8005550:	af02      	add	r7, sp, #8
 8005552:	60f8      	str	r0, [r7, #12]
 8005554:	60b9      	str	r1, [r7, #8]
 8005556:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8005558:	4b1b      	ldr	r3, [pc, #108]	; (80055c8 <SPI_EndRxTxTransaction+0x7c>)
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	4a1b      	ldr	r2, [pc, #108]	; (80055cc <SPI_EndRxTxTransaction+0x80>)
 800555e:	fba2 2303 	umull	r2, r3, r2, r3
 8005562:	0d5b      	lsrs	r3, r3, #21
 8005564:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005568:	fb02 f303 	mul.w	r3, r2, r3
 800556c:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	685b      	ldr	r3, [r3, #4]
 8005572:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005576:	d112      	bne.n	800559e <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	9300      	str	r3, [sp, #0]
 800557c:	68bb      	ldr	r3, [r7, #8]
 800557e:	2200      	movs	r2, #0
 8005580:	2180      	movs	r1, #128	; 0x80
 8005582:	68f8      	ldr	r0, [r7, #12]
 8005584:	f7ff ff5a 	bl	800543c <SPI_WaitFlagStateUntilTimeout>
 8005588:	4603      	mov	r3, r0
 800558a:	2b00      	cmp	r3, #0
 800558c:	d016      	beq.n	80055bc <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005592:	f043 0220 	orr.w	r2, r3, #32
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800559a:	2303      	movs	r3, #3
 800559c:	e00f      	b.n	80055be <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800559e:	697b      	ldr	r3, [r7, #20]
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	d00a      	beq.n	80055ba <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80055a4:	697b      	ldr	r3, [r7, #20]
 80055a6:	3b01      	subs	r3, #1
 80055a8:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	689b      	ldr	r3, [r3, #8]
 80055b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80055b4:	2b80      	cmp	r3, #128	; 0x80
 80055b6:	d0f2      	beq.n	800559e <SPI_EndRxTxTransaction+0x52>
 80055b8:	e000      	b.n	80055bc <SPI_EndRxTxTransaction+0x70>
        break;
 80055ba:	bf00      	nop
  }

  return HAL_OK;
 80055bc:	2300      	movs	r3, #0
}
 80055be:	4618      	mov	r0, r3
 80055c0:	3718      	adds	r7, #24
 80055c2:	46bd      	mov	sp, r7
 80055c4:	bd80      	pop	{r7, pc}
 80055c6:	bf00      	nop
 80055c8:	20000004 	.word	0x20000004
 80055cc:	165e9f81 	.word	0x165e9f81

080055d0 <SPI_CloseTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseTx_ISR(SPI_HandleTypeDef *hspi)
{
 80055d0:	b580      	push	{r7, lr}
 80055d2:	b086      	sub	sp, #24
 80055d4:	af00      	add	r7, sp, #0
 80055d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t count = SPI_DEFAULT_TIMEOUT * (SystemCoreClock / 24U / 1000U);
 80055d8:	4b2c      	ldr	r3, [pc, #176]	; (800568c <SPI_CloseTx_ISR+0xbc>)
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	4a2c      	ldr	r2, [pc, #176]	; (8005690 <SPI_CloseTx_ISR+0xc0>)
 80055de:	fba2 2303 	umull	r2, r3, r2, r3
 80055e2:	0a5b      	lsrs	r3, r3, #9
 80055e4:	2264      	movs	r2, #100	; 0x64
 80055e6:	fb02 f303 	mul.w	r3, r2, r3
 80055ea:	613b      	str	r3, [r7, #16]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80055ec:	f7fd fc0e 	bl	8002e0c <HAL_GetTick>
 80055f0:	6178      	str	r0, [r7, #20]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 80055f2:	693b      	ldr	r3, [r7, #16]
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d106      	bne.n	8005606 <SPI_CloseTx_ISR+0x36>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80055fc:	f043 0220 	orr.w	r2, r3, #32
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8005604:	e009      	b.n	800561a <SPI_CloseTx_ISR+0x4a>
    }
    count--;
 8005606:	693b      	ldr	r3, [r7, #16]
 8005608:	3b01      	subs	r3, #1
 800560a:	613b      	str	r3, [r7, #16]
  } while ((hspi->Instance->SR & SPI_FLAG_TXE) == RESET);
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	689b      	ldr	r3, [r3, #8]
 8005612:	f003 0302 	and.w	r3, r3, #2
 8005616:	2b00      	cmp	r3, #0
 8005618:	d0eb      	beq.n	80055f2 <SPI_CloseTx_ISR+0x22>

  /* Disable TXE and ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_ERR));
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	685a      	ldr	r2, [r3, #4]
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005628:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800562a:	697a      	ldr	r2, [r7, #20]
 800562c:	2164      	movs	r1, #100	; 0x64
 800562e:	6878      	ldr	r0, [r7, #4]
 8005630:	f7ff ff8c 	bl	800554c <SPI_EndRxTxTransaction>
 8005634:	4603      	mov	r3, r0
 8005636:	2b00      	cmp	r3, #0
 8005638:	d005      	beq.n	8005646 <SPI_CloseTx_ISR+0x76>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800563e:	f043 0220 	orr.w	r2, r3, #32
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	689b      	ldr	r3, [r3, #8]
 800564a:	2b00      	cmp	r3, #0
 800564c:	d10a      	bne.n	8005664 <SPI_CloseTx_ISR+0x94>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800564e:	2300      	movs	r3, #0
 8005650:	60fb      	str	r3, [r7, #12]
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	68db      	ldr	r3, [r3, #12]
 8005658:	60fb      	str	r3, [r7, #12]
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	689b      	ldr	r3, [r3, #8]
 8005660:	60fb      	str	r3, [r7, #12]
 8005662:	68fb      	ldr	r3, [r7, #12]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	2201      	movs	r2, #1
 8005668:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005670:	2b00      	cmp	r3, #0
 8005672:	d003      	beq.n	800567c <SPI_CloseTx_ISR+0xac>
  {
    /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
    hspi->ErrorCallback(hspi);
#else
    HAL_SPI_ErrorCallback(hspi);
 8005674:	6878      	ldr	r0, [r7, #4]
 8005676:	f7ff fe7d 	bl	8005374 <HAL_SPI_ErrorCallback>
    hspi->TxCpltCallback(hspi);
#else
    HAL_SPI_TxCpltCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
}
 800567a:	e002      	b.n	8005682 <SPI_CloseTx_ISR+0xb2>
    HAL_SPI_TxCpltCallback(hspi);
 800567c:	6878      	ldr	r0, [r7, #4]
 800567e:	f7fd f827 	bl	80026d0 <HAL_SPI_TxCpltCallback>
}
 8005682:	bf00      	nop
 8005684:	3718      	adds	r7, #24
 8005686:	46bd      	mov	sp, r7
 8005688:	bd80      	pop	{r7, pc}
 800568a:	bf00      	nop
 800568c:	20000004 	.word	0x20000004
 8005690:	057619f1 	.word	0x057619f1

08005694 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005694:	b580      	push	{r7, lr}
 8005696:	b082      	sub	sp, #8
 8005698:	af00      	add	r7, sp, #0
 800569a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d101      	bne.n	80056a6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80056a2:	2301      	movs	r3, #1
 80056a4:	e041      	b.n	800572a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80056ac:	b2db      	uxtb	r3, r3
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d106      	bne.n	80056c0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	2200      	movs	r2, #0
 80056b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80056ba:	6878      	ldr	r0, [r7, #4]
 80056bc:	f7fd f954 	bl	8002968 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	2202      	movs	r2, #2
 80056c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	681a      	ldr	r2, [r3, #0]
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	3304      	adds	r3, #4
 80056d0:	4619      	mov	r1, r3
 80056d2:	4610      	mov	r0, r2
 80056d4:	f000 fade 	bl	8005c94 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	2201      	movs	r2, #1
 80056dc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	2201      	movs	r2, #1
 80056e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	2201      	movs	r2, #1
 80056ec:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	2201      	movs	r2, #1
 80056f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	2201      	movs	r2, #1
 80056fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	2201      	movs	r2, #1
 8005704:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	2201      	movs	r2, #1
 800570c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	2201      	movs	r2, #1
 8005714:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	2201      	movs	r2, #1
 800571c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	2201      	movs	r2, #1
 8005724:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005728:	2300      	movs	r3, #0
}
 800572a:	4618      	mov	r0, r3
 800572c:	3708      	adds	r7, #8
 800572e:	46bd      	mov	sp, r7
 8005730:	bd80      	pop	{r7, pc}
	...

08005734 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8005734:	b480      	push	{r7}
 8005736:	b085      	sub	sp, #20
 8005738:	af00      	add	r7, sp, #0
 800573a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005742:	b2db      	uxtb	r3, r3
 8005744:	2b01      	cmp	r3, #1
 8005746:	d001      	beq.n	800574c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8005748:	2301      	movs	r3, #1
 800574a:	e03c      	b.n	80057c6 <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	2202      	movs	r2, #2
 8005750:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	4a1e      	ldr	r2, [pc, #120]	; (80057d4 <HAL_TIM_Base_Start+0xa0>)
 800575a:	4293      	cmp	r3, r2
 800575c:	d018      	beq.n	8005790 <HAL_TIM_Base_Start+0x5c>
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005766:	d013      	beq.n	8005790 <HAL_TIM_Base_Start+0x5c>
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	4a1a      	ldr	r2, [pc, #104]	; (80057d8 <HAL_TIM_Base_Start+0xa4>)
 800576e:	4293      	cmp	r3, r2
 8005770:	d00e      	beq.n	8005790 <HAL_TIM_Base_Start+0x5c>
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	4a19      	ldr	r2, [pc, #100]	; (80057dc <HAL_TIM_Base_Start+0xa8>)
 8005778:	4293      	cmp	r3, r2
 800577a:	d009      	beq.n	8005790 <HAL_TIM_Base_Start+0x5c>
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	4a17      	ldr	r2, [pc, #92]	; (80057e0 <HAL_TIM_Base_Start+0xac>)
 8005782:	4293      	cmp	r3, r2
 8005784:	d004      	beq.n	8005790 <HAL_TIM_Base_Start+0x5c>
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	4a16      	ldr	r2, [pc, #88]	; (80057e4 <HAL_TIM_Base_Start+0xb0>)
 800578c:	4293      	cmp	r3, r2
 800578e:	d111      	bne.n	80057b4 <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	689b      	ldr	r3, [r3, #8]
 8005796:	f003 0307 	and.w	r3, r3, #7
 800579a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	2b06      	cmp	r3, #6
 80057a0:	d010      	beq.n	80057c4 <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	681a      	ldr	r2, [r3, #0]
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	f042 0201 	orr.w	r2, r2, #1
 80057b0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80057b2:	e007      	b.n	80057c4 <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	681a      	ldr	r2, [r3, #0]
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	f042 0201 	orr.w	r2, r2, #1
 80057c2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80057c4:	2300      	movs	r3, #0
}
 80057c6:	4618      	mov	r0, r3
 80057c8:	3714      	adds	r7, #20
 80057ca:	46bd      	mov	sp, r7
 80057cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057d0:	4770      	bx	lr
 80057d2:	bf00      	nop
 80057d4:	40010000 	.word	0x40010000
 80057d8:	40000400 	.word	0x40000400
 80057dc:	40000800 	.word	0x40000800
 80057e0:	40000c00 	.word	0x40000c00
 80057e4:	40014000 	.word	0x40014000

080057e8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80057e8:	b480      	push	{r7}
 80057ea:	b085      	sub	sp, #20
 80057ec:	af00      	add	r7, sp, #0
 80057ee:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80057f6:	b2db      	uxtb	r3, r3
 80057f8:	2b01      	cmp	r3, #1
 80057fa:	d001      	beq.n	8005800 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80057fc:	2301      	movs	r3, #1
 80057fe:	e044      	b.n	800588a <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	2202      	movs	r2, #2
 8005804:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	68da      	ldr	r2, [r3, #12]
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	f042 0201 	orr.w	r2, r2, #1
 8005816:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	4a1e      	ldr	r2, [pc, #120]	; (8005898 <HAL_TIM_Base_Start_IT+0xb0>)
 800581e:	4293      	cmp	r3, r2
 8005820:	d018      	beq.n	8005854 <HAL_TIM_Base_Start_IT+0x6c>
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800582a:	d013      	beq.n	8005854 <HAL_TIM_Base_Start_IT+0x6c>
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	4a1a      	ldr	r2, [pc, #104]	; (800589c <HAL_TIM_Base_Start_IT+0xb4>)
 8005832:	4293      	cmp	r3, r2
 8005834:	d00e      	beq.n	8005854 <HAL_TIM_Base_Start_IT+0x6c>
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	4a19      	ldr	r2, [pc, #100]	; (80058a0 <HAL_TIM_Base_Start_IT+0xb8>)
 800583c:	4293      	cmp	r3, r2
 800583e:	d009      	beq.n	8005854 <HAL_TIM_Base_Start_IT+0x6c>
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	4a17      	ldr	r2, [pc, #92]	; (80058a4 <HAL_TIM_Base_Start_IT+0xbc>)
 8005846:	4293      	cmp	r3, r2
 8005848:	d004      	beq.n	8005854 <HAL_TIM_Base_Start_IT+0x6c>
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	4a16      	ldr	r2, [pc, #88]	; (80058a8 <HAL_TIM_Base_Start_IT+0xc0>)
 8005850:	4293      	cmp	r3, r2
 8005852:	d111      	bne.n	8005878 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	689b      	ldr	r3, [r3, #8]
 800585a:	f003 0307 	and.w	r3, r3, #7
 800585e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	2b06      	cmp	r3, #6
 8005864:	d010      	beq.n	8005888 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	681a      	ldr	r2, [r3, #0]
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	f042 0201 	orr.w	r2, r2, #1
 8005874:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005876:	e007      	b.n	8005888 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	681a      	ldr	r2, [r3, #0]
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	f042 0201 	orr.w	r2, r2, #1
 8005886:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005888:	2300      	movs	r3, #0
}
 800588a:	4618      	mov	r0, r3
 800588c:	3714      	adds	r7, #20
 800588e:	46bd      	mov	sp, r7
 8005890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005894:	4770      	bx	lr
 8005896:	bf00      	nop
 8005898:	40010000 	.word	0x40010000
 800589c:	40000400 	.word	0x40000400
 80058a0:	40000800 	.word	0x40000800
 80058a4:	40000c00 	.word	0x40000c00
 80058a8:	40014000 	.word	0x40014000

080058ac <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80058ac:	b580      	push	{r7, lr}
 80058ae:	b082      	sub	sp, #8
 80058b0:	af00      	add	r7, sp, #0
 80058b2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	691b      	ldr	r3, [r3, #16]
 80058ba:	f003 0302 	and.w	r3, r3, #2
 80058be:	2b02      	cmp	r3, #2
 80058c0:	d122      	bne.n	8005908 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	68db      	ldr	r3, [r3, #12]
 80058c8:	f003 0302 	and.w	r3, r3, #2
 80058cc:	2b02      	cmp	r3, #2
 80058ce:	d11b      	bne.n	8005908 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	f06f 0202 	mvn.w	r2, #2
 80058d8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	2201      	movs	r2, #1
 80058de:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	699b      	ldr	r3, [r3, #24]
 80058e6:	f003 0303 	and.w	r3, r3, #3
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d003      	beq.n	80058f6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80058ee:	6878      	ldr	r0, [r7, #4]
 80058f0:	f000 f9b2 	bl	8005c58 <HAL_TIM_IC_CaptureCallback>
 80058f4:	e005      	b.n	8005902 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80058f6:	6878      	ldr	r0, [r7, #4]
 80058f8:	f000 f9a4 	bl	8005c44 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80058fc:	6878      	ldr	r0, [r7, #4]
 80058fe:	f000 f9b5 	bl	8005c6c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	2200      	movs	r2, #0
 8005906:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	691b      	ldr	r3, [r3, #16]
 800590e:	f003 0304 	and.w	r3, r3, #4
 8005912:	2b04      	cmp	r3, #4
 8005914:	d122      	bne.n	800595c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	68db      	ldr	r3, [r3, #12]
 800591c:	f003 0304 	and.w	r3, r3, #4
 8005920:	2b04      	cmp	r3, #4
 8005922:	d11b      	bne.n	800595c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	f06f 0204 	mvn.w	r2, #4
 800592c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	2202      	movs	r2, #2
 8005932:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	699b      	ldr	r3, [r3, #24]
 800593a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800593e:	2b00      	cmp	r3, #0
 8005940:	d003      	beq.n	800594a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005942:	6878      	ldr	r0, [r7, #4]
 8005944:	f000 f988 	bl	8005c58 <HAL_TIM_IC_CaptureCallback>
 8005948:	e005      	b.n	8005956 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800594a:	6878      	ldr	r0, [r7, #4]
 800594c:	f000 f97a 	bl	8005c44 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005950:	6878      	ldr	r0, [r7, #4]
 8005952:	f000 f98b 	bl	8005c6c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	2200      	movs	r2, #0
 800595a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	691b      	ldr	r3, [r3, #16]
 8005962:	f003 0308 	and.w	r3, r3, #8
 8005966:	2b08      	cmp	r3, #8
 8005968:	d122      	bne.n	80059b0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	68db      	ldr	r3, [r3, #12]
 8005970:	f003 0308 	and.w	r3, r3, #8
 8005974:	2b08      	cmp	r3, #8
 8005976:	d11b      	bne.n	80059b0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	f06f 0208 	mvn.w	r2, #8
 8005980:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	2204      	movs	r2, #4
 8005986:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	69db      	ldr	r3, [r3, #28]
 800598e:	f003 0303 	and.w	r3, r3, #3
 8005992:	2b00      	cmp	r3, #0
 8005994:	d003      	beq.n	800599e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005996:	6878      	ldr	r0, [r7, #4]
 8005998:	f000 f95e 	bl	8005c58 <HAL_TIM_IC_CaptureCallback>
 800599c:	e005      	b.n	80059aa <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800599e:	6878      	ldr	r0, [r7, #4]
 80059a0:	f000 f950 	bl	8005c44 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80059a4:	6878      	ldr	r0, [r7, #4]
 80059a6:	f000 f961 	bl	8005c6c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	2200      	movs	r2, #0
 80059ae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	691b      	ldr	r3, [r3, #16]
 80059b6:	f003 0310 	and.w	r3, r3, #16
 80059ba:	2b10      	cmp	r3, #16
 80059bc:	d122      	bne.n	8005a04 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	68db      	ldr	r3, [r3, #12]
 80059c4:	f003 0310 	and.w	r3, r3, #16
 80059c8:	2b10      	cmp	r3, #16
 80059ca:	d11b      	bne.n	8005a04 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	f06f 0210 	mvn.w	r2, #16
 80059d4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	2208      	movs	r2, #8
 80059da:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	69db      	ldr	r3, [r3, #28]
 80059e2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	d003      	beq.n	80059f2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80059ea:	6878      	ldr	r0, [r7, #4]
 80059ec:	f000 f934 	bl	8005c58 <HAL_TIM_IC_CaptureCallback>
 80059f0:	e005      	b.n	80059fe <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80059f2:	6878      	ldr	r0, [r7, #4]
 80059f4:	f000 f926 	bl	8005c44 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80059f8:	6878      	ldr	r0, [r7, #4]
 80059fa:	f000 f937 	bl	8005c6c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	2200      	movs	r2, #0
 8005a02:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	691b      	ldr	r3, [r3, #16]
 8005a0a:	f003 0301 	and.w	r3, r3, #1
 8005a0e:	2b01      	cmp	r3, #1
 8005a10:	d10e      	bne.n	8005a30 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	68db      	ldr	r3, [r3, #12]
 8005a18:	f003 0301 	and.w	r3, r3, #1
 8005a1c:	2b01      	cmp	r3, #1
 8005a1e:	d107      	bne.n	8005a30 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	f06f 0201 	mvn.w	r2, #1
 8005a28:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005a2a:	6878      	ldr	r0, [r7, #4]
 8005a2c:	f7fc fe66 	bl	80026fc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	691b      	ldr	r3, [r3, #16]
 8005a36:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a3a:	2b80      	cmp	r3, #128	; 0x80
 8005a3c:	d10e      	bne.n	8005a5c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	68db      	ldr	r3, [r3, #12]
 8005a44:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a48:	2b80      	cmp	r3, #128	; 0x80
 8005a4a:	d107      	bne.n	8005a5c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005a54:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005a56:	6878      	ldr	r0, [r7, #4]
 8005a58:	f000 faae 	bl	8005fb8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	691b      	ldr	r3, [r3, #16]
 8005a62:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a66:	2b40      	cmp	r3, #64	; 0x40
 8005a68:	d10e      	bne.n	8005a88 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	68db      	ldr	r3, [r3, #12]
 8005a70:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a74:	2b40      	cmp	r3, #64	; 0x40
 8005a76:	d107      	bne.n	8005a88 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005a80:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005a82:	6878      	ldr	r0, [r7, #4]
 8005a84:	f000 f8fc 	bl	8005c80 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	691b      	ldr	r3, [r3, #16]
 8005a8e:	f003 0320 	and.w	r3, r3, #32
 8005a92:	2b20      	cmp	r3, #32
 8005a94:	d10e      	bne.n	8005ab4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	68db      	ldr	r3, [r3, #12]
 8005a9c:	f003 0320 	and.w	r3, r3, #32
 8005aa0:	2b20      	cmp	r3, #32
 8005aa2:	d107      	bne.n	8005ab4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	f06f 0220 	mvn.w	r2, #32
 8005aac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005aae:	6878      	ldr	r0, [r7, #4]
 8005ab0:	f000 fa78 	bl	8005fa4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005ab4:	bf00      	nop
 8005ab6:	3708      	adds	r7, #8
 8005ab8:	46bd      	mov	sp, r7
 8005aba:	bd80      	pop	{r7, pc}

08005abc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005abc:	b580      	push	{r7, lr}
 8005abe:	b084      	sub	sp, #16
 8005ac0:	af00      	add	r7, sp, #0
 8005ac2:	6078      	str	r0, [r7, #4]
 8005ac4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005acc:	2b01      	cmp	r3, #1
 8005ace:	d101      	bne.n	8005ad4 <HAL_TIM_ConfigClockSource+0x18>
 8005ad0:	2302      	movs	r3, #2
 8005ad2:	e0b3      	b.n	8005c3c <HAL_TIM_ConfigClockSource+0x180>
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	2201      	movs	r2, #1
 8005ad8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	2202      	movs	r2, #2
 8005ae0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	689b      	ldr	r3, [r3, #8]
 8005aea:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005af2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005afa:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	68fa      	ldr	r2, [r7, #12]
 8005b02:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005b04:	683b      	ldr	r3, [r7, #0]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005b0c:	d03e      	beq.n	8005b8c <HAL_TIM_ConfigClockSource+0xd0>
 8005b0e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005b12:	f200 8087 	bhi.w	8005c24 <HAL_TIM_ConfigClockSource+0x168>
 8005b16:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005b1a:	f000 8085 	beq.w	8005c28 <HAL_TIM_ConfigClockSource+0x16c>
 8005b1e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005b22:	d87f      	bhi.n	8005c24 <HAL_TIM_ConfigClockSource+0x168>
 8005b24:	2b70      	cmp	r3, #112	; 0x70
 8005b26:	d01a      	beq.n	8005b5e <HAL_TIM_ConfigClockSource+0xa2>
 8005b28:	2b70      	cmp	r3, #112	; 0x70
 8005b2a:	d87b      	bhi.n	8005c24 <HAL_TIM_ConfigClockSource+0x168>
 8005b2c:	2b60      	cmp	r3, #96	; 0x60
 8005b2e:	d050      	beq.n	8005bd2 <HAL_TIM_ConfigClockSource+0x116>
 8005b30:	2b60      	cmp	r3, #96	; 0x60
 8005b32:	d877      	bhi.n	8005c24 <HAL_TIM_ConfigClockSource+0x168>
 8005b34:	2b50      	cmp	r3, #80	; 0x50
 8005b36:	d03c      	beq.n	8005bb2 <HAL_TIM_ConfigClockSource+0xf6>
 8005b38:	2b50      	cmp	r3, #80	; 0x50
 8005b3a:	d873      	bhi.n	8005c24 <HAL_TIM_ConfigClockSource+0x168>
 8005b3c:	2b40      	cmp	r3, #64	; 0x40
 8005b3e:	d058      	beq.n	8005bf2 <HAL_TIM_ConfigClockSource+0x136>
 8005b40:	2b40      	cmp	r3, #64	; 0x40
 8005b42:	d86f      	bhi.n	8005c24 <HAL_TIM_ConfigClockSource+0x168>
 8005b44:	2b30      	cmp	r3, #48	; 0x30
 8005b46:	d064      	beq.n	8005c12 <HAL_TIM_ConfigClockSource+0x156>
 8005b48:	2b30      	cmp	r3, #48	; 0x30
 8005b4a:	d86b      	bhi.n	8005c24 <HAL_TIM_ConfigClockSource+0x168>
 8005b4c:	2b20      	cmp	r3, #32
 8005b4e:	d060      	beq.n	8005c12 <HAL_TIM_ConfigClockSource+0x156>
 8005b50:	2b20      	cmp	r3, #32
 8005b52:	d867      	bhi.n	8005c24 <HAL_TIM_ConfigClockSource+0x168>
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	d05c      	beq.n	8005c12 <HAL_TIM_ConfigClockSource+0x156>
 8005b58:	2b10      	cmp	r3, #16
 8005b5a:	d05a      	beq.n	8005c12 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8005b5c:	e062      	b.n	8005c24 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	6818      	ldr	r0, [r3, #0]
 8005b62:	683b      	ldr	r3, [r7, #0]
 8005b64:	6899      	ldr	r1, [r3, #8]
 8005b66:	683b      	ldr	r3, [r7, #0]
 8005b68:	685a      	ldr	r2, [r3, #4]
 8005b6a:	683b      	ldr	r3, [r7, #0]
 8005b6c:	68db      	ldr	r3, [r3, #12]
 8005b6e:	f000 f98b 	bl	8005e88 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	689b      	ldr	r3, [r3, #8]
 8005b78:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005b80:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	68fa      	ldr	r2, [r7, #12]
 8005b88:	609a      	str	r2, [r3, #8]
      break;
 8005b8a:	e04e      	b.n	8005c2a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	6818      	ldr	r0, [r3, #0]
 8005b90:	683b      	ldr	r3, [r7, #0]
 8005b92:	6899      	ldr	r1, [r3, #8]
 8005b94:	683b      	ldr	r3, [r7, #0]
 8005b96:	685a      	ldr	r2, [r3, #4]
 8005b98:	683b      	ldr	r3, [r7, #0]
 8005b9a:	68db      	ldr	r3, [r3, #12]
 8005b9c:	f000 f974 	bl	8005e88 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	689a      	ldr	r2, [r3, #8]
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005bae:	609a      	str	r2, [r3, #8]
      break;
 8005bb0:	e03b      	b.n	8005c2a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	6818      	ldr	r0, [r3, #0]
 8005bb6:	683b      	ldr	r3, [r7, #0]
 8005bb8:	6859      	ldr	r1, [r3, #4]
 8005bba:	683b      	ldr	r3, [r7, #0]
 8005bbc:	68db      	ldr	r3, [r3, #12]
 8005bbe:	461a      	mov	r2, r3
 8005bc0:	f000 f8e8 	bl	8005d94 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	2150      	movs	r1, #80	; 0x50
 8005bca:	4618      	mov	r0, r3
 8005bcc:	f000 f941 	bl	8005e52 <TIM_ITRx_SetConfig>
      break;
 8005bd0:	e02b      	b.n	8005c2a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	6818      	ldr	r0, [r3, #0]
 8005bd6:	683b      	ldr	r3, [r7, #0]
 8005bd8:	6859      	ldr	r1, [r3, #4]
 8005bda:	683b      	ldr	r3, [r7, #0]
 8005bdc:	68db      	ldr	r3, [r3, #12]
 8005bde:	461a      	mov	r2, r3
 8005be0:	f000 f907 	bl	8005df2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	2160      	movs	r1, #96	; 0x60
 8005bea:	4618      	mov	r0, r3
 8005bec:	f000 f931 	bl	8005e52 <TIM_ITRx_SetConfig>
      break;
 8005bf0:	e01b      	b.n	8005c2a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	6818      	ldr	r0, [r3, #0]
 8005bf6:	683b      	ldr	r3, [r7, #0]
 8005bf8:	6859      	ldr	r1, [r3, #4]
 8005bfa:	683b      	ldr	r3, [r7, #0]
 8005bfc:	68db      	ldr	r3, [r3, #12]
 8005bfe:	461a      	mov	r2, r3
 8005c00:	f000 f8c8 	bl	8005d94 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	2140      	movs	r1, #64	; 0x40
 8005c0a:	4618      	mov	r0, r3
 8005c0c:	f000 f921 	bl	8005e52 <TIM_ITRx_SetConfig>
      break;
 8005c10:	e00b      	b.n	8005c2a <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	681a      	ldr	r2, [r3, #0]
 8005c16:	683b      	ldr	r3, [r7, #0]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	4619      	mov	r1, r3
 8005c1c:	4610      	mov	r0, r2
 8005c1e:	f000 f918 	bl	8005e52 <TIM_ITRx_SetConfig>
        break;
 8005c22:	e002      	b.n	8005c2a <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8005c24:	bf00      	nop
 8005c26:	e000      	b.n	8005c2a <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8005c28:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	2201      	movs	r2, #1
 8005c2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	2200      	movs	r2, #0
 8005c36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005c3a:	2300      	movs	r3, #0
}
 8005c3c:	4618      	mov	r0, r3
 8005c3e:	3710      	adds	r7, #16
 8005c40:	46bd      	mov	sp, r7
 8005c42:	bd80      	pop	{r7, pc}

08005c44 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005c44:	b480      	push	{r7}
 8005c46:	b083      	sub	sp, #12
 8005c48:	af00      	add	r7, sp, #0
 8005c4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005c4c:	bf00      	nop
 8005c4e:	370c      	adds	r7, #12
 8005c50:	46bd      	mov	sp, r7
 8005c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c56:	4770      	bx	lr

08005c58 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005c58:	b480      	push	{r7}
 8005c5a:	b083      	sub	sp, #12
 8005c5c:	af00      	add	r7, sp, #0
 8005c5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005c60:	bf00      	nop
 8005c62:	370c      	adds	r7, #12
 8005c64:	46bd      	mov	sp, r7
 8005c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c6a:	4770      	bx	lr

08005c6c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005c6c:	b480      	push	{r7}
 8005c6e:	b083      	sub	sp, #12
 8005c70:	af00      	add	r7, sp, #0
 8005c72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005c74:	bf00      	nop
 8005c76:	370c      	adds	r7, #12
 8005c78:	46bd      	mov	sp, r7
 8005c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c7e:	4770      	bx	lr

08005c80 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005c80:	b480      	push	{r7}
 8005c82:	b083      	sub	sp, #12
 8005c84:	af00      	add	r7, sp, #0
 8005c86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005c88:	bf00      	nop
 8005c8a:	370c      	adds	r7, #12
 8005c8c:	46bd      	mov	sp, r7
 8005c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c92:	4770      	bx	lr

08005c94 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005c94:	b480      	push	{r7}
 8005c96:	b085      	sub	sp, #20
 8005c98:	af00      	add	r7, sp, #0
 8005c9a:	6078      	str	r0, [r7, #4]
 8005c9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	4a34      	ldr	r2, [pc, #208]	; (8005d78 <TIM_Base_SetConfig+0xe4>)
 8005ca8:	4293      	cmp	r3, r2
 8005caa:	d00f      	beq.n	8005ccc <TIM_Base_SetConfig+0x38>
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005cb2:	d00b      	beq.n	8005ccc <TIM_Base_SetConfig+0x38>
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	4a31      	ldr	r2, [pc, #196]	; (8005d7c <TIM_Base_SetConfig+0xe8>)
 8005cb8:	4293      	cmp	r3, r2
 8005cba:	d007      	beq.n	8005ccc <TIM_Base_SetConfig+0x38>
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	4a30      	ldr	r2, [pc, #192]	; (8005d80 <TIM_Base_SetConfig+0xec>)
 8005cc0:	4293      	cmp	r3, r2
 8005cc2:	d003      	beq.n	8005ccc <TIM_Base_SetConfig+0x38>
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	4a2f      	ldr	r2, [pc, #188]	; (8005d84 <TIM_Base_SetConfig+0xf0>)
 8005cc8:	4293      	cmp	r3, r2
 8005cca:	d108      	bne.n	8005cde <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005cd2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005cd4:	683b      	ldr	r3, [r7, #0]
 8005cd6:	685b      	ldr	r3, [r3, #4]
 8005cd8:	68fa      	ldr	r2, [r7, #12]
 8005cda:	4313      	orrs	r3, r2
 8005cdc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	4a25      	ldr	r2, [pc, #148]	; (8005d78 <TIM_Base_SetConfig+0xe4>)
 8005ce2:	4293      	cmp	r3, r2
 8005ce4:	d01b      	beq.n	8005d1e <TIM_Base_SetConfig+0x8a>
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005cec:	d017      	beq.n	8005d1e <TIM_Base_SetConfig+0x8a>
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	4a22      	ldr	r2, [pc, #136]	; (8005d7c <TIM_Base_SetConfig+0xe8>)
 8005cf2:	4293      	cmp	r3, r2
 8005cf4:	d013      	beq.n	8005d1e <TIM_Base_SetConfig+0x8a>
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	4a21      	ldr	r2, [pc, #132]	; (8005d80 <TIM_Base_SetConfig+0xec>)
 8005cfa:	4293      	cmp	r3, r2
 8005cfc:	d00f      	beq.n	8005d1e <TIM_Base_SetConfig+0x8a>
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	4a20      	ldr	r2, [pc, #128]	; (8005d84 <TIM_Base_SetConfig+0xf0>)
 8005d02:	4293      	cmp	r3, r2
 8005d04:	d00b      	beq.n	8005d1e <TIM_Base_SetConfig+0x8a>
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	4a1f      	ldr	r2, [pc, #124]	; (8005d88 <TIM_Base_SetConfig+0xf4>)
 8005d0a:	4293      	cmp	r3, r2
 8005d0c:	d007      	beq.n	8005d1e <TIM_Base_SetConfig+0x8a>
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	4a1e      	ldr	r2, [pc, #120]	; (8005d8c <TIM_Base_SetConfig+0xf8>)
 8005d12:	4293      	cmp	r3, r2
 8005d14:	d003      	beq.n	8005d1e <TIM_Base_SetConfig+0x8a>
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	4a1d      	ldr	r2, [pc, #116]	; (8005d90 <TIM_Base_SetConfig+0xfc>)
 8005d1a:	4293      	cmp	r3, r2
 8005d1c:	d108      	bne.n	8005d30 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005d24:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005d26:	683b      	ldr	r3, [r7, #0]
 8005d28:	68db      	ldr	r3, [r3, #12]
 8005d2a:	68fa      	ldr	r2, [r7, #12]
 8005d2c:	4313      	orrs	r3, r2
 8005d2e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005d36:	683b      	ldr	r3, [r7, #0]
 8005d38:	695b      	ldr	r3, [r3, #20]
 8005d3a:	4313      	orrs	r3, r2
 8005d3c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	68fa      	ldr	r2, [r7, #12]
 8005d42:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005d44:	683b      	ldr	r3, [r7, #0]
 8005d46:	689a      	ldr	r2, [r3, #8]
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005d4c:	683b      	ldr	r3, [r7, #0]
 8005d4e:	681a      	ldr	r2, [r3, #0]
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	4a08      	ldr	r2, [pc, #32]	; (8005d78 <TIM_Base_SetConfig+0xe4>)
 8005d58:	4293      	cmp	r3, r2
 8005d5a:	d103      	bne.n	8005d64 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005d5c:	683b      	ldr	r3, [r7, #0]
 8005d5e:	691a      	ldr	r2, [r3, #16]
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	2201      	movs	r2, #1
 8005d68:	615a      	str	r2, [r3, #20]
}
 8005d6a:	bf00      	nop
 8005d6c:	3714      	adds	r7, #20
 8005d6e:	46bd      	mov	sp, r7
 8005d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d74:	4770      	bx	lr
 8005d76:	bf00      	nop
 8005d78:	40010000 	.word	0x40010000
 8005d7c:	40000400 	.word	0x40000400
 8005d80:	40000800 	.word	0x40000800
 8005d84:	40000c00 	.word	0x40000c00
 8005d88:	40014000 	.word	0x40014000
 8005d8c:	40014400 	.word	0x40014400
 8005d90:	40014800 	.word	0x40014800

08005d94 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005d94:	b480      	push	{r7}
 8005d96:	b087      	sub	sp, #28
 8005d98:	af00      	add	r7, sp, #0
 8005d9a:	60f8      	str	r0, [r7, #12]
 8005d9c:	60b9      	str	r1, [r7, #8]
 8005d9e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	6a1b      	ldr	r3, [r3, #32]
 8005da4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	6a1b      	ldr	r3, [r3, #32]
 8005daa:	f023 0201 	bic.w	r2, r3, #1
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	699b      	ldr	r3, [r3, #24]
 8005db6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005db8:	693b      	ldr	r3, [r7, #16]
 8005dba:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005dbe:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	011b      	lsls	r3, r3, #4
 8005dc4:	693a      	ldr	r2, [r7, #16]
 8005dc6:	4313      	orrs	r3, r2
 8005dc8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005dca:	697b      	ldr	r3, [r7, #20]
 8005dcc:	f023 030a 	bic.w	r3, r3, #10
 8005dd0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005dd2:	697a      	ldr	r2, [r7, #20]
 8005dd4:	68bb      	ldr	r3, [r7, #8]
 8005dd6:	4313      	orrs	r3, r2
 8005dd8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	693a      	ldr	r2, [r7, #16]
 8005dde:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	697a      	ldr	r2, [r7, #20]
 8005de4:	621a      	str	r2, [r3, #32]
}
 8005de6:	bf00      	nop
 8005de8:	371c      	adds	r7, #28
 8005dea:	46bd      	mov	sp, r7
 8005dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005df0:	4770      	bx	lr

08005df2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005df2:	b480      	push	{r7}
 8005df4:	b087      	sub	sp, #28
 8005df6:	af00      	add	r7, sp, #0
 8005df8:	60f8      	str	r0, [r7, #12]
 8005dfa:	60b9      	str	r1, [r7, #8]
 8005dfc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	6a1b      	ldr	r3, [r3, #32]
 8005e02:	f023 0210 	bic.w	r2, r3, #16
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	699b      	ldr	r3, [r3, #24]
 8005e0e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	6a1b      	ldr	r3, [r3, #32]
 8005e14:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005e16:	697b      	ldr	r3, [r7, #20]
 8005e18:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005e1c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	031b      	lsls	r3, r3, #12
 8005e22:	697a      	ldr	r2, [r7, #20]
 8005e24:	4313      	orrs	r3, r2
 8005e26:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005e28:	693b      	ldr	r3, [r7, #16]
 8005e2a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005e2e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005e30:	68bb      	ldr	r3, [r7, #8]
 8005e32:	011b      	lsls	r3, r3, #4
 8005e34:	693a      	ldr	r2, [r7, #16]
 8005e36:	4313      	orrs	r3, r2
 8005e38:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	697a      	ldr	r2, [r7, #20]
 8005e3e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	693a      	ldr	r2, [r7, #16]
 8005e44:	621a      	str	r2, [r3, #32]
}
 8005e46:	bf00      	nop
 8005e48:	371c      	adds	r7, #28
 8005e4a:	46bd      	mov	sp, r7
 8005e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e50:	4770      	bx	lr

08005e52 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005e52:	b480      	push	{r7}
 8005e54:	b085      	sub	sp, #20
 8005e56:	af00      	add	r7, sp, #0
 8005e58:	6078      	str	r0, [r7, #4]
 8005e5a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	689b      	ldr	r3, [r3, #8]
 8005e60:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e68:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005e6a:	683a      	ldr	r2, [r7, #0]
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	4313      	orrs	r3, r2
 8005e70:	f043 0307 	orr.w	r3, r3, #7
 8005e74:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	68fa      	ldr	r2, [r7, #12]
 8005e7a:	609a      	str	r2, [r3, #8]
}
 8005e7c:	bf00      	nop
 8005e7e:	3714      	adds	r7, #20
 8005e80:	46bd      	mov	sp, r7
 8005e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e86:	4770      	bx	lr

08005e88 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005e88:	b480      	push	{r7}
 8005e8a:	b087      	sub	sp, #28
 8005e8c:	af00      	add	r7, sp, #0
 8005e8e:	60f8      	str	r0, [r7, #12]
 8005e90:	60b9      	str	r1, [r7, #8]
 8005e92:	607a      	str	r2, [r7, #4]
 8005e94:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	689b      	ldr	r3, [r3, #8]
 8005e9a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005e9c:	697b      	ldr	r3, [r7, #20]
 8005e9e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005ea2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005ea4:	683b      	ldr	r3, [r7, #0]
 8005ea6:	021a      	lsls	r2, r3, #8
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	431a      	orrs	r2, r3
 8005eac:	68bb      	ldr	r3, [r7, #8]
 8005eae:	4313      	orrs	r3, r2
 8005eb0:	697a      	ldr	r2, [r7, #20]
 8005eb2:	4313      	orrs	r3, r2
 8005eb4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	697a      	ldr	r2, [r7, #20]
 8005eba:	609a      	str	r2, [r3, #8]
}
 8005ebc:	bf00      	nop
 8005ebe:	371c      	adds	r7, #28
 8005ec0:	46bd      	mov	sp, r7
 8005ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ec6:	4770      	bx	lr

08005ec8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005ec8:	b480      	push	{r7}
 8005eca:	b085      	sub	sp, #20
 8005ecc:	af00      	add	r7, sp, #0
 8005ece:	6078      	str	r0, [r7, #4]
 8005ed0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005ed8:	2b01      	cmp	r3, #1
 8005eda:	d101      	bne.n	8005ee0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005edc:	2302      	movs	r3, #2
 8005ede:	e050      	b.n	8005f82 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	2201      	movs	r2, #1
 8005ee4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	2202      	movs	r2, #2
 8005eec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	685b      	ldr	r3, [r3, #4]
 8005ef6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	689b      	ldr	r3, [r3, #8]
 8005efe:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f06:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005f08:	683b      	ldr	r3, [r7, #0]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	68fa      	ldr	r2, [r7, #12]
 8005f0e:	4313      	orrs	r3, r2
 8005f10:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	68fa      	ldr	r2, [r7, #12]
 8005f18:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	4a1c      	ldr	r2, [pc, #112]	; (8005f90 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8005f20:	4293      	cmp	r3, r2
 8005f22:	d018      	beq.n	8005f56 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005f2c:	d013      	beq.n	8005f56 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	4a18      	ldr	r2, [pc, #96]	; (8005f94 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8005f34:	4293      	cmp	r3, r2
 8005f36:	d00e      	beq.n	8005f56 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	4a16      	ldr	r2, [pc, #88]	; (8005f98 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8005f3e:	4293      	cmp	r3, r2
 8005f40:	d009      	beq.n	8005f56 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	4a15      	ldr	r2, [pc, #84]	; (8005f9c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8005f48:	4293      	cmp	r3, r2
 8005f4a:	d004      	beq.n	8005f56 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	4a13      	ldr	r2, [pc, #76]	; (8005fa0 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8005f52:	4293      	cmp	r3, r2
 8005f54:	d10c      	bne.n	8005f70 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005f56:	68bb      	ldr	r3, [r7, #8]
 8005f58:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005f5c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005f5e:	683b      	ldr	r3, [r7, #0]
 8005f60:	685b      	ldr	r3, [r3, #4]
 8005f62:	68ba      	ldr	r2, [r7, #8]
 8005f64:	4313      	orrs	r3, r2
 8005f66:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	68ba      	ldr	r2, [r7, #8]
 8005f6e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	2201      	movs	r2, #1
 8005f74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	2200      	movs	r2, #0
 8005f7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005f80:	2300      	movs	r3, #0
}
 8005f82:	4618      	mov	r0, r3
 8005f84:	3714      	adds	r7, #20
 8005f86:	46bd      	mov	sp, r7
 8005f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f8c:	4770      	bx	lr
 8005f8e:	bf00      	nop
 8005f90:	40010000 	.word	0x40010000
 8005f94:	40000400 	.word	0x40000400
 8005f98:	40000800 	.word	0x40000800
 8005f9c:	40000c00 	.word	0x40000c00
 8005fa0:	40014000 	.word	0x40014000

08005fa4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005fa4:	b480      	push	{r7}
 8005fa6:	b083      	sub	sp, #12
 8005fa8:	af00      	add	r7, sp, #0
 8005faa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005fac:	bf00      	nop
 8005fae:	370c      	adds	r7, #12
 8005fb0:	46bd      	mov	sp, r7
 8005fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fb6:	4770      	bx	lr

08005fb8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005fb8:	b480      	push	{r7}
 8005fba:	b083      	sub	sp, #12
 8005fbc:	af00      	add	r7, sp, #0
 8005fbe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005fc0:	bf00      	nop
 8005fc2:	370c      	adds	r7, #12
 8005fc4:	46bd      	mov	sp, r7
 8005fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fca:	4770      	bx	lr

08005fcc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005fcc:	b580      	push	{r7, lr}
 8005fce:	b082      	sub	sp, #8
 8005fd0:	af00      	add	r7, sp, #0
 8005fd2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	d101      	bne.n	8005fde <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005fda:	2301      	movs	r3, #1
 8005fdc:	e03f      	b.n	800605e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005fe4:	b2db      	uxtb	r3, r3
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	d106      	bne.n	8005ff8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	2200      	movs	r2, #0
 8005fee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005ff2:	6878      	ldr	r0, [r7, #4]
 8005ff4:	f7fc fcf6 	bl	80029e4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	2224      	movs	r2, #36	; 0x24
 8005ffc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	68da      	ldr	r2, [r3, #12]
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800600e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006010:	6878      	ldr	r0, [r7, #4]
 8006012:	f000 fc85 	bl	8006920 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	691a      	ldr	r2, [r3, #16]
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006024:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	695a      	ldr	r2, [r3, #20]
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006034:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	68da      	ldr	r2, [r3, #12]
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006044:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	2200      	movs	r2, #0
 800604a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	2220      	movs	r2, #32
 8006050:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	2220      	movs	r2, #32
 8006058:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800605c:	2300      	movs	r3, #0
}
 800605e:	4618      	mov	r0, r3
 8006060:	3708      	adds	r7, #8
 8006062:	46bd      	mov	sp, r7
 8006064:	bd80      	pop	{r7, pc}

08006066 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006066:	b580      	push	{r7, lr}
 8006068:	b08a      	sub	sp, #40	; 0x28
 800606a:	af02      	add	r7, sp, #8
 800606c:	60f8      	str	r0, [r7, #12]
 800606e:	60b9      	str	r1, [r7, #8]
 8006070:	603b      	str	r3, [r7, #0]
 8006072:	4613      	mov	r3, r2
 8006074:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8006076:	2300      	movs	r3, #0
 8006078:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006080:	b2db      	uxtb	r3, r3
 8006082:	2b20      	cmp	r3, #32
 8006084:	d17c      	bne.n	8006180 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8006086:	68bb      	ldr	r3, [r7, #8]
 8006088:	2b00      	cmp	r3, #0
 800608a:	d002      	beq.n	8006092 <HAL_UART_Transmit+0x2c>
 800608c:	88fb      	ldrh	r3, [r7, #6]
 800608e:	2b00      	cmp	r3, #0
 8006090:	d101      	bne.n	8006096 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8006092:	2301      	movs	r3, #1
 8006094:	e075      	b.n	8006182 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800609c:	2b01      	cmp	r3, #1
 800609e:	d101      	bne.n	80060a4 <HAL_UART_Transmit+0x3e>
 80060a0:	2302      	movs	r3, #2
 80060a2:	e06e      	b.n	8006182 <HAL_UART_Transmit+0x11c>
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	2201      	movs	r2, #1
 80060a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	2200      	movs	r2, #0
 80060b0:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	2221      	movs	r2, #33	; 0x21
 80060b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80060ba:	f7fc fea7 	bl	8002e0c <HAL_GetTick>
 80060be:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	88fa      	ldrh	r2, [r7, #6]
 80060c4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	88fa      	ldrh	r2, [r7, #6]
 80060ca:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	689b      	ldr	r3, [r3, #8]
 80060d0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80060d4:	d108      	bne.n	80060e8 <HAL_UART_Transmit+0x82>
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	691b      	ldr	r3, [r3, #16]
 80060da:	2b00      	cmp	r3, #0
 80060dc:	d104      	bne.n	80060e8 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80060de:	2300      	movs	r3, #0
 80060e0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80060e2:	68bb      	ldr	r3, [r7, #8]
 80060e4:	61bb      	str	r3, [r7, #24]
 80060e6:	e003      	b.n	80060f0 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80060e8:	68bb      	ldr	r3, [r7, #8]
 80060ea:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80060ec:	2300      	movs	r3, #0
 80060ee:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	2200      	movs	r2, #0
 80060f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80060f8:	e02a      	b.n	8006150 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80060fa:	683b      	ldr	r3, [r7, #0]
 80060fc:	9300      	str	r3, [sp, #0]
 80060fe:	697b      	ldr	r3, [r7, #20]
 8006100:	2200      	movs	r2, #0
 8006102:	2180      	movs	r1, #128	; 0x80
 8006104:	68f8      	ldr	r0, [r7, #12]
 8006106:	f000 fa47 	bl	8006598 <UART_WaitOnFlagUntilTimeout>
 800610a:	4603      	mov	r3, r0
 800610c:	2b00      	cmp	r3, #0
 800610e:	d001      	beq.n	8006114 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8006110:	2303      	movs	r3, #3
 8006112:	e036      	b.n	8006182 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8006114:	69fb      	ldr	r3, [r7, #28]
 8006116:	2b00      	cmp	r3, #0
 8006118:	d10b      	bne.n	8006132 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800611a:	69bb      	ldr	r3, [r7, #24]
 800611c:	881b      	ldrh	r3, [r3, #0]
 800611e:	461a      	mov	r2, r3
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006128:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800612a:	69bb      	ldr	r3, [r7, #24]
 800612c:	3302      	adds	r3, #2
 800612e:	61bb      	str	r3, [r7, #24]
 8006130:	e007      	b.n	8006142 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8006132:	69fb      	ldr	r3, [r7, #28]
 8006134:	781a      	ldrb	r2, [r3, #0]
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800613c:	69fb      	ldr	r3, [r7, #28]
 800613e:	3301      	adds	r3, #1
 8006140:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006146:	b29b      	uxth	r3, r3
 8006148:	3b01      	subs	r3, #1
 800614a:	b29a      	uxth	r2, r3
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006154:	b29b      	uxth	r3, r3
 8006156:	2b00      	cmp	r3, #0
 8006158:	d1cf      	bne.n	80060fa <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800615a:	683b      	ldr	r3, [r7, #0]
 800615c:	9300      	str	r3, [sp, #0]
 800615e:	697b      	ldr	r3, [r7, #20]
 8006160:	2200      	movs	r2, #0
 8006162:	2140      	movs	r1, #64	; 0x40
 8006164:	68f8      	ldr	r0, [r7, #12]
 8006166:	f000 fa17 	bl	8006598 <UART_WaitOnFlagUntilTimeout>
 800616a:	4603      	mov	r3, r0
 800616c:	2b00      	cmp	r3, #0
 800616e:	d001      	beq.n	8006174 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8006170:	2303      	movs	r3, #3
 8006172:	e006      	b.n	8006182 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	2220      	movs	r2, #32
 8006178:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800617c:	2300      	movs	r3, #0
 800617e:	e000      	b.n	8006182 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8006180:	2302      	movs	r3, #2
  }
}
 8006182:	4618      	mov	r0, r3
 8006184:	3720      	adds	r7, #32
 8006186:	46bd      	mov	sp, r7
 8006188:	bd80      	pop	{r7, pc}

0800618a <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800618a:	b580      	push	{r7, lr}
 800618c:	b084      	sub	sp, #16
 800618e:	af00      	add	r7, sp, #0
 8006190:	60f8      	str	r0, [r7, #12]
 8006192:	60b9      	str	r1, [r7, #8]
 8006194:	4613      	mov	r3, r2
 8006196:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800619e:	b2db      	uxtb	r3, r3
 80061a0:	2b20      	cmp	r3, #32
 80061a2:	d11d      	bne.n	80061e0 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 80061a4:	68bb      	ldr	r3, [r7, #8]
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	d002      	beq.n	80061b0 <HAL_UART_Receive_IT+0x26>
 80061aa:	88fb      	ldrh	r3, [r7, #6]
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	d101      	bne.n	80061b4 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80061b0:	2301      	movs	r3, #1
 80061b2:	e016      	b.n	80061e2 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80061ba:	2b01      	cmp	r3, #1
 80061bc:	d101      	bne.n	80061c2 <HAL_UART_Receive_IT+0x38>
 80061be:	2302      	movs	r3, #2
 80061c0:	e00f      	b.n	80061e2 <HAL_UART_Receive_IT+0x58>
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	2201      	movs	r2, #1
 80061c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	2200      	movs	r2, #0
 80061ce:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_IT(huart, pData, Size));
 80061d0:	88fb      	ldrh	r3, [r7, #6]
 80061d2:	461a      	mov	r2, r3
 80061d4:	68b9      	ldr	r1, [r7, #8]
 80061d6:	68f8      	ldr	r0, [r7, #12]
 80061d8:	f000 fa28 	bl	800662c <UART_Start_Receive_IT>
 80061dc:	4603      	mov	r3, r0
 80061de:	e000      	b.n	80061e2 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 80061e0:	2302      	movs	r3, #2
  }
}
 80061e2:	4618      	mov	r0, r3
 80061e4:	3710      	adds	r7, #16
 80061e6:	46bd      	mov	sp, r7
 80061e8:	bd80      	pop	{r7, pc}
	...

080061ec <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80061ec:	b580      	push	{r7, lr}
 80061ee:	b08a      	sub	sp, #40	; 0x28
 80061f0:	af00      	add	r7, sp, #0
 80061f2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	68db      	ldr	r3, [r3, #12]
 8006202:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	695b      	ldr	r3, [r3, #20]
 800620a:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 800620c:	2300      	movs	r3, #0
 800620e:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8006210:	2300      	movs	r3, #0
 8006212:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8006214:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006216:	f003 030f 	and.w	r3, r3, #15
 800621a:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 800621c:	69bb      	ldr	r3, [r7, #24]
 800621e:	2b00      	cmp	r3, #0
 8006220:	d10d      	bne.n	800623e <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006222:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006224:	f003 0320 	and.w	r3, r3, #32
 8006228:	2b00      	cmp	r3, #0
 800622a:	d008      	beq.n	800623e <HAL_UART_IRQHandler+0x52>
 800622c:	6a3b      	ldr	r3, [r7, #32]
 800622e:	f003 0320 	and.w	r3, r3, #32
 8006232:	2b00      	cmp	r3, #0
 8006234:	d003      	beq.n	800623e <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8006236:	6878      	ldr	r0, [r7, #4]
 8006238:	f000 fadb 	bl	80067f2 <UART_Receive_IT>
      return;
 800623c:	e17c      	b.n	8006538 <HAL_UART_IRQHandler+0x34c>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800623e:	69bb      	ldr	r3, [r7, #24]
 8006240:	2b00      	cmp	r3, #0
 8006242:	f000 80b1 	beq.w	80063a8 <HAL_UART_IRQHandler+0x1bc>
 8006246:	69fb      	ldr	r3, [r7, #28]
 8006248:	f003 0301 	and.w	r3, r3, #1
 800624c:	2b00      	cmp	r3, #0
 800624e:	d105      	bne.n	800625c <HAL_UART_IRQHandler+0x70>
 8006250:	6a3b      	ldr	r3, [r7, #32]
 8006252:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8006256:	2b00      	cmp	r3, #0
 8006258:	f000 80a6 	beq.w	80063a8 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800625c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800625e:	f003 0301 	and.w	r3, r3, #1
 8006262:	2b00      	cmp	r3, #0
 8006264:	d00a      	beq.n	800627c <HAL_UART_IRQHandler+0x90>
 8006266:	6a3b      	ldr	r3, [r7, #32]
 8006268:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800626c:	2b00      	cmp	r3, #0
 800626e:	d005      	beq.n	800627c <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006274:	f043 0201 	orr.w	r2, r3, #1
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800627c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800627e:	f003 0304 	and.w	r3, r3, #4
 8006282:	2b00      	cmp	r3, #0
 8006284:	d00a      	beq.n	800629c <HAL_UART_IRQHandler+0xb0>
 8006286:	69fb      	ldr	r3, [r7, #28]
 8006288:	f003 0301 	and.w	r3, r3, #1
 800628c:	2b00      	cmp	r3, #0
 800628e:	d005      	beq.n	800629c <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006294:	f043 0202 	orr.w	r2, r3, #2
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800629c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800629e:	f003 0302 	and.w	r3, r3, #2
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	d00a      	beq.n	80062bc <HAL_UART_IRQHandler+0xd0>
 80062a6:	69fb      	ldr	r3, [r7, #28]
 80062a8:	f003 0301 	and.w	r3, r3, #1
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	d005      	beq.n	80062bc <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062b4:	f043 0204 	orr.w	r2, r3, #4
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 80062bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062be:	f003 0308 	and.w	r3, r3, #8
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	d00f      	beq.n	80062e6 <HAL_UART_IRQHandler+0xfa>
 80062c6:	6a3b      	ldr	r3, [r7, #32]
 80062c8:	f003 0320 	and.w	r3, r3, #32
 80062cc:	2b00      	cmp	r3, #0
 80062ce:	d104      	bne.n	80062da <HAL_UART_IRQHandler+0xee>
 80062d0:	69fb      	ldr	r3, [r7, #28]
 80062d2:	f003 0301 	and.w	r3, r3, #1
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	d005      	beq.n	80062e6 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062de:	f043 0208 	orr.w	r2, r3, #8
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	f000 811f 	beq.w	800652e <HAL_UART_IRQHandler+0x342>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80062f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062f2:	f003 0320 	and.w	r3, r3, #32
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d007      	beq.n	800630a <HAL_UART_IRQHandler+0x11e>
 80062fa:	6a3b      	ldr	r3, [r7, #32]
 80062fc:	f003 0320 	and.w	r3, r3, #32
 8006300:	2b00      	cmp	r3, #0
 8006302:	d002      	beq.n	800630a <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8006304:	6878      	ldr	r0, [r7, #4]
 8006306:	f000 fa74 	bl	80067f2 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	695b      	ldr	r3, [r3, #20]
 8006310:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006314:	2b40      	cmp	r3, #64	; 0x40
 8006316:	bf0c      	ite	eq
 8006318:	2301      	moveq	r3, #1
 800631a:	2300      	movne	r3, #0
 800631c:	b2db      	uxtb	r3, r3
 800631e:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006324:	f003 0308 	and.w	r3, r3, #8
 8006328:	2b00      	cmp	r3, #0
 800632a:	d102      	bne.n	8006332 <HAL_UART_IRQHandler+0x146>
 800632c:	697b      	ldr	r3, [r7, #20]
 800632e:	2b00      	cmp	r3, #0
 8006330:	d031      	beq.n	8006396 <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006332:	6878      	ldr	r0, [r7, #4]
 8006334:	f000 f9b4 	bl	80066a0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	695b      	ldr	r3, [r3, #20]
 800633e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006342:	2b40      	cmp	r3, #64	; 0x40
 8006344:	d123      	bne.n	800638e <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	695a      	ldr	r2, [r3, #20]
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006354:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800635a:	2b00      	cmp	r3, #0
 800635c:	d013      	beq.n	8006386 <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006362:	4a77      	ldr	r2, [pc, #476]	; (8006540 <HAL_UART_IRQHandler+0x354>)
 8006364:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800636a:	4618      	mov	r0, r3
 800636c:	f7fd fd38 	bl	8003de0 <HAL_DMA_Abort_IT>
 8006370:	4603      	mov	r3, r0
 8006372:	2b00      	cmp	r3, #0
 8006374:	d016      	beq.n	80063a4 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800637a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800637c:	687a      	ldr	r2, [r7, #4]
 800637e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006380:	4610      	mov	r0, r2
 8006382:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006384:	e00e      	b.n	80063a4 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006386:	6878      	ldr	r0, [r7, #4]
 8006388:	f000 f8f0 	bl	800656c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800638c:	e00a      	b.n	80063a4 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800638e:	6878      	ldr	r0, [r7, #4]
 8006390:	f000 f8ec 	bl	800656c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006394:	e006      	b.n	80063a4 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006396:	6878      	ldr	r0, [r7, #4]
 8006398:	f000 f8e8 	bl	800656c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	2200      	movs	r2, #0
 80063a0:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80063a2:	e0c4      	b.n	800652e <HAL_UART_IRQHandler+0x342>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80063a4:	bf00      	nop
    return;
 80063a6:	e0c2      	b.n	800652e <HAL_UART_IRQHandler+0x342>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063ac:	2b01      	cmp	r3, #1
 80063ae:	f040 80a2 	bne.w	80064f6 <HAL_UART_IRQHandler+0x30a>
      &&((isrflags & USART_SR_IDLE) != 0U)
 80063b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063b4:	f003 0310 	and.w	r3, r3, #16
 80063b8:	2b00      	cmp	r3, #0
 80063ba:	f000 809c 	beq.w	80064f6 <HAL_UART_IRQHandler+0x30a>
      &&((cr1its & USART_SR_IDLE) != 0U))
 80063be:	6a3b      	ldr	r3, [r7, #32]
 80063c0:	f003 0310 	and.w	r3, r3, #16
 80063c4:	2b00      	cmp	r3, #0
 80063c6:	f000 8096 	beq.w	80064f6 <HAL_UART_IRQHandler+0x30a>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80063ca:	2300      	movs	r3, #0
 80063cc:	60fb      	str	r3, [r7, #12]
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	60fb      	str	r3, [r7, #12]
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	685b      	ldr	r3, [r3, #4]
 80063dc:	60fb      	str	r3, [r7, #12]
 80063de:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	695b      	ldr	r3, [r3, #20]
 80063e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80063ea:	2b40      	cmp	r3, #64	; 0x40
 80063ec:	d14f      	bne.n	800648e <HAL_UART_IRQHandler+0x2a2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	685b      	ldr	r3, [r3, #4]
 80063f6:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 80063f8:	8a3b      	ldrh	r3, [r7, #16]
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	f000 8099 	beq.w	8006532 <HAL_UART_IRQHandler+0x346>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006404:	8a3a      	ldrh	r2, [r7, #16]
 8006406:	429a      	cmp	r2, r3
 8006408:	f080 8093 	bcs.w	8006532 <HAL_UART_IRQHandler+0x346>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	8a3a      	ldrh	r2, [r7, #16]
 8006410:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006416:	69db      	ldr	r3, [r3, #28]
 8006418:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800641c:	d02b      	beq.n	8006476 <HAL_UART_IRQHandler+0x28a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	68da      	ldr	r2, [r3, #12]
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800642c:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	695a      	ldr	r2, [r3, #20]
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	f022 0201 	bic.w	r2, r2, #1
 800643c:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	695a      	ldr	r2, [r3, #20]
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800644c:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	2220      	movs	r2, #32
 8006452:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	2200      	movs	r2, #0
 800645a:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	68da      	ldr	r2, [r3, #12]
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	f022 0210 	bic.w	r2, r2, #16
 800646a:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006470:	4618      	mov	r0, r3
 8006472:	f7fd fc45 	bl	8003d00 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800647e:	b29b      	uxth	r3, r3
 8006480:	1ad3      	subs	r3, r2, r3
 8006482:	b29b      	uxth	r3, r3
 8006484:	4619      	mov	r1, r3
 8006486:	6878      	ldr	r0, [r7, #4]
 8006488:	f000 f87a 	bl	8006580 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 800648c:	e051      	b.n	8006532 <HAL_UART_IRQHandler+0x346>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006496:	b29b      	uxth	r3, r3
 8006498:	1ad3      	subs	r3, r2, r3
 800649a:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80064a0:	b29b      	uxth	r3, r3
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	d047      	beq.n	8006536 <HAL_UART_IRQHandler+0x34a>
          &&(nb_rx_data > 0U) )
 80064a6:	8a7b      	ldrh	r3, [r7, #18]
 80064a8:	2b00      	cmp	r3, #0
 80064aa:	d044      	beq.n	8006536 <HAL_UART_IRQHandler+0x34a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	68da      	ldr	r2, [r3, #12]
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80064ba:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	695a      	ldr	r2, [r3, #20]
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	f022 0201 	bic.w	r2, r2, #1
 80064ca:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	2220      	movs	r2, #32
 80064d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	2200      	movs	r2, #0
 80064d8:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	68da      	ldr	r2, [r3, #12]
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	f022 0210 	bic.w	r2, r2, #16
 80064e8:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80064ea:	8a7b      	ldrh	r3, [r7, #18]
 80064ec:	4619      	mov	r1, r3
 80064ee:	6878      	ldr	r0, [r7, #4]
 80064f0:	f000 f846 	bl	8006580 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 80064f4:	e01f      	b.n	8006536 <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80064f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80064fc:	2b00      	cmp	r3, #0
 80064fe:	d008      	beq.n	8006512 <HAL_UART_IRQHandler+0x326>
 8006500:	6a3b      	ldr	r3, [r7, #32]
 8006502:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006506:	2b00      	cmp	r3, #0
 8006508:	d003      	beq.n	8006512 <HAL_UART_IRQHandler+0x326>
  {
    UART_Transmit_IT(huart);
 800650a:	6878      	ldr	r0, [r7, #4]
 800650c:	f000 f909 	bl	8006722 <UART_Transmit_IT>
    return;
 8006510:	e012      	b.n	8006538 <HAL_UART_IRQHandler+0x34c>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8006512:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006514:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006518:	2b00      	cmp	r3, #0
 800651a:	d00d      	beq.n	8006538 <HAL_UART_IRQHandler+0x34c>
 800651c:	6a3b      	ldr	r3, [r7, #32]
 800651e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006522:	2b00      	cmp	r3, #0
 8006524:	d008      	beq.n	8006538 <HAL_UART_IRQHandler+0x34c>
  {
    UART_EndTransmit_IT(huart);
 8006526:	6878      	ldr	r0, [r7, #4]
 8006528:	f000 f94b 	bl	80067c2 <UART_EndTransmit_IT>
    return;
 800652c:	e004      	b.n	8006538 <HAL_UART_IRQHandler+0x34c>
    return;
 800652e:	bf00      	nop
 8006530:	e002      	b.n	8006538 <HAL_UART_IRQHandler+0x34c>
      return;
 8006532:	bf00      	nop
 8006534:	e000      	b.n	8006538 <HAL_UART_IRQHandler+0x34c>
      return;
 8006536:	bf00      	nop
  }
}
 8006538:	3728      	adds	r7, #40	; 0x28
 800653a:	46bd      	mov	sp, r7
 800653c:	bd80      	pop	{r7, pc}
 800653e:	bf00      	nop
 8006540:	080066fb 	.word	0x080066fb

08006544 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006544:	b480      	push	{r7}
 8006546:	b083      	sub	sp, #12
 8006548:	af00      	add	r7, sp, #0
 800654a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800654c:	bf00      	nop
 800654e:	370c      	adds	r7, #12
 8006550:	46bd      	mov	sp, r7
 8006552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006556:	4770      	bx	lr

08006558 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8006558:	b480      	push	{r7}
 800655a:	b083      	sub	sp, #12
 800655c:	af00      	add	r7, sp, #0
 800655e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8006560:	bf00      	nop
 8006562:	370c      	adds	r7, #12
 8006564:	46bd      	mov	sp, r7
 8006566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800656a:	4770      	bx	lr

0800656c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800656c:	b480      	push	{r7}
 800656e:	b083      	sub	sp, #12
 8006570:	af00      	add	r7, sp, #0
 8006572:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006574:	bf00      	nop
 8006576:	370c      	adds	r7, #12
 8006578:	46bd      	mov	sp, r7
 800657a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800657e:	4770      	bx	lr

08006580 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006580:	b480      	push	{r7}
 8006582:	b083      	sub	sp, #12
 8006584:	af00      	add	r7, sp, #0
 8006586:	6078      	str	r0, [r7, #4]
 8006588:	460b      	mov	r3, r1
 800658a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800658c:	bf00      	nop
 800658e:	370c      	adds	r7, #12
 8006590:	46bd      	mov	sp, r7
 8006592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006596:	4770      	bx	lr

08006598 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8006598:	b580      	push	{r7, lr}
 800659a:	b084      	sub	sp, #16
 800659c:	af00      	add	r7, sp, #0
 800659e:	60f8      	str	r0, [r7, #12]
 80065a0:	60b9      	str	r1, [r7, #8]
 80065a2:	603b      	str	r3, [r7, #0]
 80065a4:	4613      	mov	r3, r2
 80065a6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80065a8:	e02c      	b.n	8006604 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80065aa:	69bb      	ldr	r3, [r7, #24]
 80065ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80065b0:	d028      	beq.n	8006604 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80065b2:	69bb      	ldr	r3, [r7, #24]
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	d007      	beq.n	80065c8 <UART_WaitOnFlagUntilTimeout+0x30>
 80065b8:	f7fc fc28 	bl	8002e0c <HAL_GetTick>
 80065bc:	4602      	mov	r2, r0
 80065be:	683b      	ldr	r3, [r7, #0]
 80065c0:	1ad3      	subs	r3, r2, r3
 80065c2:	69ba      	ldr	r2, [r7, #24]
 80065c4:	429a      	cmp	r2, r3
 80065c6:	d21d      	bcs.n	8006604 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80065c8:	68fb      	ldr	r3, [r7, #12]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	68da      	ldr	r2, [r3, #12]
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80065d6:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	695a      	ldr	r2, [r3, #20]
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	f022 0201 	bic.w	r2, r2, #1
 80065e6:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	2220      	movs	r2, #32
 80065ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	2220      	movs	r2, #32
 80065f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	2200      	movs	r2, #0
 80065fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8006600:	2303      	movs	r3, #3
 8006602:	e00f      	b.n	8006624 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	681a      	ldr	r2, [r3, #0]
 800660a:	68bb      	ldr	r3, [r7, #8]
 800660c:	4013      	ands	r3, r2
 800660e:	68ba      	ldr	r2, [r7, #8]
 8006610:	429a      	cmp	r2, r3
 8006612:	bf0c      	ite	eq
 8006614:	2301      	moveq	r3, #1
 8006616:	2300      	movne	r3, #0
 8006618:	b2db      	uxtb	r3, r3
 800661a:	461a      	mov	r2, r3
 800661c:	79fb      	ldrb	r3, [r7, #7]
 800661e:	429a      	cmp	r2, r3
 8006620:	d0c3      	beq.n	80065aa <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006622:	2300      	movs	r3, #0
}
 8006624:	4618      	mov	r0, r3
 8006626:	3710      	adds	r7, #16
 8006628:	46bd      	mov	sp, r7
 800662a:	bd80      	pop	{r7, pc}

0800662c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800662c:	b480      	push	{r7}
 800662e:	b085      	sub	sp, #20
 8006630:	af00      	add	r7, sp, #0
 8006632:	60f8      	str	r0, [r7, #12]
 8006634:	60b9      	str	r1, [r7, #8]
 8006636:	4613      	mov	r3, r2
 8006638:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	68ba      	ldr	r2, [r7, #8]
 800663e:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	88fa      	ldrh	r2, [r7, #6]
 8006644:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	88fa      	ldrh	r2, [r7, #6]
 800664a:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	2200      	movs	r2, #0
 8006650:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006652:	68fb      	ldr	r3, [r7, #12]
 8006654:	2222      	movs	r2, #34	; 0x22
 8006656:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	2200      	movs	r2, #0
 800665e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	68da      	ldr	r2, [r3, #12]
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006670:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	695a      	ldr	r2, [r3, #20]
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	f042 0201 	orr.w	r2, r2, #1
 8006680:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	68da      	ldr	r2, [r3, #12]
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	f042 0220 	orr.w	r2, r2, #32
 8006690:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8006692:	2300      	movs	r3, #0
}
 8006694:	4618      	mov	r0, r3
 8006696:	3714      	adds	r7, #20
 8006698:	46bd      	mov	sp, r7
 800669a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800669e:	4770      	bx	lr

080066a0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80066a0:	b480      	push	{r7}
 80066a2:	b083      	sub	sp, #12
 80066a4:	af00      	add	r7, sp, #0
 80066a6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	68da      	ldr	r2, [r3, #12]
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80066b6:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	695a      	ldr	r2, [r3, #20]
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	f022 0201 	bic.w	r2, r2, #1
 80066c6:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066cc:	2b01      	cmp	r3, #1
 80066ce:	d107      	bne.n	80066e0 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	68da      	ldr	r2, [r3, #12]
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	f022 0210 	bic.w	r2, r2, #16
 80066de:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	2220      	movs	r2, #32
 80066e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	2200      	movs	r2, #0
 80066ec:	631a      	str	r2, [r3, #48]	; 0x30
}
 80066ee:	bf00      	nop
 80066f0:	370c      	adds	r7, #12
 80066f2:	46bd      	mov	sp, r7
 80066f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066f8:	4770      	bx	lr

080066fa <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80066fa:	b580      	push	{r7, lr}
 80066fc:	b084      	sub	sp, #16
 80066fe:	af00      	add	r7, sp, #0
 8006700:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006706:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	2200      	movs	r2, #0
 800670c:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800670e:	68fb      	ldr	r3, [r7, #12]
 8006710:	2200      	movs	r2, #0
 8006712:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006714:	68f8      	ldr	r0, [r7, #12]
 8006716:	f7ff ff29 	bl	800656c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800671a:	bf00      	nop
 800671c:	3710      	adds	r7, #16
 800671e:	46bd      	mov	sp, r7
 8006720:	bd80      	pop	{r7, pc}

08006722 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8006722:	b480      	push	{r7}
 8006724:	b085      	sub	sp, #20
 8006726:	af00      	add	r7, sp, #0
 8006728:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006730:	b2db      	uxtb	r3, r3
 8006732:	2b21      	cmp	r3, #33	; 0x21
 8006734:	d13e      	bne.n	80067b4 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	689b      	ldr	r3, [r3, #8]
 800673a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800673e:	d114      	bne.n	800676a <UART_Transmit_IT+0x48>
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	691b      	ldr	r3, [r3, #16]
 8006744:	2b00      	cmp	r3, #0
 8006746:	d110      	bne.n	800676a <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	6a1b      	ldr	r3, [r3, #32]
 800674c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	881b      	ldrh	r3, [r3, #0]
 8006752:	461a      	mov	r2, r3
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800675c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	6a1b      	ldr	r3, [r3, #32]
 8006762:	1c9a      	adds	r2, r3, #2
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	621a      	str	r2, [r3, #32]
 8006768:	e008      	b.n	800677c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	6a1b      	ldr	r3, [r3, #32]
 800676e:	1c59      	adds	r1, r3, #1
 8006770:	687a      	ldr	r2, [r7, #4]
 8006772:	6211      	str	r1, [r2, #32]
 8006774:	781a      	ldrb	r2, [r3, #0]
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006780:	b29b      	uxth	r3, r3
 8006782:	3b01      	subs	r3, #1
 8006784:	b29b      	uxth	r3, r3
 8006786:	687a      	ldr	r2, [r7, #4]
 8006788:	4619      	mov	r1, r3
 800678a:	84d1      	strh	r1, [r2, #38]	; 0x26
 800678c:	2b00      	cmp	r3, #0
 800678e:	d10f      	bne.n	80067b0 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	68da      	ldr	r2, [r3, #12]
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800679e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	68da      	ldr	r2, [r3, #12]
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80067ae:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80067b0:	2300      	movs	r3, #0
 80067b2:	e000      	b.n	80067b6 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80067b4:	2302      	movs	r3, #2
  }
}
 80067b6:	4618      	mov	r0, r3
 80067b8:	3714      	adds	r7, #20
 80067ba:	46bd      	mov	sp, r7
 80067bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067c0:	4770      	bx	lr

080067c2 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80067c2:	b580      	push	{r7, lr}
 80067c4:	b082      	sub	sp, #8
 80067c6:	af00      	add	r7, sp, #0
 80067c8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	68da      	ldr	r2, [r3, #12]
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80067d8:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	2220      	movs	r2, #32
 80067de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80067e2:	6878      	ldr	r0, [r7, #4]
 80067e4:	f7ff feae 	bl	8006544 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80067e8:	2300      	movs	r3, #0
}
 80067ea:	4618      	mov	r0, r3
 80067ec:	3708      	adds	r7, #8
 80067ee:	46bd      	mov	sp, r7
 80067f0:	bd80      	pop	{r7, pc}

080067f2 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80067f2:	b580      	push	{r7, lr}
 80067f4:	b084      	sub	sp, #16
 80067f6:	af00      	add	r7, sp, #0
 80067f8:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006800:	b2db      	uxtb	r3, r3
 8006802:	2b22      	cmp	r3, #34	; 0x22
 8006804:	f040 8087 	bne.w	8006916 <UART_Receive_IT+0x124>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	689b      	ldr	r3, [r3, #8]
 800680c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006810:	d117      	bne.n	8006842 <UART_Receive_IT+0x50>
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	691b      	ldr	r3, [r3, #16]
 8006816:	2b00      	cmp	r3, #0
 8006818:	d113      	bne.n	8006842 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800681a:	2300      	movs	r3, #0
 800681c:	60fb      	str	r3, [r7, #12]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006822:	60bb      	str	r3, [r7, #8]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	685b      	ldr	r3, [r3, #4]
 800682a:	b29b      	uxth	r3, r3
 800682c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006830:	b29a      	uxth	r2, r3
 8006832:	68bb      	ldr	r3, [r7, #8]
 8006834:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800683a:	1c9a      	adds	r2, r3, #2
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	629a      	str	r2, [r3, #40]	; 0x28
 8006840:	e026      	b.n	8006890 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006846:	60fb      	str	r3, [r7, #12]
      pdata16bits  = NULL;
 8006848:	2300      	movs	r3, #0
 800684a:	60bb      	str	r3, [r7, #8]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	689b      	ldr	r3, [r3, #8]
 8006850:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006854:	d007      	beq.n	8006866 <UART_Receive_IT+0x74>
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	689b      	ldr	r3, [r3, #8]
 800685a:	2b00      	cmp	r3, #0
 800685c:	d10a      	bne.n	8006874 <UART_Receive_IT+0x82>
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	691b      	ldr	r3, [r3, #16]
 8006862:	2b00      	cmp	r3, #0
 8006864:	d106      	bne.n	8006874 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	685b      	ldr	r3, [r3, #4]
 800686c:	b2da      	uxtb	r2, r3
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	701a      	strb	r2, [r3, #0]
 8006872:	e008      	b.n	8006886 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	685b      	ldr	r3, [r3, #4]
 800687a:	b2db      	uxtb	r3, r3
 800687c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006880:	b2da      	uxtb	r2, r3
 8006882:	68fb      	ldr	r3, [r7, #12]
 8006884:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800688a:	1c5a      	adds	r2, r3, #1
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006894:	b29b      	uxth	r3, r3
 8006896:	3b01      	subs	r3, #1
 8006898:	b29b      	uxth	r3, r3
 800689a:	687a      	ldr	r2, [r7, #4]
 800689c:	4619      	mov	r1, r3
 800689e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80068a0:	2b00      	cmp	r3, #0
 80068a2:	d136      	bne.n	8006912 <UART_Receive_IT+0x120>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	68da      	ldr	r2, [r3, #12]
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	f022 0220 	bic.w	r2, r2, #32
 80068b2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	68da      	ldr	r2, [r3, #12]
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80068c2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	695a      	ldr	r2, [r3, #20]
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	f022 0201 	bic.w	r2, r2, #1
 80068d2:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	2220      	movs	r2, #32
 80068d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80068e0:	2b01      	cmp	r3, #1
 80068e2:	d10e      	bne.n	8006902 <UART_Receive_IT+0x110>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	68da      	ldr	r2, [r3, #12]
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	f022 0210 	bic.w	r2, r2, #16
 80068f2:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80068f8:	4619      	mov	r1, r3
 80068fa:	6878      	ldr	r0, [r7, #4]
 80068fc:	f7ff fe40 	bl	8006580 <HAL_UARTEx_RxEventCallback>
 8006900:	e002      	b.n	8006908 <UART_Receive_IT+0x116>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8006902:	6878      	ldr	r0, [r7, #4]
 8006904:	f7ff fe28 	bl	8006558 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	2200      	movs	r2, #0
 800690c:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_OK;
 800690e:	2300      	movs	r3, #0
 8006910:	e002      	b.n	8006918 <UART_Receive_IT+0x126>
    }
    return HAL_OK;
 8006912:	2300      	movs	r3, #0
 8006914:	e000      	b.n	8006918 <UART_Receive_IT+0x126>
  }
  else
  {
    return HAL_BUSY;
 8006916:	2302      	movs	r3, #2
  }
}
 8006918:	4618      	mov	r0, r3
 800691a:	3710      	adds	r7, #16
 800691c:	46bd      	mov	sp, r7
 800691e:	bd80      	pop	{r7, pc}

08006920 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006920:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006924:	b09f      	sub	sp, #124	; 0x7c
 8006926:	af00      	add	r7, sp, #0
 8006928:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800692a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	691b      	ldr	r3, [r3, #16]
 8006930:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8006934:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006936:	68d9      	ldr	r1, [r3, #12]
 8006938:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800693a:	681a      	ldr	r2, [r3, #0]
 800693c:	ea40 0301 	orr.w	r3, r0, r1
 8006940:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006942:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006944:	689a      	ldr	r2, [r3, #8]
 8006946:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006948:	691b      	ldr	r3, [r3, #16]
 800694a:	431a      	orrs	r2, r3
 800694c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800694e:	695b      	ldr	r3, [r3, #20]
 8006950:	431a      	orrs	r2, r3
 8006952:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006954:	69db      	ldr	r3, [r3, #28]
 8006956:	4313      	orrs	r3, r2
 8006958:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 800695a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	68db      	ldr	r3, [r3, #12]
 8006960:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8006964:	f021 010c 	bic.w	r1, r1, #12
 8006968:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800696a:	681a      	ldr	r2, [r3, #0]
 800696c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800696e:	430b      	orrs	r3, r1
 8006970:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006972:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	695b      	ldr	r3, [r3, #20]
 8006978:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800697c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800697e:	6999      	ldr	r1, [r3, #24]
 8006980:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006982:	681a      	ldr	r2, [r3, #0]
 8006984:	ea40 0301 	orr.w	r3, r0, r1
 8006988:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800698a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800698c:	681a      	ldr	r2, [r3, #0]
 800698e:	4bc5      	ldr	r3, [pc, #788]	; (8006ca4 <UART_SetConfig+0x384>)
 8006990:	429a      	cmp	r2, r3
 8006992:	d004      	beq.n	800699e <UART_SetConfig+0x7e>
 8006994:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006996:	681a      	ldr	r2, [r3, #0]
 8006998:	4bc3      	ldr	r3, [pc, #780]	; (8006ca8 <UART_SetConfig+0x388>)
 800699a:	429a      	cmp	r2, r3
 800699c:	d103      	bne.n	80069a6 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800699e:	f7fe fac1 	bl	8004f24 <HAL_RCC_GetPCLK2Freq>
 80069a2:	6778      	str	r0, [r7, #116]	; 0x74
 80069a4:	e002      	b.n	80069ac <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80069a6:	f7fe faa9 	bl	8004efc <HAL_RCC_GetPCLK1Freq>
 80069aa:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80069ac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80069ae:	69db      	ldr	r3, [r3, #28]
 80069b0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80069b4:	f040 80b6 	bne.w	8006b24 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80069b8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80069ba:	461c      	mov	r4, r3
 80069bc:	f04f 0500 	mov.w	r5, #0
 80069c0:	4622      	mov	r2, r4
 80069c2:	462b      	mov	r3, r5
 80069c4:	1891      	adds	r1, r2, r2
 80069c6:	6439      	str	r1, [r7, #64]	; 0x40
 80069c8:	415b      	adcs	r3, r3
 80069ca:	647b      	str	r3, [r7, #68]	; 0x44
 80069cc:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80069d0:	1912      	adds	r2, r2, r4
 80069d2:	eb45 0303 	adc.w	r3, r5, r3
 80069d6:	f04f 0000 	mov.w	r0, #0
 80069da:	f04f 0100 	mov.w	r1, #0
 80069de:	00d9      	lsls	r1, r3, #3
 80069e0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80069e4:	00d0      	lsls	r0, r2, #3
 80069e6:	4602      	mov	r2, r0
 80069e8:	460b      	mov	r3, r1
 80069ea:	1911      	adds	r1, r2, r4
 80069ec:	6639      	str	r1, [r7, #96]	; 0x60
 80069ee:	416b      	adcs	r3, r5
 80069f0:	667b      	str	r3, [r7, #100]	; 0x64
 80069f2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80069f4:	685b      	ldr	r3, [r3, #4]
 80069f6:	461a      	mov	r2, r3
 80069f8:	f04f 0300 	mov.w	r3, #0
 80069fc:	1891      	adds	r1, r2, r2
 80069fe:	63b9      	str	r1, [r7, #56]	; 0x38
 8006a00:	415b      	adcs	r3, r3
 8006a02:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006a04:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8006a08:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8006a0c:	f7fa fa52 	bl	8000eb4 <__aeabi_uldivmod>
 8006a10:	4602      	mov	r2, r0
 8006a12:	460b      	mov	r3, r1
 8006a14:	4ba5      	ldr	r3, [pc, #660]	; (8006cac <UART_SetConfig+0x38c>)
 8006a16:	fba3 2302 	umull	r2, r3, r3, r2
 8006a1a:	095b      	lsrs	r3, r3, #5
 8006a1c:	011e      	lsls	r6, r3, #4
 8006a1e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006a20:	461c      	mov	r4, r3
 8006a22:	f04f 0500 	mov.w	r5, #0
 8006a26:	4622      	mov	r2, r4
 8006a28:	462b      	mov	r3, r5
 8006a2a:	1891      	adds	r1, r2, r2
 8006a2c:	6339      	str	r1, [r7, #48]	; 0x30
 8006a2e:	415b      	adcs	r3, r3
 8006a30:	637b      	str	r3, [r7, #52]	; 0x34
 8006a32:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8006a36:	1912      	adds	r2, r2, r4
 8006a38:	eb45 0303 	adc.w	r3, r5, r3
 8006a3c:	f04f 0000 	mov.w	r0, #0
 8006a40:	f04f 0100 	mov.w	r1, #0
 8006a44:	00d9      	lsls	r1, r3, #3
 8006a46:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006a4a:	00d0      	lsls	r0, r2, #3
 8006a4c:	4602      	mov	r2, r0
 8006a4e:	460b      	mov	r3, r1
 8006a50:	1911      	adds	r1, r2, r4
 8006a52:	65b9      	str	r1, [r7, #88]	; 0x58
 8006a54:	416b      	adcs	r3, r5
 8006a56:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006a58:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006a5a:	685b      	ldr	r3, [r3, #4]
 8006a5c:	461a      	mov	r2, r3
 8006a5e:	f04f 0300 	mov.w	r3, #0
 8006a62:	1891      	adds	r1, r2, r2
 8006a64:	62b9      	str	r1, [r7, #40]	; 0x28
 8006a66:	415b      	adcs	r3, r3
 8006a68:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006a6a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006a6e:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8006a72:	f7fa fa1f 	bl	8000eb4 <__aeabi_uldivmod>
 8006a76:	4602      	mov	r2, r0
 8006a78:	460b      	mov	r3, r1
 8006a7a:	4b8c      	ldr	r3, [pc, #560]	; (8006cac <UART_SetConfig+0x38c>)
 8006a7c:	fba3 1302 	umull	r1, r3, r3, r2
 8006a80:	095b      	lsrs	r3, r3, #5
 8006a82:	2164      	movs	r1, #100	; 0x64
 8006a84:	fb01 f303 	mul.w	r3, r1, r3
 8006a88:	1ad3      	subs	r3, r2, r3
 8006a8a:	00db      	lsls	r3, r3, #3
 8006a8c:	3332      	adds	r3, #50	; 0x32
 8006a8e:	4a87      	ldr	r2, [pc, #540]	; (8006cac <UART_SetConfig+0x38c>)
 8006a90:	fba2 2303 	umull	r2, r3, r2, r3
 8006a94:	095b      	lsrs	r3, r3, #5
 8006a96:	005b      	lsls	r3, r3, #1
 8006a98:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006a9c:	441e      	add	r6, r3
 8006a9e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006aa0:	4618      	mov	r0, r3
 8006aa2:	f04f 0100 	mov.w	r1, #0
 8006aa6:	4602      	mov	r2, r0
 8006aa8:	460b      	mov	r3, r1
 8006aaa:	1894      	adds	r4, r2, r2
 8006aac:	623c      	str	r4, [r7, #32]
 8006aae:	415b      	adcs	r3, r3
 8006ab0:	627b      	str	r3, [r7, #36]	; 0x24
 8006ab2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006ab6:	1812      	adds	r2, r2, r0
 8006ab8:	eb41 0303 	adc.w	r3, r1, r3
 8006abc:	f04f 0400 	mov.w	r4, #0
 8006ac0:	f04f 0500 	mov.w	r5, #0
 8006ac4:	00dd      	lsls	r5, r3, #3
 8006ac6:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8006aca:	00d4      	lsls	r4, r2, #3
 8006acc:	4622      	mov	r2, r4
 8006ace:	462b      	mov	r3, r5
 8006ad0:	1814      	adds	r4, r2, r0
 8006ad2:	653c      	str	r4, [r7, #80]	; 0x50
 8006ad4:	414b      	adcs	r3, r1
 8006ad6:	657b      	str	r3, [r7, #84]	; 0x54
 8006ad8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006ada:	685b      	ldr	r3, [r3, #4]
 8006adc:	461a      	mov	r2, r3
 8006ade:	f04f 0300 	mov.w	r3, #0
 8006ae2:	1891      	adds	r1, r2, r2
 8006ae4:	61b9      	str	r1, [r7, #24]
 8006ae6:	415b      	adcs	r3, r3
 8006ae8:	61fb      	str	r3, [r7, #28]
 8006aea:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006aee:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8006af2:	f7fa f9df 	bl	8000eb4 <__aeabi_uldivmod>
 8006af6:	4602      	mov	r2, r0
 8006af8:	460b      	mov	r3, r1
 8006afa:	4b6c      	ldr	r3, [pc, #432]	; (8006cac <UART_SetConfig+0x38c>)
 8006afc:	fba3 1302 	umull	r1, r3, r3, r2
 8006b00:	095b      	lsrs	r3, r3, #5
 8006b02:	2164      	movs	r1, #100	; 0x64
 8006b04:	fb01 f303 	mul.w	r3, r1, r3
 8006b08:	1ad3      	subs	r3, r2, r3
 8006b0a:	00db      	lsls	r3, r3, #3
 8006b0c:	3332      	adds	r3, #50	; 0x32
 8006b0e:	4a67      	ldr	r2, [pc, #412]	; (8006cac <UART_SetConfig+0x38c>)
 8006b10:	fba2 2303 	umull	r2, r3, r2, r3
 8006b14:	095b      	lsrs	r3, r3, #5
 8006b16:	f003 0207 	and.w	r2, r3, #7
 8006b1a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	4432      	add	r2, r6
 8006b20:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006b22:	e0b9      	b.n	8006c98 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006b24:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006b26:	461c      	mov	r4, r3
 8006b28:	f04f 0500 	mov.w	r5, #0
 8006b2c:	4622      	mov	r2, r4
 8006b2e:	462b      	mov	r3, r5
 8006b30:	1891      	adds	r1, r2, r2
 8006b32:	6139      	str	r1, [r7, #16]
 8006b34:	415b      	adcs	r3, r3
 8006b36:	617b      	str	r3, [r7, #20]
 8006b38:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8006b3c:	1912      	adds	r2, r2, r4
 8006b3e:	eb45 0303 	adc.w	r3, r5, r3
 8006b42:	f04f 0000 	mov.w	r0, #0
 8006b46:	f04f 0100 	mov.w	r1, #0
 8006b4a:	00d9      	lsls	r1, r3, #3
 8006b4c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006b50:	00d0      	lsls	r0, r2, #3
 8006b52:	4602      	mov	r2, r0
 8006b54:	460b      	mov	r3, r1
 8006b56:	eb12 0804 	adds.w	r8, r2, r4
 8006b5a:	eb43 0905 	adc.w	r9, r3, r5
 8006b5e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006b60:	685b      	ldr	r3, [r3, #4]
 8006b62:	4618      	mov	r0, r3
 8006b64:	f04f 0100 	mov.w	r1, #0
 8006b68:	f04f 0200 	mov.w	r2, #0
 8006b6c:	f04f 0300 	mov.w	r3, #0
 8006b70:	008b      	lsls	r3, r1, #2
 8006b72:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8006b76:	0082      	lsls	r2, r0, #2
 8006b78:	4640      	mov	r0, r8
 8006b7a:	4649      	mov	r1, r9
 8006b7c:	f7fa f99a 	bl	8000eb4 <__aeabi_uldivmod>
 8006b80:	4602      	mov	r2, r0
 8006b82:	460b      	mov	r3, r1
 8006b84:	4b49      	ldr	r3, [pc, #292]	; (8006cac <UART_SetConfig+0x38c>)
 8006b86:	fba3 2302 	umull	r2, r3, r3, r2
 8006b8a:	095b      	lsrs	r3, r3, #5
 8006b8c:	011e      	lsls	r6, r3, #4
 8006b8e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006b90:	4618      	mov	r0, r3
 8006b92:	f04f 0100 	mov.w	r1, #0
 8006b96:	4602      	mov	r2, r0
 8006b98:	460b      	mov	r3, r1
 8006b9a:	1894      	adds	r4, r2, r2
 8006b9c:	60bc      	str	r4, [r7, #8]
 8006b9e:	415b      	adcs	r3, r3
 8006ba0:	60fb      	str	r3, [r7, #12]
 8006ba2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006ba6:	1812      	adds	r2, r2, r0
 8006ba8:	eb41 0303 	adc.w	r3, r1, r3
 8006bac:	f04f 0400 	mov.w	r4, #0
 8006bb0:	f04f 0500 	mov.w	r5, #0
 8006bb4:	00dd      	lsls	r5, r3, #3
 8006bb6:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8006bba:	00d4      	lsls	r4, r2, #3
 8006bbc:	4622      	mov	r2, r4
 8006bbe:	462b      	mov	r3, r5
 8006bc0:	1814      	adds	r4, r2, r0
 8006bc2:	64bc      	str	r4, [r7, #72]	; 0x48
 8006bc4:	414b      	adcs	r3, r1
 8006bc6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006bc8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006bca:	685b      	ldr	r3, [r3, #4]
 8006bcc:	4618      	mov	r0, r3
 8006bce:	f04f 0100 	mov.w	r1, #0
 8006bd2:	f04f 0200 	mov.w	r2, #0
 8006bd6:	f04f 0300 	mov.w	r3, #0
 8006bda:	008b      	lsls	r3, r1, #2
 8006bdc:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8006be0:	0082      	lsls	r2, r0, #2
 8006be2:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8006be6:	f7fa f965 	bl	8000eb4 <__aeabi_uldivmod>
 8006bea:	4602      	mov	r2, r0
 8006bec:	460b      	mov	r3, r1
 8006bee:	4b2f      	ldr	r3, [pc, #188]	; (8006cac <UART_SetConfig+0x38c>)
 8006bf0:	fba3 1302 	umull	r1, r3, r3, r2
 8006bf4:	095b      	lsrs	r3, r3, #5
 8006bf6:	2164      	movs	r1, #100	; 0x64
 8006bf8:	fb01 f303 	mul.w	r3, r1, r3
 8006bfc:	1ad3      	subs	r3, r2, r3
 8006bfe:	011b      	lsls	r3, r3, #4
 8006c00:	3332      	adds	r3, #50	; 0x32
 8006c02:	4a2a      	ldr	r2, [pc, #168]	; (8006cac <UART_SetConfig+0x38c>)
 8006c04:	fba2 2303 	umull	r2, r3, r2, r3
 8006c08:	095b      	lsrs	r3, r3, #5
 8006c0a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006c0e:	441e      	add	r6, r3
 8006c10:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006c12:	4618      	mov	r0, r3
 8006c14:	f04f 0100 	mov.w	r1, #0
 8006c18:	4602      	mov	r2, r0
 8006c1a:	460b      	mov	r3, r1
 8006c1c:	1894      	adds	r4, r2, r2
 8006c1e:	603c      	str	r4, [r7, #0]
 8006c20:	415b      	adcs	r3, r3
 8006c22:	607b      	str	r3, [r7, #4]
 8006c24:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006c28:	1812      	adds	r2, r2, r0
 8006c2a:	eb41 0303 	adc.w	r3, r1, r3
 8006c2e:	f04f 0400 	mov.w	r4, #0
 8006c32:	f04f 0500 	mov.w	r5, #0
 8006c36:	00dd      	lsls	r5, r3, #3
 8006c38:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8006c3c:	00d4      	lsls	r4, r2, #3
 8006c3e:	4622      	mov	r2, r4
 8006c40:	462b      	mov	r3, r5
 8006c42:	eb12 0a00 	adds.w	sl, r2, r0
 8006c46:	eb43 0b01 	adc.w	fp, r3, r1
 8006c4a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006c4c:	685b      	ldr	r3, [r3, #4]
 8006c4e:	4618      	mov	r0, r3
 8006c50:	f04f 0100 	mov.w	r1, #0
 8006c54:	f04f 0200 	mov.w	r2, #0
 8006c58:	f04f 0300 	mov.w	r3, #0
 8006c5c:	008b      	lsls	r3, r1, #2
 8006c5e:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8006c62:	0082      	lsls	r2, r0, #2
 8006c64:	4650      	mov	r0, sl
 8006c66:	4659      	mov	r1, fp
 8006c68:	f7fa f924 	bl	8000eb4 <__aeabi_uldivmod>
 8006c6c:	4602      	mov	r2, r0
 8006c6e:	460b      	mov	r3, r1
 8006c70:	4b0e      	ldr	r3, [pc, #56]	; (8006cac <UART_SetConfig+0x38c>)
 8006c72:	fba3 1302 	umull	r1, r3, r3, r2
 8006c76:	095b      	lsrs	r3, r3, #5
 8006c78:	2164      	movs	r1, #100	; 0x64
 8006c7a:	fb01 f303 	mul.w	r3, r1, r3
 8006c7e:	1ad3      	subs	r3, r2, r3
 8006c80:	011b      	lsls	r3, r3, #4
 8006c82:	3332      	adds	r3, #50	; 0x32
 8006c84:	4a09      	ldr	r2, [pc, #36]	; (8006cac <UART_SetConfig+0x38c>)
 8006c86:	fba2 2303 	umull	r2, r3, r2, r3
 8006c8a:	095b      	lsrs	r3, r3, #5
 8006c8c:	f003 020f 	and.w	r2, r3, #15
 8006c90:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	4432      	add	r2, r6
 8006c96:	609a      	str	r2, [r3, #8]
}
 8006c98:	bf00      	nop
 8006c9a:	377c      	adds	r7, #124	; 0x7c
 8006c9c:	46bd      	mov	sp, r7
 8006c9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006ca2:	bf00      	nop
 8006ca4:	40011000 	.word	0x40011000
 8006ca8:	40011400 	.word	0x40011400
 8006cac:	51eb851f 	.word	0x51eb851f

08006cb0 <__errno>:
 8006cb0:	4b01      	ldr	r3, [pc, #4]	; (8006cb8 <__errno+0x8>)
 8006cb2:	6818      	ldr	r0, [r3, #0]
 8006cb4:	4770      	bx	lr
 8006cb6:	bf00      	nop
 8006cb8:	20000010 	.word	0x20000010

08006cbc <__libc_init_array>:
 8006cbc:	b570      	push	{r4, r5, r6, lr}
 8006cbe:	4d0d      	ldr	r5, [pc, #52]	; (8006cf4 <__libc_init_array+0x38>)
 8006cc0:	4c0d      	ldr	r4, [pc, #52]	; (8006cf8 <__libc_init_array+0x3c>)
 8006cc2:	1b64      	subs	r4, r4, r5
 8006cc4:	10a4      	asrs	r4, r4, #2
 8006cc6:	2600      	movs	r6, #0
 8006cc8:	42a6      	cmp	r6, r4
 8006cca:	d109      	bne.n	8006ce0 <__libc_init_array+0x24>
 8006ccc:	4d0b      	ldr	r5, [pc, #44]	; (8006cfc <__libc_init_array+0x40>)
 8006cce:	4c0c      	ldr	r4, [pc, #48]	; (8006d00 <__libc_init_array+0x44>)
 8006cd0:	f003 feec 	bl	800aaac <_init>
 8006cd4:	1b64      	subs	r4, r4, r5
 8006cd6:	10a4      	asrs	r4, r4, #2
 8006cd8:	2600      	movs	r6, #0
 8006cda:	42a6      	cmp	r6, r4
 8006cdc:	d105      	bne.n	8006cea <__libc_init_array+0x2e>
 8006cde:	bd70      	pop	{r4, r5, r6, pc}
 8006ce0:	f855 3b04 	ldr.w	r3, [r5], #4
 8006ce4:	4798      	blx	r3
 8006ce6:	3601      	adds	r6, #1
 8006ce8:	e7ee      	b.n	8006cc8 <__libc_init_array+0xc>
 8006cea:	f855 3b04 	ldr.w	r3, [r5], #4
 8006cee:	4798      	blx	r3
 8006cf0:	3601      	adds	r6, #1
 8006cf2:	e7f2      	b.n	8006cda <__libc_init_array+0x1e>
 8006cf4:	0800b5f0 	.word	0x0800b5f0
 8006cf8:	0800b5f0 	.word	0x0800b5f0
 8006cfc:	0800b5f0 	.word	0x0800b5f0
 8006d00:	0800b5f4 	.word	0x0800b5f4

08006d04 <memcpy>:
 8006d04:	440a      	add	r2, r1
 8006d06:	4291      	cmp	r1, r2
 8006d08:	f100 33ff 	add.w	r3, r0, #4294967295
 8006d0c:	d100      	bne.n	8006d10 <memcpy+0xc>
 8006d0e:	4770      	bx	lr
 8006d10:	b510      	push	{r4, lr}
 8006d12:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006d16:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006d1a:	4291      	cmp	r1, r2
 8006d1c:	d1f9      	bne.n	8006d12 <memcpy+0xe>
 8006d1e:	bd10      	pop	{r4, pc}

08006d20 <memset>:
 8006d20:	4402      	add	r2, r0
 8006d22:	4603      	mov	r3, r0
 8006d24:	4293      	cmp	r3, r2
 8006d26:	d100      	bne.n	8006d2a <memset+0xa>
 8006d28:	4770      	bx	lr
 8006d2a:	f803 1b01 	strb.w	r1, [r3], #1
 8006d2e:	e7f9      	b.n	8006d24 <memset+0x4>

08006d30 <__cvt>:
 8006d30:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006d34:	ec55 4b10 	vmov	r4, r5, d0
 8006d38:	2d00      	cmp	r5, #0
 8006d3a:	460e      	mov	r6, r1
 8006d3c:	4619      	mov	r1, r3
 8006d3e:	462b      	mov	r3, r5
 8006d40:	bfbb      	ittet	lt
 8006d42:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8006d46:	461d      	movlt	r5, r3
 8006d48:	2300      	movge	r3, #0
 8006d4a:	232d      	movlt	r3, #45	; 0x2d
 8006d4c:	700b      	strb	r3, [r1, #0]
 8006d4e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006d50:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8006d54:	4691      	mov	r9, r2
 8006d56:	f023 0820 	bic.w	r8, r3, #32
 8006d5a:	bfbc      	itt	lt
 8006d5c:	4622      	movlt	r2, r4
 8006d5e:	4614      	movlt	r4, r2
 8006d60:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006d64:	d005      	beq.n	8006d72 <__cvt+0x42>
 8006d66:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8006d6a:	d100      	bne.n	8006d6e <__cvt+0x3e>
 8006d6c:	3601      	adds	r6, #1
 8006d6e:	2102      	movs	r1, #2
 8006d70:	e000      	b.n	8006d74 <__cvt+0x44>
 8006d72:	2103      	movs	r1, #3
 8006d74:	ab03      	add	r3, sp, #12
 8006d76:	9301      	str	r3, [sp, #4]
 8006d78:	ab02      	add	r3, sp, #8
 8006d7a:	9300      	str	r3, [sp, #0]
 8006d7c:	ec45 4b10 	vmov	d0, r4, r5
 8006d80:	4653      	mov	r3, sl
 8006d82:	4632      	mov	r2, r6
 8006d84:	f000 fcec 	bl	8007760 <_dtoa_r>
 8006d88:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8006d8c:	4607      	mov	r7, r0
 8006d8e:	d102      	bne.n	8006d96 <__cvt+0x66>
 8006d90:	f019 0f01 	tst.w	r9, #1
 8006d94:	d022      	beq.n	8006ddc <__cvt+0xac>
 8006d96:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006d9a:	eb07 0906 	add.w	r9, r7, r6
 8006d9e:	d110      	bne.n	8006dc2 <__cvt+0x92>
 8006da0:	783b      	ldrb	r3, [r7, #0]
 8006da2:	2b30      	cmp	r3, #48	; 0x30
 8006da4:	d10a      	bne.n	8006dbc <__cvt+0x8c>
 8006da6:	2200      	movs	r2, #0
 8006da8:	2300      	movs	r3, #0
 8006daa:	4620      	mov	r0, r4
 8006dac:	4629      	mov	r1, r5
 8006dae:	f7f9 fe93 	bl	8000ad8 <__aeabi_dcmpeq>
 8006db2:	b918      	cbnz	r0, 8006dbc <__cvt+0x8c>
 8006db4:	f1c6 0601 	rsb	r6, r6, #1
 8006db8:	f8ca 6000 	str.w	r6, [sl]
 8006dbc:	f8da 3000 	ldr.w	r3, [sl]
 8006dc0:	4499      	add	r9, r3
 8006dc2:	2200      	movs	r2, #0
 8006dc4:	2300      	movs	r3, #0
 8006dc6:	4620      	mov	r0, r4
 8006dc8:	4629      	mov	r1, r5
 8006dca:	f7f9 fe85 	bl	8000ad8 <__aeabi_dcmpeq>
 8006dce:	b108      	cbz	r0, 8006dd4 <__cvt+0xa4>
 8006dd0:	f8cd 900c 	str.w	r9, [sp, #12]
 8006dd4:	2230      	movs	r2, #48	; 0x30
 8006dd6:	9b03      	ldr	r3, [sp, #12]
 8006dd8:	454b      	cmp	r3, r9
 8006dda:	d307      	bcc.n	8006dec <__cvt+0xbc>
 8006ddc:	9b03      	ldr	r3, [sp, #12]
 8006dde:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006de0:	1bdb      	subs	r3, r3, r7
 8006de2:	4638      	mov	r0, r7
 8006de4:	6013      	str	r3, [r2, #0]
 8006de6:	b004      	add	sp, #16
 8006de8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006dec:	1c59      	adds	r1, r3, #1
 8006dee:	9103      	str	r1, [sp, #12]
 8006df0:	701a      	strb	r2, [r3, #0]
 8006df2:	e7f0      	b.n	8006dd6 <__cvt+0xa6>

08006df4 <__exponent>:
 8006df4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006df6:	4603      	mov	r3, r0
 8006df8:	2900      	cmp	r1, #0
 8006dfa:	bfb8      	it	lt
 8006dfc:	4249      	neglt	r1, r1
 8006dfe:	f803 2b02 	strb.w	r2, [r3], #2
 8006e02:	bfb4      	ite	lt
 8006e04:	222d      	movlt	r2, #45	; 0x2d
 8006e06:	222b      	movge	r2, #43	; 0x2b
 8006e08:	2909      	cmp	r1, #9
 8006e0a:	7042      	strb	r2, [r0, #1]
 8006e0c:	dd2a      	ble.n	8006e64 <__exponent+0x70>
 8006e0e:	f10d 0407 	add.w	r4, sp, #7
 8006e12:	46a4      	mov	ip, r4
 8006e14:	270a      	movs	r7, #10
 8006e16:	46a6      	mov	lr, r4
 8006e18:	460a      	mov	r2, r1
 8006e1a:	fb91 f6f7 	sdiv	r6, r1, r7
 8006e1e:	fb07 1516 	mls	r5, r7, r6, r1
 8006e22:	3530      	adds	r5, #48	; 0x30
 8006e24:	2a63      	cmp	r2, #99	; 0x63
 8006e26:	f104 34ff 	add.w	r4, r4, #4294967295
 8006e2a:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8006e2e:	4631      	mov	r1, r6
 8006e30:	dcf1      	bgt.n	8006e16 <__exponent+0x22>
 8006e32:	3130      	adds	r1, #48	; 0x30
 8006e34:	f1ae 0502 	sub.w	r5, lr, #2
 8006e38:	f804 1c01 	strb.w	r1, [r4, #-1]
 8006e3c:	1c44      	adds	r4, r0, #1
 8006e3e:	4629      	mov	r1, r5
 8006e40:	4561      	cmp	r1, ip
 8006e42:	d30a      	bcc.n	8006e5a <__exponent+0x66>
 8006e44:	f10d 0209 	add.w	r2, sp, #9
 8006e48:	eba2 020e 	sub.w	r2, r2, lr
 8006e4c:	4565      	cmp	r5, ip
 8006e4e:	bf88      	it	hi
 8006e50:	2200      	movhi	r2, #0
 8006e52:	4413      	add	r3, r2
 8006e54:	1a18      	subs	r0, r3, r0
 8006e56:	b003      	add	sp, #12
 8006e58:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006e5a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006e5e:	f804 2f01 	strb.w	r2, [r4, #1]!
 8006e62:	e7ed      	b.n	8006e40 <__exponent+0x4c>
 8006e64:	2330      	movs	r3, #48	; 0x30
 8006e66:	3130      	adds	r1, #48	; 0x30
 8006e68:	7083      	strb	r3, [r0, #2]
 8006e6a:	70c1      	strb	r1, [r0, #3]
 8006e6c:	1d03      	adds	r3, r0, #4
 8006e6e:	e7f1      	b.n	8006e54 <__exponent+0x60>

08006e70 <_printf_float>:
 8006e70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006e74:	ed2d 8b02 	vpush	{d8}
 8006e78:	b08d      	sub	sp, #52	; 0x34
 8006e7a:	460c      	mov	r4, r1
 8006e7c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8006e80:	4616      	mov	r6, r2
 8006e82:	461f      	mov	r7, r3
 8006e84:	4605      	mov	r5, r0
 8006e86:	f001 fa57 	bl	8008338 <_localeconv_r>
 8006e8a:	f8d0 a000 	ldr.w	sl, [r0]
 8006e8e:	4650      	mov	r0, sl
 8006e90:	f7f9 f9a6 	bl	80001e0 <strlen>
 8006e94:	2300      	movs	r3, #0
 8006e96:	930a      	str	r3, [sp, #40]	; 0x28
 8006e98:	6823      	ldr	r3, [r4, #0]
 8006e9a:	9305      	str	r3, [sp, #20]
 8006e9c:	f8d8 3000 	ldr.w	r3, [r8]
 8006ea0:	f894 b018 	ldrb.w	fp, [r4, #24]
 8006ea4:	3307      	adds	r3, #7
 8006ea6:	f023 0307 	bic.w	r3, r3, #7
 8006eaa:	f103 0208 	add.w	r2, r3, #8
 8006eae:	f8c8 2000 	str.w	r2, [r8]
 8006eb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006eb6:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8006eba:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8006ebe:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8006ec2:	9307      	str	r3, [sp, #28]
 8006ec4:	f8cd 8018 	str.w	r8, [sp, #24]
 8006ec8:	ee08 0a10 	vmov	s16, r0
 8006ecc:	4b9f      	ldr	r3, [pc, #636]	; (800714c <_printf_float+0x2dc>)
 8006ece:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006ed2:	f04f 32ff 	mov.w	r2, #4294967295
 8006ed6:	f7f9 fe31 	bl	8000b3c <__aeabi_dcmpun>
 8006eda:	bb88      	cbnz	r0, 8006f40 <_printf_float+0xd0>
 8006edc:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006ee0:	4b9a      	ldr	r3, [pc, #616]	; (800714c <_printf_float+0x2dc>)
 8006ee2:	f04f 32ff 	mov.w	r2, #4294967295
 8006ee6:	f7f9 fe0b 	bl	8000b00 <__aeabi_dcmple>
 8006eea:	bb48      	cbnz	r0, 8006f40 <_printf_float+0xd0>
 8006eec:	2200      	movs	r2, #0
 8006eee:	2300      	movs	r3, #0
 8006ef0:	4640      	mov	r0, r8
 8006ef2:	4649      	mov	r1, r9
 8006ef4:	f7f9 fdfa 	bl	8000aec <__aeabi_dcmplt>
 8006ef8:	b110      	cbz	r0, 8006f00 <_printf_float+0x90>
 8006efa:	232d      	movs	r3, #45	; 0x2d
 8006efc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006f00:	4b93      	ldr	r3, [pc, #588]	; (8007150 <_printf_float+0x2e0>)
 8006f02:	4894      	ldr	r0, [pc, #592]	; (8007154 <_printf_float+0x2e4>)
 8006f04:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8006f08:	bf94      	ite	ls
 8006f0a:	4698      	movls	r8, r3
 8006f0c:	4680      	movhi	r8, r0
 8006f0e:	2303      	movs	r3, #3
 8006f10:	6123      	str	r3, [r4, #16]
 8006f12:	9b05      	ldr	r3, [sp, #20]
 8006f14:	f023 0204 	bic.w	r2, r3, #4
 8006f18:	6022      	str	r2, [r4, #0]
 8006f1a:	f04f 0900 	mov.w	r9, #0
 8006f1e:	9700      	str	r7, [sp, #0]
 8006f20:	4633      	mov	r3, r6
 8006f22:	aa0b      	add	r2, sp, #44	; 0x2c
 8006f24:	4621      	mov	r1, r4
 8006f26:	4628      	mov	r0, r5
 8006f28:	f000 f9d8 	bl	80072dc <_printf_common>
 8006f2c:	3001      	adds	r0, #1
 8006f2e:	f040 8090 	bne.w	8007052 <_printf_float+0x1e2>
 8006f32:	f04f 30ff 	mov.w	r0, #4294967295
 8006f36:	b00d      	add	sp, #52	; 0x34
 8006f38:	ecbd 8b02 	vpop	{d8}
 8006f3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006f40:	4642      	mov	r2, r8
 8006f42:	464b      	mov	r3, r9
 8006f44:	4640      	mov	r0, r8
 8006f46:	4649      	mov	r1, r9
 8006f48:	f7f9 fdf8 	bl	8000b3c <__aeabi_dcmpun>
 8006f4c:	b140      	cbz	r0, 8006f60 <_printf_float+0xf0>
 8006f4e:	464b      	mov	r3, r9
 8006f50:	2b00      	cmp	r3, #0
 8006f52:	bfbc      	itt	lt
 8006f54:	232d      	movlt	r3, #45	; 0x2d
 8006f56:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8006f5a:	487f      	ldr	r0, [pc, #508]	; (8007158 <_printf_float+0x2e8>)
 8006f5c:	4b7f      	ldr	r3, [pc, #508]	; (800715c <_printf_float+0x2ec>)
 8006f5e:	e7d1      	b.n	8006f04 <_printf_float+0x94>
 8006f60:	6863      	ldr	r3, [r4, #4]
 8006f62:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8006f66:	9206      	str	r2, [sp, #24]
 8006f68:	1c5a      	adds	r2, r3, #1
 8006f6a:	d13f      	bne.n	8006fec <_printf_float+0x17c>
 8006f6c:	2306      	movs	r3, #6
 8006f6e:	6063      	str	r3, [r4, #4]
 8006f70:	9b05      	ldr	r3, [sp, #20]
 8006f72:	6861      	ldr	r1, [r4, #4]
 8006f74:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8006f78:	2300      	movs	r3, #0
 8006f7a:	9303      	str	r3, [sp, #12]
 8006f7c:	ab0a      	add	r3, sp, #40	; 0x28
 8006f7e:	e9cd b301 	strd	fp, r3, [sp, #4]
 8006f82:	ab09      	add	r3, sp, #36	; 0x24
 8006f84:	ec49 8b10 	vmov	d0, r8, r9
 8006f88:	9300      	str	r3, [sp, #0]
 8006f8a:	6022      	str	r2, [r4, #0]
 8006f8c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8006f90:	4628      	mov	r0, r5
 8006f92:	f7ff fecd 	bl	8006d30 <__cvt>
 8006f96:	9b06      	ldr	r3, [sp, #24]
 8006f98:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006f9a:	2b47      	cmp	r3, #71	; 0x47
 8006f9c:	4680      	mov	r8, r0
 8006f9e:	d108      	bne.n	8006fb2 <_printf_float+0x142>
 8006fa0:	1cc8      	adds	r0, r1, #3
 8006fa2:	db02      	blt.n	8006faa <_printf_float+0x13a>
 8006fa4:	6863      	ldr	r3, [r4, #4]
 8006fa6:	4299      	cmp	r1, r3
 8006fa8:	dd41      	ble.n	800702e <_printf_float+0x1be>
 8006faa:	f1ab 0b02 	sub.w	fp, fp, #2
 8006fae:	fa5f fb8b 	uxtb.w	fp, fp
 8006fb2:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8006fb6:	d820      	bhi.n	8006ffa <_printf_float+0x18a>
 8006fb8:	3901      	subs	r1, #1
 8006fba:	465a      	mov	r2, fp
 8006fbc:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8006fc0:	9109      	str	r1, [sp, #36]	; 0x24
 8006fc2:	f7ff ff17 	bl	8006df4 <__exponent>
 8006fc6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006fc8:	1813      	adds	r3, r2, r0
 8006fca:	2a01      	cmp	r2, #1
 8006fcc:	4681      	mov	r9, r0
 8006fce:	6123      	str	r3, [r4, #16]
 8006fd0:	dc02      	bgt.n	8006fd8 <_printf_float+0x168>
 8006fd2:	6822      	ldr	r2, [r4, #0]
 8006fd4:	07d2      	lsls	r2, r2, #31
 8006fd6:	d501      	bpl.n	8006fdc <_printf_float+0x16c>
 8006fd8:	3301      	adds	r3, #1
 8006fda:	6123      	str	r3, [r4, #16]
 8006fdc:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8006fe0:	2b00      	cmp	r3, #0
 8006fe2:	d09c      	beq.n	8006f1e <_printf_float+0xae>
 8006fe4:	232d      	movs	r3, #45	; 0x2d
 8006fe6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006fea:	e798      	b.n	8006f1e <_printf_float+0xae>
 8006fec:	9a06      	ldr	r2, [sp, #24]
 8006fee:	2a47      	cmp	r2, #71	; 0x47
 8006ff0:	d1be      	bne.n	8006f70 <_printf_float+0x100>
 8006ff2:	2b00      	cmp	r3, #0
 8006ff4:	d1bc      	bne.n	8006f70 <_printf_float+0x100>
 8006ff6:	2301      	movs	r3, #1
 8006ff8:	e7b9      	b.n	8006f6e <_printf_float+0xfe>
 8006ffa:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8006ffe:	d118      	bne.n	8007032 <_printf_float+0x1c2>
 8007000:	2900      	cmp	r1, #0
 8007002:	6863      	ldr	r3, [r4, #4]
 8007004:	dd0b      	ble.n	800701e <_printf_float+0x1ae>
 8007006:	6121      	str	r1, [r4, #16]
 8007008:	b913      	cbnz	r3, 8007010 <_printf_float+0x1a0>
 800700a:	6822      	ldr	r2, [r4, #0]
 800700c:	07d0      	lsls	r0, r2, #31
 800700e:	d502      	bpl.n	8007016 <_printf_float+0x1a6>
 8007010:	3301      	adds	r3, #1
 8007012:	440b      	add	r3, r1
 8007014:	6123      	str	r3, [r4, #16]
 8007016:	65a1      	str	r1, [r4, #88]	; 0x58
 8007018:	f04f 0900 	mov.w	r9, #0
 800701c:	e7de      	b.n	8006fdc <_printf_float+0x16c>
 800701e:	b913      	cbnz	r3, 8007026 <_printf_float+0x1b6>
 8007020:	6822      	ldr	r2, [r4, #0]
 8007022:	07d2      	lsls	r2, r2, #31
 8007024:	d501      	bpl.n	800702a <_printf_float+0x1ba>
 8007026:	3302      	adds	r3, #2
 8007028:	e7f4      	b.n	8007014 <_printf_float+0x1a4>
 800702a:	2301      	movs	r3, #1
 800702c:	e7f2      	b.n	8007014 <_printf_float+0x1a4>
 800702e:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8007032:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007034:	4299      	cmp	r1, r3
 8007036:	db05      	blt.n	8007044 <_printf_float+0x1d4>
 8007038:	6823      	ldr	r3, [r4, #0]
 800703a:	6121      	str	r1, [r4, #16]
 800703c:	07d8      	lsls	r0, r3, #31
 800703e:	d5ea      	bpl.n	8007016 <_printf_float+0x1a6>
 8007040:	1c4b      	adds	r3, r1, #1
 8007042:	e7e7      	b.n	8007014 <_printf_float+0x1a4>
 8007044:	2900      	cmp	r1, #0
 8007046:	bfd4      	ite	le
 8007048:	f1c1 0202 	rsble	r2, r1, #2
 800704c:	2201      	movgt	r2, #1
 800704e:	4413      	add	r3, r2
 8007050:	e7e0      	b.n	8007014 <_printf_float+0x1a4>
 8007052:	6823      	ldr	r3, [r4, #0]
 8007054:	055a      	lsls	r2, r3, #21
 8007056:	d407      	bmi.n	8007068 <_printf_float+0x1f8>
 8007058:	6923      	ldr	r3, [r4, #16]
 800705a:	4642      	mov	r2, r8
 800705c:	4631      	mov	r1, r6
 800705e:	4628      	mov	r0, r5
 8007060:	47b8      	blx	r7
 8007062:	3001      	adds	r0, #1
 8007064:	d12c      	bne.n	80070c0 <_printf_float+0x250>
 8007066:	e764      	b.n	8006f32 <_printf_float+0xc2>
 8007068:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800706c:	f240 80e0 	bls.w	8007230 <_printf_float+0x3c0>
 8007070:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007074:	2200      	movs	r2, #0
 8007076:	2300      	movs	r3, #0
 8007078:	f7f9 fd2e 	bl	8000ad8 <__aeabi_dcmpeq>
 800707c:	2800      	cmp	r0, #0
 800707e:	d034      	beq.n	80070ea <_printf_float+0x27a>
 8007080:	4a37      	ldr	r2, [pc, #220]	; (8007160 <_printf_float+0x2f0>)
 8007082:	2301      	movs	r3, #1
 8007084:	4631      	mov	r1, r6
 8007086:	4628      	mov	r0, r5
 8007088:	47b8      	blx	r7
 800708a:	3001      	adds	r0, #1
 800708c:	f43f af51 	beq.w	8006f32 <_printf_float+0xc2>
 8007090:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007094:	429a      	cmp	r2, r3
 8007096:	db02      	blt.n	800709e <_printf_float+0x22e>
 8007098:	6823      	ldr	r3, [r4, #0]
 800709a:	07d8      	lsls	r0, r3, #31
 800709c:	d510      	bpl.n	80070c0 <_printf_float+0x250>
 800709e:	ee18 3a10 	vmov	r3, s16
 80070a2:	4652      	mov	r2, sl
 80070a4:	4631      	mov	r1, r6
 80070a6:	4628      	mov	r0, r5
 80070a8:	47b8      	blx	r7
 80070aa:	3001      	adds	r0, #1
 80070ac:	f43f af41 	beq.w	8006f32 <_printf_float+0xc2>
 80070b0:	f04f 0800 	mov.w	r8, #0
 80070b4:	f104 091a 	add.w	r9, r4, #26
 80070b8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80070ba:	3b01      	subs	r3, #1
 80070bc:	4543      	cmp	r3, r8
 80070be:	dc09      	bgt.n	80070d4 <_printf_float+0x264>
 80070c0:	6823      	ldr	r3, [r4, #0]
 80070c2:	079b      	lsls	r3, r3, #30
 80070c4:	f100 8105 	bmi.w	80072d2 <_printf_float+0x462>
 80070c8:	68e0      	ldr	r0, [r4, #12]
 80070ca:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80070cc:	4298      	cmp	r0, r3
 80070ce:	bfb8      	it	lt
 80070d0:	4618      	movlt	r0, r3
 80070d2:	e730      	b.n	8006f36 <_printf_float+0xc6>
 80070d4:	2301      	movs	r3, #1
 80070d6:	464a      	mov	r2, r9
 80070d8:	4631      	mov	r1, r6
 80070da:	4628      	mov	r0, r5
 80070dc:	47b8      	blx	r7
 80070de:	3001      	adds	r0, #1
 80070e0:	f43f af27 	beq.w	8006f32 <_printf_float+0xc2>
 80070e4:	f108 0801 	add.w	r8, r8, #1
 80070e8:	e7e6      	b.n	80070b8 <_printf_float+0x248>
 80070ea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80070ec:	2b00      	cmp	r3, #0
 80070ee:	dc39      	bgt.n	8007164 <_printf_float+0x2f4>
 80070f0:	4a1b      	ldr	r2, [pc, #108]	; (8007160 <_printf_float+0x2f0>)
 80070f2:	2301      	movs	r3, #1
 80070f4:	4631      	mov	r1, r6
 80070f6:	4628      	mov	r0, r5
 80070f8:	47b8      	blx	r7
 80070fa:	3001      	adds	r0, #1
 80070fc:	f43f af19 	beq.w	8006f32 <_printf_float+0xc2>
 8007100:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007104:	4313      	orrs	r3, r2
 8007106:	d102      	bne.n	800710e <_printf_float+0x29e>
 8007108:	6823      	ldr	r3, [r4, #0]
 800710a:	07d9      	lsls	r1, r3, #31
 800710c:	d5d8      	bpl.n	80070c0 <_printf_float+0x250>
 800710e:	ee18 3a10 	vmov	r3, s16
 8007112:	4652      	mov	r2, sl
 8007114:	4631      	mov	r1, r6
 8007116:	4628      	mov	r0, r5
 8007118:	47b8      	blx	r7
 800711a:	3001      	adds	r0, #1
 800711c:	f43f af09 	beq.w	8006f32 <_printf_float+0xc2>
 8007120:	f04f 0900 	mov.w	r9, #0
 8007124:	f104 0a1a 	add.w	sl, r4, #26
 8007128:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800712a:	425b      	negs	r3, r3
 800712c:	454b      	cmp	r3, r9
 800712e:	dc01      	bgt.n	8007134 <_printf_float+0x2c4>
 8007130:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007132:	e792      	b.n	800705a <_printf_float+0x1ea>
 8007134:	2301      	movs	r3, #1
 8007136:	4652      	mov	r2, sl
 8007138:	4631      	mov	r1, r6
 800713a:	4628      	mov	r0, r5
 800713c:	47b8      	blx	r7
 800713e:	3001      	adds	r0, #1
 8007140:	f43f aef7 	beq.w	8006f32 <_printf_float+0xc2>
 8007144:	f109 0901 	add.w	r9, r9, #1
 8007148:	e7ee      	b.n	8007128 <_printf_float+0x2b8>
 800714a:	bf00      	nop
 800714c:	7fefffff 	.word	0x7fefffff
 8007150:	0800b030 	.word	0x0800b030
 8007154:	0800b034 	.word	0x0800b034
 8007158:	0800b03c 	.word	0x0800b03c
 800715c:	0800b038 	.word	0x0800b038
 8007160:	0800b040 	.word	0x0800b040
 8007164:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007166:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007168:	429a      	cmp	r2, r3
 800716a:	bfa8      	it	ge
 800716c:	461a      	movge	r2, r3
 800716e:	2a00      	cmp	r2, #0
 8007170:	4691      	mov	r9, r2
 8007172:	dc37      	bgt.n	80071e4 <_printf_float+0x374>
 8007174:	f04f 0b00 	mov.w	fp, #0
 8007178:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800717c:	f104 021a 	add.w	r2, r4, #26
 8007180:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007182:	9305      	str	r3, [sp, #20]
 8007184:	eba3 0309 	sub.w	r3, r3, r9
 8007188:	455b      	cmp	r3, fp
 800718a:	dc33      	bgt.n	80071f4 <_printf_float+0x384>
 800718c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007190:	429a      	cmp	r2, r3
 8007192:	db3b      	blt.n	800720c <_printf_float+0x39c>
 8007194:	6823      	ldr	r3, [r4, #0]
 8007196:	07da      	lsls	r2, r3, #31
 8007198:	d438      	bmi.n	800720c <_printf_float+0x39c>
 800719a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800719c:	9b05      	ldr	r3, [sp, #20]
 800719e:	9909      	ldr	r1, [sp, #36]	; 0x24
 80071a0:	1ad3      	subs	r3, r2, r3
 80071a2:	eba2 0901 	sub.w	r9, r2, r1
 80071a6:	4599      	cmp	r9, r3
 80071a8:	bfa8      	it	ge
 80071aa:	4699      	movge	r9, r3
 80071ac:	f1b9 0f00 	cmp.w	r9, #0
 80071b0:	dc35      	bgt.n	800721e <_printf_float+0x3ae>
 80071b2:	f04f 0800 	mov.w	r8, #0
 80071b6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80071ba:	f104 0a1a 	add.w	sl, r4, #26
 80071be:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80071c2:	1a9b      	subs	r3, r3, r2
 80071c4:	eba3 0309 	sub.w	r3, r3, r9
 80071c8:	4543      	cmp	r3, r8
 80071ca:	f77f af79 	ble.w	80070c0 <_printf_float+0x250>
 80071ce:	2301      	movs	r3, #1
 80071d0:	4652      	mov	r2, sl
 80071d2:	4631      	mov	r1, r6
 80071d4:	4628      	mov	r0, r5
 80071d6:	47b8      	blx	r7
 80071d8:	3001      	adds	r0, #1
 80071da:	f43f aeaa 	beq.w	8006f32 <_printf_float+0xc2>
 80071de:	f108 0801 	add.w	r8, r8, #1
 80071e2:	e7ec      	b.n	80071be <_printf_float+0x34e>
 80071e4:	4613      	mov	r3, r2
 80071e6:	4631      	mov	r1, r6
 80071e8:	4642      	mov	r2, r8
 80071ea:	4628      	mov	r0, r5
 80071ec:	47b8      	blx	r7
 80071ee:	3001      	adds	r0, #1
 80071f0:	d1c0      	bne.n	8007174 <_printf_float+0x304>
 80071f2:	e69e      	b.n	8006f32 <_printf_float+0xc2>
 80071f4:	2301      	movs	r3, #1
 80071f6:	4631      	mov	r1, r6
 80071f8:	4628      	mov	r0, r5
 80071fa:	9205      	str	r2, [sp, #20]
 80071fc:	47b8      	blx	r7
 80071fe:	3001      	adds	r0, #1
 8007200:	f43f ae97 	beq.w	8006f32 <_printf_float+0xc2>
 8007204:	9a05      	ldr	r2, [sp, #20]
 8007206:	f10b 0b01 	add.w	fp, fp, #1
 800720a:	e7b9      	b.n	8007180 <_printf_float+0x310>
 800720c:	ee18 3a10 	vmov	r3, s16
 8007210:	4652      	mov	r2, sl
 8007212:	4631      	mov	r1, r6
 8007214:	4628      	mov	r0, r5
 8007216:	47b8      	blx	r7
 8007218:	3001      	adds	r0, #1
 800721a:	d1be      	bne.n	800719a <_printf_float+0x32a>
 800721c:	e689      	b.n	8006f32 <_printf_float+0xc2>
 800721e:	9a05      	ldr	r2, [sp, #20]
 8007220:	464b      	mov	r3, r9
 8007222:	4442      	add	r2, r8
 8007224:	4631      	mov	r1, r6
 8007226:	4628      	mov	r0, r5
 8007228:	47b8      	blx	r7
 800722a:	3001      	adds	r0, #1
 800722c:	d1c1      	bne.n	80071b2 <_printf_float+0x342>
 800722e:	e680      	b.n	8006f32 <_printf_float+0xc2>
 8007230:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007232:	2a01      	cmp	r2, #1
 8007234:	dc01      	bgt.n	800723a <_printf_float+0x3ca>
 8007236:	07db      	lsls	r3, r3, #31
 8007238:	d538      	bpl.n	80072ac <_printf_float+0x43c>
 800723a:	2301      	movs	r3, #1
 800723c:	4642      	mov	r2, r8
 800723e:	4631      	mov	r1, r6
 8007240:	4628      	mov	r0, r5
 8007242:	47b8      	blx	r7
 8007244:	3001      	adds	r0, #1
 8007246:	f43f ae74 	beq.w	8006f32 <_printf_float+0xc2>
 800724a:	ee18 3a10 	vmov	r3, s16
 800724e:	4652      	mov	r2, sl
 8007250:	4631      	mov	r1, r6
 8007252:	4628      	mov	r0, r5
 8007254:	47b8      	blx	r7
 8007256:	3001      	adds	r0, #1
 8007258:	f43f ae6b 	beq.w	8006f32 <_printf_float+0xc2>
 800725c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007260:	2200      	movs	r2, #0
 8007262:	2300      	movs	r3, #0
 8007264:	f7f9 fc38 	bl	8000ad8 <__aeabi_dcmpeq>
 8007268:	b9d8      	cbnz	r0, 80072a2 <_printf_float+0x432>
 800726a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800726c:	f108 0201 	add.w	r2, r8, #1
 8007270:	3b01      	subs	r3, #1
 8007272:	4631      	mov	r1, r6
 8007274:	4628      	mov	r0, r5
 8007276:	47b8      	blx	r7
 8007278:	3001      	adds	r0, #1
 800727a:	d10e      	bne.n	800729a <_printf_float+0x42a>
 800727c:	e659      	b.n	8006f32 <_printf_float+0xc2>
 800727e:	2301      	movs	r3, #1
 8007280:	4652      	mov	r2, sl
 8007282:	4631      	mov	r1, r6
 8007284:	4628      	mov	r0, r5
 8007286:	47b8      	blx	r7
 8007288:	3001      	adds	r0, #1
 800728a:	f43f ae52 	beq.w	8006f32 <_printf_float+0xc2>
 800728e:	f108 0801 	add.w	r8, r8, #1
 8007292:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007294:	3b01      	subs	r3, #1
 8007296:	4543      	cmp	r3, r8
 8007298:	dcf1      	bgt.n	800727e <_printf_float+0x40e>
 800729a:	464b      	mov	r3, r9
 800729c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80072a0:	e6dc      	b.n	800705c <_printf_float+0x1ec>
 80072a2:	f04f 0800 	mov.w	r8, #0
 80072a6:	f104 0a1a 	add.w	sl, r4, #26
 80072aa:	e7f2      	b.n	8007292 <_printf_float+0x422>
 80072ac:	2301      	movs	r3, #1
 80072ae:	4642      	mov	r2, r8
 80072b0:	e7df      	b.n	8007272 <_printf_float+0x402>
 80072b2:	2301      	movs	r3, #1
 80072b4:	464a      	mov	r2, r9
 80072b6:	4631      	mov	r1, r6
 80072b8:	4628      	mov	r0, r5
 80072ba:	47b8      	blx	r7
 80072bc:	3001      	adds	r0, #1
 80072be:	f43f ae38 	beq.w	8006f32 <_printf_float+0xc2>
 80072c2:	f108 0801 	add.w	r8, r8, #1
 80072c6:	68e3      	ldr	r3, [r4, #12]
 80072c8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80072ca:	1a5b      	subs	r3, r3, r1
 80072cc:	4543      	cmp	r3, r8
 80072ce:	dcf0      	bgt.n	80072b2 <_printf_float+0x442>
 80072d0:	e6fa      	b.n	80070c8 <_printf_float+0x258>
 80072d2:	f04f 0800 	mov.w	r8, #0
 80072d6:	f104 0919 	add.w	r9, r4, #25
 80072da:	e7f4      	b.n	80072c6 <_printf_float+0x456>

080072dc <_printf_common>:
 80072dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80072e0:	4616      	mov	r6, r2
 80072e2:	4699      	mov	r9, r3
 80072e4:	688a      	ldr	r2, [r1, #8]
 80072e6:	690b      	ldr	r3, [r1, #16]
 80072e8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80072ec:	4293      	cmp	r3, r2
 80072ee:	bfb8      	it	lt
 80072f0:	4613      	movlt	r3, r2
 80072f2:	6033      	str	r3, [r6, #0]
 80072f4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80072f8:	4607      	mov	r7, r0
 80072fa:	460c      	mov	r4, r1
 80072fc:	b10a      	cbz	r2, 8007302 <_printf_common+0x26>
 80072fe:	3301      	adds	r3, #1
 8007300:	6033      	str	r3, [r6, #0]
 8007302:	6823      	ldr	r3, [r4, #0]
 8007304:	0699      	lsls	r1, r3, #26
 8007306:	bf42      	ittt	mi
 8007308:	6833      	ldrmi	r3, [r6, #0]
 800730a:	3302      	addmi	r3, #2
 800730c:	6033      	strmi	r3, [r6, #0]
 800730e:	6825      	ldr	r5, [r4, #0]
 8007310:	f015 0506 	ands.w	r5, r5, #6
 8007314:	d106      	bne.n	8007324 <_printf_common+0x48>
 8007316:	f104 0a19 	add.w	sl, r4, #25
 800731a:	68e3      	ldr	r3, [r4, #12]
 800731c:	6832      	ldr	r2, [r6, #0]
 800731e:	1a9b      	subs	r3, r3, r2
 8007320:	42ab      	cmp	r3, r5
 8007322:	dc26      	bgt.n	8007372 <_printf_common+0x96>
 8007324:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007328:	1e13      	subs	r3, r2, #0
 800732a:	6822      	ldr	r2, [r4, #0]
 800732c:	bf18      	it	ne
 800732e:	2301      	movne	r3, #1
 8007330:	0692      	lsls	r2, r2, #26
 8007332:	d42b      	bmi.n	800738c <_printf_common+0xb0>
 8007334:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007338:	4649      	mov	r1, r9
 800733a:	4638      	mov	r0, r7
 800733c:	47c0      	blx	r8
 800733e:	3001      	adds	r0, #1
 8007340:	d01e      	beq.n	8007380 <_printf_common+0xa4>
 8007342:	6823      	ldr	r3, [r4, #0]
 8007344:	68e5      	ldr	r5, [r4, #12]
 8007346:	6832      	ldr	r2, [r6, #0]
 8007348:	f003 0306 	and.w	r3, r3, #6
 800734c:	2b04      	cmp	r3, #4
 800734e:	bf08      	it	eq
 8007350:	1aad      	subeq	r5, r5, r2
 8007352:	68a3      	ldr	r3, [r4, #8]
 8007354:	6922      	ldr	r2, [r4, #16]
 8007356:	bf0c      	ite	eq
 8007358:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800735c:	2500      	movne	r5, #0
 800735e:	4293      	cmp	r3, r2
 8007360:	bfc4      	itt	gt
 8007362:	1a9b      	subgt	r3, r3, r2
 8007364:	18ed      	addgt	r5, r5, r3
 8007366:	2600      	movs	r6, #0
 8007368:	341a      	adds	r4, #26
 800736a:	42b5      	cmp	r5, r6
 800736c:	d11a      	bne.n	80073a4 <_printf_common+0xc8>
 800736e:	2000      	movs	r0, #0
 8007370:	e008      	b.n	8007384 <_printf_common+0xa8>
 8007372:	2301      	movs	r3, #1
 8007374:	4652      	mov	r2, sl
 8007376:	4649      	mov	r1, r9
 8007378:	4638      	mov	r0, r7
 800737a:	47c0      	blx	r8
 800737c:	3001      	adds	r0, #1
 800737e:	d103      	bne.n	8007388 <_printf_common+0xac>
 8007380:	f04f 30ff 	mov.w	r0, #4294967295
 8007384:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007388:	3501      	adds	r5, #1
 800738a:	e7c6      	b.n	800731a <_printf_common+0x3e>
 800738c:	18e1      	adds	r1, r4, r3
 800738e:	1c5a      	adds	r2, r3, #1
 8007390:	2030      	movs	r0, #48	; 0x30
 8007392:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007396:	4422      	add	r2, r4
 8007398:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800739c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80073a0:	3302      	adds	r3, #2
 80073a2:	e7c7      	b.n	8007334 <_printf_common+0x58>
 80073a4:	2301      	movs	r3, #1
 80073a6:	4622      	mov	r2, r4
 80073a8:	4649      	mov	r1, r9
 80073aa:	4638      	mov	r0, r7
 80073ac:	47c0      	blx	r8
 80073ae:	3001      	adds	r0, #1
 80073b0:	d0e6      	beq.n	8007380 <_printf_common+0xa4>
 80073b2:	3601      	adds	r6, #1
 80073b4:	e7d9      	b.n	800736a <_printf_common+0x8e>
	...

080073b8 <_printf_i>:
 80073b8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80073bc:	460c      	mov	r4, r1
 80073be:	4691      	mov	r9, r2
 80073c0:	7e27      	ldrb	r7, [r4, #24]
 80073c2:	990c      	ldr	r1, [sp, #48]	; 0x30
 80073c4:	2f78      	cmp	r7, #120	; 0x78
 80073c6:	4680      	mov	r8, r0
 80073c8:	469a      	mov	sl, r3
 80073ca:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80073ce:	d807      	bhi.n	80073e0 <_printf_i+0x28>
 80073d0:	2f62      	cmp	r7, #98	; 0x62
 80073d2:	d80a      	bhi.n	80073ea <_printf_i+0x32>
 80073d4:	2f00      	cmp	r7, #0
 80073d6:	f000 80d8 	beq.w	800758a <_printf_i+0x1d2>
 80073da:	2f58      	cmp	r7, #88	; 0x58
 80073dc:	f000 80a3 	beq.w	8007526 <_printf_i+0x16e>
 80073e0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80073e4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80073e8:	e03a      	b.n	8007460 <_printf_i+0xa8>
 80073ea:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80073ee:	2b15      	cmp	r3, #21
 80073f0:	d8f6      	bhi.n	80073e0 <_printf_i+0x28>
 80073f2:	a001      	add	r0, pc, #4	; (adr r0, 80073f8 <_printf_i+0x40>)
 80073f4:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80073f8:	08007451 	.word	0x08007451
 80073fc:	08007465 	.word	0x08007465
 8007400:	080073e1 	.word	0x080073e1
 8007404:	080073e1 	.word	0x080073e1
 8007408:	080073e1 	.word	0x080073e1
 800740c:	080073e1 	.word	0x080073e1
 8007410:	08007465 	.word	0x08007465
 8007414:	080073e1 	.word	0x080073e1
 8007418:	080073e1 	.word	0x080073e1
 800741c:	080073e1 	.word	0x080073e1
 8007420:	080073e1 	.word	0x080073e1
 8007424:	08007571 	.word	0x08007571
 8007428:	08007495 	.word	0x08007495
 800742c:	08007553 	.word	0x08007553
 8007430:	080073e1 	.word	0x080073e1
 8007434:	080073e1 	.word	0x080073e1
 8007438:	08007593 	.word	0x08007593
 800743c:	080073e1 	.word	0x080073e1
 8007440:	08007495 	.word	0x08007495
 8007444:	080073e1 	.word	0x080073e1
 8007448:	080073e1 	.word	0x080073e1
 800744c:	0800755b 	.word	0x0800755b
 8007450:	680b      	ldr	r3, [r1, #0]
 8007452:	1d1a      	adds	r2, r3, #4
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	600a      	str	r2, [r1, #0]
 8007458:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800745c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007460:	2301      	movs	r3, #1
 8007462:	e0a3      	b.n	80075ac <_printf_i+0x1f4>
 8007464:	6825      	ldr	r5, [r4, #0]
 8007466:	6808      	ldr	r0, [r1, #0]
 8007468:	062e      	lsls	r6, r5, #24
 800746a:	f100 0304 	add.w	r3, r0, #4
 800746e:	d50a      	bpl.n	8007486 <_printf_i+0xce>
 8007470:	6805      	ldr	r5, [r0, #0]
 8007472:	600b      	str	r3, [r1, #0]
 8007474:	2d00      	cmp	r5, #0
 8007476:	da03      	bge.n	8007480 <_printf_i+0xc8>
 8007478:	232d      	movs	r3, #45	; 0x2d
 800747a:	426d      	negs	r5, r5
 800747c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007480:	485e      	ldr	r0, [pc, #376]	; (80075fc <_printf_i+0x244>)
 8007482:	230a      	movs	r3, #10
 8007484:	e019      	b.n	80074ba <_printf_i+0x102>
 8007486:	f015 0f40 	tst.w	r5, #64	; 0x40
 800748a:	6805      	ldr	r5, [r0, #0]
 800748c:	600b      	str	r3, [r1, #0]
 800748e:	bf18      	it	ne
 8007490:	b22d      	sxthne	r5, r5
 8007492:	e7ef      	b.n	8007474 <_printf_i+0xbc>
 8007494:	680b      	ldr	r3, [r1, #0]
 8007496:	6825      	ldr	r5, [r4, #0]
 8007498:	1d18      	adds	r0, r3, #4
 800749a:	6008      	str	r0, [r1, #0]
 800749c:	0628      	lsls	r0, r5, #24
 800749e:	d501      	bpl.n	80074a4 <_printf_i+0xec>
 80074a0:	681d      	ldr	r5, [r3, #0]
 80074a2:	e002      	b.n	80074aa <_printf_i+0xf2>
 80074a4:	0669      	lsls	r1, r5, #25
 80074a6:	d5fb      	bpl.n	80074a0 <_printf_i+0xe8>
 80074a8:	881d      	ldrh	r5, [r3, #0]
 80074aa:	4854      	ldr	r0, [pc, #336]	; (80075fc <_printf_i+0x244>)
 80074ac:	2f6f      	cmp	r7, #111	; 0x6f
 80074ae:	bf0c      	ite	eq
 80074b0:	2308      	moveq	r3, #8
 80074b2:	230a      	movne	r3, #10
 80074b4:	2100      	movs	r1, #0
 80074b6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80074ba:	6866      	ldr	r6, [r4, #4]
 80074bc:	60a6      	str	r6, [r4, #8]
 80074be:	2e00      	cmp	r6, #0
 80074c0:	bfa2      	ittt	ge
 80074c2:	6821      	ldrge	r1, [r4, #0]
 80074c4:	f021 0104 	bicge.w	r1, r1, #4
 80074c8:	6021      	strge	r1, [r4, #0]
 80074ca:	b90d      	cbnz	r5, 80074d0 <_printf_i+0x118>
 80074cc:	2e00      	cmp	r6, #0
 80074ce:	d04d      	beq.n	800756c <_printf_i+0x1b4>
 80074d0:	4616      	mov	r6, r2
 80074d2:	fbb5 f1f3 	udiv	r1, r5, r3
 80074d6:	fb03 5711 	mls	r7, r3, r1, r5
 80074da:	5dc7      	ldrb	r7, [r0, r7]
 80074dc:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80074e0:	462f      	mov	r7, r5
 80074e2:	42bb      	cmp	r3, r7
 80074e4:	460d      	mov	r5, r1
 80074e6:	d9f4      	bls.n	80074d2 <_printf_i+0x11a>
 80074e8:	2b08      	cmp	r3, #8
 80074ea:	d10b      	bne.n	8007504 <_printf_i+0x14c>
 80074ec:	6823      	ldr	r3, [r4, #0]
 80074ee:	07df      	lsls	r7, r3, #31
 80074f0:	d508      	bpl.n	8007504 <_printf_i+0x14c>
 80074f2:	6923      	ldr	r3, [r4, #16]
 80074f4:	6861      	ldr	r1, [r4, #4]
 80074f6:	4299      	cmp	r1, r3
 80074f8:	bfde      	ittt	le
 80074fa:	2330      	movle	r3, #48	; 0x30
 80074fc:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007500:	f106 36ff 	addle.w	r6, r6, #4294967295
 8007504:	1b92      	subs	r2, r2, r6
 8007506:	6122      	str	r2, [r4, #16]
 8007508:	f8cd a000 	str.w	sl, [sp]
 800750c:	464b      	mov	r3, r9
 800750e:	aa03      	add	r2, sp, #12
 8007510:	4621      	mov	r1, r4
 8007512:	4640      	mov	r0, r8
 8007514:	f7ff fee2 	bl	80072dc <_printf_common>
 8007518:	3001      	adds	r0, #1
 800751a:	d14c      	bne.n	80075b6 <_printf_i+0x1fe>
 800751c:	f04f 30ff 	mov.w	r0, #4294967295
 8007520:	b004      	add	sp, #16
 8007522:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007526:	4835      	ldr	r0, [pc, #212]	; (80075fc <_printf_i+0x244>)
 8007528:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800752c:	6823      	ldr	r3, [r4, #0]
 800752e:	680e      	ldr	r6, [r1, #0]
 8007530:	061f      	lsls	r7, r3, #24
 8007532:	f856 5b04 	ldr.w	r5, [r6], #4
 8007536:	600e      	str	r6, [r1, #0]
 8007538:	d514      	bpl.n	8007564 <_printf_i+0x1ac>
 800753a:	07d9      	lsls	r1, r3, #31
 800753c:	bf44      	itt	mi
 800753e:	f043 0320 	orrmi.w	r3, r3, #32
 8007542:	6023      	strmi	r3, [r4, #0]
 8007544:	b91d      	cbnz	r5, 800754e <_printf_i+0x196>
 8007546:	6823      	ldr	r3, [r4, #0]
 8007548:	f023 0320 	bic.w	r3, r3, #32
 800754c:	6023      	str	r3, [r4, #0]
 800754e:	2310      	movs	r3, #16
 8007550:	e7b0      	b.n	80074b4 <_printf_i+0xfc>
 8007552:	6823      	ldr	r3, [r4, #0]
 8007554:	f043 0320 	orr.w	r3, r3, #32
 8007558:	6023      	str	r3, [r4, #0]
 800755a:	2378      	movs	r3, #120	; 0x78
 800755c:	4828      	ldr	r0, [pc, #160]	; (8007600 <_printf_i+0x248>)
 800755e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007562:	e7e3      	b.n	800752c <_printf_i+0x174>
 8007564:	065e      	lsls	r6, r3, #25
 8007566:	bf48      	it	mi
 8007568:	b2ad      	uxthmi	r5, r5
 800756a:	e7e6      	b.n	800753a <_printf_i+0x182>
 800756c:	4616      	mov	r6, r2
 800756e:	e7bb      	b.n	80074e8 <_printf_i+0x130>
 8007570:	680b      	ldr	r3, [r1, #0]
 8007572:	6826      	ldr	r6, [r4, #0]
 8007574:	6960      	ldr	r0, [r4, #20]
 8007576:	1d1d      	adds	r5, r3, #4
 8007578:	600d      	str	r5, [r1, #0]
 800757a:	0635      	lsls	r5, r6, #24
 800757c:	681b      	ldr	r3, [r3, #0]
 800757e:	d501      	bpl.n	8007584 <_printf_i+0x1cc>
 8007580:	6018      	str	r0, [r3, #0]
 8007582:	e002      	b.n	800758a <_printf_i+0x1d2>
 8007584:	0671      	lsls	r1, r6, #25
 8007586:	d5fb      	bpl.n	8007580 <_printf_i+0x1c8>
 8007588:	8018      	strh	r0, [r3, #0]
 800758a:	2300      	movs	r3, #0
 800758c:	6123      	str	r3, [r4, #16]
 800758e:	4616      	mov	r6, r2
 8007590:	e7ba      	b.n	8007508 <_printf_i+0x150>
 8007592:	680b      	ldr	r3, [r1, #0]
 8007594:	1d1a      	adds	r2, r3, #4
 8007596:	600a      	str	r2, [r1, #0]
 8007598:	681e      	ldr	r6, [r3, #0]
 800759a:	6862      	ldr	r2, [r4, #4]
 800759c:	2100      	movs	r1, #0
 800759e:	4630      	mov	r0, r6
 80075a0:	f7f8 fe26 	bl	80001f0 <memchr>
 80075a4:	b108      	cbz	r0, 80075aa <_printf_i+0x1f2>
 80075a6:	1b80      	subs	r0, r0, r6
 80075a8:	6060      	str	r0, [r4, #4]
 80075aa:	6863      	ldr	r3, [r4, #4]
 80075ac:	6123      	str	r3, [r4, #16]
 80075ae:	2300      	movs	r3, #0
 80075b0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80075b4:	e7a8      	b.n	8007508 <_printf_i+0x150>
 80075b6:	6923      	ldr	r3, [r4, #16]
 80075b8:	4632      	mov	r2, r6
 80075ba:	4649      	mov	r1, r9
 80075bc:	4640      	mov	r0, r8
 80075be:	47d0      	blx	sl
 80075c0:	3001      	adds	r0, #1
 80075c2:	d0ab      	beq.n	800751c <_printf_i+0x164>
 80075c4:	6823      	ldr	r3, [r4, #0]
 80075c6:	079b      	lsls	r3, r3, #30
 80075c8:	d413      	bmi.n	80075f2 <_printf_i+0x23a>
 80075ca:	68e0      	ldr	r0, [r4, #12]
 80075cc:	9b03      	ldr	r3, [sp, #12]
 80075ce:	4298      	cmp	r0, r3
 80075d0:	bfb8      	it	lt
 80075d2:	4618      	movlt	r0, r3
 80075d4:	e7a4      	b.n	8007520 <_printf_i+0x168>
 80075d6:	2301      	movs	r3, #1
 80075d8:	4632      	mov	r2, r6
 80075da:	4649      	mov	r1, r9
 80075dc:	4640      	mov	r0, r8
 80075de:	47d0      	blx	sl
 80075e0:	3001      	adds	r0, #1
 80075e2:	d09b      	beq.n	800751c <_printf_i+0x164>
 80075e4:	3501      	adds	r5, #1
 80075e6:	68e3      	ldr	r3, [r4, #12]
 80075e8:	9903      	ldr	r1, [sp, #12]
 80075ea:	1a5b      	subs	r3, r3, r1
 80075ec:	42ab      	cmp	r3, r5
 80075ee:	dcf2      	bgt.n	80075d6 <_printf_i+0x21e>
 80075f0:	e7eb      	b.n	80075ca <_printf_i+0x212>
 80075f2:	2500      	movs	r5, #0
 80075f4:	f104 0619 	add.w	r6, r4, #25
 80075f8:	e7f5      	b.n	80075e6 <_printf_i+0x22e>
 80075fa:	bf00      	nop
 80075fc:	0800b042 	.word	0x0800b042
 8007600:	0800b053 	.word	0x0800b053

08007604 <siprintf>:
 8007604:	b40e      	push	{r1, r2, r3}
 8007606:	b500      	push	{lr}
 8007608:	b09c      	sub	sp, #112	; 0x70
 800760a:	ab1d      	add	r3, sp, #116	; 0x74
 800760c:	9002      	str	r0, [sp, #8]
 800760e:	9006      	str	r0, [sp, #24]
 8007610:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8007614:	4809      	ldr	r0, [pc, #36]	; (800763c <siprintf+0x38>)
 8007616:	9107      	str	r1, [sp, #28]
 8007618:	9104      	str	r1, [sp, #16]
 800761a:	4909      	ldr	r1, [pc, #36]	; (8007640 <siprintf+0x3c>)
 800761c:	f853 2b04 	ldr.w	r2, [r3], #4
 8007620:	9105      	str	r1, [sp, #20]
 8007622:	6800      	ldr	r0, [r0, #0]
 8007624:	9301      	str	r3, [sp, #4]
 8007626:	a902      	add	r1, sp, #8
 8007628:	f001 fb26 	bl	8008c78 <_svfiprintf_r>
 800762c:	9b02      	ldr	r3, [sp, #8]
 800762e:	2200      	movs	r2, #0
 8007630:	701a      	strb	r2, [r3, #0]
 8007632:	b01c      	add	sp, #112	; 0x70
 8007634:	f85d eb04 	ldr.w	lr, [sp], #4
 8007638:	b003      	add	sp, #12
 800763a:	4770      	bx	lr
 800763c:	20000010 	.word	0x20000010
 8007640:	ffff0208 	.word	0xffff0208

08007644 <quorem>:
 8007644:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007648:	6903      	ldr	r3, [r0, #16]
 800764a:	690c      	ldr	r4, [r1, #16]
 800764c:	42a3      	cmp	r3, r4
 800764e:	4607      	mov	r7, r0
 8007650:	f2c0 8081 	blt.w	8007756 <quorem+0x112>
 8007654:	3c01      	subs	r4, #1
 8007656:	f101 0814 	add.w	r8, r1, #20
 800765a:	f100 0514 	add.w	r5, r0, #20
 800765e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007662:	9301      	str	r3, [sp, #4]
 8007664:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007668:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800766c:	3301      	adds	r3, #1
 800766e:	429a      	cmp	r2, r3
 8007670:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8007674:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8007678:	fbb2 f6f3 	udiv	r6, r2, r3
 800767c:	d331      	bcc.n	80076e2 <quorem+0x9e>
 800767e:	f04f 0e00 	mov.w	lr, #0
 8007682:	4640      	mov	r0, r8
 8007684:	46ac      	mov	ip, r5
 8007686:	46f2      	mov	sl, lr
 8007688:	f850 2b04 	ldr.w	r2, [r0], #4
 800768c:	b293      	uxth	r3, r2
 800768e:	fb06 e303 	mla	r3, r6, r3, lr
 8007692:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8007696:	b29b      	uxth	r3, r3
 8007698:	ebaa 0303 	sub.w	r3, sl, r3
 800769c:	0c12      	lsrs	r2, r2, #16
 800769e:	f8dc a000 	ldr.w	sl, [ip]
 80076a2:	fb06 e202 	mla	r2, r6, r2, lr
 80076a6:	fa13 f38a 	uxtah	r3, r3, sl
 80076aa:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80076ae:	fa1f fa82 	uxth.w	sl, r2
 80076b2:	f8dc 2000 	ldr.w	r2, [ip]
 80076b6:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 80076ba:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80076be:	b29b      	uxth	r3, r3
 80076c0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80076c4:	4581      	cmp	r9, r0
 80076c6:	f84c 3b04 	str.w	r3, [ip], #4
 80076ca:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80076ce:	d2db      	bcs.n	8007688 <quorem+0x44>
 80076d0:	f855 300b 	ldr.w	r3, [r5, fp]
 80076d4:	b92b      	cbnz	r3, 80076e2 <quorem+0x9e>
 80076d6:	9b01      	ldr	r3, [sp, #4]
 80076d8:	3b04      	subs	r3, #4
 80076da:	429d      	cmp	r5, r3
 80076dc:	461a      	mov	r2, r3
 80076de:	d32e      	bcc.n	800773e <quorem+0xfa>
 80076e0:	613c      	str	r4, [r7, #16]
 80076e2:	4638      	mov	r0, r7
 80076e4:	f001 f8b2 	bl	800884c <__mcmp>
 80076e8:	2800      	cmp	r0, #0
 80076ea:	db24      	blt.n	8007736 <quorem+0xf2>
 80076ec:	3601      	adds	r6, #1
 80076ee:	4628      	mov	r0, r5
 80076f0:	f04f 0c00 	mov.w	ip, #0
 80076f4:	f858 2b04 	ldr.w	r2, [r8], #4
 80076f8:	f8d0 e000 	ldr.w	lr, [r0]
 80076fc:	b293      	uxth	r3, r2
 80076fe:	ebac 0303 	sub.w	r3, ip, r3
 8007702:	0c12      	lsrs	r2, r2, #16
 8007704:	fa13 f38e 	uxtah	r3, r3, lr
 8007708:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800770c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007710:	b29b      	uxth	r3, r3
 8007712:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007716:	45c1      	cmp	r9, r8
 8007718:	f840 3b04 	str.w	r3, [r0], #4
 800771c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8007720:	d2e8      	bcs.n	80076f4 <quorem+0xb0>
 8007722:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007726:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800772a:	b922      	cbnz	r2, 8007736 <quorem+0xf2>
 800772c:	3b04      	subs	r3, #4
 800772e:	429d      	cmp	r5, r3
 8007730:	461a      	mov	r2, r3
 8007732:	d30a      	bcc.n	800774a <quorem+0x106>
 8007734:	613c      	str	r4, [r7, #16]
 8007736:	4630      	mov	r0, r6
 8007738:	b003      	add	sp, #12
 800773a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800773e:	6812      	ldr	r2, [r2, #0]
 8007740:	3b04      	subs	r3, #4
 8007742:	2a00      	cmp	r2, #0
 8007744:	d1cc      	bne.n	80076e0 <quorem+0x9c>
 8007746:	3c01      	subs	r4, #1
 8007748:	e7c7      	b.n	80076da <quorem+0x96>
 800774a:	6812      	ldr	r2, [r2, #0]
 800774c:	3b04      	subs	r3, #4
 800774e:	2a00      	cmp	r2, #0
 8007750:	d1f0      	bne.n	8007734 <quorem+0xf0>
 8007752:	3c01      	subs	r4, #1
 8007754:	e7eb      	b.n	800772e <quorem+0xea>
 8007756:	2000      	movs	r0, #0
 8007758:	e7ee      	b.n	8007738 <quorem+0xf4>
 800775a:	0000      	movs	r0, r0
 800775c:	0000      	movs	r0, r0
	...

08007760 <_dtoa_r>:
 8007760:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007764:	ed2d 8b02 	vpush	{d8}
 8007768:	ec57 6b10 	vmov	r6, r7, d0
 800776c:	b095      	sub	sp, #84	; 0x54
 800776e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8007770:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8007774:	9105      	str	r1, [sp, #20]
 8007776:	e9cd 6702 	strd	r6, r7, [sp, #8]
 800777a:	4604      	mov	r4, r0
 800777c:	9209      	str	r2, [sp, #36]	; 0x24
 800777e:	930f      	str	r3, [sp, #60]	; 0x3c
 8007780:	b975      	cbnz	r5, 80077a0 <_dtoa_r+0x40>
 8007782:	2010      	movs	r0, #16
 8007784:	f000 fddc 	bl	8008340 <malloc>
 8007788:	4602      	mov	r2, r0
 800778a:	6260      	str	r0, [r4, #36]	; 0x24
 800778c:	b920      	cbnz	r0, 8007798 <_dtoa_r+0x38>
 800778e:	4bb2      	ldr	r3, [pc, #712]	; (8007a58 <_dtoa_r+0x2f8>)
 8007790:	21ea      	movs	r1, #234	; 0xea
 8007792:	48b2      	ldr	r0, [pc, #712]	; (8007a5c <_dtoa_r+0x2fc>)
 8007794:	f001 fb80 	bl	8008e98 <__assert_func>
 8007798:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800779c:	6005      	str	r5, [r0, #0]
 800779e:	60c5      	str	r5, [r0, #12]
 80077a0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80077a2:	6819      	ldr	r1, [r3, #0]
 80077a4:	b151      	cbz	r1, 80077bc <_dtoa_r+0x5c>
 80077a6:	685a      	ldr	r2, [r3, #4]
 80077a8:	604a      	str	r2, [r1, #4]
 80077aa:	2301      	movs	r3, #1
 80077ac:	4093      	lsls	r3, r2
 80077ae:	608b      	str	r3, [r1, #8]
 80077b0:	4620      	mov	r0, r4
 80077b2:	f000 fe0d 	bl	80083d0 <_Bfree>
 80077b6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80077b8:	2200      	movs	r2, #0
 80077ba:	601a      	str	r2, [r3, #0]
 80077bc:	1e3b      	subs	r3, r7, #0
 80077be:	bfb9      	ittee	lt
 80077c0:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80077c4:	9303      	strlt	r3, [sp, #12]
 80077c6:	2300      	movge	r3, #0
 80077c8:	f8c8 3000 	strge.w	r3, [r8]
 80077cc:	f8dd 900c 	ldr.w	r9, [sp, #12]
 80077d0:	4ba3      	ldr	r3, [pc, #652]	; (8007a60 <_dtoa_r+0x300>)
 80077d2:	bfbc      	itt	lt
 80077d4:	2201      	movlt	r2, #1
 80077d6:	f8c8 2000 	strlt.w	r2, [r8]
 80077da:	ea33 0309 	bics.w	r3, r3, r9
 80077de:	d11b      	bne.n	8007818 <_dtoa_r+0xb8>
 80077e0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80077e2:	f242 730f 	movw	r3, #9999	; 0x270f
 80077e6:	6013      	str	r3, [r2, #0]
 80077e8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80077ec:	4333      	orrs	r3, r6
 80077ee:	f000 857a 	beq.w	80082e6 <_dtoa_r+0xb86>
 80077f2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80077f4:	b963      	cbnz	r3, 8007810 <_dtoa_r+0xb0>
 80077f6:	4b9b      	ldr	r3, [pc, #620]	; (8007a64 <_dtoa_r+0x304>)
 80077f8:	e024      	b.n	8007844 <_dtoa_r+0xe4>
 80077fa:	4b9b      	ldr	r3, [pc, #620]	; (8007a68 <_dtoa_r+0x308>)
 80077fc:	9300      	str	r3, [sp, #0]
 80077fe:	3308      	adds	r3, #8
 8007800:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8007802:	6013      	str	r3, [r2, #0]
 8007804:	9800      	ldr	r0, [sp, #0]
 8007806:	b015      	add	sp, #84	; 0x54
 8007808:	ecbd 8b02 	vpop	{d8}
 800780c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007810:	4b94      	ldr	r3, [pc, #592]	; (8007a64 <_dtoa_r+0x304>)
 8007812:	9300      	str	r3, [sp, #0]
 8007814:	3303      	adds	r3, #3
 8007816:	e7f3      	b.n	8007800 <_dtoa_r+0xa0>
 8007818:	ed9d 7b02 	vldr	d7, [sp, #8]
 800781c:	2200      	movs	r2, #0
 800781e:	ec51 0b17 	vmov	r0, r1, d7
 8007822:	2300      	movs	r3, #0
 8007824:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8007828:	f7f9 f956 	bl	8000ad8 <__aeabi_dcmpeq>
 800782c:	4680      	mov	r8, r0
 800782e:	b158      	cbz	r0, 8007848 <_dtoa_r+0xe8>
 8007830:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8007832:	2301      	movs	r3, #1
 8007834:	6013      	str	r3, [r2, #0]
 8007836:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007838:	2b00      	cmp	r3, #0
 800783a:	f000 8551 	beq.w	80082e0 <_dtoa_r+0xb80>
 800783e:	488b      	ldr	r0, [pc, #556]	; (8007a6c <_dtoa_r+0x30c>)
 8007840:	6018      	str	r0, [r3, #0]
 8007842:	1e43      	subs	r3, r0, #1
 8007844:	9300      	str	r3, [sp, #0]
 8007846:	e7dd      	b.n	8007804 <_dtoa_r+0xa4>
 8007848:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 800784c:	aa12      	add	r2, sp, #72	; 0x48
 800784e:	a913      	add	r1, sp, #76	; 0x4c
 8007850:	4620      	mov	r0, r4
 8007852:	f001 f89f 	bl	8008994 <__d2b>
 8007856:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800785a:	4683      	mov	fp, r0
 800785c:	2d00      	cmp	r5, #0
 800785e:	d07c      	beq.n	800795a <_dtoa_r+0x1fa>
 8007860:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007862:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 8007866:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800786a:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 800786e:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8007872:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8007876:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800787a:	4b7d      	ldr	r3, [pc, #500]	; (8007a70 <_dtoa_r+0x310>)
 800787c:	2200      	movs	r2, #0
 800787e:	4630      	mov	r0, r6
 8007880:	4639      	mov	r1, r7
 8007882:	f7f8 fd09 	bl	8000298 <__aeabi_dsub>
 8007886:	a36e      	add	r3, pc, #440	; (adr r3, 8007a40 <_dtoa_r+0x2e0>)
 8007888:	e9d3 2300 	ldrd	r2, r3, [r3]
 800788c:	f7f8 febc 	bl	8000608 <__aeabi_dmul>
 8007890:	a36d      	add	r3, pc, #436	; (adr r3, 8007a48 <_dtoa_r+0x2e8>)
 8007892:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007896:	f7f8 fd01 	bl	800029c <__adddf3>
 800789a:	4606      	mov	r6, r0
 800789c:	4628      	mov	r0, r5
 800789e:	460f      	mov	r7, r1
 80078a0:	f7f8 fe48 	bl	8000534 <__aeabi_i2d>
 80078a4:	a36a      	add	r3, pc, #424	; (adr r3, 8007a50 <_dtoa_r+0x2f0>)
 80078a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078aa:	f7f8 fead 	bl	8000608 <__aeabi_dmul>
 80078ae:	4602      	mov	r2, r0
 80078b0:	460b      	mov	r3, r1
 80078b2:	4630      	mov	r0, r6
 80078b4:	4639      	mov	r1, r7
 80078b6:	f7f8 fcf1 	bl	800029c <__adddf3>
 80078ba:	4606      	mov	r6, r0
 80078bc:	460f      	mov	r7, r1
 80078be:	f7f9 f953 	bl	8000b68 <__aeabi_d2iz>
 80078c2:	2200      	movs	r2, #0
 80078c4:	4682      	mov	sl, r0
 80078c6:	2300      	movs	r3, #0
 80078c8:	4630      	mov	r0, r6
 80078ca:	4639      	mov	r1, r7
 80078cc:	f7f9 f90e 	bl	8000aec <__aeabi_dcmplt>
 80078d0:	b148      	cbz	r0, 80078e6 <_dtoa_r+0x186>
 80078d2:	4650      	mov	r0, sl
 80078d4:	f7f8 fe2e 	bl	8000534 <__aeabi_i2d>
 80078d8:	4632      	mov	r2, r6
 80078da:	463b      	mov	r3, r7
 80078dc:	f7f9 f8fc 	bl	8000ad8 <__aeabi_dcmpeq>
 80078e0:	b908      	cbnz	r0, 80078e6 <_dtoa_r+0x186>
 80078e2:	f10a 3aff 	add.w	sl, sl, #4294967295
 80078e6:	f1ba 0f16 	cmp.w	sl, #22
 80078ea:	d854      	bhi.n	8007996 <_dtoa_r+0x236>
 80078ec:	4b61      	ldr	r3, [pc, #388]	; (8007a74 <_dtoa_r+0x314>)
 80078ee:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80078f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078f6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80078fa:	f7f9 f8f7 	bl	8000aec <__aeabi_dcmplt>
 80078fe:	2800      	cmp	r0, #0
 8007900:	d04b      	beq.n	800799a <_dtoa_r+0x23a>
 8007902:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007906:	2300      	movs	r3, #0
 8007908:	930e      	str	r3, [sp, #56]	; 0x38
 800790a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800790c:	1b5d      	subs	r5, r3, r5
 800790e:	1e6b      	subs	r3, r5, #1
 8007910:	9304      	str	r3, [sp, #16]
 8007912:	bf43      	ittte	mi
 8007914:	2300      	movmi	r3, #0
 8007916:	f1c5 0801 	rsbmi	r8, r5, #1
 800791a:	9304      	strmi	r3, [sp, #16]
 800791c:	f04f 0800 	movpl.w	r8, #0
 8007920:	f1ba 0f00 	cmp.w	sl, #0
 8007924:	db3b      	blt.n	800799e <_dtoa_r+0x23e>
 8007926:	9b04      	ldr	r3, [sp, #16]
 8007928:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 800792c:	4453      	add	r3, sl
 800792e:	9304      	str	r3, [sp, #16]
 8007930:	2300      	movs	r3, #0
 8007932:	9306      	str	r3, [sp, #24]
 8007934:	9b05      	ldr	r3, [sp, #20]
 8007936:	2b09      	cmp	r3, #9
 8007938:	d869      	bhi.n	8007a0e <_dtoa_r+0x2ae>
 800793a:	2b05      	cmp	r3, #5
 800793c:	bfc4      	itt	gt
 800793e:	3b04      	subgt	r3, #4
 8007940:	9305      	strgt	r3, [sp, #20]
 8007942:	9b05      	ldr	r3, [sp, #20]
 8007944:	f1a3 0302 	sub.w	r3, r3, #2
 8007948:	bfcc      	ite	gt
 800794a:	2500      	movgt	r5, #0
 800794c:	2501      	movle	r5, #1
 800794e:	2b03      	cmp	r3, #3
 8007950:	d869      	bhi.n	8007a26 <_dtoa_r+0x2c6>
 8007952:	e8df f003 	tbb	[pc, r3]
 8007956:	4e2c      	.short	0x4e2c
 8007958:	5a4c      	.short	0x5a4c
 800795a:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 800795e:	441d      	add	r5, r3
 8007960:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8007964:	2b20      	cmp	r3, #32
 8007966:	bfc1      	itttt	gt
 8007968:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800796c:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8007970:	fa09 f303 	lslgt.w	r3, r9, r3
 8007974:	fa26 f000 	lsrgt.w	r0, r6, r0
 8007978:	bfda      	itte	le
 800797a:	f1c3 0320 	rsble	r3, r3, #32
 800797e:	fa06 f003 	lslle.w	r0, r6, r3
 8007982:	4318      	orrgt	r0, r3
 8007984:	f7f8 fdc6 	bl	8000514 <__aeabi_ui2d>
 8007988:	2301      	movs	r3, #1
 800798a:	4606      	mov	r6, r0
 800798c:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8007990:	3d01      	subs	r5, #1
 8007992:	9310      	str	r3, [sp, #64]	; 0x40
 8007994:	e771      	b.n	800787a <_dtoa_r+0x11a>
 8007996:	2301      	movs	r3, #1
 8007998:	e7b6      	b.n	8007908 <_dtoa_r+0x1a8>
 800799a:	900e      	str	r0, [sp, #56]	; 0x38
 800799c:	e7b5      	b.n	800790a <_dtoa_r+0x1aa>
 800799e:	f1ca 0300 	rsb	r3, sl, #0
 80079a2:	9306      	str	r3, [sp, #24]
 80079a4:	2300      	movs	r3, #0
 80079a6:	eba8 080a 	sub.w	r8, r8, sl
 80079aa:	930d      	str	r3, [sp, #52]	; 0x34
 80079ac:	e7c2      	b.n	8007934 <_dtoa_r+0x1d4>
 80079ae:	2300      	movs	r3, #0
 80079b0:	9308      	str	r3, [sp, #32]
 80079b2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80079b4:	2b00      	cmp	r3, #0
 80079b6:	dc39      	bgt.n	8007a2c <_dtoa_r+0x2cc>
 80079b8:	f04f 0901 	mov.w	r9, #1
 80079bc:	f8cd 9004 	str.w	r9, [sp, #4]
 80079c0:	464b      	mov	r3, r9
 80079c2:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 80079c6:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80079c8:	2200      	movs	r2, #0
 80079ca:	6042      	str	r2, [r0, #4]
 80079cc:	2204      	movs	r2, #4
 80079ce:	f102 0614 	add.w	r6, r2, #20
 80079d2:	429e      	cmp	r6, r3
 80079d4:	6841      	ldr	r1, [r0, #4]
 80079d6:	d92f      	bls.n	8007a38 <_dtoa_r+0x2d8>
 80079d8:	4620      	mov	r0, r4
 80079da:	f000 fcb9 	bl	8008350 <_Balloc>
 80079de:	9000      	str	r0, [sp, #0]
 80079e0:	2800      	cmp	r0, #0
 80079e2:	d14b      	bne.n	8007a7c <_dtoa_r+0x31c>
 80079e4:	4b24      	ldr	r3, [pc, #144]	; (8007a78 <_dtoa_r+0x318>)
 80079e6:	4602      	mov	r2, r0
 80079e8:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80079ec:	e6d1      	b.n	8007792 <_dtoa_r+0x32>
 80079ee:	2301      	movs	r3, #1
 80079f0:	e7de      	b.n	80079b0 <_dtoa_r+0x250>
 80079f2:	2300      	movs	r3, #0
 80079f4:	9308      	str	r3, [sp, #32]
 80079f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80079f8:	eb0a 0903 	add.w	r9, sl, r3
 80079fc:	f109 0301 	add.w	r3, r9, #1
 8007a00:	2b01      	cmp	r3, #1
 8007a02:	9301      	str	r3, [sp, #4]
 8007a04:	bfb8      	it	lt
 8007a06:	2301      	movlt	r3, #1
 8007a08:	e7dd      	b.n	80079c6 <_dtoa_r+0x266>
 8007a0a:	2301      	movs	r3, #1
 8007a0c:	e7f2      	b.n	80079f4 <_dtoa_r+0x294>
 8007a0e:	2501      	movs	r5, #1
 8007a10:	2300      	movs	r3, #0
 8007a12:	9305      	str	r3, [sp, #20]
 8007a14:	9508      	str	r5, [sp, #32]
 8007a16:	f04f 39ff 	mov.w	r9, #4294967295
 8007a1a:	2200      	movs	r2, #0
 8007a1c:	f8cd 9004 	str.w	r9, [sp, #4]
 8007a20:	2312      	movs	r3, #18
 8007a22:	9209      	str	r2, [sp, #36]	; 0x24
 8007a24:	e7cf      	b.n	80079c6 <_dtoa_r+0x266>
 8007a26:	2301      	movs	r3, #1
 8007a28:	9308      	str	r3, [sp, #32]
 8007a2a:	e7f4      	b.n	8007a16 <_dtoa_r+0x2b6>
 8007a2c:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8007a30:	f8cd 9004 	str.w	r9, [sp, #4]
 8007a34:	464b      	mov	r3, r9
 8007a36:	e7c6      	b.n	80079c6 <_dtoa_r+0x266>
 8007a38:	3101      	adds	r1, #1
 8007a3a:	6041      	str	r1, [r0, #4]
 8007a3c:	0052      	lsls	r2, r2, #1
 8007a3e:	e7c6      	b.n	80079ce <_dtoa_r+0x26e>
 8007a40:	636f4361 	.word	0x636f4361
 8007a44:	3fd287a7 	.word	0x3fd287a7
 8007a48:	8b60c8b3 	.word	0x8b60c8b3
 8007a4c:	3fc68a28 	.word	0x3fc68a28
 8007a50:	509f79fb 	.word	0x509f79fb
 8007a54:	3fd34413 	.word	0x3fd34413
 8007a58:	0800b071 	.word	0x0800b071
 8007a5c:	0800b088 	.word	0x0800b088
 8007a60:	7ff00000 	.word	0x7ff00000
 8007a64:	0800b06d 	.word	0x0800b06d
 8007a68:	0800b064 	.word	0x0800b064
 8007a6c:	0800b041 	.word	0x0800b041
 8007a70:	3ff80000 	.word	0x3ff80000
 8007a74:	0800b180 	.word	0x0800b180
 8007a78:	0800b0e7 	.word	0x0800b0e7
 8007a7c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007a7e:	9a00      	ldr	r2, [sp, #0]
 8007a80:	601a      	str	r2, [r3, #0]
 8007a82:	9b01      	ldr	r3, [sp, #4]
 8007a84:	2b0e      	cmp	r3, #14
 8007a86:	f200 80ad 	bhi.w	8007be4 <_dtoa_r+0x484>
 8007a8a:	2d00      	cmp	r5, #0
 8007a8c:	f000 80aa 	beq.w	8007be4 <_dtoa_r+0x484>
 8007a90:	f1ba 0f00 	cmp.w	sl, #0
 8007a94:	dd36      	ble.n	8007b04 <_dtoa_r+0x3a4>
 8007a96:	4ac3      	ldr	r2, [pc, #780]	; (8007da4 <_dtoa_r+0x644>)
 8007a98:	f00a 030f 	and.w	r3, sl, #15
 8007a9c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8007aa0:	ed93 7b00 	vldr	d7, [r3]
 8007aa4:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8007aa8:	ea4f 172a 	mov.w	r7, sl, asr #4
 8007aac:	eeb0 8a47 	vmov.f32	s16, s14
 8007ab0:	eef0 8a67 	vmov.f32	s17, s15
 8007ab4:	d016      	beq.n	8007ae4 <_dtoa_r+0x384>
 8007ab6:	4bbc      	ldr	r3, [pc, #752]	; (8007da8 <_dtoa_r+0x648>)
 8007ab8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8007abc:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007ac0:	f7f8 fecc 	bl	800085c <__aeabi_ddiv>
 8007ac4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007ac8:	f007 070f 	and.w	r7, r7, #15
 8007acc:	2503      	movs	r5, #3
 8007ace:	4eb6      	ldr	r6, [pc, #728]	; (8007da8 <_dtoa_r+0x648>)
 8007ad0:	b957      	cbnz	r7, 8007ae8 <_dtoa_r+0x388>
 8007ad2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007ad6:	ec53 2b18 	vmov	r2, r3, d8
 8007ada:	f7f8 febf 	bl	800085c <__aeabi_ddiv>
 8007ade:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007ae2:	e029      	b.n	8007b38 <_dtoa_r+0x3d8>
 8007ae4:	2502      	movs	r5, #2
 8007ae6:	e7f2      	b.n	8007ace <_dtoa_r+0x36e>
 8007ae8:	07f9      	lsls	r1, r7, #31
 8007aea:	d508      	bpl.n	8007afe <_dtoa_r+0x39e>
 8007aec:	ec51 0b18 	vmov	r0, r1, d8
 8007af0:	e9d6 2300 	ldrd	r2, r3, [r6]
 8007af4:	f7f8 fd88 	bl	8000608 <__aeabi_dmul>
 8007af8:	ec41 0b18 	vmov	d8, r0, r1
 8007afc:	3501      	adds	r5, #1
 8007afe:	107f      	asrs	r7, r7, #1
 8007b00:	3608      	adds	r6, #8
 8007b02:	e7e5      	b.n	8007ad0 <_dtoa_r+0x370>
 8007b04:	f000 80a6 	beq.w	8007c54 <_dtoa_r+0x4f4>
 8007b08:	f1ca 0600 	rsb	r6, sl, #0
 8007b0c:	4ba5      	ldr	r3, [pc, #660]	; (8007da4 <_dtoa_r+0x644>)
 8007b0e:	4fa6      	ldr	r7, [pc, #664]	; (8007da8 <_dtoa_r+0x648>)
 8007b10:	f006 020f 	and.w	r2, r6, #15
 8007b14:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007b18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b1c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8007b20:	f7f8 fd72 	bl	8000608 <__aeabi_dmul>
 8007b24:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007b28:	1136      	asrs	r6, r6, #4
 8007b2a:	2300      	movs	r3, #0
 8007b2c:	2502      	movs	r5, #2
 8007b2e:	2e00      	cmp	r6, #0
 8007b30:	f040 8085 	bne.w	8007c3e <_dtoa_r+0x4de>
 8007b34:	2b00      	cmp	r3, #0
 8007b36:	d1d2      	bne.n	8007ade <_dtoa_r+0x37e>
 8007b38:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007b3a:	2b00      	cmp	r3, #0
 8007b3c:	f000 808c 	beq.w	8007c58 <_dtoa_r+0x4f8>
 8007b40:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8007b44:	4b99      	ldr	r3, [pc, #612]	; (8007dac <_dtoa_r+0x64c>)
 8007b46:	2200      	movs	r2, #0
 8007b48:	4630      	mov	r0, r6
 8007b4a:	4639      	mov	r1, r7
 8007b4c:	f7f8 ffce 	bl	8000aec <__aeabi_dcmplt>
 8007b50:	2800      	cmp	r0, #0
 8007b52:	f000 8081 	beq.w	8007c58 <_dtoa_r+0x4f8>
 8007b56:	9b01      	ldr	r3, [sp, #4]
 8007b58:	2b00      	cmp	r3, #0
 8007b5a:	d07d      	beq.n	8007c58 <_dtoa_r+0x4f8>
 8007b5c:	f1b9 0f00 	cmp.w	r9, #0
 8007b60:	dd3c      	ble.n	8007bdc <_dtoa_r+0x47c>
 8007b62:	f10a 33ff 	add.w	r3, sl, #4294967295
 8007b66:	9307      	str	r3, [sp, #28]
 8007b68:	2200      	movs	r2, #0
 8007b6a:	4b91      	ldr	r3, [pc, #580]	; (8007db0 <_dtoa_r+0x650>)
 8007b6c:	4630      	mov	r0, r6
 8007b6e:	4639      	mov	r1, r7
 8007b70:	f7f8 fd4a 	bl	8000608 <__aeabi_dmul>
 8007b74:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007b78:	3501      	adds	r5, #1
 8007b7a:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 8007b7e:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8007b82:	4628      	mov	r0, r5
 8007b84:	f7f8 fcd6 	bl	8000534 <__aeabi_i2d>
 8007b88:	4632      	mov	r2, r6
 8007b8a:	463b      	mov	r3, r7
 8007b8c:	f7f8 fd3c 	bl	8000608 <__aeabi_dmul>
 8007b90:	4b88      	ldr	r3, [pc, #544]	; (8007db4 <_dtoa_r+0x654>)
 8007b92:	2200      	movs	r2, #0
 8007b94:	f7f8 fb82 	bl	800029c <__adddf3>
 8007b98:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8007b9c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007ba0:	9303      	str	r3, [sp, #12]
 8007ba2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007ba4:	2b00      	cmp	r3, #0
 8007ba6:	d15c      	bne.n	8007c62 <_dtoa_r+0x502>
 8007ba8:	4b83      	ldr	r3, [pc, #524]	; (8007db8 <_dtoa_r+0x658>)
 8007baa:	2200      	movs	r2, #0
 8007bac:	4630      	mov	r0, r6
 8007bae:	4639      	mov	r1, r7
 8007bb0:	f7f8 fb72 	bl	8000298 <__aeabi_dsub>
 8007bb4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007bb8:	4606      	mov	r6, r0
 8007bba:	460f      	mov	r7, r1
 8007bbc:	f7f8 ffb4 	bl	8000b28 <__aeabi_dcmpgt>
 8007bc0:	2800      	cmp	r0, #0
 8007bc2:	f040 8296 	bne.w	80080f2 <_dtoa_r+0x992>
 8007bc6:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8007bca:	4630      	mov	r0, r6
 8007bcc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007bd0:	4639      	mov	r1, r7
 8007bd2:	f7f8 ff8b 	bl	8000aec <__aeabi_dcmplt>
 8007bd6:	2800      	cmp	r0, #0
 8007bd8:	f040 8288 	bne.w	80080ec <_dtoa_r+0x98c>
 8007bdc:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8007be0:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007be4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8007be6:	2b00      	cmp	r3, #0
 8007be8:	f2c0 8158 	blt.w	8007e9c <_dtoa_r+0x73c>
 8007bec:	f1ba 0f0e 	cmp.w	sl, #14
 8007bf0:	f300 8154 	bgt.w	8007e9c <_dtoa_r+0x73c>
 8007bf4:	4b6b      	ldr	r3, [pc, #428]	; (8007da4 <_dtoa_r+0x644>)
 8007bf6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8007bfa:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007bfe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007c00:	2b00      	cmp	r3, #0
 8007c02:	f280 80e3 	bge.w	8007dcc <_dtoa_r+0x66c>
 8007c06:	9b01      	ldr	r3, [sp, #4]
 8007c08:	2b00      	cmp	r3, #0
 8007c0a:	f300 80df 	bgt.w	8007dcc <_dtoa_r+0x66c>
 8007c0e:	f040 826d 	bne.w	80080ec <_dtoa_r+0x98c>
 8007c12:	4b69      	ldr	r3, [pc, #420]	; (8007db8 <_dtoa_r+0x658>)
 8007c14:	2200      	movs	r2, #0
 8007c16:	4640      	mov	r0, r8
 8007c18:	4649      	mov	r1, r9
 8007c1a:	f7f8 fcf5 	bl	8000608 <__aeabi_dmul>
 8007c1e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007c22:	f7f8 ff77 	bl	8000b14 <__aeabi_dcmpge>
 8007c26:	9e01      	ldr	r6, [sp, #4]
 8007c28:	4637      	mov	r7, r6
 8007c2a:	2800      	cmp	r0, #0
 8007c2c:	f040 8243 	bne.w	80080b6 <_dtoa_r+0x956>
 8007c30:	9d00      	ldr	r5, [sp, #0]
 8007c32:	2331      	movs	r3, #49	; 0x31
 8007c34:	f805 3b01 	strb.w	r3, [r5], #1
 8007c38:	f10a 0a01 	add.w	sl, sl, #1
 8007c3c:	e23f      	b.n	80080be <_dtoa_r+0x95e>
 8007c3e:	07f2      	lsls	r2, r6, #31
 8007c40:	d505      	bpl.n	8007c4e <_dtoa_r+0x4ee>
 8007c42:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007c46:	f7f8 fcdf 	bl	8000608 <__aeabi_dmul>
 8007c4a:	3501      	adds	r5, #1
 8007c4c:	2301      	movs	r3, #1
 8007c4e:	1076      	asrs	r6, r6, #1
 8007c50:	3708      	adds	r7, #8
 8007c52:	e76c      	b.n	8007b2e <_dtoa_r+0x3ce>
 8007c54:	2502      	movs	r5, #2
 8007c56:	e76f      	b.n	8007b38 <_dtoa_r+0x3d8>
 8007c58:	9b01      	ldr	r3, [sp, #4]
 8007c5a:	f8cd a01c 	str.w	sl, [sp, #28]
 8007c5e:	930c      	str	r3, [sp, #48]	; 0x30
 8007c60:	e78d      	b.n	8007b7e <_dtoa_r+0x41e>
 8007c62:	9900      	ldr	r1, [sp, #0]
 8007c64:	980c      	ldr	r0, [sp, #48]	; 0x30
 8007c66:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007c68:	4b4e      	ldr	r3, [pc, #312]	; (8007da4 <_dtoa_r+0x644>)
 8007c6a:	ed9d 7b02 	vldr	d7, [sp, #8]
 8007c6e:	4401      	add	r1, r0
 8007c70:	9102      	str	r1, [sp, #8]
 8007c72:	9908      	ldr	r1, [sp, #32]
 8007c74:	eeb0 8a47 	vmov.f32	s16, s14
 8007c78:	eef0 8a67 	vmov.f32	s17, s15
 8007c7c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007c80:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8007c84:	2900      	cmp	r1, #0
 8007c86:	d045      	beq.n	8007d14 <_dtoa_r+0x5b4>
 8007c88:	494c      	ldr	r1, [pc, #304]	; (8007dbc <_dtoa_r+0x65c>)
 8007c8a:	2000      	movs	r0, #0
 8007c8c:	f7f8 fde6 	bl	800085c <__aeabi_ddiv>
 8007c90:	ec53 2b18 	vmov	r2, r3, d8
 8007c94:	f7f8 fb00 	bl	8000298 <__aeabi_dsub>
 8007c98:	9d00      	ldr	r5, [sp, #0]
 8007c9a:	ec41 0b18 	vmov	d8, r0, r1
 8007c9e:	4639      	mov	r1, r7
 8007ca0:	4630      	mov	r0, r6
 8007ca2:	f7f8 ff61 	bl	8000b68 <__aeabi_d2iz>
 8007ca6:	900c      	str	r0, [sp, #48]	; 0x30
 8007ca8:	f7f8 fc44 	bl	8000534 <__aeabi_i2d>
 8007cac:	4602      	mov	r2, r0
 8007cae:	460b      	mov	r3, r1
 8007cb0:	4630      	mov	r0, r6
 8007cb2:	4639      	mov	r1, r7
 8007cb4:	f7f8 faf0 	bl	8000298 <__aeabi_dsub>
 8007cb8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007cba:	3330      	adds	r3, #48	; 0x30
 8007cbc:	f805 3b01 	strb.w	r3, [r5], #1
 8007cc0:	ec53 2b18 	vmov	r2, r3, d8
 8007cc4:	4606      	mov	r6, r0
 8007cc6:	460f      	mov	r7, r1
 8007cc8:	f7f8 ff10 	bl	8000aec <__aeabi_dcmplt>
 8007ccc:	2800      	cmp	r0, #0
 8007cce:	d165      	bne.n	8007d9c <_dtoa_r+0x63c>
 8007cd0:	4632      	mov	r2, r6
 8007cd2:	463b      	mov	r3, r7
 8007cd4:	4935      	ldr	r1, [pc, #212]	; (8007dac <_dtoa_r+0x64c>)
 8007cd6:	2000      	movs	r0, #0
 8007cd8:	f7f8 fade 	bl	8000298 <__aeabi_dsub>
 8007cdc:	ec53 2b18 	vmov	r2, r3, d8
 8007ce0:	f7f8 ff04 	bl	8000aec <__aeabi_dcmplt>
 8007ce4:	2800      	cmp	r0, #0
 8007ce6:	f040 80b9 	bne.w	8007e5c <_dtoa_r+0x6fc>
 8007cea:	9b02      	ldr	r3, [sp, #8]
 8007cec:	429d      	cmp	r5, r3
 8007cee:	f43f af75 	beq.w	8007bdc <_dtoa_r+0x47c>
 8007cf2:	4b2f      	ldr	r3, [pc, #188]	; (8007db0 <_dtoa_r+0x650>)
 8007cf4:	ec51 0b18 	vmov	r0, r1, d8
 8007cf8:	2200      	movs	r2, #0
 8007cfa:	f7f8 fc85 	bl	8000608 <__aeabi_dmul>
 8007cfe:	4b2c      	ldr	r3, [pc, #176]	; (8007db0 <_dtoa_r+0x650>)
 8007d00:	ec41 0b18 	vmov	d8, r0, r1
 8007d04:	2200      	movs	r2, #0
 8007d06:	4630      	mov	r0, r6
 8007d08:	4639      	mov	r1, r7
 8007d0a:	f7f8 fc7d 	bl	8000608 <__aeabi_dmul>
 8007d0e:	4606      	mov	r6, r0
 8007d10:	460f      	mov	r7, r1
 8007d12:	e7c4      	b.n	8007c9e <_dtoa_r+0x53e>
 8007d14:	ec51 0b17 	vmov	r0, r1, d7
 8007d18:	f7f8 fc76 	bl	8000608 <__aeabi_dmul>
 8007d1c:	9b02      	ldr	r3, [sp, #8]
 8007d1e:	9d00      	ldr	r5, [sp, #0]
 8007d20:	930c      	str	r3, [sp, #48]	; 0x30
 8007d22:	ec41 0b18 	vmov	d8, r0, r1
 8007d26:	4639      	mov	r1, r7
 8007d28:	4630      	mov	r0, r6
 8007d2a:	f7f8 ff1d 	bl	8000b68 <__aeabi_d2iz>
 8007d2e:	9011      	str	r0, [sp, #68]	; 0x44
 8007d30:	f7f8 fc00 	bl	8000534 <__aeabi_i2d>
 8007d34:	4602      	mov	r2, r0
 8007d36:	460b      	mov	r3, r1
 8007d38:	4630      	mov	r0, r6
 8007d3a:	4639      	mov	r1, r7
 8007d3c:	f7f8 faac 	bl	8000298 <__aeabi_dsub>
 8007d40:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007d42:	3330      	adds	r3, #48	; 0x30
 8007d44:	f805 3b01 	strb.w	r3, [r5], #1
 8007d48:	9b02      	ldr	r3, [sp, #8]
 8007d4a:	429d      	cmp	r5, r3
 8007d4c:	4606      	mov	r6, r0
 8007d4e:	460f      	mov	r7, r1
 8007d50:	f04f 0200 	mov.w	r2, #0
 8007d54:	d134      	bne.n	8007dc0 <_dtoa_r+0x660>
 8007d56:	4b19      	ldr	r3, [pc, #100]	; (8007dbc <_dtoa_r+0x65c>)
 8007d58:	ec51 0b18 	vmov	r0, r1, d8
 8007d5c:	f7f8 fa9e 	bl	800029c <__adddf3>
 8007d60:	4602      	mov	r2, r0
 8007d62:	460b      	mov	r3, r1
 8007d64:	4630      	mov	r0, r6
 8007d66:	4639      	mov	r1, r7
 8007d68:	f7f8 fede 	bl	8000b28 <__aeabi_dcmpgt>
 8007d6c:	2800      	cmp	r0, #0
 8007d6e:	d175      	bne.n	8007e5c <_dtoa_r+0x6fc>
 8007d70:	ec53 2b18 	vmov	r2, r3, d8
 8007d74:	4911      	ldr	r1, [pc, #68]	; (8007dbc <_dtoa_r+0x65c>)
 8007d76:	2000      	movs	r0, #0
 8007d78:	f7f8 fa8e 	bl	8000298 <__aeabi_dsub>
 8007d7c:	4602      	mov	r2, r0
 8007d7e:	460b      	mov	r3, r1
 8007d80:	4630      	mov	r0, r6
 8007d82:	4639      	mov	r1, r7
 8007d84:	f7f8 feb2 	bl	8000aec <__aeabi_dcmplt>
 8007d88:	2800      	cmp	r0, #0
 8007d8a:	f43f af27 	beq.w	8007bdc <_dtoa_r+0x47c>
 8007d8e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007d90:	1e6b      	subs	r3, r5, #1
 8007d92:	930c      	str	r3, [sp, #48]	; 0x30
 8007d94:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8007d98:	2b30      	cmp	r3, #48	; 0x30
 8007d9a:	d0f8      	beq.n	8007d8e <_dtoa_r+0x62e>
 8007d9c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8007da0:	e04a      	b.n	8007e38 <_dtoa_r+0x6d8>
 8007da2:	bf00      	nop
 8007da4:	0800b180 	.word	0x0800b180
 8007da8:	0800b158 	.word	0x0800b158
 8007dac:	3ff00000 	.word	0x3ff00000
 8007db0:	40240000 	.word	0x40240000
 8007db4:	401c0000 	.word	0x401c0000
 8007db8:	40140000 	.word	0x40140000
 8007dbc:	3fe00000 	.word	0x3fe00000
 8007dc0:	4baf      	ldr	r3, [pc, #700]	; (8008080 <_dtoa_r+0x920>)
 8007dc2:	f7f8 fc21 	bl	8000608 <__aeabi_dmul>
 8007dc6:	4606      	mov	r6, r0
 8007dc8:	460f      	mov	r7, r1
 8007dca:	e7ac      	b.n	8007d26 <_dtoa_r+0x5c6>
 8007dcc:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8007dd0:	9d00      	ldr	r5, [sp, #0]
 8007dd2:	4642      	mov	r2, r8
 8007dd4:	464b      	mov	r3, r9
 8007dd6:	4630      	mov	r0, r6
 8007dd8:	4639      	mov	r1, r7
 8007dda:	f7f8 fd3f 	bl	800085c <__aeabi_ddiv>
 8007dde:	f7f8 fec3 	bl	8000b68 <__aeabi_d2iz>
 8007de2:	9002      	str	r0, [sp, #8]
 8007de4:	f7f8 fba6 	bl	8000534 <__aeabi_i2d>
 8007de8:	4642      	mov	r2, r8
 8007dea:	464b      	mov	r3, r9
 8007dec:	f7f8 fc0c 	bl	8000608 <__aeabi_dmul>
 8007df0:	4602      	mov	r2, r0
 8007df2:	460b      	mov	r3, r1
 8007df4:	4630      	mov	r0, r6
 8007df6:	4639      	mov	r1, r7
 8007df8:	f7f8 fa4e 	bl	8000298 <__aeabi_dsub>
 8007dfc:	9e02      	ldr	r6, [sp, #8]
 8007dfe:	9f01      	ldr	r7, [sp, #4]
 8007e00:	3630      	adds	r6, #48	; 0x30
 8007e02:	f805 6b01 	strb.w	r6, [r5], #1
 8007e06:	9e00      	ldr	r6, [sp, #0]
 8007e08:	1bae      	subs	r6, r5, r6
 8007e0a:	42b7      	cmp	r7, r6
 8007e0c:	4602      	mov	r2, r0
 8007e0e:	460b      	mov	r3, r1
 8007e10:	d137      	bne.n	8007e82 <_dtoa_r+0x722>
 8007e12:	f7f8 fa43 	bl	800029c <__adddf3>
 8007e16:	4642      	mov	r2, r8
 8007e18:	464b      	mov	r3, r9
 8007e1a:	4606      	mov	r6, r0
 8007e1c:	460f      	mov	r7, r1
 8007e1e:	f7f8 fe83 	bl	8000b28 <__aeabi_dcmpgt>
 8007e22:	b9c8      	cbnz	r0, 8007e58 <_dtoa_r+0x6f8>
 8007e24:	4642      	mov	r2, r8
 8007e26:	464b      	mov	r3, r9
 8007e28:	4630      	mov	r0, r6
 8007e2a:	4639      	mov	r1, r7
 8007e2c:	f7f8 fe54 	bl	8000ad8 <__aeabi_dcmpeq>
 8007e30:	b110      	cbz	r0, 8007e38 <_dtoa_r+0x6d8>
 8007e32:	9b02      	ldr	r3, [sp, #8]
 8007e34:	07d9      	lsls	r1, r3, #31
 8007e36:	d40f      	bmi.n	8007e58 <_dtoa_r+0x6f8>
 8007e38:	4620      	mov	r0, r4
 8007e3a:	4659      	mov	r1, fp
 8007e3c:	f000 fac8 	bl	80083d0 <_Bfree>
 8007e40:	2300      	movs	r3, #0
 8007e42:	702b      	strb	r3, [r5, #0]
 8007e44:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007e46:	f10a 0001 	add.w	r0, sl, #1
 8007e4a:	6018      	str	r0, [r3, #0]
 8007e4c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007e4e:	2b00      	cmp	r3, #0
 8007e50:	f43f acd8 	beq.w	8007804 <_dtoa_r+0xa4>
 8007e54:	601d      	str	r5, [r3, #0]
 8007e56:	e4d5      	b.n	8007804 <_dtoa_r+0xa4>
 8007e58:	f8cd a01c 	str.w	sl, [sp, #28]
 8007e5c:	462b      	mov	r3, r5
 8007e5e:	461d      	mov	r5, r3
 8007e60:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007e64:	2a39      	cmp	r2, #57	; 0x39
 8007e66:	d108      	bne.n	8007e7a <_dtoa_r+0x71a>
 8007e68:	9a00      	ldr	r2, [sp, #0]
 8007e6a:	429a      	cmp	r2, r3
 8007e6c:	d1f7      	bne.n	8007e5e <_dtoa_r+0x6fe>
 8007e6e:	9a07      	ldr	r2, [sp, #28]
 8007e70:	9900      	ldr	r1, [sp, #0]
 8007e72:	3201      	adds	r2, #1
 8007e74:	9207      	str	r2, [sp, #28]
 8007e76:	2230      	movs	r2, #48	; 0x30
 8007e78:	700a      	strb	r2, [r1, #0]
 8007e7a:	781a      	ldrb	r2, [r3, #0]
 8007e7c:	3201      	adds	r2, #1
 8007e7e:	701a      	strb	r2, [r3, #0]
 8007e80:	e78c      	b.n	8007d9c <_dtoa_r+0x63c>
 8007e82:	4b7f      	ldr	r3, [pc, #508]	; (8008080 <_dtoa_r+0x920>)
 8007e84:	2200      	movs	r2, #0
 8007e86:	f7f8 fbbf 	bl	8000608 <__aeabi_dmul>
 8007e8a:	2200      	movs	r2, #0
 8007e8c:	2300      	movs	r3, #0
 8007e8e:	4606      	mov	r6, r0
 8007e90:	460f      	mov	r7, r1
 8007e92:	f7f8 fe21 	bl	8000ad8 <__aeabi_dcmpeq>
 8007e96:	2800      	cmp	r0, #0
 8007e98:	d09b      	beq.n	8007dd2 <_dtoa_r+0x672>
 8007e9a:	e7cd      	b.n	8007e38 <_dtoa_r+0x6d8>
 8007e9c:	9a08      	ldr	r2, [sp, #32]
 8007e9e:	2a00      	cmp	r2, #0
 8007ea0:	f000 80c4 	beq.w	800802c <_dtoa_r+0x8cc>
 8007ea4:	9a05      	ldr	r2, [sp, #20]
 8007ea6:	2a01      	cmp	r2, #1
 8007ea8:	f300 80a8 	bgt.w	8007ffc <_dtoa_r+0x89c>
 8007eac:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8007eae:	2a00      	cmp	r2, #0
 8007eb0:	f000 80a0 	beq.w	8007ff4 <_dtoa_r+0x894>
 8007eb4:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8007eb8:	9e06      	ldr	r6, [sp, #24]
 8007eba:	4645      	mov	r5, r8
 8007ebc:	9a04      	ldr	r2, [sp, #16]
 8007ebe:	2101      	movs	r1, #1
 8007ec0:	441a      	add	r2, r3
 8007ec2:	4620      	mov	r0, r4
 8007ec4:	4498      	add	r8, r3
 8007ec6:	9204      	str	r2, [sp, #16]
 8007ec8:	f000 fb3e 	bl	8008548 <__i2b>
 8007ecc:	4607      	mov	r7, r0
 8007ece:	2d00      	cmp	r5, #0
 8007ed0:	dd0b      	ble.n	8007eea <_dtoa_r+0x78a>
 8007ed2:	9b04      	ldr	r3, [sp, #16]
 8007ed4:	2b00      	cmp	r3, #0
 8007ed6:	dd08      	ble.n	8007eea <_dtoa_r+0x78a>
 8007ed8:	42ab      	cmp	r3, r5
 8007eda:	9a04      	ldr	r2, [sp, #16]
 8007edc:	bfa8      	it	ge
 8007ede:	462b      	movge	r3, r5
 8007ee0:	eba8 0803 	sub.w	r8, r8, r3
 8007ee4:	1aed      	subs	r5, r5, r3
 8007ee6:	1ad3      	subs	r3, r2, r3
 8007ee8:	9304      	str	r3, [sp, #16]
 8007eea:	9b06      	ldr	r3, [sp, #24]
 8007eec:	b1fb      	cbz	r3, 8007f2e <_dtoa_r+0x7ce>
 8007eee:	9b08      	ldr	r3, [sp, #32]
 8007ef0:	2b00      	cmp	r3, #0
 8007ef2:	f000 809f 	beq.w	8008034 <_dtoa_r+0x8d4>
 8007ef6:	2e00      	cmp	r6, #0
 8007ef8:	dd11      	ble.n	8007f1e <_dtoa_r+0x7be>
 8007efa:	4639      	mov	r1, r7
 8007efc:	4632      	mov	r2, r6
 8007efe:	4620      	mov	r0, r4
 8007f00:	f000 fbde 	bl	80086c0 <__pow5mult>
 8007f04:	465a      	mov	r2, fp
 8007f06:	4601      	mov	r1, r0
 8007f08:	4607      	mov	r7, r0
 8007f0a:	4620      	mov	r0, r4
 8007f0c:	f000 fb32 	bl	8008574 <__multiply>
 8007f10:	4659      	mov	r1, fp
 8007f12:	9007      	str	r0, [sp, #28]
 8007f14:	4620      	mov	r0, r4
 8007f16:	f000 fa5b 	bl	80083d0 <_Bfree>
 8007f1a:	9b07      	ldr	r3, [sp, #28]
 8007f1c:	469b      	mov	fp, r3
 8007f1e:	9b06      	ldr	r3, [sp, #24]
 8007f20:	1b9a      	subs	r2, r3, r6
 8007f22:	d004      	beq.n	8007f2e <_dtoa_r+0x7ce>
 8007f24:	4659      	mov	r1, fp
 8007f26:	4620      	mov	r0, r4
 8007f28:	f000 fbca 	bl	80086c0 <__pow5mult>
 8007f2c:	4683      	mov	fp, r0
 8007f2e:	2101      	movs	r1, #1
 8007f30:	4620      	mov	r0, r4
 8007f32:	f000 fb09 	bl	8008548 <__i2b>
 8007f36:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007f38:	2b00      	cmp	r3, #0
 8007f3a:	4606      	mov	r6, r0
 8007f3c:	dd7c      	ble.n	8008038 <_dtoa_r+0x8d8>
 8007f3e:	461a      	mov	r2, r3
 8007f40:	4601      	mov	r1, r0
 8007f42:	4620      	mov	r0, r4
 8007f44:	f000 fbbc 	bl	80086c0 <__pow5mult>
 8007f48:	9b05      	ldr	r3, [sp, #20]
 8007f4a:	2b01      	cmp	r3, #1
 8007f4c:	4606      	mov	r6, r0
 8007f4e:	dd76      	ble.n	800803e <_dtoa_r+0x8de>
 8007f50:	2300      	movs	r3, #0
 8007f52:	9306      	str	r3, [sp, #24]
 8007f54:	6933      	ldr	r3, [r6, #16]
 8007f56:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8007f5a:	6918      	ldr	r0, [r3, #16]
 8007f5c:	f000 faa4 	bl	80084a8 <__hi0bits>
 8007f60:	f1c0 0020 	rsb	r0, r0, #32
 8007f64:	9b04      	ldr	r3, [sp, #16]
 8007f66:	4418      	add	r0, r3
 8007f68:	f010 001f 	ands.w	r0, r0, #31
 8007f6c:	f000 8086 	beq.w	800807c <_dtoa_r+0x91c>
 8007f70:	f1c0 0320 	rsb	r3, r0, #32
 8007f74:	2b04      	cmp	r3, #4
 8007f76:	dd7f      	ble.n	8008078 <_dtoa_r+0x918>
 8007f78:	f1c0 001c 	rsb	r0, r0, #28
 8007f7c:	9b04      	ldr	r3, [sp, #16]
 8007f7e:	4403      	add	r3, r0
 8007f80:	4480      	add	r8, r0
 8007f82:	4405      	add	r5, r0
 8007f84:	9304      	str	r3, [sp, #16]
 8007f86:	f1b8 0f00 	cmp.w	r8, #0
 8007f8a:	dd05      	ble.n	8007f98 <_dtoa_r+0x838>
 8007f8c:	4659      	mov	r1, fp
 8007f8e:	4642      	mov	r2, r8
 8007f90:	4620      	mov	r0, r4
 8007f92:	f000 fbef 	bl	8008774 <__lshift>
 8007f96:	4683      	mov	fp, r0
 8007f98:	9b04      	ldr	r3, [sp, #16]
 8007f9a:	2b00      	cmp	r3, #0
 8007f9c:	dd05      	ble.n	8007faa <_dtoa_r+0x84a>
 8007f9e:	4631      	mov	r1, r6
 8007fa0:	461a      	mov	r2, r3
 8007fa2:	4620      	mov	r0, r4
 8007fa4:	f000 fbe6 	bl	8008774 <__lshift>
 8007fa8:	4606      	mov	r6, r0
 8007faa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007fac:	2b00      	cmp	r3, #0
 8007fae:	d069      	beq.n	8008084 <_dtoa_r+0x924>
 8007fb0:	4631      	mov	r1, r6
 8007fb2:	4658      	mov	r0, fp
 8007fb4:	f000 fc4a 	bl	800884c <__mcmp>
 8007fb8:	2800      	cmp	r0, #0
 8007fba:	da63      	bge.n	8008084 <_dtoa_r+0x924>
 8007fbc:	2300      	movs	r3, #0
 8007fbe:	4659      	mov	r1, fp
 8007fc0:	220a      	movs	r2, #10
 8007fc2:	4620      	mov	r0, r4
 8007fc4:	f000 fa26 	bl	8008414 <__multadd>
 8007fc8:	9b08      	ldr	r3, [sp, #32]
 8007fca:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007fce:	4683      	mov	fp, r0
 8007fd0:	2b00      	cmp	r3, #0
 8007fd2:	f000 818f 	beq.w	80082f4 <_dtoa_r+0xb94>
 8007fd6:	4639      	mov	r1, r7
 8007fd8:	2300      	movs	r3, #0
 8007fda:	220a      	movs	r2, #10
 8007fdc:	4620      	mov	r0, r4
 8007fde:	f000 fa19 	bl	8008414 <__multadd>
 8007fe2:	f1b9 0f00 	cmp.w	r9, #0
 8007fe6:	4607      	mov	r7, r0
 8007fe8:	f300 808e 	bgt.w	8008108 <_dtoa_r+0x9a8>
 8007fec:	9b05      	ldr	r3, [sp, #20]
 8007fee:	2b02      	cmp	r3, #2
 8007ff0:	dc50      	bgt.n	8008094 <_dtoa_r+0x934>
 8007ff2:	e089      	b.n	8008108 <_dtoa_r+0x9a8>
 8007ff4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007ff6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8007ffa:	e75d      	b.n	8007eb8 <_dtoa_r+0x758>
 8007ffc:	9b01      	ldr	r3, [sp, #4]
 8007ffe:	1e5e      	subs	r6, r3, #1
 8008000:	9b06      	ldr	r3, [sp, #24]
 8008002:	42b3      	cmp	r3, r6
 8008004:	bfbf      	itttt	lt
 8008006:	9b06      	ldrlt	r3, [sp, #24]
 8008008:	9606      	strlt	r6, [sp, #24]
 800800a:	1af2      	sublt	r2, r6, r3
 800800c:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 800800e:	bfb6      	itet	lt
 8008010:	189b      	addlt	r3, r3, r2
 8008012:	1b9e      	subge	r6, r3, r6
 8008014:	930d      	strlt	r3, [sp, #52]	; 0x34
 8008016:	9b01      	ldr	r3, [sp, #4]
 8008018:	bfb8      	it	lt
 800801a:	2600      	movlt	r6, #0
 800801c:	2b00      	cmp	r3, #0
 800801e:	bfb5      	itete	lt
 8008020:	eba8 0503 	sublt.w	r5, r8, r3
 8008024:	9b01      	ldrge	r3, [sp, #4]
 8008026:	2300      	movlt	r3, #0
 8008028:	4645      	movge	r5, r8
 800802a:	e747      	b.n	8007ebc <_dtoa_r+0x75c>
 800802c:	9e06      	ldr	r6, [sp, #24]
 800802e:	9f08      	ldr	r7, [sp, #32]
 8008030:	4645      	mov	r5, r8
 8008032:	e74c      	b.n	8007ece <_dtoa_r+0x76e>
 8008034:	9a06      	ldr	r2, [sp, #24]
 8008036:	e775      	b.n	8007f24 <_dtoa_r+0x7c4>
 8008038:	9b05      	ldr	r3, [sp, #20]
 800803a:	2b01      	cmp	r3, #1
 800803c:	dc18      	bgt.n	8008070 <_dtoa_r+0x910>
 800803e:	9b02      	ldr	r3, [sp, #8]
 8008040:	b9b3      	cbnz	r3, 8008070 <_dtoa_r+0x910>
 8008042:	9b03      	ldr	r3, [sp, #12]
 8008044:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008048:	b9a3      	cbnz	r3, 8008074 <_dtoa_r+0x914>
 800804a:	9b03      	ldr	r3, [sp, #12]
 800804c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008050:	0d1b      	lsrs	r3, r3, #20
 8008052:	051b      	lsls	r3, r3, #20
 8008054:	b12b      	cbz	r3, 8008062 <_dtoa_r+0x902>
 8008056:	9b04      	ldr	r3, [sp, #16]
 8008058:	3301      	adds	r3, #1
 800805a:	9304      	str	r3, [sp, #16]
 800805c:	f108 0801 	add.w	r8, r8, #1
 8008060:	2301      	movs	r3, #1
 8008062:	9306      	str	r3, [sp, #24]
 8008064:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008066:	2b00      	cmp	r3, #0
 8008068:	f47f af74 	bne.w	8007f54 <_dtoa_r+0x7f4>
 800806c:	2001      	movs	r0, #1
 800806e:	e779      	b.n	8007f64 <_dtoa_r+0x804>
 8008070:	2300      	movs	r3, #0
 8008072:	e7f6      	b.n	8008062 <_dtoa_r+0x902>
 8008074:	9b02      	ldr	r3, [sp, #8]
 8008076:	e7f4      	b.n	8008062 <_dtoa_r+0x902>
 8008078:	d085      	beq.n	8007f86 <_dtoa_r+0x826>
 800807a:	4618      	mov	r0, r3
 800807c:	301c      	adds	r0, #28
 800807e:	e77d      	b.n	8007f7c <_dtoa_r+0x81c>
 8008080:	40240000 	.word	0x40240000
 8008084:	9b01      	ldr	r3, [sp, #4]
 8008086:	2b00      	cmp	r3, #0
 8008088:	dc38      	bgt.n	80080fc <_dtoa_r+0x99c>
 800808a:	9b05      	ldr	r3, [sp, #20]
 800808c:	2b02      	cmp	r3, #2
 800808e:	dd35      	ble.n	80080fc <_dtoa_r+0x99c>
 8008090:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8008094:	f1b9 0f00 	cmp.w	r9, #0
 8008098:	d10d      	bne.n	80080b6 <_dtoa_r+0x956>
 800809a:	4631      	mov	r1, r6
 800809c:	464b      	mov	r3, r9
 800809e:	2205      	movs	r2, #5
 80080a0:	4620      	mov	r0, r4
 80080a2:	f000 f9b7 	bl	8008414 <__multadd>
 80080a6:	4601      	mov	r1, r0
 80080a8:	4606      	mov	r6, r0
 80080aa:	4658      	mov	r0, fp
 80080ac:	f000 fbce 	bl	800884c <__mcmp>
 80080b0:	2800      	cmp	r0, #0
 80080b2:	f73f adbd 	bgt.w	8007c30 <_dtoa_r+0x4d0>
 80080b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80080b8:	9d00      	ldr	r5, [sp, #0]
 80080ba:	ea6f 0a03 	mvn.w	sl, r3
 80080be:	f04f 0800 	mov.w	r8, #0
 80080c2:	4631      	mov	r1, r6
 80080c4:	4620      	mov	r0, r4
 80080c6:	f000 f983 	bl	80083d0 <_Bfree>
 80080ca:	2f00      	cmp	r7, #0
 80080cc:	f43f aeb4 	beq.w	8007e38 <_dtoa_r+0x6d8>
 80080d0:	f1b8 0f00 	cmp.w	r8, #0
 80080d4:	d005      	beq.n	80080e2 <_dtoa_r+0x982>
 80080d6:	45b8      	cmp	r8, r7
 80080d8:	d003      	beq.n	80080e2 <_dtoa_r+0x982>
 80080da:	4641      	mov	r1, r8
 80080dc:	4620      	mov	r0, r4
 80080de:	f000 f977 	bl	80083d0 <_Bfree>
 80080e2:	4639      	mov	r1, r7
 80080e4:	4620      	mov	r0, r4
 80080e6:	f000 f973 	bl	80083d0 <_Bfree>
 80080ea:	e6a5      	b.n	8007e38 <_dtoa_r+0x6d8>
 80080ec:	2600      	movs	r6, #0
 80080ee:	4637      	mov	r7, r6
 80080f0:	e7e1      	b.n	80080b6 <_dtoa_r+0x956>
 80080f2:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 80080f4:	f8dd a01c 	ldr.w	sl, [sp, #28]
 80080f8:	4637      	mov	r7, r6
 80080fa:	e599      	b.n	8007c30 <_dtoa_r+0x4d0>
 80080fc:	9b08      	ldr	r3, [sp, #32]
 80080fe:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8008102:	2b00      	cmp	r3, #0
 8008104:	f000 80fd 	beq.w	8008302 <_dtoa_r+0xba2>
 8008108:	2d00      	cmp	r5, #0
 800810a:	dd05      	ble.n	8008118 <_dtoa_r+0x9b8>
 800810c:	4639      	mov	r1, r7
 800810e:	462a      	mov	r2, r5
 8008110:	4620      	mov	r0, r4
 8008112:	f000 fb2f 	bl	8008774 <__lshift>
 8008116:	4607      	mov	r7, r0
 8008118:	9b06      	ldr	r3, [sp, #24]
 800811a:	2b00      	cmp	r3, #0
 800811c:	d05c      	beq.n	80081d8 <_dtoa_r+0xa78>
 800811e:	6879      	ldr	r1, [r7, #4]
 8008120:	4620      	mov	r0, r4
 8008122:	f000 f915 	bl	8008350 <_Balloc>
 8008126:	4605      	mov	r5, r0
 8008128:	b928      	cbnz	r0, 8008136 <_dtoa_r+0x9d6>
 800812a:	4b80      	ldr	r3, [pc, #512]	; (800832c <_dtoa_r+0xbcc>)
 800812c:	4602      	mov	r2, r0
 800812e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8008132:	f7ff bb2e 	b.w	8007792 <_dtoa_r+0x32>
 8008136:	693a      	ldr	r2, [r7, #16]
 8008138:	3202      	adds	r2, #2
 800813a:	0092      	lsls	r2, r2, #2
 800813c:	f107 010c 	add.w	r1, r7, #12
 8008140:	300c      	adds	r0, #12
 8008142:	f7fe fddf 	bl	8006d04 <memcpy>
 8008146:	2201      	movs	r2, #1
 8008148:	4629      	mov	r1, r5
 800814a:	4620      	mov	r0, r4
 800814c:	f000 fb12 	bl	8008774 <__lshift>
 8008150:	9b00      	ldr	r3, [sp, #0]
 8008152:	3301      	adds	r3, #1
 8008154:	9301      	str	r3, [sp, #4]
 8008156:	9b00      	ldr	r3, [sp, #0]
 8008158:	444b      	add	r3, r9
 800815a:	9307      	str	r3, [sp, #28]
 800815c:	9b02      	ldr	r3, [sp, #8]
 800815e:	f003 0301 	and.w	r3, r3, #1
 8008162:	46b8      	mov	r8, r7
 8008164:	9306      	str	r3, [sp, #24]
 8008166:	4607      	mov	r7, r0
 8008168:	9b01      	ldr	r3, [sp, #4]
 800816a:	4631      	mov	r1, r6
 800816c:	3b01      	subs	r3, #1
 800816e:	4658      	mov	r0, fp
 8008170:	9302      	str	r3, [sp, #8]
 8008172:	f7ff fa67 	bl	8007644 <quorem>
 8008176:	4603      	mov	r3, r0
 8008178:	3330      	adds	r3, #48	; 0x30
 800817a:	9004      	str	r0, [sp, #16]
 800817c:	4641      	mov	r1, r8
 800817e:	4658      	mov	r0, fp
 8008180:	9308      	str	r3, [sp, #32]
 8008182:	f000 fb63 	bl	800884c <__mcmp>
 8008186:	463a      	mov	r2, r7
 8008188:	4681      	mov	r9, r0
 800818a:	4631      	mov	r1, r6
 800818c:	4620      	mov	r0, r4
 800818e:	f000 fb79 	bl	8008884 <__mdiff>
 8008192:	68c2      	ldr	r2, [r0, #12]
 8008194:	9b08      	ldr	r3, [sp, #32]
 8008196:	4605      	mov	r5, r0
 8008198:	bb02      	cbnz	r2, 80081dc <_dtoa_r+0xa7c>
 800819a:	4601      	mov	r1, r0
 800819c:	4658      	mov	r0, fp
 800819e:	f000 fb55 	bl	800884c <__mcmp>
 80081a2:	9b08      	ldr	r3, [sp, #32]
 80081a4:	4602      	mov	r2, r0
 80081a6:	4629      	mov	r1, r5
 80081a8:	4620      	mov	r0, r4
 80081aa:	e9cd 3208 	strd	r3, r2, [sp, #32]
 80081ae:	f000 f90f 	bl	80083d0 <_Bfree>
 80081b2:	9b05      	ldr	r3, [sp, #20]
 80081b4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80081b6:	9d01      	ldr	r5, [sp, #4]
 80081b8:	ea43 0102 	orr.w	r1, r3, r2
 80081bc:	9b06      	ldr	r3, [sp, #24]
 80081be:	430b      	orrs	r3, r1
 80081c0:	9b08      	ldr	r3, [sp, #32]
 80081c2:	d10d      	bne.n	80081e0 <_dtoa_r+0xa80>
 80081c4:	2b39      	cmp	r3, #57	; 0x39
 80081c6:	d029      	beq.n	800821c <_dtoa_r+0xabc>
 80081c8:	f1b9 0f00 	cmp.w	r9, #0
 80081cc:	dd01      	ble.n	80081d2 <_dtoa_r+0xa72>
 80081ce:	9b04      	ldr	r3, [sp, #16]
 80081d0:	3331      	adds	r3, #49	; 0x31
 80081d2:	9a02      	ldr	r2, [sp, #8]
 80081d4:	7013      	strb	r3, [r2, #0]
 80081d6:	e774      	b.n	80080c2 <_dtoa_r+0x962>
 80081d8:	4638      	mov	r0, r7
 80081da:	e7b9      	b.n	8008150 <_dtoa_r+0x9f0>
 80081dc:	2201      	movs	r2, #1
 80081de:	e7e2      	b.n	80081a6 <_dtoa_r+0xa46>
 80081e0:	f1b9 0f00 	cmp.w	r9, #0
 80081e4:	db06      	blt.n	80081f4 <_dtoa_r+0xa94>
 80081e6:	9905      	ldr	r1, [sp, #20]
 80081e8:	ea41 0909 	orr.w	r9, r1, r9
 80081ec:	9906      	ldr	r1, [sp, #24]
 80081ee:	ea59 0101 	orrs.w	r1, r9, r1
 80081f2:	d120      	bne.n	8008236 <_dtoa_r+0xad6>
 80081f4:	2a00      	cmp	r2, #0
 80081f6:	ddec      	ble.n	80081d2 <_dtoa_r+0xa72>
 80081f8:	4659      	mov	r1, fp
 80081fa:	2201      	movs	r2, #1
 80081fc:	4620      	mov	r0, r4
 80081fe:	9301      	str	r3, [sp, #4]
 8008200:	f000 fab8 	bl	8008774 <__lshift>
 8008204:	4631      	mov	r1, r6
 8008206:	4683      	mov	fp, r0
 8008208:	f000 fb20 	bl	800884c <__mcmp>
 800820c:	2800      	cmp	r0, #0
 800820e:	9b01      	ldr	r3, [sp, #4]
 8008210:	dc02      	bgt.n	8008218 <_dtoa_r+0xab8>
 8008212:	d1de      	bne.n	80081d2 <_dtoa_r+0xa72>
 8008214:	07da      	lsls	r2, r3, #31
 8008216:	d5dc      	bpl.n	80081d2 <_dtoa_r+0xa72>
 8008218:	2b39      	cmp	r3, #57	; 0x39
 800821a:	d1d8      	bne.n	80081ce <_dtoa_r+0xa6e>
 800821c:	9a02      	ldr	r2, [sp, #8]
 800821e:	2339      	movs	r3, #57	; 0x39
 8008220:	7013      	strb	r3, [r2, #0]
 8008222:	462b      	mov	r3, r5
 8008224:	461d      	mov	r5, r3
 8008226:	3b01      	subs	r3, #1
 8008228:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800822c:	2a39      	cmp	r2, #57	; 0x39
 800822e:	d050      	beq.n	80082d2 <_dtoa_r+0xb72>
 8008230:	3201      	adds	r2, #1
 8008232:	701a      	strb	r2, [r3, #0]
 8008234:	e745      	b.n	80080c2 <_dtoa_r+0x962>
 8008236:	2a00      	cmp	r2, #0
 8008238:	dd03      	ble.n	8008242 <_dtoa_r+0xae2>
 800823a:	2b39      	cmp	r3, #57	; 0x39
 800823c:	d0ee      	beq.n	800821c <_dtoa_r+0xabc>
 800823e:	3301      	adds	r3, #1
 8008240:	e7c7      	b.n	80081d2 <_dtoa_r+0xa72>
 8008242:	9a01      	ldr	r2, [sp, #4]
 8008244:	9907      	ldr	r1, [sp, #28]
 8008246:	f802 3c01 	strb.w	r3, [r2, #-1]
 800824a:	428a      	cmp	r2, r1
 800824c:	d02a      	beq.n	80082a4 <_dtoa_r+0xb44>
 800824e:	4659      	mov	r1, fp
 8008250:	2300      	movs	r3, #0
 8008252:	220a      	movs	r2, #10
 8008254:	4620      	mov	r0, r4
 8008256:	f000 f8dd 	bl	8008414 <__multadd>
 800825a:	45b8      	cmp	r8, r7
 800825c:	4683      	mov	fp, r0
 800825e:	f04f 0300 	mov.w	r3, #0
 8008262:	f04f 020a 	mov.w	r2, #10
 8008266:	4641      	mov	r1, r8
 8008268:	4620      	mov	r0, r4
 800826a:	d107      	bne.n	800827c <_dtoa_r+0xb1c>
 800826c:	f000 f8d2 	bl	8008414 <__multadd>
 8008270:	4680      	mov	r8, r0
 8008272:	4607      	mov	r7, r0
 8008274:	9b01      	ldr	r3, [sp, #4]
 8008276:	3301      	adds	r3, #1
 8008278:	9301      	str	r3, [sp, #4]
 800827a:	e775      	b.n	8008168 <_dtoa_r+0xa08>
 800827c:	f000 f8ca 	bl	8008414 <__multadd>
 8008280:	4639      	mov	r1, r7
 8008282:	4680      	mov	r8, r0
 8008284:	2300      	movs	r3, #0
 8008286:	220a      	movs	r2, #10
 8008288:	4620      	mov	r0, r4
 800828a:	f000 f8c3 	bl	8008414 <__multadd>
 800828e:	4607      	mov	r7, r0
 8008290:	e7f0      	b.n	8008274 <_dtoa_r+0xb14>
 8008292:	f1b9 0f00 	cmp.w	r9, #0
 8008296:	9a00      	ldr	r2, [sp, #0]
 8008298:	bfcc      	ite	gt
 800829a:	464d      	movgt	r5, r9
 800829c:	2501      	movle	r5, #1
 800829e:	4415      	add	r5, r2
 80082a0:	f04f 0800 	mov.w	r8, #0
 80082a4:	4659      	mov	r1, fp
 80082a6:	2201      	movs	r2, #1
 80082a8:	4620      	mov	r0, r4
 80082aa:	9301      	str	r3, [sp, #4]
 80082ac:	f000 fa62 	bl	8008774 <__lshift>
 80082b0:	4631      	mov	r1, r6
 80082b2:	4683      	mov	fp, r0
 80082b4:	f000 faca 	bl	800884c <__mcmp>
 80082b8:	2800      	cmp	r0, #0
 80082ba:	dcb2      	bgt.n	8008222 <_dtoa_r+0xac2>
 80082bc:	d102      	bne.n	80082c4 <_dtoa_r+0xb64>
 80082be:	9b01      	ldr	r3, [sp, #4]
 80082c0:	07db      	lsls	r3, r3, #31
 80082c2:	d4ae      	bmi.n	8008222 <_dtoa_r+0xac2>
 80082c4:	462b      	mov	r3, r5
 80082c6:	461d      	mov	r5, r3
 80082c8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80082cc:	2a30      	cmp	r2, #48	; 0x30
 80082ce:	d0fa      	beq.n	80082c6 <_dtoa_r+0xb66>
 80082d0:	e6f7      	b.n	80080c2 <_dtoa_r+0x962>
 80082d2:	9a00      	ldr	r2, [sp, #0]
 80082d4:	429a      	cmp	r2, r3
 80082d6:	d1a5      	bne.n	8008224 <_dtoa_r+0xac4>
 80082d8:	f10a 0a01 	add.w	sl, sl, #1
 80082dc:	2331      	movs	r3, #49	; 0x31
 80082de:	e779      	b.n	80081d4 <_dtoa_r+0xa74>
 80082e0:	4b13      	ldr	r3, [pc, #76]	; (8008330 <_dtoa_r+0xbd0>)
 80082e2:	f7ff baaf 	b.w	8007844 <_dtoa_r+0xe4>
 80082e6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80082e8:	2b00      	cmp	r3, #0
 80082ea:	f47f aa86 	bne.w	80077fa <_dtoa_r+0x9a>
 80082ee:	4b11      	ldr	r3, [pc, #68]	; (8008334 <_dtoa_r+0xbd4>)
 80082f0:	f7ff baa8 	b.w	8007844 <_dtoa_r+0xe4>
 80082f4:	f1b9 0f00 	cmp.w	r9, #0
 80082f8:	dc03      	bgt.n	8008302 <_dtoa_r+0xba2>
 80082fa:	9b05      	ldr	r3, [sp, #20]
 80082fc:	2b02      	cmp	r3, #2
 80082fe:	f73f aec9 	bgt.w	8008094 <_dtoa_r+0x934>
 8008302:	9d00      	ldr	r5, [sp, #0]
 8008304:	4631      	mov	r1, r6
 8008306:	4658      	mov	r0, fp
 8008308:	f7ff f99c 	bl	8007644 <quorem>
 800830c:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8008310:	f805 3b01 	strb.w	r3, [r5], #1
 8008314:	9a00      	ldr	r2, [sp, #0]
 8008316:	1aaa      	subs	r2, r5, r2
 8008318:	4591      	cmp	r9, r2
 800831a:	ddba      	ble.n	8008292 <_dtoa_r+0xb32>
 800831c:	4659      	mov	r1, fp
 800831e:	2300      	movs	r3, #0
 8008320:	220a      	movs	r2, #10
 8008322:	4620      	mov	r0, r4
 8008324:	f000 f876 	bl	8008414 <__multadd>
 8008328:	4683      	mov	fp, r0
 800832a:	e7eb      	b.n	8008304 <_dtoa_r+0xba4>
 800832c:	0800b0e7 	.word	0x0800b0e7
 8008330:	0800b040 	.word	0x0800b040
 8008334:	0800b064 	.word	0x0800b064

08008338 <_localeconv_r>:
 8008338:	4800      	ldr	r0, [pc, #0]	; (800833c <_localeconv_r+0x4>)
 800833a:	4770      	bx	lr
 800833c:	20000164 	.word	0x20000164

08008340 <malloc>:
 8008340:	4b02      	ldr	r3, [pc, #8]	; (800834c <malloc+0xc>)
 8008342:	4601      	mov	r1, r0
 8008344:	6818      	ldr	r0, [r3, #0]
 8008346:	f000 bbe1 	b.w	8008b0c <_malloc_r>
 800834a:	bf00      	nop
 800834c:	20000010 	.word	0x20000010

08008350 <_Balloc>:
 8008350:	b570      	push	{r4, r5, r6, lr}
 8008352:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8008354:	4604      	mov	r4, r0
 8008356:	460d      	mov	r5, r1
 8008358:	b976      	cbnz	r6, 8008378 <_Balloc+0x28>
 800835a:	2010      	movs	r0, #16
 800835c:	f7ff fff0 	bl	8008340 <malloc>
 8008360:	4602      	mov	r2, r0
 8008362:	6260      	str	r0, [r4, #36]	; 0x24
 8008364:	b920      	cbnz	r0, 8008370 <_Balloc+0x20>
 8008366:	4b18      	ldr	r3, [pc, #96]	; (80083c8 <_Balloc+0x78>)
 8008368:	4818      	ldr	r0, [pc, #96]	; (80083cc <_Balloc+0x7c>)
 800836a:	2166      	movs	r1, #102	; 0x66
 800836c:	f000 fd94 	bl	8008e98 <__assert_func>
 8008370:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008374:	6006      	str	r6, [r0, #0]
 8008376:	60c6      	str	r6, [r0, #12]
 8008378:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800837a:	68f3      	ldr	r3, [r6, #12]
 800837c:	b183      	cbz	r3, 80083a0 <_Balloc+0x50>
 800837e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008380:	68db      	ldr	r3, [r3, #12]
 8008382:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8008386:	b9b8      	cbnz	r0, 80083b8 <_Balloc+0x68>
 8008388:	2101      	movs	r1, #1
 800838a:	fa01 f605 	lsl.w	r6, r1, r5
 800838e:	1d72      	adds	r2, r6, #5
 8008390:	0092      	lsls	r2, r2, #2
 8008392:	4620      	mov	r0, r4
 8008394:	f000 fb5a 	bl	8008a4c <_calloc_r>
 8008398:	b160      	cbz	r0, 80083b4 <_Balloc+0x64>
 800839a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800839e:	e00e      	b.n	80083be <_Balloc+0x6e>
 80083a0:	2221      	movs	r2, #33	; 0x21
 80083a2:	2104      	movs	r1, #4
 80083a4:	4620      	mov	r0, r4
 80083a6:	f000 fb51 	bl	8008a4c <_calloc_r>
 80083aa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80083ac:	60f0      	str	r0, [r6, #12]
 80083ae:	68db      	ldr	r3, [r3, #12]
 80083b0:	2b00      	cmp	r3, #0
 80083b2:	d1e4      	bne.n	800837e <_Balloc+0x2e>
 80083b4:	2000      	movs	r0, #0
 80083b6:	bd70      	pop	{r4, r5, r6, pc}
 80083b8:	6802      	ldr	r2, [r0, #0]
 80083ba:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80083be:	2300      	movs	r3, #0
 80083c0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80083c4:	e7f7      	b.n	80083b6 <_Balloc+0x66>
 80083c6:	bf00      	nop
 80083c8:	0800b071 	.word	0x0800b071
 80083cc:	0800b0f8 	.word	0x0800b0f8

080083d0 <_Bfree>:
 80083d0:	b570      	push	{r4, r5, r6, lr}
 80083d2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80083d4:	4605      	mov	r5, r0
 80083d6:	460c      	mov	r4, r1
 80083d8:	b976      	cbnz	r6, 80083f8 <_Bfree+0x28>
 80083da:	2010      	movs	r0, #16
 80083dc:	f7ff ffb0 	bl	8008340 <malloc>
 80083e0:	4602      	mov	r2, r0
 80083e2:	6268      	str	r0, [r5, #36]	; 0x24
 80083e4:	b920      	cbnz	r0, 80083f0 <_Bfree+0x20>
 80083e6:	4b09      	ldr	r3, [pc, #36]	; (800840c <_Bfree+0x3c>)
 80083e8:	4809      	ldr	r0, [pc, #36]	; (8008410 <_Bfree+0x40>)
 80083ea:	218a      	movs	r1, #138	; 0x8a
 80083ec:	f000 fd54 	bl	8008e98 <__assert_func>
 80083f0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80083f4:	6006      	str	r6, [r0, #0]
 80083f6:	60c6      	str	r6, [r0, #12]
 80083f8:	b13c      	cbz	r4, 800840a <_Bfree+0x3a>
 80083fa:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80083fc:	6862      	ldr	r2, [r4, #4]
 80083fe:	68db      	ldr	r3, [r3, #12]
 8008400:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008404:	6021      	str	r1, [r4, #0]
 8008406:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800840a:	bd70      	pop	{r4, r5, r6, pc}
 800840c:	0800b071 	.word	0x0800b071
 8008410:	0800b0f8 	.word	0x0800b0f8

08008414 <__multadd>:
 8008414:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008418:	690e      	ldr	r6, [r1, #16]
 800841a:	4607      	mov	r7, r0
 800841c:	4698      	mov	r8, r3
 800841e:	460c      	mov	r4, r1
 8008420:	f101 0014 	add.w	r0, r1, #20
 8008424:	2300      	movs	r3, #0
 8008426:	6805      	ldr	r5, [r0, #0]
 8008428:	b2a9      	uxth	r1, r5
 800842a:	fb02 8101 	mla	r1, r2, r1, r8
 800842e:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 8008432:	0c2d      	lsrs	r5, r5, #16
 8008434:	fb02 c505 	mla	r5, r2, r5, ip
 8008438:	b289      	uxth	r1, r1
 800843a:	3301      	adds	r3, #1
 800843c:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8008440:	429e      	cmp	r6, r3
 8008442:	f840 1b04 	str.w	r1, [r0], #4
 8008446:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800844a:	dcec      	bgt.n	8008426 <__multadd+0x12>
 800844c:	f1b8 0f00 	cmp.w	r8, #0
 8008450:	d022      	beq.n	8008498 <__multadd+0x84>
 8008452:	68a3      	ldr	r3, [r4, #8]
 8008454:	42b3      	cmp	r3, r6
 8008456:	dc19      	bgt.n	800848c <__multadd+0x78>
 8008458:	6861      	ldr	r1, [r4, #4]
 800845a:	4638      	mov	r0, r7
 800845c:	3101      	adds	r1, #1
 800845e:	f7ff ff77 	bl	8008350 <_Balloc>
 8008462:	4605      	mov	r5, r0
 8008464:	b928      	cbnz	r0, 8008472 <__multadd+0x5e>
 8008466:	4602      	mov	r2, r0
 8008468:	4b0d      	ldr	r3, [pc, #52]	; (80084a0 <__multadd+0x8c>)
 800846a:	480e      	ldr	r0, [pc, #56]	; (80084a4 <__multadd+0x90>)
 800846c:	21b5      	movs	r1, #181	; 0xb5
 800846e:	f000 fd13 	bl	8008e98 <__assert_func>
 8008472:	6922      	ldr	r2, [r4, #16]
 8008474:	3202      	adds	r2, #2
 8008476:	f104 010c 	add.w	r1, r4, #12
 800847a:	0092      	lsls	r2, r2, #2
 800847c:	300c      	adds	r0, #12
 800847e:	f7fe fc41 	bl	8006d04 <memcpy>
 8008482:	4621      	mov	r1, r4
 8008484:	4638      	mov	r0, r7
 8008486:	f7ff ffa3 	bl	80083d0 <_Bfree>
 800848a:	462c      	mov	r4, r5
 800848c:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8008490:	3601      	adds	r6, #1
 8008492:	f8c3 8014 	str.w	r8, [r3, #20]
 8008496:	6126      	str	r6, [r4, #16]
 8008498:	4620      	mov	r0, r4
 800849a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800849e:	bf00      	nop
 80084a0:	0800b0e7 	.word	0x0800b0e7
 80084a4:	0800b0f8 	.word	0x0800b0f8

080084a8 <__hi0bits>:
 80084a8:	0c03      	lsrs	r3, r0, #16
 80084aa:	041b      	lsls	r3, r3, #16
 80084ac:	b9d3      	cbnz	r3, 80084e4 <__hi0bits+0x3c>
 80084ae:	0400      	lsls	r0, r0, #16
 80084b0:	2310      	movs	r3, #16
 80084b2:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80084b6:	bf04      	itt	eq
 80084b8:	0200      	lsleq	r0, r0, #8
 80084ba:	3308      	addeq	r3, #8
 80084bc:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80084c0:	bf04      	itt	eq
 80084c2:	0100      	lsleq	r0, r0, #4
 80084c4:	3304      	addeq	r3, #4
 80084c6:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80084ca:	bf04      	itt	eq
 80084cc:	0080      	lsleq	r0, r0, #2
 80084ce:	3302      	addeq	r3, #2
 80084d0:	2800      	cmp	r0, #0
 80084d2:	db05      	blt.n	80084e0 <__hi0bits+0x38>
 80084d4:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80084d8:	f103 0301 	add.w	r3, r3, #1
 80084dc:	bf08      	it	eq
 80084de:	2320      	moveq	r3, #32
 80084e0:	4618      	mov	r0, r3
 80084e2:	4770      	bx	lr
 80084e4:	2300      	movs	r3, #0
 80084e6:	e7e4      	b.n	80084b2 <__hi0bits+0xa>

080084e8 <__lo0bits>:
 80084e8:	6803      	ldr	r3, [r0, #0]
 80084ea:	f013 0207 	ands.w	r2, r3, #7
 80084ee:	4601      	mov	r1, r0
 80084f0:	d00b      	beq.n	800850a <__lo0bits+0x22>
 80084f2:	07da      	lsls	r2, r3, #31
 80084f4:	d424      	bmi.n	8008540 <__lo0bits+0x58>
 80084f6:	0798      	lsls	r0, r3, #30
 80084f8:	bf49      	itett	mi
 80084fa:	085b      	lsrmi	r3, r3, #1
 80084fc:	089b      	lsrpl	r3, r3, #2
 80084fe:	2001      	movmi	r0, #1
 8008500:	600b      	strmi	r3, [r1, #0]
 8008502:	bf5c      	itt	pl
 8008504:	600b      	strpl	r3, [r1, #0]
 8008506:	2002      	movpl	r0, #2
 8008508:	4770      	bx	lr
 800850a:	b298      	uxth	r0, r3
 800850c:	b9b0      	cbnz	r0, 800853c <__lo0bits+0x54>
 800850e:	0c1b      	lsrs	r3, r3, #16
 8008510:	2010      	movs	r0, #16
 8008512:	f013 0fff 	tst.w	r3, #255	; 0xff
 8008516:	bf04      	itt	eq
 8008518:	0a1b      	lsreq	r3, r3, #8
 800851a:	3008      	addeq	r0, #8
 800851c:	071a      	lsls	r2, r3, #28
 800851e:	bf04      	itt	eq
 8008520:	091b      	lsreq	r3, r3, #4
 8008522:	3004      	addeq	r0, #4
 8008524:	079a      	lsls	r2, r3, #30
 8008526:	bf04      	itt	eq
 8008528:	089b      	lsreq	r3, r3, #2
 800852a:	3002      	addeq	r0, #2
 800852c:	07da      	lsls	r2, r3, #31
 800852e:	d403      	bmi.n	8008538 <__lo0bits+0x50>
 8008530:	085b      	lsrs	r3, r3, #1
 8008532:	f100 0001 	add.w	r0, r0, #1
 8008536:	d005      	beq.n	8008544 <__lo0bits+0x5c>
 8008538:	600b      	str	r3, [r1, #0]
 800853a:	4770      	bx	lr
 800853c:	4610      	mov	r0, r2
 800853e:	e7e8      	b.n	8008512 <__lo0bits+0x2a>
 8008540:	2000      	movs	r0, #0
 8008542:	4770      	bx	lr
 8008544:	2020      	movs	r0, #32
 8008546:	4770      	bx	lr

08008548 <__i2b>:
 8008548:	b510      	push	{r4, lr}
 800854a:	460c      	mov	r4, r1
 800854c:	2101      	movs	r1, #1
 800854e:	f7ff feff 	bl	8008350 <_Balloc>
 8008552:	4602      	mov	r2, r0
 8008554:	b928      	cbnz	r0, 8008562 <__i2b+0x1a>
 8008556:	4b05      	ldr	r3, [pc, #20]	; (800856c <__i2b+0x24>)
 8008558:	4805      	ldr	r0, [pc, #20]	; (8008570 <__i2b+0x28>)
 800855a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800855e:	f000 fc9b 	bl	8008e98 <__assert_func>
 8008562:	2301      	movs	r3, #1
 8008564:	6144      	str	r4, [r0, #20]
 8008566:	6103      	str	r3, [r0, #16]
 8008568:	bd10      	pop	{r4, pc}
 800856a:	bf00      	nop
 800856c:	0800b0e7 	.word	0x0800b0e7
 8008570:	0800b0f8 	.word	0x0800b0f8

08008574 <__multiply>:
 8008574:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008578:	4614      	mov	r4, r2
 800857a:	690a      	ldr	r2, [r1, #16]
 800857c:	6923      	ldr	r3, [r4, #16]
 800857e:	429a      	cmp	r2, r3
 8008580:	bfb8      	it	lt
 8008582:	460b      	movlt	r3, r1
 8008584:	460d      	mov	r5, r1
 8008586:	bfbc      	itt	lt
 8008588:	4625      	movlt	r5, r4
 800858a:	461c      	movlt	r4, r3
 800858c:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8008590:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8008594:	68ab      	ldr	r3, [r5, #8]
 8008596:	6869      	ldr	r1, [r5, #4]
 8008598:	eb0a 0709 	add.w	r7, sl, r9
 800859c:	42bb      	cmp	r3, r7
 800859e:	b085      	sub	sp, #20
 80085a0:	bfb8      	it	lt
 80085a2:	3101      	addlt	r1, #1
 80085a4:	f7ff fed4 	bl	8008350 <_Balloc>
 80085a8:	b930      	cbnz	r0, 80085b8 <__multiply+0x44>
 80085aa:	4602      	mov	r2, r0
 80085ac:	4b42      	ldr	r3, [pc, #264]	; (80086b8 <__multiply+0x144>)
 80085ae:	4843      	ldr	r0, [pc, #268]	; (80086bc <__multiply+0x148>)
 80085b0:	f240 115d 	movw	r1, #349	; 0x15d
 80085b4:	f000 fc70 	bl	8008e98 <__assert_func>
 80085b8:	f100 0614 	add.w	r6, r0, #20
 80085bc:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 80085c0:	4633      	mov	r3, r6
 80085c2:	2200      	movs	r2, #0
 80085c4:	4543      	cmp	r3, r8
 80085c6:	d31e      	bcc.n	8008606 <__multiply+0x92>
 80085c8:	f105 0c14 	add.w	ip, r5, #20
 80085cc:	f104 0314 	add.w	r3, r4, #20
 80085d0:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 80085d4:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 80085d8:	9202      	str	r2, [sp, #8]
 80085da:	ebac 0205 	sub.w	r2, ip, r5
 80085de:	3a15      	subs	r2, #21
 80085e0:	f022 0203 	bic.w	r2, r2, #3
 80085e4:	3204      	adds	r2, #4
 80085e6:	f105 0115 	add.w	r1, r5, #21
 80085ea:	458c      	cmp	ip, r1
 80085ec:	bf38      	it	cc
 80085ee:	2204      	movcc	r2, #4
 80085f0:	9201      	str	r2, [sp, #4]
 80085f2:	9a02      	ldr	r2, [sp, #8]
 80085f4:	9303      	str	r3, [sp, #12]
 80085f6:	429a      	cmp	r2, r3
 80085f8:	d808      	bhi.n	800860c <__multiply+0x98>
 80085fa:	2f00      	cmp	r7, #0
 80085fc:	dc55      	bgt.n	80086aa <__multiply+0x136>
 80085fe:	6107      	str	r7, [r0, #16]
 8008600:	b005      	add	sp, #20
 8008602:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008606:	f843 2b04 	str.w	r2, [r3], #4
 800860a:	e7db      	b.n	80085c4 <__multiply+0x50>
 800860c:	f8b3 a000 	ldrh.w	sl, [r3]
 8008610:	f1ba 0f00 	cmp.w	sl, #0
 8008614:	d020      	beq.n	8008658 <__multiply+0xe4>
 8008616:	f105 0e14 	add.w	lr, r5, #20
 800861a:	46b1      	mov	r9, r6
 800861c:	2200      	movs	r2, #0
 800861e:	f85e 4b04 	ldr.w	r4, [lr], #4
 8008622:	f8d9 b000 	ldr.w	fp, [r9]
 8008626:	b2a1      	uxth	r1, r4
 8008628:	fa1f fb8b 	uxth.w	fp, fp
 800862c:	fb0a b101 	mla	r1, sl, r1, fp
 8008630:	4411      	add	r1, r2
 8008632:	f8d9 2000 	ldr.w	r2, [r9]
 8008636:	0c24      	lsrs	r4, r4, #16
 8008638:	0c12      	lsrs	r2, r2, #16
 800863a:	fb0a 2404 	mla	r4, sl, r4, r2
 800863e:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8008642:	b289      	uxth	r1, r1
 8008644:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8008648:	45f4      	cmp	ip, lr
 800864a:	f849 1b04 	str.w	r1, [r9], #4
 800864e:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8008652:	d8e4      	bhi.n	800861e <__multiply+0xaa>
 8008654:	9901      	ldr	r1, [sp, #4]
 8008656:	5072      	str	r2, [r6, r1]
 8008658:	9a03      	ldr	r2, [sp, #12]
 800865a:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800865e:	3304      	adds	r3, #4
 8008660:	f1b9 0f00 	cmp.w	r9, #0
 8008664:	d01f      	beq.n	80086a6 <__multiply+0x132>
 8008666:	6834      	ldr	r4, [r6, #0]
 8008668:	f105 0114 	add.w	r1, r5, #20
 800866c:	46b6      	mov	lr, r6
 800866e:	f04f 0a00 	mov.w	sl, #0
 8008672:	880a      	ldrh	r2, [r1, #0]
 8008674:	f8be b002 	ldrh.w	fp, [lr, #2]
 8008678:	fb09 b202 	mla	r2, r9, r2, fp
 800867c:	4492      	add	sl, r2
 800867e:	b2a4      	uxth	r4, r4
 8008680:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8008684:	f84e 4b04 	str.w	r4, [lr], #4
 8008688:	f851 4b04 	ldr.w	r4, [r1], #4
 800868c:	f8be 2000 	ldrh.w	r2, [lr]
 8008690:	0c24      	lsrs	r4, r4, #16
 8008692:	fb09 2404 	mla	r4, r9, r4, r2
 8008696:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800869a:	458c      	cmp	ip, r1
 800869c:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 80086a0:	d8e7      	bhi.n	8008672 <__multiply+0xfe>
 80086a2:	9a01      	ldr	r2, [sp, #4]
 80086a4:	50b4      	str	r4, [r6, r2]
 80086a6:	3604      	adds	r6, #4
 80086a8:	e7a3      	b.n	80085f2 <__multiply+0x7e>
 80086aa:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80086ae:	2b00      	cmp	r3, #0
 80086b0:	d1a5      	bne.n	80085fe <__multiply+0x8a>
 80086b2:	3f01      	subs	r7, #1
 80086b4:	e7a1      	b.n	80085fa <__multiply+0x86>
 80086b6:	bf00      	nop
 80086b8:	0800b0e7 	.word	0x0800b0e7
 80086bc:	0800b0f8 	.word	0x0800b0f8

080086c0 <__pow5mult>:
 80086c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80086c4:	4615      	mov	r5, r2
 80086c6:	f012 0203 	ands.w	r2, r2, #3
 80086ca:	4606      	mov	r6, r0
 80086cc:	460f      	mov	r7, r1
 80086ce:	d007      	beq.n	80086e0 <__pow5mult+0x20>
 80086d0:	4c25      	ldr	r4, [pc, #148]	; (8008768 <__pow5mult+0xa8>)
 80086d2:	3a01      	subs	r2, #1
 80086d4:	2300      	movs	r3, #0
 80086d6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80086da:	f7ff fe9b 	bl	8008414 <__multadd>
 80086de:	4607      	mov	r7, r0
 80086e0:	10ad      	asrs	r5, r5, #2
 80086e2:	d03d      	beq.n	8008760 <__pow5mult+0xa0>
 80086e4:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80086e6:	b97c      	cbnz	r4, 8008708 <__pow5mult+0x48>
 80086e8:	2010      	movs	r0, #16
 80086ea:	f7ff fe29 	bl	8008340 <malloc>
 80086ee:	4602      	mov	r2, r0
 80086f0:	6270      	str	r0, [r6, #36]	; 0x24
 80086f2:	b928      	cbnz	r0, 8008700 <__pow5mult+0x40>
 80086f4:	4b1d      	ldr	r3, [pc, #116]	; (800876c <__pow5mult+0xac>)
 80086f6:	481e      	ldr	r0, [pc, #120]	; (8008770 <__pow5mult+0xb0>)
 80086f8:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80086fc:	f000 fbcc 	bl	8008e98 <__assert_func>
 8008700:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008704:	6004      	str	r4, [r0, #0]
 8008706:	60c4      	str	r4, [r0, #12]
 8008708:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800870c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008710:	b94c      	cbnz	r4, 8008726 <__pow5mult+0x66>
 8008712:	f240 2171 	movw	r1, #625	; 0x271
 8008716:	4630      	mov	r0, r6
 8008718:	f7ff ff16 	bl	8008548 <__i2b>
 800871c:	2300      	movs	r3, #0
 800871e:	f8c8 0008 	str.w	r0, [r8, #8]
 8008722:	4604      	mov	r4, r0
 8008724:	6003      	str	r3, [r0, #0]
 8008726:	f04f 0900 	mov.w	r9, #0
 800872a:	07eb      	lsls	r3, r5, #31
 800872c:	d50a      	bpl.n	8008744 <__pow5mult+0x84>
 800872e:	4639      	mov	r1, r7
 8008730:	4622      	mov	r2, r4
 8008732:	4630      	mov	r0, r6
 8008734:	f7ff ff1e 	bl	8008574 <__multiply>
 8008738:	4639      	mov	r1, r7
 800873a:	4680      	mov	r8, r0
 800873c:	4630      	mov	r0, r6
 800873e:	f7ff fe47 	bl	80083d0 <_Bfree>
 8008742:	4647      	mov	r7, r8
 8008744:	106d      	asrs	r5, r5, #1
 8008746:	d00b      	beq.n	8008760 <__pow5mult+0xa0>
 8008748:	6820      	ldr	r0, [r4, #0]
 800874a:	b938      	cbnz	r0, 800875c <__pow5mult+0x9c>
 800874c:	4622      	mov	r2, r4
 800874e:	4621      	mov	r1, r4
 8008750:	4630      	mov	r0, r6
 8008752:	f7ff ff0f 	bl	8008574 <__multiply>
 8008756:	6020      	str	r0, [r4, #0]
 8008758:	f8c0 9000 	str.w	r9, [r0]
 800875c:	4604      	mov	r4, r0
 800875e:	e7e4      	b.n	800872a <__pow5mult+0x6a>
 8008760:	4638      	mov	r0, r7
 8008762:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008766:	bf00      	nop
 8008768:	0800b248 	.word	0x0800b248
 800876c:	0800b071 	.word	0x0800b071
 8008770:	0800b0f8 	.word	0x0800b0f8

08008774 <__lshift>:
 8008774:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008778:	460c      	mov	r4, r1
 800877a:	6849      	ldr	r1, [r1, #4]
 800877c:	6923      	ldr	r3, [r4, #16]
 800877e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8008782:	68a3      	ldr	r3, [r4, #8]
 8008784:	4607      	mov	r7, r0
 8008786:	4691      	mov	r9, r2
 8008788:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800878c:	f108 0601 	add.w	r6, r8, #1
 8008790:	42b3      	cmp	r3, r6
 8008792:	db0b      	blt.n	80087ac <__lshift+0x38>
 8008794:	4638      	mov	r0, r7
 8008796:	f7ff fddb 	bl	8008350 <_Balloc>
 800879a:	4605      	mov	r5, r0
 800879c:	b948      	cbnz	r0, 80087b2 <__lshift+0x3e>
 800879e:	4602      	mov	r2, r0
 80087a0:	4b28      	ldr	r3, [pc, #160]	; (8008844 <__lshift+0xd0>)
 80087a2:	4829      	ldr	r0, [pc, #164]	; (8008848 <__lshift+0xd4>)
 80087a4:	f240 11d9 	movw	r1, #473	; 0x1d9
 80087a8:	f000 fb76 	bl	8008e98 <__assert_func>
 80087ac:	3101      	adds	r1, #1
 80087ae:	005b      	lsls	r3, r3, #1
 80087b0:	e7ee      	b.n	8008790 <__lshift+0x1c>
 80087b2:	2300      	movs	r3, #0
 80087b4:	f100 0114 	add.w	r1, r0, #20
 80087b8:	f100 0210 	add.w	r2, r0, #16
 80087bc:	4618      	mov	r0, r3
 80087be:	4553      	cmp	r3, sl
 80087c0:	db33      	blt.n	800882a <__lshift+0xb6>
 80087c2:	6920      	ldr	r0, [r4, #16]
 80087c4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80087c8:	f104 0314 	add.w	r3, r4, #20
 80087cc:	f019 091f 	ands.w	r9, r9, #31
 80087d0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80087d4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80087d8:	d02b      	beq.n	8008832 <__lshift+0xbe>
 80087da:	f1c9 0e20 	rsb	lr, r9, #32
 80087de:	468a      	mov	sl, r1
 80087e0:	2200      	movs	r2, #0
 80087e2:	6818      	ldr	r0, [r3, #0]
 80087e4:	fa00 f009 	lsl.w	r0, r0, r9
 80087e8:	4302      	orrs	r2, r0
 80087ea:	f84a 2b04 	str.w	r2, [sl], #4
 80087ee:	f853 2b04 	ldr.w	r2, [r3], #4
 80087f2:	459c      	cmp	ip, r3
 80087f4:	fa22 f20e 	lsr.w	r2, r2, lr
 80087f8:	d8f3      	bhi.n	80087e2 <__lshift+0x6e>
 80087fa:	ebac 0304 	sub.w	r3, ip, r4
 80087fe:	3b15      	subs	r3, #21
 8008800:	f023 0303 	bic.w	r3, r3, #3
 8008804:	3304      	adds	r3, #4
 8008806:	f104 0015 	add.w	r0, r4, #21
 800880a:	4584      	cmp	ip, r0
 800880c:	bf38      	it	cc
 800880e:	2304      	movcc	r3, #4
 8008810:	50ca      	str	r2, [r1, r3]
 8008812:	b10a      	cbz	r2, 8008818 <__lshift+0xa4>
 8008814:	f108 0602 	add.w	r6, r8, #2
 8008818:	3e01      	subs	r6, #1
 800881a:	4638      	mov	r0, r7
 800881c:	612e      	str	r6, [r5, #16]
 800881e:	4621      	mov	r1, r4
 8008820:	f7ff fdd6 	bl	80083d0 <_Bfree>
 8008824:	4628      	mov	r0, r5
 8008826:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800882a:	f842 0f04 	str.w	r0, [r2, #4]!
 800882e:	3301      	adds	r3, #1
 8008830:	e7c5      	b.n	80087be <__lshift+0x4a>
 8008832:	3904      	subs	r1, #4
 8008834:	f853 2b04 	ldr.w	r2, [r3], #4
 8008838:	f841 2f04 	str.w	r2, [r1, #4]!
 800883c:	459c      	cmp	ip, r3
 800883e:	d8f9      	bhi.n	8008834 <__lshift+0xc0>
 8008840:	e7ea      	b.n	8008818 <__lshift+0xa4>
 8008842:	bf00      	nop
 8008844:	0800b0e7 	.word	0x0800b0e7
 8008848:	0800b0f8 	.word	0x0800b0f8

0800884c <__mcmp>:
 800884c:	b530      	push	{r4, r5, lr}
 800884e:	6902      	ldr	r2, [r0, #16]
 8008850:	690c      	ldr	r4, [r1, #16]
 8008852:	1b12      	subs	r2, r2, r4
 8008854:	d10e      	bne.n	8008874 <__mcmp+0x28>
 8008856:	f100 0314 	add.w	r3, r0, #20
 800885a:	3114      	adds	r1, #20
 800885c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8008860:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8008864:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8008868:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800886c:	42a5      	cmp	r5, r4
 800886e:	d003      	beq.n	8008878 <__mcmp+0x2c>
 8008870:	d305      	bcc.n	800887e <__mcmp+0x32>
 8008872:	2201      	movs	r2, #1
 8008874:	4610      	mov	r0, r2
 8008876:	bd30      	pop	{r4, r5, pc}
 8008878:	4283      	cmp	r3, r0
 800887a:	d3f3      	bcc.n	8008864 <__mcmp+0x18>
 800887c:	e7fa      	b.n	8008874 <__mcmp+0x28>
 800887e:	f04f 32ff 	mov.w	r2, #4294967295
 8008882:	e7f7      	b.n	8008874 <__mcmp+0x28>

08008884 <__mdiff>:
 8008884:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008888:	460c      	mov	r4, r1
 800888a:	4606      	mov	r6, r0
 800888c:	4611      	mov	r1, r2
 800888e:	4620      	mov	r0, r4
 8008890:	4617      	mov	r7, r2
 8008892:	f7ff ffdb 	bl	800884c <__mcmp>
 8008896:	1e05      	subs	r5, r0, #0
 8008898:	d110      	bne.n	80088bc <__mdiff+0x38>
 800889a:	4629      	mov	r1, r5
 800889c:	4630      	mov	r0, r6
 800889e:	f7ff fd57 	bl	8008350 <_Balloc>
 80088a2:	b930      	cbnz	r0, 80088b2 <__mdiff+0x2e>
 80088a4:	4b39      	ldr	r3, [pc, #228]	; (800898c <__mdiff+0x108>)
 80088a6:	4602      	mov	r2, r0
 80088a8:	f240 2132 	movw	r1, #562	; 0x232
 80088ac:	4838      	ldr	r0, [pc, #224]	; (8008990 <__mdiff+0x10c>)
 80088ae:	f000 faf3 	bl	8008e98 <__assert_func>
 80088b2:	2301      	movs	r3, #1
 80088b4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80088b8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80088bc:	bfa4      	itt	ge
 80088be:	463b      	movge	r3, r7
 80088c0:	4627      	movge	r7, r4
 80088c2:	4630      	mov	r0, r6
 80088c4:	6879      	ldr	r1, [r7, #4]
 80088c6:	bfa6      	itte	ge
 80088c8:	461c      	movge	r4, r3
 80088ca:	2500      	movge	r5, #0
 80088cc:	2501      	movlt	r5, #1
 80088ce:	f7ff fd3f 	bl	8008350 <_Balloc>
 80088d2:	b920      	cbnz	r0, 80088de <__mdiff+0x5a>
 80088d4:	4b2d      	ldr	r3, [pc, #180]	; (800898c <__mdiff+0x108>)
 80088d6:	4602      	mov	r2, r0
 80088d8:	f44f 7110 	mov.w	r1, #576	; 0x240
 80088dc:	e7e6      	b.n	80088ac <__mdiff+0x28>
 80088de:	693e      	ldr	r6, [r7, #16]
 80088e0:	60c5      	str	r5, [r0, #12]
 80088e2:	6925      	ldr	r5, [r4, #16]
 80088e4:	f107 0114 	add.w	r1, r7, #20
 80088e8:	f104 0914 	add.w	r9, r4, #20
 80088ec:	f100 0e14 	add.w	lr, r0, #20
 80088f0:	f107 0210 	add.w	r2, r7, #16
 80088f4:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 80088f8:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 80088fc:	46f2      	mov	sl, lr
 80088fe:	2700      	movs	r7, #0
 8008900:	f859 3b04 	ldr.w	r3, [r9], #4
 8008904:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8008908:	fa1f f883 	uxth.w	r8, r3
 800890c:	fa17 f78b 	uxtah	r7, r7, fp
 8008910:	0c1b      	lsrs	r3, r3, #16
 8008912:	eba7 0808 	sub.w	r8, r7, r8
 8008916:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800891a:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800891e:	fa1f f888 	uxth.w	r8, r8
 8008922:	141f      	asrs	r7, r3, #16
 8008924:	454d      	cmp	r5, r9
 8008926:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800892a:	f84a 3b04 	str.w	r3, [sl], #4
 800892e:	d8e7      	bhi.n	8008900 <__mdiff+0x7c>
 8008930:	1b2b      	subs	r3, r5, r4
 8008932:	3b15      	subs	r3, #21
 8008934:	f023 0303 	bic.w	r3, r3, #3
 8008938:	3304      	adds	r3, #4
 800893a:	3415      	adds	r4, #21
 800893c:	42a5      	cmp	r5, r4
 800893e:	bf38      	it	cc
 8008940:	2304      	movcc	r3, #4
 8008942:	4419      	add	r1, r3
 8008944:	4473      	add	r3, lr
 8008946:	469e      	mov	lr, r3
 8008948:	460d      	mov	r5, r1
 800894a:	4565      	cmp	r5, ip
 800894c:	d30e      	bcc.n	800896c <__mdiff+0xe8>
 800894e:	f10c 0203 	add.w	r2, ip, #3
 8008952:	1a52      	subs	r2, r2, r1
 8008954:	f022 0203 	bic.w	r2, r2, #3
 8008958:	3903      	subs	r1, #3
 800895a:	458c      	cmp	ip, r1
 800895c:	bf38      	it	cc
 800895e:	2200      	movcc	r2, #0
 8008960:	441a      	add	r2, r3
 8008962:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8008966:	b17b      	cbz	r3, 8008988 <__mdiff+0x104>
 8008968:	6106      	str	r6, [r0, #16]
 800896a:	e7a5      	b.n	80088b8 <__mdiff+0x34>
 800896c:	f855 8b04 	ldr.w	r8, [r5], #4
 8008970:	fa17 f488 	uxtah	r4, r7, r8
 8008974:	1422      	asrs	r2, r4, #16
 8008976:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 800897a:	b2a4      	uxth	r4, r4
 800897c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8008980:	f84e 4b04 	str.w	r4, [lr], #4
 8008984:	1417      	asrs	r7, r2, #16
 8008986:	e7e0      	b.n	800894a <__mdiff+0xc6>
 8008988:	3e01      	subs	r6, #1
 800898a:	e7ea      	b.n	8008962 <__mdiff+0xde>
 800898c:	0800b0e7 	.word	0x0800b0e7
 8008990:	0800b0f8 	.word	0x0800b0f8

08008994 <__d2b>:
 8008994:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008998:	4689      	mov	r9, r1
 800899a:	2101      	movs	r1, #1
 800899c:	ec57 6b10 	vmov	r6, r7, d0
 80089a0:	4690      	mov	r8, r2
 80089a2:	f7ff fcd5 	bl	8008350 <_Balloc>
 80089a6:	4604      	mov	r4, r0
 80089a8:	b930      	cbnz	r0, 80089b8 <__d2b+0x24>
 80089aa:	4602      	mov	r2, r0
 80089ac:	4b25      	ldr	r3, [pc, #148]	; (8008a44 <__d2b+0xb0>)
 80089ae:	4826      	ldr	r0, [pc, #152]	; (8008a48 <__d2b+0xb4>)
 80089b0:	f240 310a 	movw	r1, #778	; 0x30a
 80089b4:	f000 fa70 	bl	8008e98 <__assert_func>
 80089b8:	f3c7 550a 	ubfx	r5, r7, #20, #11
 80089bc:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80089c0:	bb35      	cbnz	r5, 8008a10 <__d2b+0x7c>
 80089c2:	2e00      	cmp	r6, #0
 80089c4:	9301      	str	r3, [sp, #4]
 80089c6:	d028      	beq.n	8008a1a <__d2b+0x86>
 80089c8:	4668      	mov	r0, sp
 80089ca:	9600      	str	r6, [sp, #0]
 80089cc:	f7ff fd8c 	bl	80084e8 <__lo0bits>
 80089d0:	9900      	ldr	r1, [sp, #0]
 80089d2:	b300      	cbz	r0, 8008a16 <__d2b+0x82>
 80089d4:	9a01      	ldr	r2, [sp, #4]
 80089d6:	f1c0 0320 	rsb	r3, r0, #32
 80089da:	fa02 f303 	lsl.w	r3, r2, r3
 80089de:	430b      	orrs	r3, r1
 80089e0:	40c2      	lsrs	r2, r0
 80089e2:	6163      	str	r3, [r4, #20]
 80089e4:	9201      	str	r2, [sp, #4]
 80089e6:	9b01      	ldr	r3, [sp, #4]
 80089e8:	61a3      	str	r3, [r4, #24]
 80089ea:	2b00      	cmp	r3, #0
 80089ec:	bf14      	ite	ne
 80089ee:	2202      	movne	r2, #2
 80089f0:	2201      	moveq	r2, #1
 80089f2:	6122      	str	r2, [r4, #16]
 80089f4:	b1d5      	cbz	r5, 8008a2c <__d2b+0x98>
 80089f6:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80089fa:	4405      	add	r5, r0
 80089fc:	f8c9 5000 	str.w	r5, [r9]
 8008a00:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8008a04:	f8c8 0000 	str.w	r0, [r8]
 8008a08:	4620      	mov	r0, r4
 8008a0a:	b003      	add	sp, #12
 8008a0c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008a10:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008a14:	e7d5      	b.n	80089c2 <__d2b+0x2e>
 8008a16:	6161      	str	r1, [r4, #20]
 8008a18:	e7e5      	b.n	80089e6 <__d2b+0x52>
 8008a1a:	a801      	add	r0, sp, #4
 8008a1c:	f7ff fd64 	bl	80084e8 <__lo0bits>
 8008a20:	9b01      	ldr	r3, [sp, #4]
 8008a22:	6163      	str	r3, [r4, #20]
 8008a24:	2201      	movs	r2, #1
 8008a26:	6122      	str	r2, [r4, #16]
 8008a28:	3020      	adds	r0, #32
 8008a2a:	e7e3      	b.n	80089f4 <__d2b+0x60>
 8008a2c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8008a30:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8008a34:	f8c9 0000 	str.w	r0, [r9]
 8008a38:	6918      	ldr	r0, [r3, #16]
 8008a3a:	f7ff fd35 	bl	80084a8 <__hi0bits>
 8008a3e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8008a42:	e7df      	b.n	8008a04 <__d2b+0x70>
 8008a44:	0800b0e7 	.word	0x0800b0e7
 8008a48:	0800b0f8 	.word	0x0800b0f8

08008a4c <_calloc_r>:
 8008a4c:	b513      	push	{r0, r1, r4, lr}
 8008a4e:	434a      	muls	r2, r1
 8008a50:	4611      	mov	r1, r2
 8008a52:	9201      	str	r2, [sp, #4]
 8008a54:	f000 f85a 	bl	8008b0c <_malloc_r>
 8008a58:	4604      	mov	r4, r0
 8008a5a:	b118      	cbz	r0, 8008a64 <_calloc_r+0x18>
 8008a5c:	9a01      	ldr	r2, [sp, #4]
 8008a5e:	2100      	movs	r1, #0
 8008a60:	f7fe f95e 	bl	8006d20 <memset>
 8008a64:	4620      	mov	r0, r4
 8008a66:	b002      	add	sp, #8
 8008a68:	bd10      	pop	{r4, pc}
	...

08008a6c <_free_r>:
 8008a6c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008a6e:	2900      	cmp	r1, #0
 8008a70:	d048      	beq.n	8008b04 <_free_r+0x98>
 8008a72:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008a76:	9001      	str	r0, [sp, #4]
 8008a78:	2b00      	cmp	r3, #0
 8008a7a:	f1a1 0404 	sub.w	r4, r1, #4
 8008a7e:	bfb8      	it	lt
 8008a80:	18e4      	addlt	r4, r4, r3
 8008a82:	f000 fa65 	bl	8008f50 <__malloc_lock>
 8008a86:	4a20      	ldr	r2, [pc, #128]	; (8008b08 <_free_r+0x9c>)
 8008a88:	9801      	ldr	r0, [sp, #4]
 8008a8a:	6813      	ldr	r3, [r2, #0]
 8008a8c:	4615      	mov	r5, r2
 8008a8e:	b933      	cbnz	r3, 8008a9e <_free_r+0x32>
 8008a90:	6063      	str	r3, [r4, #4]
 8008a92:	6014      	str	r4, [r2, #0]
 8008a94:	b003      	add	sp, #12
 8008a96:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008a9a:	f000 ba5f 	b.w	8008f5c <__malloc_unlock>
 8008a9e:	42a3      	cmp	r3, r4
 8008aa0:	d90b      	bls.n	8008aba <_free_r+0x4e>
 8008aa2:	6821      	ldr	r1, [r4, #0]
 8008aa4:	1862      	adds	r2, r4, r1
 8008aa6:	4293      	cmp	r3, r2
 8008aa8:	bf04      	itt	eq
 8008aaa:	681a      	ldreq	r2, [r3, #0]
 8008aac:	685b      	ldreq	r3, [r3, #4]
 8008aae:	6063      	str	r3, [r4, #4]
 8008ab0:	bf04      	itt	eq
 8008ab2:	1852      	addeq	r2, r2, r1
 8008ab4:	6022      	streq	r2, [r4, #0]
 8008ab6:	602c      	str	r4, [r5, #0]
 8008ab8:	e7ec      	b.n	8008a94 <_free_r+0x28>
 8008aba:	461a      	mov	r2, r3
 8008abc:	685b      	ldr	r3, [r3, #4]
 8008abe:	b10b      	cbz	r3, 8008ac4 <_free_r+0x58>
 8008ac0:	42a3      	cmp	r3, r4
 8008ac2:	d9fa      	bls.n	8008aba <_free_r+0x4e>
 8008ac4:	6811      	ldr	r1, [r2, #0]
 8008ac6:	1855      	adds	r5, r2, r1
 8008ac8:	42a5      	cmp	r5, r4
 8008aca:	d10b      	bne.n	8008ae4 <_free_r+0x78>
 8008acc:	6824      	ldr	r4, [r4, #0]
 8008ace:	4421      	add	r1, r4
 8008ad0:	1854      	adds	r4, r2, r1
 8008ad2:	42a3      	cmp	r3, r4
 8008ad4:	6011      	str	r1, [r2, #0]
 8008ad6:	d1dd      	bne.n	8008a94 <_free_r+0x28>
 8008ad8:	681c      	ldr	r4, [r3, #0]
 8008ada:	685b      	ldr	r3, [r3, #4]
 8008adc:	6053      	str	r3, [r2, #4]
 8008ade:	4421      	add	r1, r4
 8008ae0:	6011      	str	r1, [r2, #0]
 8008ae2:	e7d7      	b.n	8008a94 <_free_r+0x28>
 8008ae4:	d902      	bls.n	8008aec <_free_r+0x80>
 8008ae6:	230c      	movs	r3, #12
 8008ae8:	6003      	str	r3, [r0, #0]
 8008aea:	e7d3      	b.n	8008a94 <_free_r+0x28>
 8008aec:	6825      	ldr	r5, [r4, #0]
 8008aee:	1961      	adds	r1, r4, r5
 8008af0:	428b      	cmp	r3, r1
 8008af2:	bf04      	itt	eq
 8008af4:	6819      	ldreq	r1, [r3, #0]
 8008af6:	685b      	ldreq	r3, [r3, #4]
 8008af8:	6063      	str	r3, [r4, #4]
 8008afa:	bf04      	itt	eq
 8008afc:	1949      	addeq	r1, r1, r5
 8008afe:	6021      	streq	r1, [r4, #0]
 8008b00:	6054      	str	r4, [r2, #4]
 8008b02:	e7c7      	b.n	8008a94 <_free_r+0x28>
 8008b04:	b003      	add	sp, #12
 8008b06:	bd30      	pop	{r4, r5, pc}
 8008b08:	20000268 	.word	0x20000268

08008b0c <_malloc_r>:
 8008b0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008b0e:	1ccd      	adds	r5, r1, #3
 8008b10:	f025 0503 	bic.w	r5, r5, #3
 8008b14:	3508      	adds	r5, #8
 8008b16:	2d0c      	cmp	r5, #12
 8008b18:	bf38      	it	cc
 8008b1a:	250c      	movcc	r5, #12
 8008b1c:	2d00      	cmp	r5, #0
 8008b1e:	4606      	mov	r6, r0
 8008b20:	db01      	blt.n	8008b26 <_malloc_r+0x1a>
 8008b22:	42a9      	cmp	r1, r5
 8008b24:	d903      	bls.n	8008b2e <_malloc_r+0x22>
 8008b26:	230c      	movs	r3, #12
 8008b28:	6033      	str	r3, [r6, #0]
 8008b2a:	2000      	movs	r0, #0
 8008b2c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008b2e:	f000 fa0f 	bl	8008f50 <__malloc_lock>
 8008b32:	4921      	ldr	r1, [pc, #132]	; (8008bb8 <_malloc_r+0xac>)
 8008b34:	680a      	ldr	r2, [r1, #0]
 8008b36:	4614      	mov	r4, r2
 8008b38:	b99c      	cbnz	r4, 8008b62 <_malloc_r+0x56>
 8008b3a:	4f20      	ldr	r7, [pc, #128]	; (8008bbc <_malloc_r+0xb0>)
 8008b3c:	683b      	ldr	r3, [r7, #0]
 8008b3e:	b923      	cbnz	r3, 8008b4a <_malloc_r+0x3e>
 8008b40:	4621      	mov	r1, r4
 8008b42:	4630      	mov	r0, r6
 8008b44:	f000 f998 	bl	8008e78 <_sbrk_r>
 8008b48:	6038      	str	r0, [r7, #0]
 8008b4a:	4629      	mov	r1, r5
 8008b4c:	4630      	mov	r0, r6
 8008b4e:	f000 f993 	bl	8008e78 <_sbrk_r>
 8008b52:	1c43      	adds	r3, r0, #1
 8008b54:	d123      	bne.n	8008b9e <_malloc_r+0x92>
 8008b56:	230c      	movs	r3, #12
 8008b58:	6033      	str	r3, [r6, #0]
 8008b5a:	4630      	mov	r0, r6
 8008b5c:	f000 f9fe 	bl	8008f5c <__malloc_unlock>
 8008b60:	e7e3      	b.n	8008b2a <_malloc_r+0x1e>
 8008b62:	6823      	ldr	r3, [r4, #0]
 8008b64:	1b5b      	subs	r3, r3, r5
 8008b66:	d417      	bmi.n	8008b98 <_malloc_r+0x8c>
 8008b68:	2b0b      	cmp	r3, #11
 8008b6a:	d903      	bls.n	8008b74 <_malloc_r+0x68>
 8008b6c:	6023      	str	r3, [r4, #0]
 8008b6e:	441c      	add	r4, r3
 8008b70:	6025      	str	r5, [r4, #0]
 8008b72:	e004      	b.n	8008b7e <_malloc_r+0x72>
 8008b74:	6863      	ldr	r3, [r4, #4]
 8008b76:	42a2      	cmp	r2, r4
 8008b78:	bf0c      	ite	eq
 8008b7a:	600b      	streq	r3, [r1, #0]
 8008b7c:	6053      	strne	r3, [r2, #4]
 8008b7e:	4630      	mov	r0, r6
 8008b80:	f000 f9ec 	bl	8008f5c <__malloc_unlock>
 8008b84:	f104 000b 	add.w	r0, r4, #11
 8008b88:	1d23      	adds	r3, r4, #4
 8008b8a:	f020 0007 	bic.w	r0, r0, #7
 8008b8e:	1ac2      	subs	r2, r0, r3
 8008b90:	d0cc      	beq.n	8008b2c <_malloc_r+0x20>
 8008b92:	1a1b      	subs	r3, r3, r0
 8008b94:	50a3      	str	r3, [r4, r2]
 8008b96:	e7c9      	b.n	8008b2c <_malloc_r+0x20>
 8008b98:	4622      	mov	r2, r4
 8008b9a:	6864      	ldr	r4, [r4, #4]
 8008b9c:	e7cc      	b.n	8008b38 <_malloc_r+0x2c>
 8008b9e:	1cc4      	adds	r4, r0, #3
 8008ba0:	f024 0403 	bic.w	r4, r4, #3
 8008ba4:	42a0      	cmp	r0, r4
 8008ba6:	d0e3      	beq.n	8008b70 <_malloc_r+0x64>
 8008ba8:	1a21      	subs	r1, r4, r0
 8008baa:	4630      	mov	r0, r6
 8008bac:	f000 f964 	bl	8008e78 <_sbrk_r>
 8008bb0:	3001      	adds	r0, #1
 8008bb2:	d1dd      	bne.n	8008b70 <_malloc_r+0x64>
 8008bb4:	e7cf      	b.n	8008b56 <_malloc_r+0x4a>
 8008bb6:	bf00      	nop
 8008bb8:	20000268 	.word	0x20000268
 8008bbc:	2000026c 	.word	0x2000026c

08008bc0 <__ssputs_r>:
 8008bc0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008bc4:	688e      	ldr	r6, [r1, #8]
 8008bc6:	429e      	cmp	r6, r3
 8008bc8:	4682      	mov	sl, r0
 8008bca:	460c      	mov	r4, r1
 8008bcc:	4690      	mov	r8, r2
 8008bce:	461f      	mov	r7, r3
 8008bd0:	d838      	bhi.n	8008c44 <__ssputs_r+0x84>
 8008bd2:	898a      	ldrh	r2, [r1, #12]
 8008bd4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008bd8:	d032      	beq.n	8008c40 <__ssputs_r+0x80>
 8008bda:	6825      	ldr	r5, [r4, #0]
 8008bdc:	6909      	ldr	r1, [r1, #16]
 8008bde:	eba5 0901 	sub.w	r9, r5, r1
 8008be2:	6965      	ldr	r5, [r4, #20]
 8008be4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008be8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008bec:	3301      	adds	r3, #1
 8008bee:	444b      	add	r3, r9
 8008bf0:	106d      	asrs	r5, r5, #1
 8008bf2:	429d      	cmp	r5, r3
 8008bf4:	bf38      	it	cc
 8008bf6:	461d      	movcc	r5, r3
 8008bf8:	0553      	lsls	r3, r2, #21
 8008bfa:	d531      	bpl.n	8008c60 <__ssputs_r+0xa0>
 8008bfc:	4629      	mov	r1, r5
 8008bfe:	f7ff ff85 	bl	8008b0c <_malloc_r>
 8008c02:	4606      	mov	r6, r0
 8008c04:	b950      	cbnz	r0, 8008c1c <__ssputs_r+0x5c>
 8008c06:	230c      	movs	r3, #12
 8008c08:	f8ca 3000 	str.w	r3, [sl]
 8008c0c:	89a3      	ldrh	r3, [r4, #12]
 8008c0e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008c12:	81a3      	strh	r3, [r4, #12]
 8008c14:	f04f 30ff 	mov.w	r0, #4294967295
 8008c18:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008c1c:	6921      	ldr	r1, [r4, #16]
 8008c1e:	464a      	mov	r2, r9
 8008c20:	f7fe f870 	bl	8006d04 <memcpy>
 8008c24:	89a3      	ldrh	r3, [r4, #12]
 8008c26:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008c2a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008c2e:	81a3      	strh	r3, [r4, #12]
 8008c30:	6126      	str	r6, [r4, #16]
 8008c32:	6165      	str	r5, [r4, #20]
 8008c34:	444e      	add	r6, r9
 8008c36:	eba5 0509 	sub.w	r5, r5, r9
 8008c3a:	6026      	str	r6, [r4, #0]
 8008c3c:	60a5      	str	r5, [r4, #8]
 8008c3e:	463e      	mov	r6, r7
 8008c40:	42be      	cmp	r6, r7
 8008c42:	d900      	bls.n	8008c46 <__ssputs_r+0x86>
 8008c44:	463e      	mov	r6, r7
 8008c46:	4632      	mov	r2, r6
 8008c48:	6820      	ldr	r0, [r4, #0]
 8008c4a:	4641      	mov	r1, r8
 8008c4c:	f000 f966 	bl	8008f1c <memmove>
 8008c50:	68a3      	ldr	r3, [r4, #8]
 8008c52:	6822      	ldr	r2, [r4, #0]
 8008c54:	1b9b      	subs	r3, r3, r6
 8008c56:	4432      	add	r2, r6
 8008c58:	60a3      	str	r3, [r4, #8]
 8008c5a:	6022      	str	r2, [r4, #0]
 8008c5c:	2000      	movs	r0, #0
 8008c5e:	e7db      	b.n	8008c18 <__ssputs_r+0x58>
 8008c60:	462a      	mov	r2, r5
 8008c62:	f000 f981 	bl	8008f68 <_realloc_r>
 8008c66:	4606      	mov	r6, r0
 8008c68:	2800      	cmp	r0, #0
 8008c6a:	d1e1      	bne.n	8008c30 <__ssputs_r+0x70>
 8008c6c:	6921      	ldr	r1, [r4, #16]
 8008c6e:	4650      	mov	r0, sl
 8008c70:	f7ff fefc 	bl	8008a6c <_free_r>
 8008c74:	e7c7      	b.n	8008c06 <__ssputs_r+0x46>
	...

08008c78 <_svfiprintf_r>:
 8008c78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008c7c:	4698      	mov	r8, r3
 8008c7e:	898b      	ldrh	r3, [r1, #12]
 8008c80:	061b      	lsls	r3, r3, #24
 8008c82:	b09d      	sub	sp, #116	; 0x74
 8008c84:	4607      	mov	r7, r0
 8008c86:	460d      	mov	r5, r1
 8008c88:	4614      	mov	r4, r2
 8008c8a:	d50e      	bpl.n	8008caa <_svfiprintf_r+0x32>
 8008c8c:	690b      	ldr	r3, [r1, #16]
 8008c8e:	b963      	cbnz	r3, 8008caa <_svfiprintf_r+0x32>
 8008c90:	2140      	movs	r1, #64	; 0x40
 8008c92:	f7ff ff3b 	bl	8008b0c <_malloc_r>
 8008c96:	6028      	str	r0, [r5, #0]
 8008c98:	6128      	str	r0, [r5, #16]
 8008c9a:	b920      	cbnz	r0, 8008ca6 <_svfiprintf_r+0x2e>
 8008c9c:	230c      	movs	r3, #12
 8008c9e:	603b      	str	r3, [r7, #0]
 8008ca0:	f04f 30ff 	mov.w	r0, #4294967295
 8008ca4:	e0d1      	b.n	8008e4a <_svfiprintf_r+0x1d2>
 8008ca6:	2340      	movs	r3, #64	; 0x40
 8008ca8:	616b      	str	r3, [r5, #20]
 8008caa:	2300      	movs	r3, #0
 8008cac:	9309      	str	r3, [sp, #36]	; 0x24
 8008cae:	2320      	movs	r3, #32
 8008cb0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008cb4:	f8cd 800c 	str.w	r8, [sp, #12]
 8008cb8:	2330      	movs	r3, #48	; 0x30
 8008cba:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8008e64 <_svfiprintf_r+0x1ec>
 8008cbe:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008cc2:	f04f 0901 	mov.w	r9, #1
 8008cc6:	4623      	mov	r3, r4
 8008cc8:	469a      	mov	sl, r3
 8008cca:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008cce:	b10a      	cbz	r2, 8008cd4 <_svfiprintf_r+0x5c>
 8008cd0:	2a25      	cmp	r2, #37	; 0x25
 8008cd2:	d1f9      	bne.n	8008cc8 <_svfiprintf_r+0x50>
 8008cd4:	ebba 0b04 	subs.w	fp, sl, r4
 8008cd8:	d00b      	beq.n	8008cf2 <_svfiprintf_r+0x7a>
 8008cda:	465b      	mov	r3, fp
 8008cdc:	4622      	mov	r2, r4
 8008cde:	4629      	mov	r1, r5
 8008ce0:	4638      	mov	r0, r7
 8008ce2:	f7ff ff6d 	bl	8008bc0 <__ssputs_r>
 8008ce6:	3001      	adds	r0, #1
 8008ce8:	f000 80aa 	beq.w	8008e40 <_svfiprintf_r+0x1c8>
 8008cec:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008cee:	445a      	add	r2, fp
 8008cf0:	9209      	str	r2, [sp, #36]	; 0x24
 8008cf2:	f89a 3000 	ldrb.w	r3, [sl]
 8008cf6:	2b00      	cmp	r3, #0
 8008cf8:	f000 80a2 	beq.w	8008e40 <_svfiprintf_r+0x1c8>
 8008cfc:	2300      	movs	r3, #0
 8008cfe:	f04f 32ff 	mov.w	r2, #4294967295
 8008d02:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008d06:	f10a 0a01 	add.w	sl, sl, #1
 8008d0a:	9304      	str	r3, [sp, #16]
 8008d0c:	9307      	str	r3, [sp, #28]
 8008d0e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008d12:	931a      	str	r3, [sp, #104]	; 0x68
 8008d14:	4654      	mov	r4, sl
 8008d16:	2205      	movs	r2, #5
 8008d18:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008d1c:	4851      	ldr	r0, [pc, #324]	; (8008e64 <_svfiprintf_r+0x1ec>)
 8008d1e:	f7f7 fa67 	bl	80001f0 <memchr>
 8008d22:	9a04      	ldr	r2, [sp, #16]
 8008d24:	b9d8      	cbnz	r0, 8008d5e <_svfiprintf_r+0xe6>
 8008d26:	06d0      	lsls	r0, r2, #27
 8008d28:	bf44      	itt	mi
 8008d2a:	2320      	movmi	r3, #32
 8008d2c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008d30:	0711      	lsls	r1, r2, #28
 8008d32:	bf44      	itt	mi
 8008d34:	232b      	movmi	r3, #43	; 0x2b
 8008d36:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008d3a:	f89a 3000 	ldrb.w	r3, [sl]
 8008d3e:	2b2a      	cmp	r3, #42	; 0x2a
 8008d40:	d015      	beq.n	8008d6e <_svfiprintf_r+0xf6>
 8008d42:	9a07      	ldr	r2, [sp, #28]
 8008d44:	4654      	mov	r4, sl
 8008d46:	2000      	movs	r0, #0
 8008d48:	f04f 0c0a 	mov.w	ip, #10
 8008d4c:	4621      	mov	r1, r4
 8008d4e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008d52:	3b30      	subs	r3, #48	; 0x30
 8008d54:	2b09      	cmp	r3, #9
 8008d56:	d94e      	bls.n	8008df6 <_svfiprintf_r+0x17e>
 8008d58:	b1b0      	cbz	r0, 8008d88 <_svfiprintf_r+0x110>
 8008d5a:	9207      	str	r2, [sp, #28]
 8008d5c:	e014      	b.n	8008d88 <_svfiprintf_r+0x110>
 8008d5e:	eba0 0308 	sub.w	r3, r0, r8
 8008d62:	fa09 f303 	lsl.w	r3, r9, r3
 8008d66:	4313      	orrs	r3, r2
 8008d68:	9304      	str	r3, [sp, #16]
 8008d6a:	46a2      	mov	sl, r4
 8008d6c:	e7d2      	b.n	8008d14 <_svfiprintf_r+0x9c>
 8008d6e:	9b03      	ldr	r3, [sp, #12]
 8008d70:	1d19      	adds	r1, r3, #4
 8008d72:	681b      	ldr	r3, [r3, #0]
 8008d74:	9103      	str	r1, [sp, #12]
 8008d76:	2b00      	cmp	r3, #0
 8008d78:	bfbb      	ittet	lt
 8008d7a:	425b      	neglt	r3, r3
 8008d7c:	f042 0202 	orrlt.w	r2, r2, #2
 8008d80:	9307      	strge	r3, [sp, #28]
 8008d82:	9307      	strlt	r3, [sp, #28]
 8008d84:	bfb8      	it	lt
 8008d86:	9204      	strlt	r2, [sp, #16]
 8008d88:	7823      	ldrb	r3, [r4, #0]
 8008d8a:	2b2e      	cmp	r3, #46	; 0x2e
 8008d8c:	d10c      	bne.n	8008da8 <_svfiprintf_r+0x130>
 8008d8e:	7863      	ldrb	r3, [r4, #1]
 8008d90:	2b2a      	cmp	r3, #42	; 0x2a
 8008d92:	d135      	bne.n	8008e00 <_svfiprintf_r+0x188>
 8008d94:	9b03      	ldr	r3, [sp, #12]
 8008d96:	1d1a      	adds	r2, r3, #4
 8008d98:	681b      	ldr	r3, [r3, #0]
 8008d9a:	9203      	str	r2, [sp, #12]
 8008d9c:	2b00      	cmp	r3, #0
 8008d9e:	bfb8      	it	lt
 8008da0:	f04f 33ff 	movlt.w	r3, #4294967295
 8008da4:	3402      	adds	r4, #2
 8008da6:	9305      	str	r3, [sp, #20]
 8008da8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8008e74 <_svfiprintf_r+0x1fc>
 8008dac:	7821      	ldrb	r1, [r4, #0]
 8008dae:	2203      	movs	r2, #3
 8008db0:	4650      	mov	r0, sl
 8008db2:	f7f7 fa1d 	bl	80001f0 <memchr>
 8008db6:	b140      	cbz	r0, 8008dca <_svfiprintf_r+0x152>
 8008db8:	2340      	movs	r3, #64	; 0x40
 8008dba:	eba0 000a 	sub.w	r0, r0, sl
 8008dbe:	fa03 f000 	lsl.w	r0, r3, r0
 8008dc2:	9b04      	ldr	r3, [sp, #16]
 8008dc4:	4303      	orrs	r3, r0
 8008dc6:	3401      	adds	r4, #1
 8008dc8:	9304      	str	r3, [sp, #16]
 8008dca:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008dce:	4826      	ldr	r0, [pc, #152]	; (8008e68 <_svfiprintf_r+0x1f0>)
 8008dd0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008dd4:	2206      	movs	r2, #6
 8008dd6:	f7f7 fa0b 	bl	80001f0 <memchr>
 8008dda:	2800      	cmp	r0, #0
 8008ddc:	d038      	beq.n	8008e50 <_svfiprintf_r+0x1d8>
 8008dde:	4b23      	ldr	r3, [pc, #140]	; (8008e6c <_svfiprintf_r+0x1f4>)
 8008de0:	bb1b      	cbnz	r3, 8008e2a <_svfiprintf_r+0x1b2>
 8008de2:	9b03      	ldr	r3, [sp, #12]
 8008de4:	3307      	adds	r3, #7
 8008de6:	f023 0307 	bic.w	r3, r3, #7
 8008dea:	3308      	adds	r3, #8
 8008dec:	9303      	str	r3, [sp, #12]
 8008dee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008df0:	4433      	add	r3, r6
 8008df2:	9309      	str	r3, [sp, #36]	; 0x24
 8008df4:	e767      	b.n	8008cc6 <_svfiprintf_r+0x4e>
 8008df6:	fb0c 3202 	mla	r2, ip, r2, r3
 8008dfa:	460c      	mov	r4, r1
 8008dfc:	2001      	movs	r0, #1
 8008dfe:	e7a5      	b.n	8008d4c <_svfiprintf_r+0xd4>
 8008e00:	2300      	movs	r3, #0
 8008e02:	3401      	adds	r4, #1
 8008e04:	9305      	str	r3, [sp, #20]
 8008e06:	4619      	mov	r1, r3
 8008e08:	f04f 0c0a 	mov.w	ip, #10
 8008e0c:	4620      	mov	r0, r4
 8008e0e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008e12:	3a30      	subs	r2, #48	; 0x30
 8008e14:	2a09      	cmp	r2, #9
 8008e16:	d903      	bls.n	8008e20 <_svfiprintf_r+0x1a8>
 8008e18:	2b00      	cmp	r3, #0
 8008e1a:	d0c5      	beq.n	8008da8 <_svfiprintf_r+0x130>
 8008e1c:	9105      	str	r1, [sp, #20]
 8008e1e:	e7c3      	b.n	8008da8 <_svfiprintf_r+0x130>
 8008e20:	fb0c 2101 	mla	r1, ip, r1, r2
 8008e24:	4604      	mov	r4, r0
 8008e26:	2301      	movs	r3, #1
 8008e28:	e7f0      	b.n	8008e0c <_svfiprintf_r+0x194>
 8008e2a:	ab03      	add	r3, sp, #12
 8008e2c:	9300      	str	r3, [sp, #0]
 8008e2e:	462a      	mov	r2, r5
 8008e30:	4b0f      	ldr	r3, [pc, #60]	; (8008e70 <_svfiprintf_r+0x1f8>)
 8008e32:	a904      	add	r1, sp, #16
 8008e34:	4638      	mov	r0, r7
 8008e36:	f7fe f81b 	bl	8006e70 <_printf_float>
 8008e3a:	1c42      	adds	r2, r0, #1
 8008e3c:	4606      	mov	r6, r0
 8008e3e:	d1d6      	bne.n	8008dee <_svfiprintf_r+0x176>
 8008e40:	89ab      	ldrh	r3, [r5, #12]
 8008e42:	065b      	lsls	r3, r3, #25
 8008e44:	f53f af2c 	bmi.w	8008ca0 <_svfiprintf_r+0x28>
 8008e48:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008e4a:	b01d      	add	sp, #116	; 0x74
 8008e4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008e50:	ab03      	add	r3, sp, #12
 8008e52:	9300      	str	r3, [sp, #0]
 8008e54:	462a      	mov	r2, r5
 8008e56:	4b06      	ldr	r3, [pc, #24]	; (8008e70 <_svfiprintf_r+0x1f8>)
 8008e58:	a904      	add	r1, sp, #16
 8008e5a:	4638      	mov	r0, r7
 8008e5c:	f7fe faac 	bl	80073b8 <_printf_i>
 8008e60:	e7eb      	b.n	8008e3a <_svfiprintf_r+0x1c2>
 8008e62:	bf00      	nop
 8008e64:	0800b254 	.word	0x0800b254
 8008e68:	0800b25e 	.word	0x0800b25e
 8008e6c:	08006e71 	.word	0x08006e71
 8008e70:	08008bc1 	.word	0x08008bc1
 8008e74:	0800b25a 	.word	0x0800b25a

08008e78 <_sbrk_r>:
 8008e78:	b538      	push	{r3, r4, r5, lr}
 8008e7a:	4d06      	ldr	r5, [pc, #24]	; (8008e94 <_sbrk_r+0x1c>)
 8008e7c:	2300      	movs	r3, #0
 8008e7e:	4604      	mov	r4, r0
 8008e80:	4608      	mov	r0, r1
 8008e82:	602b      	str	r3, [r5, #0]
 8008e84:	f7f9 feea 	bl	8002c5c <_sbrk>
 8008e88:	1c43      	adds	r3, r0, #1
 8008e8a:	d102      	bne.n	8008e92 <_sbrk_r+0x1a>
 8008e8c:	682b      	ldr	r3, [r5, #0]
 8008e8e:	b103      	cbz	r3, 8008e92 <_sbrk_r+0x1a>
 8008e90:	6023      	str	r3, [r4, #0]
 8008e92:	bd38      	pop	{r3, r4, r5, pc}
 8008e94:	20000448 	.word	0x20000448

08008e98 <__assert_func>:
 8008e98:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008e9a:	4614      	mov	r4, r2
 8008e9c:	461a      	mov	r2, r3
 8008e9e:	4b09      	ldr	r3, [pc, #36]	; (8008ec4 <__assert_func+0x2c>)
 8008ea0:	681b      	ldr	r3, [r3, #0]
 8008ea2:	4605      	mov	r5, r0
 8008ea4:	68d8      	ldr	r0, [r3, #12]
 8008ea6:	b14c      	cbz	r4, 8008ebc <__assert_func+0x24>
 8008ea8:	4b07      	ldr	r3, [pc, #28]	; (8008ec8 <__assert_func+0x30>)
 8008eaa:	9100      	str	r1, [sp, #0]
 8008eac:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008eb0:	4906      	ldr	r1, [pc, #24]	; (8008ecc <__assert_func+0x34>)
 8008eb2:	462b      	mov	r3, r5
 8008eb4:	f000 f80e 	bl	8008ed4 <fiprintf>
 8008eb8:	f000 faa4 	bl	8009404 <abort>
 8008ebc:	4b04      	ldr	r3, [pc, #16]	; (8008ed0 <__assert_func+0x38>)
 8008ebe:	461c      	mov	r4, r3
 8008ec0:	e7f3      	b.n	8008eaa <__assert_func+0x12>
 8008ec2:	bf00      	nop
 8008ec4:	20000010 	.word	0x20000010
 8008ec8:	0800b265 	.word	0x0800b265
 8008ecc:	0800b272 	.word	0x0800b272
 8008ed0:	0800b2a0 	.word	0x0800b2a0

08008ed4 <fiprintf>:
 8008ed4:	b40e      	push	{r1, r2, r3}
 8008ed6:	b503      	push	{r0, r1, lr}
 8008ed8:	4601      	mov	r1, r0
 8008eda:	ab03      	add	r3, sp, #12
 8008edc:	4805      	ldr	r0, [pc, #20]	; (8008ef4 <fiprintf+0x20>)
 8008ede:	f853 2b04 	ldr.w	r2, [r3], #4
 8008ee2:	6800      	ldr	r0, [r0, #0]
 8008ee4:	9301      	str	r3, [sp, #4]
 8008ee6:	f000 f88f 	bl	8009008 <_vfiprintf_r>
 8008eea:	b002      	add	sp, #8
 8008eec:	f85d eb04 	ldr.w	lr, [sp], #4
 8008ef0:	b003      	add	sp, #12
 8008ef2:	4770      	bx	lr
 8008ef4:	20000010 	.word	0x20000010

08008ef8 <__ascii_mbtowc>:
 8008ef8:	b082      	sub	sp, #8
 8008efa:	b901      	cbnz	r1, 8008efe <__ascii_mbtowc+0x6>
 8008efc:	a901      	add	r1, sp, #4
 8008efe:	b142      	cbz	r2, 8008f12 <__ascii_mbtowc+0x1a>
 8008f00:	b14b      	cbz	r3, 8008f16 <__ascii_mbtowc+0x1e>
 8008f02:	7813      	ldrb	r3, [r2, #0]
 8008f04:	600b      	str	r3, [r1, #0]
 8008f06:	7812      	ldrb	r2, [r2, #0]
 8008f08:	1e10      	subs	r0, r2, #0
 8008f0a:	bf18      	it	ne
 8008f0c:	2001      	movne	r0, #1
 8008f0e:	b002      	add	sp, #8
 8008f10:	4770      	bx	lr
 8008f12:	4610      	mov	r0, r2
 8008f14:	e7fb      	b.n	8008f0e <__ascii_mbtowc+0x16>
 8008f16:	f06f 0001 	mvn.w	r0, #1
 8008f1a:	e7f8      	b.n	8008f0e <__ascii_mbtowc+0x16>

08008f1c <memmove>:
 8008f1c:	4288      	cmp	r0, r1
 8008f1e:	b510      	push	{r4, lr}
 8008f20:	eb01 0402 	add.w	r4, r1, r2
 8008f24:	d902      	bls.n	8008f2c <memmove+0x10>
 8008f26:	4284      	cmp	r4, r0
 8008f28:	4623      	mov	r3, r4
 8008f2a:	d807      	bhi.n	8008f3c <memmove+0x20>
 8008f2c:	1e43      	subs	r3, r0, #1
 8008f2e:	42a1      	cmp	r1, r4
 8008f30:	d008      	beq.n	8008f44 <memmove+0x28>
 8008f32:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008f36:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008f3a:	e7f8      	b.n	8008f2e <memmove+0x12>
 8008f3c:	4402      	add	r2, r0
 8008f3e:	4601      	mov	r1, r0
 8008f40:	428a      	cmp	r2, r1
 8008f42:	d100      	bne.n	8008f46 <memmove+0x2a>
 8008f44:	bd10      	pop	{r4, pc}
 8008f46:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008f4a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008f4e:	e7f7      	b.n	8008f40 <memmove+0x24>

08008f50 <__malloc_lock>:
 8008f50:	4801      	ldr	r0, [pc, #4]	; (8008f58 <__malloc_lock+0x8>)
 8008f52:	f000 bc17 	b.w	8009784 <__retarget_lock_acquire_recursive>
 8008f56:	bf00      	nop
 8008f58:	20000450 	.word	0x20000450

08008f5c <__malloc_unlock>:
 8008f5c:	4801      	ldr	r0, [pc, #4]	; (8008f64 <__malloc_unlock+0x8>)
 8008f5e:	f000 bc12 	b.w	8009786 <__retarget_lock_release_recursive>
 8008f62:	bf00      	nop
 8008f64:	20000450 	.word	0x20000450

08008f68 <_realloc_r>:
 8008f68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008f6a:	4607      	mov	r7, r0
 8008f6c:	4614      	mov	r4, r2
 8008f6e:	460e      	mov	r6, r1
 8008f70:	b921      	cbnz	r1, 8008f7c <_realloc_r+0x14>
 8008f72:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8008f76:	4611      	mov	r1, r2
 8008f78:	f7ff bdc8 	b.w	8008b0c <_malloc_r>
 8008f7c:	b922      	cbnz	r2, 8008f88 <_realloc_r+0x20>
 8008f7e:	f7ff fd75 	bl	8008a6c <_free_r>
 8008f82:	4625      	mov	r5, r4
 8008f84:	4628      	mov	r0, r5
 8008f86:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008f88:	f000 fc62 	bl	8009850 <_malloc_usable_size_r>
 8008f8c:	42a0      	cmp	r0, r4
 8008f8e:	d20f      	bcs.n	8008fb0 <_realloc_r+0x48>
 8008f90:	4621      	mov	r1, r4
 8008f92:	4638      	mov	r0, r7
 8008f94:	f7ff fdba 	bl	8008b0c <_malloc_r>
 8008f98:	4605      	mov	r5, r0
 8008f9a:	2800      	cmp	r0, #0
 8008f9c:	d0f2      	beq.n	8008f84 <_realloc_r+0x1c>
 8008f9e:	4631      	mov	r1, r6
 8008fa0:	4622      	mov	r2, r4
 8008fa2:	f7fd feaf 	bl	8006d04 <memcpy>
 8008fa6:	4631      	mov	r1, r6
 8008fa8:	4638      	mov	r0, r7
 8008faa:	f7ff fd5f 	bl	8008a6c <_free_r>
 8008fae:	e7e9      	b.n	8008f84 <_realloc_r+0x1c>
 8008fb0:	4635      	mov	r5, r6
 8008fb2:	e7e7      	b.n	8008f84 <_realloc_r+0x1c>

08008fb4 <__sfputc_r>:
 8008fb4:	6893      	ldr	r3, [r2, #8]
 8008fb6:	3b01      	subs	r3, #1
 8008fb8:	2b00      	cmp	r3, #0
 8008fba:	b410      	push	{r4}
 8008fbc:	6093      	str	r3, [r2, #8]
 8008fbe:	da08      	bge.n	8008fd2 <__sfputc_r+0x1e>
 8008fc0:	6994      	ldr	r4, [r2, #24]
 8008fc2:	42a3      	cmp	r3, r4
 8008fc4:	db01      	blt.n	8008fca <__sfputc_r+0x16>
 8008fc6:	290a      	cmp	r1, #10
 8008fc8:	d103      	bne.n	8008fd2 <__sfputc_r+0x1e>
 8008fca:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008fce:	f000 b94b 	b.w	8009268 <__swbuf_r>
 8008fd2:	6813      	ldr	r3, [r2, #0]
 8008fd4:	1c58      	adds	r0, r3, #1
 8008fd6:	6010      	str	r0, [r2, #0]
 8008fd8:	7019      	strb	r1, [r3, #0]
 8008fda:	4608      	mov	r0, r1
 8008fdc:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008fe0:	4770      	bx	lr

08008fe2 <__sfputs_r>:
 8008fe2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008fe4:	4606      	mov	r6, r0
 8008fe6:	460f      	mov	r7, r1
 8008fe8:	4614      	mov	r4, r2
 8008fea:	18d5      	adds	r5, r2, r3
 8008fec:	42ac      	cmp	r4, r5
 8008fee:	d101      	bne.n	8008ff4 <__sfputs_r+0x12>
 8008ff0:	2000      	movs	r0, #0
 8008ff2:	e007      	b.n	8009004 <__sfputs_r+0x22>
 8008ff4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008ff8:	463a      	mov	r2, r7
 8008ffa:	4630      	mov	r0, r6
 8008ffc:	f7ff ffda 	bl	8008fb4 <__sfputc_r>
 8009000:	1c43      	adds	r3, r0, #1
 8009002:	d1f3      	bne.n	8008fec <__sfputs_r+0xa>
 8009004:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009008 <_vfiprintf_r>:
 8009008:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800900c:	460d      	mov	r5, r1
 800900e:	b09d      	sub	sp, #116	; 0x74
 8009010:	4614      	mov	r4, r2
 8009012:	4698      	mov	r8, r3
 8009014:	4606      	mov	r6, r0
 8009016:	b118      	cbz	r0, 8009020 <_vfiprintf_r+0x18>
 8009018:	6983      	ldr	r3, [r0, #24]
 800901a:	b90b      	cbnz	r3, 8009020 <_vfiprintf_r+0x18>
 800901c:	f000 fb14 	bl	8009648 <__sinit>
 8009020:	4b89      	ldr	r3, [pc, #548]	; (8009248 <_vfiprintf_r+0x240>)
 8009022:	429d      	cmp	r5, r3
 8009024:	d11b      	bne.n	800905e <_vfiprintf_r+0x56>
 8009026:	6875      	ldr	r5, [r6, #4]
 8009028:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800902a:	07d9      	lsls	r1, r3, #31
 800902c:	d405      	bmi.n	800903a <_vfiprintf_r+0x32>
 800902e:	89ab      	ldrh	r3, [r5, #12]
 8009030:	059a      	lsls	r2, r3, #22
 8009032:	d402      	bmi.n	800903a <_vfiprintf_r+0x32>
 8009034:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009036:	f000 fba5 	bl	8009784 <__retarget_lock_acquire_recursive>
 800903a:	89ab      	ldrh	r3, [r5, #12]
 800903c:	071b      	lsls	r3, r3, #28
 800903e:	d501      	bpl.n	8009044 <_vfiprintf_r+0x3c>
 8009040:	692b      	ldr	r3, [r5, #16]
 8009042:	b9eb      	cbnz	r3, 8009080 <_vfiprintf_r+0x78>
 8009044:	4629      	mov	r1, r5
 8009046:	4630      	mov	r0, r6
 8009048:	f000 f96e 	bl	8009328 <__swsetup_r>
 800904c:	b1c0      	cbz	r0, 8009080 <_vfiprintf_r+0x78>
 800904e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009050:	07dc      	lsls	r4, r3, #31
 8009052:	d50e      	bpl.n	8009072 <_vfiprintf_r+0x6a>
 8009054:	f04f 30ff 	mov.w	r0, #4294967295
 8009058:	b01d      	add	sp, #116	; 0x74
 800905a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800905e:	4b7b      	ldr	r3, [pc, #492]	; (800924c <_vfiprintf_r+0x244>)
 8009060:	429d      	cmp	r5, r3
 8009062:	d101      	bne.n	8009068 <_vfiprintf_r+0x60>
 8009064:	68b5      	ldr	r5, [r6, #8]
 8009066:	e7df      	b.n	8009028 <_vfiprintf_r+0x20>
 8009068:	4b79      	ldr	r3, [pc, #484]	; (8009250 <_vfiprintf_r+0x248>)
 800906a:	429d      	cmp	r5, r3
 800906c:	bf08      	it	eq
 800906e:	68f5      	ldreq	r5, [r6, #12]
 8009070:	e7da      	b.n	8009028 <_vfiprintf_r+0x20>
 8009072:	89ab      	ldrh	r3, [r5, #12]
 8009074:	0598      	lsls	r0, r3, #22
 8009076:	d4ed      	bmi.n	8009054 <_vfiprintf_r+0x4c>
 8009078:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800907a:	f000 fb84 	bl	8009786 <__retarget_lock_release_recursive>
 800907e:	e7e9      	b.n	8009054 <_vfiprintf_r+0x4c>
 8009080:	2300      	movs	r3, #0
 8009082:	9309      	str	r3, [sp, #36]	; 0x24
 8009084:	2320      	movs	r3, #32
 8009086:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800908a:	f8cd 800c 	str.w	r8, [sp, #12]
 800908e:	2330      	movs	r3, #48	; 0x30
 8009090:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8009254 <_vfiprintf_r+0x24c>
 8009094:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009098:	f04f 0901 	mov.w	r9, #1
 800909c:	4623      	mov	r3, r4
 800909e:	469a      	mov	sl, r3
 80090a0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80090a4:	b10a      	cbz	r2, 80090aa <_vfiprintf_r+0xa2>
 80090a6:	2a25      	cmp	r2, #37	; 0x25
 80090a8:	d1f9      	bne.n	800909e <_vfiprintf_r+0x96>
 80090aa:	ebba 0b04 	subs.w	fp, sl, r4
 80090ae:	d00b      	beq.n	80090c8 <_vfiprintf_r+0xc0>
 80090b0:	465b      	mov	r3, fp
 80090b2:	4622      	mov	r2, r4
 80090b4:	4629      	mov	r1, r5
 80090b6:	4630      	mov	r0, r6
 80090b8:	f7ff ff93 	bl	8008fe2 <__sfputs_r>
 80090bc:	3001      	adds	r0, #1
 80090be:	f000 80aa 	beq.w	8009216 <_vfiprintf_r+0x20e>
 80090c2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80090c4:	445a      	add	r2, fp
 80090c6:	9209      	str	r2, [sp, #36]	; 0x24
 80090c8:	f89a 3000 	ldrb.w	r3, [sl]
 80090cc:	2b00      	cmp	r3, #0
 80090ce:	f000 80a2 	beq.w	8009216 <_vfiprintf_r+0x20e>
 80090d2:	2300      	movs	r3, #0
 80090d4:	f04f 32ff 	mov.w	r2, #4294967295
 80090d8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80090dc:	f10a 0a01 	add.w	sl, sl, #1
 80090e0:	9304      	str	r3, [sp, #16]
 80090e2:	9307      	str	r3, [sp, #28]
 80090e4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80090e8:	931a      	str	r3, [sp, #104]	; 0x68
 80090ea:	4654      	mov	r4, sl
 80090ec:	2205      	movs	r2, #5
 80090ee:	f814 1b01 	ldrb.w	r1, [r4], #1
 80090f2:	4858      	ldr	r0, [pc, #352]	; (8009254 <_vfiprintf_r+0x24c>)
 80090f4:	f7f7 f87c 	bl	80001f0 <memchr>
 80090f8:	9a04      	ldr	r2, [sp, #16]
 80090fa:	b9d8      	cbnz	r0, 8009134 <_vfiprintf_r+0x12c>
 80090fc:	06d1      	lsls	r1, r2, #27
 80090fe:	bf44      	itt	mi
 8009100:	2320      	movmi	r3, #32
 8009102:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009106:	0713      	lsls	r3, r2, #28
 8009108:	bf44      	itt	mi
 800910a:	232b      	movmi	r3, #43	; 0x2b
 800910c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009110:	f89a 3000 	ldrb.w	r3, [sl]
 8009114:	2b2a      	cmp	r3, #42	; 0x2a
 8009116:	d015      	beq.n	8009144 <_vfiprintf_r+0x13c>
 8009118:	9a07      	ldr	r2, [sp, #28]
 800911a:	4654      	mov	r4, sl
 800911c:	2000      	movs	r0, #0
 800911e:	f04f 0c0a 	mov.w	ip, #10
 8009122:	4621      	mov	r1, r4
 8009124:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009128:	3b30      	subs	r3, #48	; 0x30
 800912a:	2b09      	cmp	r3, #9
 800912c:	d94e      	bls.n	80091cc <_vfiprintf_r+0x1c4>
 800912e:	b1b0      	cbz	r0, 800915e <_vfiprintf_r+0x156>
 8009130:	9207      	str	r2, [sp, #28]
 8009132:	e014      	b.n	800915e <_vfiprintf_r+0x156>
 8009134:	eba0 0308 	sub.w	r3, r0, r8
 8009138:	fa09 f303 	lsl.w	r3, r9, r3
 800913c:	4313      	orrs	r3, r2
 800913e:	9304      	str	r3, [sp, #16]
 8009140:	46a2      	mov	sl, r4
 8009142:	e7d2      	b.n	80090ea <_vfiprintf_r+0xe2>
 8009144:	9b03      	ldr	r3, [sp, #12]
 8009146:	1d19      	adds	r1, r3, #4
 8009148:	681b      	ldr	r3, [r3, #0]
 800914a:	9103      	str	r1, [sp, #12]
 800914c:	2b00      	cmp	r3, #0
 800914e:	bfbb      	ittet	lt
 8009150:	425b      	neglt	r3, r3
 8009152:	f042 0202 	orrlt.w	r2, r2, #2
 8009156:	9307      	strge	r3, [sp, #28]
 8009158:	9307      	strlt	r3, [sp, #28]
 800915a:	bfb8      	it	lt
 800915c:	9204      	strlt	r2, [sp, #16]
 800915e:	7823      	ldrb	r3, [r4, #0]
 8009160:	2b2e      	cmp	r3, #46	; 0x2e
 8009162:	d10c      	bne.n	800917e <_vfiprintf_r+0x176>
 8009164:	7863      	ldrb	r3, [r4, #1]
 8009166:	2b2a      	cmp	r3, #42	; 0x2a
 8009168:	d135      	bne.n	80091d6 <_vfiprintf_r+0x1ce>
 800916a:	9b03      	ldr	r3, [sp, #12]
 800916c:	1d1a      	adds	r2, r3, #4
 800916e:	681b      	ldr	r3, [r3, #0]
 8009170:	9203      	str	r2, [sp, #12]
 8009172:	2b00      	cmp	r3, #0
 8009174:	bfb8      	it	lt
 8009176:	f04f 33ff 	movlt.w	r3, #4294967295
 800917a:	3402      	adds	r4, #2
 800917c:	9305      	str	r3, [sp, #20]
 800917e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8009264 <_vfiprintf_r+0x25c>
 8009182:	7821      	ldrb	r1, [r4, #0]
 8009184:	2203      	movs	r2, #3
 8009186:	4650      	mov	r0, sl
 8009188:	f7f7 f832 	bl	80001f0 <memchr>
 800918c:	b140      	cbz	r0, 80091a0 <_vfiprintf_r+0x198>
 800918e:	2340      	movs	r3, #64	; 0x40
 8009190:	eba0 000a 	sub.w	r0, r0, sl
 8009194:	fa03 f000 	lsl.w	r0, r3, r0
 8009198:	9b04      	ldr	r3, [sp, #16]
 800919a:	4303      	orrs	r3, r0
 800919c:	3401      	adds	r4, #1
 800919e:	9304      	str	r3, [sp, #16]
 80091a0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80091a4:	482c      	ldr	r0, [pc, #176]	; (8009258 <_vfiprintf_r+0x250>)
 80091a6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80091aa:	2206      	movs	r2, #6
 80091ac:	f7f7 f820 	bl	80001f0 <memchr>
 80091b0:	2800      	cmp	r0, #0
 80091b2:	d03f      	beq.n	8009234 <_vfiprintf_r+0x22c>
 80091b4:	4b29      	ldr	r3, [pc, #164]	; (800925c <_vfiprintf_r+0x254>)
 80091b6:	bb1b      	cbnz	r3, 8009200 <_vfiprintf_r+0x1f8>
 80091b8:	9b03      	ldr	r3, [sp, #12]
 80091ba:	3307      	adds	r3, #7
 80091bc:	f023 0307 	bic.w	r3, r3, #7
 80091c0:	3308      	adds	r3, #8
 80091c2:	9303      	str	r3, [sp, #12]
 80091c4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80091c6:	443b      	add	r3, r7
 80091c8:	9309      	str	r3, [sp, #36]	; 0x24
 80091ca:	e767      	b.n	800909c <_vfiprintf_r+0x94>
 80091cc:	fb0c 3202 	mla	r2, ip, r2, r3
 80091d0:	460c      	mov	r4, r1
 80091d2:	2001      	movs	r0, #1
 80091d4:	e7a5      	b.n	8009122 <_vfiprintf_r+0x11a>
 80091d6:	2300      	movs	r3, #0
 80091d8:	3401      	adds	r4, #1
 80091da:	9305      	str	r3, [sp, #20]
 80091dc:	4619      	mov	r1, r3
 80091de:	f04f 0c0a 	mov.w	ip, #10
 80091e2:	4620      	mov	r0, r4
 80091e4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80091e8:	3a30      	subs	r2, #48	; 0x30
 80091ea:	2a09      	cmp	r2, #9
 80091ec:	d903      	bls.n	80091f6 <_vfiprintf_r+0x1ee>
 80091ee:	2b00      	cmp	r3, #0
 80091f0:	d0c5      	beq.n	800917e <_vfiprintf_r+0x176>
 80091f2:	9105      	str	r1, [sp, #20]
 80091f4:	e7c3      	b.n	800917e <_vfiprintf_r+0x176>
 80091f6:	fb0c 2101 	mla	r1, ip, r1, r2
 80091fa:	4604      	mov	r4, r0
 80091fc:	2301      	movs	r3, #1
 80091fe:	e7f0      	b.n	80091e2 <_vfiprintf_r+0x1da>
 8009200:	ab03      	add	r3, sp, #12
 8009202:	9300      	str	r3, [sp, #0]
 8009204:	462a      	mov	r2, r5
 8009206:	4b16      	ldr	r3, [pc, #88]	; (8009260 <_vfiprintf_r+0x258>)
 8009208:	a904      	add	r1, sp, #16
 800920a:	4630      	mov	r0, r6
 800920c:	f7fd fe30 	bl	8006e70 <_printf_float>
 8009210:	4607      	mov	r7, r0
 8009212:	1c78      	adds	r0, r7, #1
 8009214:	d1d6      	bne.n	80091c4 <_vfiprintf_r+0x1bc>
 8009216:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009218:	07d9      	lsls	r1, r3, #31
 800921a:	d405      	bmi.n	8009228 <_vfiprintf_r+0x220>
 800921c:	89ab      	ldrh	r3, [r5, #12]
 800921e:	059a      	lsls	r2, r3, #22
 8009220:	d402      	bmi.n	8009228 <_vfiprintf_r+0x220>
 8009222:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009224:	f000 faaf 	bl	8009786 <__retarget_lock_release_recursive>
 8009228:	89ab      	ldrh	r3, [r5, #12]
 800922a:	065b      	lsls	r3, r3, #25
 800922c:	f53f af12 	bmi.w	8009054 <_vfiprintf_r+0x4c>
 8009230:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009232:	e711      	b.n	8009058 <_vfiprintf_r+0x50>
 8009234:	ab03      	add	r3, sp, #12
 8009236:	9300      	str	r3, [sp, #0]
 8009238:	462a      	mov	r2, r5
 800923a:	4b09      	ldr	r3, [pc, #36]	; (8009260 <_vfiprintf_r+0x258>)
 800923c:	a904      	add	r1, sp, #16
 800923e:	4630      	mov	r0, r6
 8009240:	f7fe f8ba 	bl	80073b8 <_printf_i>
 8009244:	e7e4      	b.n	8009210 <_vfiprintf_r+0x208>
 8009246:	bf00      	nop
 8009248:	0800b3cc 	.word	0x0800b3cc
 800924c:	0800b3ec 	.word	0x0800b3ec
 8009250:	0800b3ac 	.word	0x0800b3ac
 8009254:	0800b254 	.word	0x0800b254
 8009258:	0800b25e 	.word	0x0800b25e
 800925c:	08006e71 	.word	0x08006e71
 8009260:	08008fe3 	.word	0x08008fe3
 8009264:	0800b25a 	.word	0x0800b25a

08009268 <__swbuf_r>:
 8009268:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800926a:	460e      	mov	r6, r1
 800926c:	4614      	mov	r4, r2
 800926e:	4605      	mov	r5, r0
 8009270:	b118      	cbz	r0, 800927a <__swbuf_r+0x12>
 8009272:	6983      	ldr	r3, [r0, #24]
 8009274:	b90b      	cbnz	r3, 800927a <__swbuf_r+0x12>
 8009276:	f000 f9e7 	bl	8009648 <__sinit>
 800927a:	4b21      	ldr	r3, [pc, #132]	; (8009300 <__swbuf_r+0x98>)
 800927c:	429c      	cmp	r4, r3
 800927e:	d12b      	bne.n	80092d8 <__swbuf_r+0x70>
 8009280:	686c      	ldr	r4, [r5, #4]
 8009282:	69a3      	ldr	r3, [r4, #24]
 8009284:	60a3      	str	r3, [r4, #8]
 8009286:	89a3      	ldrh	r3, [r4, #12]
 8009288:	071a      	lsls	r2, r3, #28
 800928a:	d52f      	bpl.n	80092ec <__swbuf_r+0x84>
 800928c:	6923      	ldr	r3, [r4, #16]
 800928e:	b36b      	cbz	r3, 80092ec <__swbuf_r+0x84>
 8009290:	6923      	ldr	r3, [r4, #16]
 8009292:	6820      	ldr	r0, [r4, #0]
 8009294:	1ac0      	subs	r0, r0, r3
 8009296:	6963      	ldr	r3, [r4, #20]
 8009298:	b2f6      	uxtb	r6, r6
 800929a:	4283      	cmp	r3, r0
 800929c:	4637      	mov	r7, r6
 800929e:	dc04      	bgt.n	80092aa <__swbuf_r+0x42>
 80092a0:	4621      	mov	r1, r4
 80092a2:	4628      	mov	r0, r5
 80092a4:	f000 f93c 	bl	8009520 <_fflush_r>
 80092a8:	bb30      	cbnz	r0, 80092f8 <__swbuf_r+0x90>
 80092aa:	68a3      	ldr	r3, [r4, #8]
 80092ac:	3b01      	subs	r3, #1
 80092ae:	60a3      	str	r3, [r4, #8]
 80092b0:	6823      	ldr	r3, [r4, #0]
 80092b2:	1c5a      	adds	r2, r3, #1
 80092b4:	6022      	str	r2, [r4, #0]
 80092b6:	701e      	strb	r6, [r3, #0]
 80092b8:	6963      	ldr	r3, [r4, #20]
 80092ba:	3001      	adds	r0, #1
 80092bc:	4283      	cmp	r3, r0
 80092be:	d004      	beq.n	80092ca <__swbuf_r+0x62>
 80092c0:	89a3      	ldrh	r3, [r4, #12]
 80092c2:	07db      	lsls	r3, r3, #31
 80092c4:	d506      	bpl.n	80092d4 <__swbuf_r+0x6c>
 80092c6:	2e0a      	cmp	r6, #10
 80092c8:	d104      	bne.n	80092d4 <__swbuf_r+0x6c>
 80092ca:	4621      	mov	r1, r4
 80092cc:	4628      	mov	r0, r5
 80092ce:	f000 f927 	bl	8009520 <_fflush_r>
 80092d2:	b988      	cbnz	r0, 80092f8 <__swbuf_r+0x90>
 80092d4:	4638      	mov	r0, r7
 80092d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80092d8:	4b0a      	ldr	r3, [pc, #40]	; (8009304 <__swbuf_r+0x9c>)
 80092da:	429c      	cmp	r4, r3
 80092dc:	d101      	bne.n	80092e2 <__swbuf_r+0x7a>
 80092de:	68ac      	ldr	r4, [r5, #8]
 80092e0:	e7cf      	b.n	8009282 <__swbuf_r+0x1a>
 80092e2:	4b09      	ldr	r3, [pc, #36]	; (8009308 <__swbuf_r+0xa0>)
 80092e4:	429c      	cmp	r4, r3
 80092e6:	bf08      	it	eq
 80092e8:	68ec      	ldreq	r4, [r5, #12]
 80092ea:	e7ca      	b.n	8009282 <__swbuf_r+0x1a>
 80092ec:	4621      	mov	r1, r4
 80092ee:	4628      	mov	r0, r5
 80092f0:	f000 f81a 	bl	8009328 <__swsetup_r>
 80092f4:	2800      	cmp	r0, #0
 80092f6:	d0cb      	beq.n	8009290 <__swbuf_r+0x28>
 80092f8:	f04f 37ff 	mov.w	r7, #4294967295
 80092fc:	e7ea      	b.n	80092d4 <__swbuf_r+0x6c>
 80092fe:	bf00      	nop
 8009300:	0800b3cc 	.word	0x0800b3cc
 8009304:	0800b3ec 	.word	0x0800b3ec
 8009308:	0800b3ac 	.word	0x0800b3ac

0800930c <__ascii_wctomb>:
 800930c:	b149      	cbz	r1, 8009322 <__ascii_wctomb+0x16>
 800930e:	2aff      	cmp	r2, #255	; 0xff
 8009310:	bf85      	ittet	hi
 8009312:	238a      	movhi	r3, #138	; 0x8a
 8009314:	6003      	strhi	r3, [r0, #0]
 8009316:	700a      	strbls	r2, [r1, #0]
 8009318:	f04f 30ff 	movhi.w	r0, #4294967295
 800931c:	bf98      	it	ls
 800931e:	2001      	movls	r0, #1
 8009320:	4770      	bx	lr
 8009322:	4608      	mov	r0, r1
 8009324:	4770      	bx	lr
	...

08009328 <__swsetup_r>:
 8009328:	4b32      	ldr	r3, [pc, #200]	; (80093f4 <__swsetup_r+0xcc>)
 800932a:	b570      	push	{r4, r5, r6, lr}
 800932c:	681d      	ldr	r5, [r3, #0]
 800932e:	4606      	mov	r6, r0
 8009330:	460c      	mov	r4, r1
 8009332:	b125      	cbz	r5, 800933e <__swsetup_r+0x16>
 8009334:	69ab      	ldr	r3, [r5, #24]
 8009336:	b913      	cbnz	r3, 800933e <__swsetup_r+0x16>
 8009338:	4628      	mov	r0, r5
 800933a:	f000 f985 	bl	8009648 <__sinit>
 800933e:	4b2e      	ldr	r3, [pc, #184]	; (80093f8 <__swsetup_r+0xd0>)
 8009340:	429c      	cmp	r4, r3
 8009342:	d10f      	bne.n	8009364 <__swsetup_r+0x3c>
 8009344:	686c      	ldr	r4, [r5, #4]
 8009346:	89a3      	ldrh	r3, [r4, #12]
 8009348:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800934c:	0719      	lsls	r1, r3, #28
 800934e:	d42c      	bmi.n	80093aa <__swsetup_r+0x82>
 8009350:	06dd      	lsls	r5, r3, #27
 8009352:	d411      	bmi.n	8009378 <__swsetup_r+0x50>
 8009354:	2309      	movs	r3, #9
 8009356:	6033      	str	r3, [r6, #0]
 8009358:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800935c:	81a3      	strh	r3, [r4, #12]
 800935e:	f04f 30ff 	mov.w	r0, #4294967295
 8009362:	e03e      	b.n	80093e2 <__swsetup_r+0xba>
 8009364:	4b25      	ldr	r3, [pc, #148]	; (80093fc <__swsetup_r+0xd4>)
 8009366:	429c      	cmp	r4, r3
 8009368:	d101      	bne.n	800936e <__swsetup_r+0x46>
 800936a:	68ac      	ldr	r4, [r5, #8]
 800936c:	e7eb      	b.n	8009346 <__swsetup_r+0x1e>
 800936e:	4b24      	ldr	r3, [pc, #144]	; (8009400 <__swsetup_r+0xd8>)
 8009370:	429c      	cmp	r4, r3
 8009372:	bf08      	it	eq
 8009374:	68ec      	ldreq	r4, [r5, #12]
 8009376:	e7e6      	b.n	8009346 <__swsetup_r+0x1e>
 8009378:	0758      	lsls	r0, r3, #29
 800937a:	d512      	bpl.n	80093a2 <__swsetup_r+0x7a>
 800937c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800937e:	b141      	cbz	r1, 8009392 <__swsetup_r+0x6a>
 8009380:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009384:	4299      	cmp	r1, r3
 8009386:	d002      	beq.n	800938e <__swsetup_r+0x66>
 8009388:	4630      	mov	r0, r6
 800938a:	f7ff fb6f 	bl	8008a6c <_free_r>
 800938e:	2300      	movs	r3, #0
 8009390:	6363      	str	r3, [r4, #52]	; 0x34
 8009392:	89a3      	ldrh	r3, [r4, #12]
 8009394:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009398:	81a3      	strh	r3, [r4, #12]
 800939a:	2300      	movs	r3, #0
 800939c:	6063      	str	r3, [r4, #4]
 800939e:	6923      	ldr	r3, [r4, #16]
 80093a0:	6023      	str	r3, [r4, #0]
 80093a2:	89a3      	ldrh	r3, [r4, #12]
 80093a4:	f043 0308 	orr.w	r3, r3, #8
 80093a8:	81a3      	strh	r3, [r4, #12]
 80093aa:	6923      	ldr	r3, [r4, #16]
 80093ac:	b94b      	cbnz	r3, 80093c2 <__swsetup_r+0x9a>
 80093ae:	89a3      	ldrh	r3, [r4, #12]
 80093b0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80093b4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80093b8:	d003      	beq.n	80093c2 <__swsetup_r+0x9a>
 80093ba:	4621      	mov	r1, r4
 80093bc:	4630      	mov	r0, r6
 80093be:	f000 fa07 	bl	80097d0 <__smakebuf_r>
 80093c2:	89a0      	ldrh	r0, [r4, #12]
 80093c4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80093c8:	f010 0301 	ands.w	r3, r0, #1
 80093cc:	d00a      	beq.n	80093e4 <__swsetup_r+0xbc>
 80093ce:	2300      	movs	r3, #0
 80093d0:	60a3      	str	r3, [r4, #8]
 80093d2:	6963      	ldr	r3, [r4, #20]
 80093d4:	425b      	negs	r3, r3
 80093d6:	61a3      	str	r3, [r4, #24]
 80093d8:	6923      	ldr	r3, [r4, #16]
 80093da:	b943      	cbnz	r3, 80093ee <__swsetup_r+0xc6>
 80093dc:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80093e0:	d1ba      	bne.n	8009358 <__swsetup_r+0x30>
 80093e2:	bd70      	pop	{r4, r5, r6, pc}
 80093e4:	0781      	lsls	r1, r0, #30
 80093e6:	bf58      	it	pl
 80093e8:	6963      	ldrpl	r3, [r4, #20]
 80093ea:	60a3      	str	r3, [r4, #8]
 80093ec:	e7f4      	b.n	80093d8 <__swsetup_r+0xb0>
 80093ee:	2000      	movs	r0, #0
 80093f0:	e7f7      	b.n	80093e2 <__swsetup_r+0xba>
 80093f2:	bf00      	nop
 80093f4:	20000010 	.word	0x20000010
 80093f8:	0800b3cc 	.word	0x0800b3cc
 80093fc:	0800b3ec 	.word	0x0800b3ec
 8009400:	0800b3ac 	.word	0x0800b3ac

08009404 <abort>:
 8009404:	b508      	push	{r3, lr}
 8009406:	2006      	movs	r0, #6
 8009408:	f000 fa52 	bl	80098b0 <raise>
 800940c:	2001      	movs	r0, #1
 800940e:	f7f9 fbad 	bl	8002b6c <_exit>
	...

08009414 <__sflush_r>:
 8009414:	898a      	ldrh	r2, [r1, #12]
 8009416:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800941a:	4605      	mov	r5, r0
 800941c:	0710      	lsls	r0, r2, #28
 800941e:	460c      	mov	r4, r1
 8009420:	d458      	bmi.n	80094d4 <__sflush_r+0xc0>
 8009422:	684b      	ldr	r3, [r1, #4]
 8009424:	2b00      	cmp	r3, #0
 8009426:	dc05      	bgt.n	8009434 <__sflush_r+0x20>
 8009428:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800942a:	2b00      	cmp	r3, #0
 800942c:	dc02      	bgt.n	8009434 <__sflush_r+0x20>
 800942e:	2000      	movs	r0, #0
 8009430:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009434:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009436:	2e00      	cmp	r6, #0
 8009438:	d0f9      	beq.n	800942e <__sflush_r+0x1a>
 800943a:	2300      	movs	r3, #0
 800943c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009440:	682f      	ldr	r7, [r5, #0]
 8009442:	602b      	str	r3, [r5, #0]
 8009444:	d032      	beq.n	80094ac <__sflush_r+0x98>
 8009446:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009448:	89a3      	ldrh	r3, [r4, #12]
 800944a:	075a      	lsls	r2, r3, #29
 800944c:	d505      	bpl.n	800945a <__sflush_r+0x46>
 800944e:	6863      	ldr	r3, [r4, #4]
 8009450:	1ac0      	subs	r0, r0, r3
 8009452:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009454:	b10b      	cbz	r3, 800945a <__sflush_r+0x46>
 8009456:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009458:	1ac0      	subs	r0, r0, r3
 800945a:	2300      	movs	r3, #0
 800945c:	4602      	mov	r2, r0
 800945e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009460:	6a21      	ldr	r1, [r4, #32]
 8009462:	4628      	mov	r0, r5
 8009464:	47b0      	blx	r6
 8009466:	1c43      	adds	r3, r0, #1
 8009468:	89a3      	ldrh	r3, [r4, #12]
 800946a:	d106      	bne.n	800947a <__sflush_r+0x66>
 800946c:	6829      	ldr	r1, [r5, #0]
 800946e:	291d      	cmp	r1, #29
 8009470:	d82c      	bhi.n	80094cc <__sflush_r+0xb8>
 8009472:	4a2a      	ldr	r2, [pc, #168]	; (800951c <__sflush_r+0x108>)
 8009474:	40ca      	lsrs	r2, r1
 8009476:	07d6      	lsls	r6, r2, #31
 8009478:	d528      	bpl.n	80094cc <__sflush_r+0xb8>
 800947a:	2200      	movs	r2, #0
 800947c:	6062      	str	r2, [r4, #4]
 800947e:	04d9      	lsls	r1, r3, #19
 8009480:	6922      	ldr	r2, [r4, #16]
 8009482:	6022      	str	r2, [r4, #0]
 8009484:	d504      	bpl.n	8009490 <__sflush_r+0x7c>
 8009486:	1c42      	adds	r2, r0, #1
 8009488:	d101      	bne.n	800948e <__sflush_r+0x7a>
 800948a:	682b      	ldr	r3, [r5, #0]
 800948c:	b903      	cbnz	r3, 8009490 <__sflush_r+0x7c>
 800948e:	6560      	str	r0, [r4, #84]	; 0x54
 8009490:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009492:	602f      	str	r7, [r5, #0]
 8009494:	2900      	cmp	r1, #0
 8009496:	d0ca      	beq.n	800942e <__sflush_r+0x1a>
 8009498:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800949c:	4299      	cmp	r1, r3
 800949e:	d002      	beq.n	80094a6 <__sflush_r+0x92>
 80094a0:	4628      	mov	r0, r5
 80094a2:	f7ff fae3 	bl	8008a6c <_free_r>
 80094a6:	2000      	movs	r0, #0
 80094a8:	6360      	str	r0, [r4, #52]	; 0x34
 80094aa:	e7c1      	b.n	8009430 <__sflush_r+0x1c>
 80094ac:	6a21      	ldr	r1, [r4, #32]
 80094ae:	2301      	movs	r3, #1
 80094b0:	4628      	mov	r0, r5
 80094b2:	47b0      	blx	r6
 80094b4:	1c41      	adds	r1, r0, #1
 80094b6:	d1c7      	bne.n	8009448 <__sflush_r+0x34>
 80094b8:	682b      	ldr	r3, [r5, #0]
 80094ba:	2b00      	cmp	r3, #0
 80094bc:	d0c4      	beq.n	8009448 <__sflush_r+0x34>
 80094be:	2b1d      	cmp	r3, #29
 80094c0:	d001      	beq.n	80094c6 <__sflush_r+0xb2>
 80094c2:	2b16      	cmp	r3, #22
 80094c4:	d101      	bne.n	80094ca <__sflush_r+0xb6>
 80094c6:	602f      	str	r7, [r5, #0]
 80094c8:	e7b1      	b.n	800942e <__sflush_r+0x1a>
 80094ca:	89a3      	ldrh	r3, [r4, #12]
 80094cc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80094d0:	81a3      	strh	r3, [r4, #12]
 80094d2:	e7ad      	b.n	8009430 <__sflush_r+0x1c>
 80094d4:	690f      	ldr	r7, [r1, #16]
 80094d6:	2f00      	cmp	r7, #0
 80094d8:	d0a9      	beq.n	800942e <__sflush_r+0x1a>
 80094da:	0793      	lsls	r3, r2, #30
 80094dc:	680e      	ldr	r6, [r1, #0]
 80094de:	bf08      	it	eq
 80094e0:	694b      	ldreq	r3, [r1, #20]
 80094e2:	600f      	str	r7, [r1, #0]
 80094e4:	bf18      	it	ne
 80094e6:	2300      	movne	r3, #0
 80094e8:	eba6 0807 	sub.w	r8, r6, r7
 80094ec:	608b      	str	r3, [r1, #8]
 80094ee:	f1b8 0f00 	cmp.w	r8, #0
 80094f2:	dd9c      	ble.n	800942e <__sflush_r+0x1a>
 80094f4:	6a21      	ldr	r1, [r4, #32]
 80094f6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80094f8:	4643      	mov	r3, r8
 80094fa:	463a      	mov	r2, r7
 80094fc:	4628      	mov	r0, r5
 80094fe:	47b0      	blx	r6
 8009500:	2800      	cmp	r0, #0
 8009502:	dc06      	bgt.n	8009512 <__sflush_r+0xfe>
 8009504:	89a3      	ldrh	r3, [r4, #12]
 8009506:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800950a:	81a3      	strh	r3, [r4, #12]
 800950c:	f04f 30ff 	mov.w	r0, #4294967295
 8009510:	e78e      	b.n	8009430 <__sflush_r+0x1c>
 8009512:	4407      	add	r7, r0
 8009514:	eba8 0800 	sub.w	r8, r8, r0
 8009518:	e7e9      	b.n	80094ee <__sflush_r+0xda>
 800951a:	bf00      	nop
 800951c:	20400001 	.word	0x20400001

08009520 <_fflush_r>:
 8009520:	b538      	push	{r3, r4, r5, lr}
 8009522:	690b      	ldr	r3, [r1, #16]
 8009524:	4605      	mov	r5, r0
 8009526:	460c      	mov	r4, r1
 8009528:	b913      	cbnz	r3, 8009530 <_fflush_r+0x10>
 800952a:	2500      	movs	r5, #0
 800952c:	4628      	mov	r0, r5
 800952e:	bd38      	pop	{r3, r4, r5, pc}
 8009530:	b118      	cbz	r0, 800953a <_fflush_r+0x1a>
 8009532:	6983      	ldr	r3, [r0, #24]
 8009534:	b90b      	cbnz	r3, 800953a <_fflush_r+0x1a>
 8009536:	f000 f887 	bl	8009648 <__sinit>
 800953a:	4b14      	ldr	r3, [pc, #80]	; (800958c <_fflush_r+0x6c>)
 800953c:	429c      	cmp	r4, r3
 800953e:	d11b      	bne.n	8009578 <_fflush_r+0x58>
 8009540:	686c      	ldr	r4, [r5, #4]
 8009542:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009546:	2b00      	cmp	r3, #0
 8009548:	d0ef      	beq.n	800952a <_fflush_r+0xa>
 800954a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800954c:	07d0      	lsls	r0, r2, #31
 800954e:	d404      	bmi.n	800955a <_fflush_r+0x3a>
 8009550:	0599      	lsls	r1, r3, #22
 8009552:	d402      	bmi.n	800955a <_fflush_r+0x3a>
 8009554:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009556:	f000 f915 	bl	8009784 <__retarget_lock_acquire_recursive>
 800955a:	4628      	mov	r0, r5
 800955c:	4621      	mov	r1, r4
 800955e:	f7ff ff59 	bl	8009414 <__sflush_r>
 8009562:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009564:	07da      	lsls	r2, r3, #31
 8009566:	4605      	mov	r5, r0
 8009568:	d4e0      	bmi.n	800952c <_fflush_r+0xc>
 800956a:	89a3      	ldrh	r3, [r4, #12]
 800956c:	059b      	lsls	r3, r3, #22
 800956e:	d4dd      	bmi.n	800952c <_fflush_r+0xc>
 8009570:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009572:	f000 f908 	bl	8009786 <__retarget_lock_release_recursive>
 8009576:	e7d9      	b.n	800952c <_fflush_r+0xc>
 8009578:	4b05      	ldr	r3, [pc, #20]	; (8009590 <_fflush_r+0x70>)
 800957a:	429c      	cmp	r4, r3
 800957c:	d101      	bne.n	8009582 <_fflush_r+0x62>
 800957e:	68ac      	ldr	r4, [r5, #8]
 8009580:	e7df      	b.n	8009542 <_fflush_r+0x22>
 8009582:	4b04      	ldr	r3, [pc, #16]	; (8009594 <_fflush_r+0x74>)
 8009584:	429c      	cmp	r4, r3
 8009586:	bf08      	it	eq
 8009588:	68ec      	ldreq	r4, [r5, #12]
 800958a:	e7da      	b.n	8009542 <_fflush_r+0x22>
 800958c:	0800b3cc 	.word	0x0800b3cc
 8009590:	0800b3ec 	.word	0x0800b3ec
 8009594:	0800b3ac 	.word	0x0800b3ac

08009598 <std>:
 8009598:	2300      	movs	r3, #0
 800959a:	b510      	push	{r4, lr}
 800959c:	4604      	mov	r4, r0
 800959e:	e9c0 3300 	strd	r3, r3, [r0]
 80095a2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80095a6:	6083      	str	r3, [r0, #8]
 80095a8:	8181      	strh	r1, [r0, #12]
 80095aa:	6643      	str	r3, [r0, #100]	; 0x64
 80095ac:	81c2      	strh	r2, [r0, #14]
 80095ae:	6183      	str	r3, [r0, #24]
 80095b0:	4619      	mov	r1, r3
 80095b2:	2208      	movs	r2, #8
 80095b4:	305c      	adds	r0, #92	; 0x5c
 80095b6:	f7fd fbb3 	bl	8006d20 <memset>
 80095ba:	4b05      	ldr	r3, [pc, #20]	; (80095d0 <std+0x38>)
 80095bc:	6263      	str	r3, [r4, #36]	; 0x24
 80095be:	4b05      	ldr	r3, [pc, #20]	; (80095d4 <std+0x3c>)
 80095c0:	62a3      	str	r3, [r4, #40]	; 0x28
 80095c2:	4b05      	ldr	r3, [pc, #20]	; (80095d8 <std+0x40>)
 80095c4:	62e3      	str	r3, [r4, #44]	; 0x2c
 80095c6:	4b05      	ldr	r3, [pc, #20]	; (80095dc <std+0x44>)
 80095c8:	6224      	str	r4, [r4, #32]
 80095ca:	6323      	str	r3, [r4, #48]	; 0x30
 80095cc:	bd10      	pop	{r4, pc}
 80095ce:	bf00      	nop
 80095d0:	080098e9 	.word	0x080098e9
 80095d4:	0800990b 	.word	0x0800990b
 80095d8:	08009943 	.word	0x08009943
 80095dc:	08009967 	.word	0x08009967

080095e0 <_cleanup_r>:
 80095e0:	4901      	ldr	r1, [pc, #4]	; (80095e8 <_cleanup_r+0x8>)
 80095e2:	f000 b8af 	b.w	8009744 <_fwalk_reent>
 80095e6:	bf00      	nop
 80095e8:	08009521 	.word	0x08009521

080095ec <__sfmoreglue>:
 80095ec:	b570      	push	{r4, r5, r6, lr}
 80095ee:	1e4a      	subs	r2, r1, #1
 80095f0:	2568      	movs	r5, #104	; 0x68
 80095f2:	4355      	muls	r5, r2
 80095f4:	460e      	mov	r6, r1
 80095f6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80095fa:	f7ff fa87 	bl	8008b0c <_malloc_r>
 80095fe:	4604      	mov	r4, r0
 8009600:	b140      	cbz	r0, 8009614 <__sfmoreglue+0x28>
 8009602:	2100      	movs	r1, #0
 8009604:	e9c0 1600 	strd	r1, r6, [r0]
 8009608:	300c      	adds	r0, #12
 800960a:	60a0      	str	r0, [r4, #8]
 800960c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8009610:	f7fd fb86 	bl	8006d20 <memset>
 8009614:	4620      	mov	r0, r4
 8009616:	bd70      	pop	{r4, r5, r6, pc}

08009618 <__sfp_lock_acquire>:
 8009618:	4801      	ldr	r0, [pc, #4]	; (8009620 <__sfp_lock_acquire+0x8>)
 800961a:	f000 b8b3 	b.w	8009784 <__retarget_lock_acquire_recursive>
 800961e:	bf00      	nop
 8009620:	20000454 	.word	0x20000454

08009624 <__sfp_lock_release>:
 8009624:	4801      	ldr	r0, [pc, #4]	; (800962c <__sfp_lock_release+0x8>)
 8009626:	f000 b8ae 	b.w	8009786 <__retarget_lock_release_recursive>
 800962a:	bf00      	nop
 800962c:	20000454 	.word	0x20000454

08009630 <__sinit_lock_acquire>:
 8009630:	4801      	ldr	r0, [pc, #4]	; (8009638 <__sinit_lock_acquire+0x8>)
 8009632:	f000 b8a7 	b.w	8009784 <__retarget_lock_acquire_recursive>
 8009636:	bf00      	nop
 8009638:	2000044f 	.word	0x2000044f

0800963c <__sinit_lock_release>:
 800963c:	4801      	ldr	r0, [pc, #4]	; (8009644 <__sinit_lock_release+0x8>)
 800963e:	f000 b8a2 	b.w	8009786 <__retarget_lock_release_recursive>
 8009642:	bf00      	nop
 8009644:	2000044f 	.word	0x2000044f

08009648 <__sinit>:
 8009648:	b510      	push	{r4, lr}
 800964a:	4604      	mov	r4, r0
 800964c:	f7ff fff0 	bl	8009630 <__sinit_lock_acquire>
 8009650:	69a3      	ldr	r3, [r4, #24]
 8009652:	b11b      	cbz	r3, 800965c <__sinit+0x14>
 8009654:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009658:	f7ff bff0 	b.w	800963c <__sinit_lock_release>
 800965c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8009660:	6523      	str	r3, [r4, #80]	; 0x50
 8009662:	4b13      	ldr	r3, [pc, #76]	; (80096b0 <__sinit+0x68>)
 8009664:	4a13      	ldr	r2, [pc, #76]	; (80096b4 <__sinit+0x6c>)
 8009666:	681b      	ldr	r3, [r3, #0]
 8009668:	62a2      	str	r2, [r4, #40]	; 0x28
 800966a:	42a3      	cmp	r3, r4
 800966c:	bf04      	itt	eq
 800966e:	2301      	moveq	r3, #1
 8009670:	61a3      	streq	r3, [r4, #24]
 8009672:	4620      	mov	r0, r4
 8009674:	f000 f820 	bl	80096b8 <__sfp>
 8009678:	6060      	str	r0, [r4, #4]
 800967a:	4620      	mov	r0, r4
 800967c:	f000 f81c 	bl	80096b8 <__sfp>
 8009680:	60a0      	str	r0, [r4, #8]
 8009682:	4620      	mov	r0, r4
 8009684:	f000 f818 	bl	80096b8 <__sfp>
 8009688:	2200      	movs	r2, #0
 800968a:	60e0      	str	r0, [r4, #12]
 800968c:	2104      	movs	r1, #4
 800968e:	6860      	ldr	r0, [r4, #4]
 8009690:	f7ff ff82 	bl	8009598 <std>
 8009694:	68a0      	ldr	r0, [r4, #8]
 8009696:	2201      	movs	r2, #1
 8009698:	2109      	movs	r1, #9
 800969a:	f7ff ff7d 	bl	8009598 <std>
 800969e:	68e0      	ldr	r0, [r4, #12]
 80096a0:	2202      	movs	r2, #2
 80096a2:	2112      	movs	r1, #18
 80096a4:	f7ff ff78 	bl	8009598 <std>
 80096a8:	2301      	movs	r3, #1
 80096aa:	61a3      	str	r3, [r4, #24]
 80096ac:	e7d2      	b.n	8009654 <__sinit+0xc>
 80096ae:	bf00      	nop
 80096b0:	0800b02c 	.word	0x0800b02c
 80096b4:	080095e1 	.word	0x080095e1

080096b8 <__sfp>:
 80096b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80096ba:	4607      	mov	r7, r0
 80096bc:	f7ff ffac 	bl	8009618 <__sfp_lock_acquire>
 80096c0:	4b1e      	ldr	r3, [pc, #120]	; (800973c <__sfp+0x84>)
 80096c2:	681e      	ldr	r6, [r3, #0]
 80096c4:	69b3      	ldr	r3, [r6, #24]
 80096c6:	b913      	cbnz	r3, 80096ce <__sfp+0x16>
 80096c8:	4630      	mov	r0, r6
 80096ca:	f7ff ffbd 	bl	8009648 <__sinit>
 80096ce:	3648      	adds	r6, #72	; 0x48
 80096d0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80096d4:	3b01      	subs	r3, #1
 80096d6:	d503      	bpl.n	80096e0 <__sfp+0x28>
 80096d8:	6833      	ldr	r3, [r6, #0]
 80096da:	b30b      	cbz	r3, 8009720 <__sfp+0x68>
 80096dc:	6836      	ldr	r6, [r6, #0]
 80096de:	e7f7      	b.n	80096d0 <__sfp+0x18>
 80096e0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80096e4:	b9d5      	cbnz	r5, 800971c <__sfp+0x64>
 80096e6:	4b16      	ldr	r3, [pc, #88]	; (8009740 <__sfp+0x88>)
 80096e8:	60e3      	str	r3, [r4, #12]
 80096ea:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80096ee:	6665      	str	r5, [r4, #100]	; 0x64
 80096f0:	f000 f847 	bl	8009782 <__retarget_lock_init_recursive>
 80096f4:	f7ff ff96 	bl	8009624 <__sfp_lock_release>
 80096f8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80096fc:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8009700:	6025      	str	r5, [r4, #0]
 8009702:	61a5      	str	r5, [r4, #24]
 8009704:	2208      	movs	r2, #8
 8009706:	4629      	mov	r1, r5
 8009708:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800970c:	f7fd fb08 	bl	8006d20 <memset>
 8009710:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8009714:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8009718:	4620      	mov	r0, r4
 800971a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800971c:	3468      	adds	r4, #104	; 0x68
 800971e:	e7d9      	b.n	80096d4 <__sfp+0x1c>
 8009720:	2104      	movs	r1, #4
 8009722:	4638      	mov	r0, r7
 8009724:	f7ff ff62 	bl	80095ec <__sfmoreglue>
 8009728:	4604      	mov	r4, r0
 800972a:	6030      	str	r0, [r6, #0]
 800972c:	2800      	cmp	r0, #0
 800972e:	d1d5      	bne.n	80096dc <__sfp+0x24>
 8009730:	f7ff ff78 	bl	8009624 <__sfp_lock_release>
 8009734:	230c      	movs	r3, #12
 8009736:	603b      	str	r3, [r7, #0]
 8009738:	e7ee      	b.n	8009718 <__sfp+0x60>
 800973a:	bf00      	nop
 800973c:	0800b02c 	.word	0x0800b02c
 8009740:	ffff0001 	.word	0xffff0001

08009744 <_fwalk_reent>:
 8009744:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009748:	4606      	mov	r6, r0
 800974a:	4688      	mov	r8, r1
 800974c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8009750:	2700      	movs	r7, #0
 8009752:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009756:	f1b9 0901 	subs.w	r9, r9, #1
 800975a:	d505      	bpl.n	8009768 <_fwalk_reent+0x24>
 800975c:	6824      	ldr	r4, [r4, #0]
 800975e:	2c00      	cmp	r4, #0
 8009760:	d1f7      	bne.n	8009752 <_fwalk_reent+0xe>
 8009762:	4638      	mov	r0, r7
 8009764:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009768:	89ab      	ldrh	r3, [r5, #12]
 800976a:	2b01      	cmp	r3, #1
 800976c:	d907      	bls.n	800977e <_fwalk_reent+0x3a>
 800976e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009772:	3301      	adds	r3, #1
 8009774:	d003      	beq.n	800977e <_fwalk_reent+0x3a>
 8009776:	4629      	mov	r1, r5
 8009778:	4630      	mov	r0, r6
 800977a:	47c0      	blx	r8
 800977c:	4307      	orrs	r7, r0
 800977e:	3568      	adds	r5, #104	; 0x68
 8009780:	e7e9      	b.n	8009756 <_fwalk_reent+0x12>

08009782 <__retarget_lock_init_recursive>:
 8009782:	4770      	bx	lr

08009784 <__retarget_lock_acquire_recursive>:
 8009784:	4770      	bx	lr

08009786 <__retarget_lock_release_recursive>:
 8009786:	4770      	bx	lr

08009788 <__swhatbuf_r>:
 8009788:	b570      	push	{r4, r5, r6, lr}
 800978a:	460e      	mov	r6, r1
 800978c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009790:	2900      	cmp	r1, #0
 8009792:	b096      	sub	sp, #88	; 0x58
 8009794:	4614      	mov	r4, r2
 8009796:	461d      	mov	r5, r3
 8009798:	da07      	bge.n	80097aa <__swhatbuf_r+0x22>
 800979a:	2300      	movs	r3, #0
 800979c:	602b      	str	r3, [r5, #0]
 800979e:	89b3      	ldrh	r3, [r6, #12]
 80097a0:	061a      	lsls	r2, r3, #24
 80097a2:	d410      	bmi.n	80097c6 <__swhatbuf_r+0x3e>
 80097a4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80097a8:	e00e      	b.n	80097c8 <__swhatbuf_r+0x40>
 80097aa:	466a      	mov	r2, sp
 80097ac:	f000 f902 	bl	80099b4 <_fstat_r>
 80097b0:	2800      	cmp	r0, #0
 80097b2:	dbf2      	blt.n	800979a <__swhatbuf_r+0x12>
 80097b4:	9a01      	ldr	r2, [sp, #4]
 80097b6:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80097ba:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80097be:	425a      	negs	r2, r3
 80097c0:	415a      	adcs	r2, r3
 80097c2:	602a      	str	r2, [r5, #0]
 80097c4:	e7ee      	b.n	80097a4 <__swhatbuf_r+0x1c>
 80097c6:	2340      	movs	r3, #64	; 0x40
 80097c8:	2000      	movs	r0, #0
 80097ca:	6023      	str	r3, [r4, #0]
 80097cc:	b016      	add	sp, #88	; 0x58
 80097ce:	bd70      	pop	{r4, r5, r6, pc}

080097d0 <__smakebuf_r>:
 80097d0:	898b      	ldrh	r3, [r1, #12]
 80097d2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80097d4:	079d      	lsls	r5, r3, #30
 80097d6:	4606      	mov	r6, r0
 80097d8:	460c      	mov	r4, r1
 80097da:	d507      	bpl.n	80097ec <__smakebuf_r+0x1c>
 80097dc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80097e0:	6023      	str	r3, [r4, #0]
 80097e2:	6123      	str	r3, [r4, #16]
 80097e4:	2301      	movs	r3, #1
 80097e6:	6163      	str	r3, [r4, #20]
 80097e8:	b002      	add	sp, #8
 80097ea:	bd70      	pop	{r4, r5, r6, pc}
 80097ec:	ab01      	add	r3, sp, #4
 80097ee:	466a      	mov	r2, sp
 80097f0:	f7ff ffca 	bl	8009788 <__swhatbuf_r>
 80097f4:	9900      	ldr	r1, [sp, #0]
 80097f6:	4605      	mov	r5, r0
 80097f8:	4630      	mov	r0, r6
 80097fa:	f7ff f987 	bl	8008b0c <_malloc_r>
 80097fe:	b948      	cbnz	r0, 8009814 <__smakebuf_r+0x44>
 8009800:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009804:	059a      	lsls	r2, r3, #22
 8009806:	d4ef      	bmi.n	80097e8 <__smakebuf_r+0x18>
 8009808:	f023 0303 	bic.w	r3, r3, #3
 800980c:	f043 0302 	orr.w	r3, r3, #2
 8009810:	81a3      	strh	r3, [r4, #12]
 8009812:	e7e3      	b.n	80097dc <__smakebuf_r+0xc>
 8009814:	4b0d      	ldr	r3, [pc, #52]	; (800984c <__smakebuf_r+0x7c>)
 8009816:	62b3      	str	r3, [r6, #40]	; 0x28
 8009818:	89a3      	ldrh	r3, [r4, #12]
 800981a:	6020      	str	r0, [r4, #0]
 800981c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009820:	81a3      	strh	r3, [r4, #12]
 8009822:	9b00      	ldr	r3, [sp, #0]
 8009824:	6163      	str	r3, [r4, #20]
 8009826:	9b01      	ldr	r3, [sp, #4]
 8009828:	6120      	str	r0, [r4, #16]
 800982a:	b15b      	cbz	r3, 8009844 <__smakebuf_r+0x74>
 800982c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009830:	4630      	mov	r0, r6
 8009832:	f000 f8d1 	bl	80099d8 <_isatty_r>
 8009836:	b128      	cbz	r0, 8009844 <__smakebuf_r+0x74>
 8009838:	89a3      	ldrh	r3, [r4, #12]
 800983a:	f023 0303 	bic.w	r3, r3, #3
 800983e:	f043 0301 	orr.w	r3, r3, #1
 8009842:	81a3      	strh	r3, [r4, #12]
 8009844:	89a0      	ldrh	r0, [r4, #12]
 8009846:	4305      	orrs	r5, r0
 8009848:	81a5      	strh	r5, [r4, #12]
 800984a:	e7cd      	b.n	80097e8 <__smakebuf_r+0x18>
 800984c:	080095e1 	.word	0x080095e1

08009850 <_malloc_usable_size_r>:
 8009850:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009854:	1f18      	subs	r0, r3, #4
 8009856:	2b00      	cmp	r3, #0
 8009858:	bfbc      	itt	lt
 800985a:	580b      	ldrlt	r3, [r1, r0]
 800985c:	18c0      	addlt	r0, r0, r3
 800985e:	4770      	bx	lr

08009860 <_raise_r>:
 8009860:	291f      	cmp	r1, #31
 8009862:	b538      	push	{r3, r4, r5, lr}
 8009864:	4604      	mov	r4, r0
 8009866:	460d      	mov	r5, r1
 8009868:	d904      	bls.n	8009874 <_raise_r+0x14>
 800986a:	2316      	movs	r3, #22
 800986c:	6003      	str	r3, [r0, #0]
 800986e:	f04f 30ff 	mov.w	r0, #4294967295
 8009872:	bd38      	pop	{r3, r4, r5, pc}
 8009874:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8009876:	b112      	cbz	r2, 800987e <_raise_r+0x1e>
 8009878:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800987c:	b94b      	cbnz	r3, 8009892 <_raise_r+0x32>
 800987e:	4620      	mov	r0, r4
 8009880:	f000 f830 	bl	80098e4 <_getpid_r>
 8009884:	462a      	mov	r2, r5
 8009886:	4601      	mov	r1, r0
 8009888:	4620      	mov	r0, r4
 800988a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800988e:	f000 b817 	b.w	80098c0 <_kill_r>
 8009892:	2b01      	cmp	r3, #1
 8009894:	d00a      	beq.n	80098ac <_raise_r+0x4c>
 8009896:	1c59      	adds	r1, r3, #1
 8009898:	d103      	bne.n	80098a2 <_raise_r+0x42>
 800989a:	2316      	movs	r3, #22
 800989c:	6003      	str	r3, [r0, #0]
 800989e:	2001      	movs	r0, #1
 80098a0:	e7e7      	b.n	8009872 <_raise_r+0x12>
 80098a2:	2400      	movs	r4, #0
 80098a4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80098a8:	4628      	mov	r0, r5
 80098aa:	4798      	blx	r3
 80098ac:	2000      	movs	r0, #0
 80098ae:	e7e0      	b.n	8009872 <_raise_r+0x12>

080098b0 <raise>:
 80098b0:	4b02      	ldr	r3, [pc, #8]	; (80098bc <raise+0xc>)
 80098b2:	4601      	mov	r1, r0
 80098b4:	6818      	ldr	r0, [r3, #0]
 80098b6:	f7ff bfd3 	b.w	8009860 <_raise_r>
 80098ba:	bf00      	nop
 80098bc:	20000010 	.word	0x20000010

080098c0 <_kill_r>:
 80098c0:	b538      	push	{r3, r4, r5, lr}
 80098c2:	4d07      	ldr	r5, [pc, #28]	; (80098e0 <_kill_r+0x20>)
 80098c4:	2300      	movs	r3, #0
 80098c6:	4604      	mov	r4, r0
 80098c8:	4608      	mov	r0, r1
 80098ca:	4611      	mov	r1, r2
 80098cc:	602b      	str	r3, [r5, #0]
 80098ce:	f7f9 f93d 	bl	8002b4c <_kill>
 80098d2:	1c43      	adds	r3, r0, #1
 80098d4:	d102      	bne.n	80098dc <_kill_r+0x1c>
 80098d6:	682b      	ldr	r3, [r5, #0]
 80098d8:	b103      	cbz	r3, 80098dc <_kill_r+0x1c>
 80098da:	6023      	str	r3, [r4, #0]
 80098dc:	bd38      	pop	{r3, r4, r5, pc}
 80098de:	bf00      	nop
 80098e0:	20000448 	.word	0x20000448

080098e4 <_getpid_r>:
 80098e4:	f7f9 b92a 	b.w	8002b3c <_getpid>

080098e8 <__sread>:
 80098e8:	b510      	push	{r4, lr}
 80098ea:	460c      	mov	r4, r1
 80098ec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80098f0:	f000 f894 	bl	8009a1c <_read_r>
 80098f4:	2800      	cmp	r0, #0
 80098f6:	bfab      	itete	ge
 80098f8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80098fa:	89a3      	ldrhlt	r3, [r4, #12]
 80098fc:	181b      	addge	r3, r3, r0
 80098fe:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8009902:	bfac      	ite	ge
 8009904:	6563      	strge	r3, [r4, #84]	; 0x54
 8009906:	81a3      	strhlt	r3, [r4, #12]
 8009908:	bd10      	pop	{r4, pc}

0800990a <__swrite>:
 800990a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800990e:	461f      	mov	r7, r3
 8009910:	898b      	ldrh	r3, [r1, #12]
 8009912:	05db      	lsls	r3, r3, #23
 8009914:	4605      	mov	r5, r0
 8009916:	460c      	mov	r4, r1
 8009918:	4616      	mov	r6, r2
 800991a:	d505      	bpl.n	8009928 <__swrite+0x1e>
 800991c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009920:	2302      	movs	r3, #2
 8009922:	2200      	movs	r2, #0
 8009924:	f000 f868 	bl	80099f8 <_lseek_r>
 8009928:	89a3      	ldrh	r3, [r4, #12]
 800992a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800992e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009932:	81a3      	strh	r3, [r4, #12]
 8009934:	4632      	mov	r2, r6
 8009936:	463b      	mov	r3, r7
 8009938:	4628      	mov	r0, r5
 800993a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800993e:	f000 b817 	b.w	8009970 <_write_r>

08009942 <__sseek>:
 8009942:	b510      	push	{r4, lr}
 8009944:	460c      	mov	r4, r1
 8009946:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800994a:	f000 f855 	bl	80099f8 <_lseek_r>
 800994e:	1c43      	adds	r3, r0, #1
 8009950:	89a3      	ldrh	r3, [r4, #12]
 8009952:	bf15      	itete	ne
 8009954:	6560      	strne	r0, [r4, #84]	; 0x54
 8009956:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800995a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800995e:	81a3      	strheq	r3, [r4, #12]
 8009960:	bf18      	it	ne
 8009962:	81a3      	strhne	r3, [r4, #12]
 8009964:	bd10      	pop	{r4, pc}

08009966 <__sclose>:
 8009966:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800996a:	f000 b813 	b.w	8009994 <_close_r>
	...

08009970 <_write_r>:
 8009970:	b538      	push	{r3, r4, r5, lr}
 8009972:	4d07      	ldr	r5, [pc, #28]	; (8009990 <_write_r+0x20>)
 8009974:	4604      	mov	r4, r0
 8009976:	4608      	mov	r0, r1
 8009978:	4611      	mov	r1, r2
 800997a:	2200      	movs	r2, #0
 800997c:	602a      	str	r2, [r5, #0]
 800997e:	461a      	mov	r2, r3
 8009980:	f7f9 f91b 	bl	8002bba <_write>
 8009984:	1c43      	adds	r3, r0, #1
 8009986:	d102      	bne.n	800998e <_write_r+0x1e>
 8009988:	682b      	ldr	r3, [r5, #0]
 800998a:	b103      	cbz	r3, 800998e <_write_r+0x1e>
 800998c:	6023      	str	r3, [r4, #0]
 800998e:	bd38      	pop	{r3, r4, r5, pc}
 8009990:	20000448 	.word	0x20000448

08009994 <_close_r>:
 8009994:	b538      	push	{r3, r4, r5, lr}
 8009996:	4d06      	ldr	r5, [pc, #24]	; (80099b0 <_close_r+0x1c>)
 8009998:	2300      	movs	r3, #0
 800999a:	4604      	mov	r4, r0
 800999c:	4608      	mov	r0, r1
 800999e:	602b      	str	r3, [r5, #0]
 80099a0:	f7f9 f927 	bl	8002bf2 <_close>
 80099a4:	1c43      	adds	r3, r0, #1
 80099a6:	d102      	bne.n	80099ae <_close_r+0x1a>
 80099a8:	682b      	ldr	r3, [r5, #0]
 80099aa:	b103      	cbz	r3, 80099ae <_close_r+0x1a>
 80099ac:	6023      	str	r3, [r4, #0]
 80099ae:	bd38      	pop	{r3, r4, r5, pc}
 80099b0:	20000448 	.word	0x20000448

080099b4 <_fstat_r>:
 80099b4:	b538      	push	{r3, r4, r5, lr}
 80099b6:	4d07      	ldr	r5, [pc, #28]	; (80099d4 <_fstat_r+0x20>)
 80099b8:	2300      	movs	r3, #0
 80099ba:	4604      	mov	r4, r0
 80099bc:	4608      	mov	r0, r1
 80099be:	4611      	mov	r1, r2
 80099c0:	602b      	str	r3, [r5, #0]
 80099c2:	f7f9 f922 	bl	8002c0a <_fstat>
 80099c6:	1c43      	adds	r3, r0, #1
 80099c8:	d102      	bne.n	80099d0 <_fstat_r+0x1c>
 80099ca:	682b      	ldr	r3, [r5, #0]
 80099cc:	b103      	cbz	r3, 80099d0 <_fstat_r+0x1c>
 80099ce:	6023      	str	r3, [r4, #0]
 80099d0:	bd38      	pop	{r3, r4, r5, pc}
 80099d2:	bf00      	nop
 80099d4:	20000448 	.word	0x20000448

080099d8 <_isatty_r>:
 80099d8:	b538      	push	{r3, r4, r5, lr}
 80099da:	4d06      	ldr	r5, [pc, #24]	; (80099f4 <_isatty_r+0x1c>)
 80099dc:	2300      	movs	r3, #0
 80099de:	4604      	mov	r4, r0
 80099e0:	4608      	mov	r0, r1
 80099e2:	602b      	str	r3, [r5, #0]
 80099e4:	f7f9 f921 	bl	8002c2a <_isatty>
 80099e8:	1c43      	adds	r3, r0, #1
 80099ea:	d102      	bne.n	80099f2 <_isatty_r+0x1a>
 80099ec:	682b      	ldr	r3, [r5, #0]
 80099ee:	b103      	cbz	r3, 80099f2 <_isatty_r+0x1a>
 80099f0:	6023      	str	r3, [r4, #0]
 80099f2:	bd38      	pop	{r3, r4, r5, pc}
 80099f4:	20000448 	.word	0x20000448

080099f8 <_lseek_r>:
 80099f8:	b538      	push	{r3, r4, r5, lr}
 80099fa:	4d07      	ldr	r5, [pc, #28]	; (8009a18 <_lseek_r+0x20>)
 80099fc:	4604      	mov	r4, r0
 80099fe:	4608      	mov	r0, r1
 8009a00:	4611      	mov	r1, r2
 8009a02:	2200      	movs	r2, #0
 8009a04:	602a      	str	r2, [r5, #0]
 8009a06:	461a      	mov	r2, r3
 8009a08:	f7f9 f91a 	bl	8002c40 <_lseek>
 8009a0c:	1c43      	adds	r3, r0, #1
 8009a0e:	d102      	bne.n	8009a16 <_lseek_r+0x1e>
 8009a10:	682b      	ldr	r3, [r5, #0]
 8009a12:	b103      	cbz	r3, 8009a16 <_lseek_r+0x1e>
 8009a14:	6023      	str	r3, [r4, #0]
 8009a16:	bd38      	pop	{r3, r4, r5, pc}
 8009a18:	20000448 	.word	0x20000448

08009a1c <_read_r>:
 8009a1c:	b538      	push	{r3, r4, r5, lr}
 8009a1e:	4d07      	ldr	r5, [pc, #28]	; (8009a3c <_read_r+0x20>)
 8009a20:	4604      	mov	r4, r0
 8009a22:	4608      	mov	r0, r1
 8009a24:	4611      	mov	r1, r2
 8009a26:	2200      	movs	r2, #0
 8009a28:	602a      	str	r2, [r5, #0]
 8009a2a:	461a      	mov	r2, r3
 8009a2c:	f7f9 f8a8 	bl	8002b80 <_read>
 8009a30:	1c43      	adds	r3, r0, #1
 8009a32:	d102      	bne.n	8009a3a <_read_r+0x1e>
 8009a34:	682b      	ldr	r3, [r5, #0]
 8009a36:	b103      	cbz	r3, 8009a3a <_read_r+0x1e>
 8009a38:	6023      	str	r3, [r4, #0]
 8009a3a:	bd38      	pop	{r3, r4, r5, pc}
 8009a3c:	20000448 	.word	0x20000448

08009a40 <sin>:
 8009a40:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009a42:	ec53 2b10 	vmov	r2, r3, d0
 8009a46:	4826      	ldr	r0, [pc, #152]	; (8009ae0 <sin+0xa0>)
 8009a48:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8009a4c:	4281      	cmp	r1, r0
 8009a4e:	dc07      	bgt.n	8009a60 <sin+0x20>
 8009a50:	ed9f 1b21 	vldr	d1, [pc, #132]	; 8009ad8 <sin+0x98>
 8009a54:	2000      	movs	r0, #0
 8009a56:	f000 fe5b 	bl	800a710 <__kernel_sin>
 8009a5a:	ec51 0b10 	vmov	r0, r1, d0
 8009a5e:	e007      	b.n	8009a70 <sin+0x30>
 8009a60:	4820      	ldr	r0, [pc, #128]	; (8009ae4 <sin+0xa4>)
 8009a62:	4281      	cmp	r1, r0
 8009a64:	dd09      	ble.n	8009a7a <sin+0x3a>
 8009a66:	ee10 0a10 	vmov	r0, s0
 8009a6a:	4619      	mov	r1, r3
 8009a6c:	f7f6 fc14 	bl	8000298 <__aeabi_dsub>
 8009a70:	ec41 0b10 	vmov	d0, r0, r1
 8009a74:	b005      	add	sp, #20
 8009a76:	f85d fb04 	ldr.w	pc, [sp], #4
 8009a7a:	4668      	mov	r0, sp
 8009a7c:	f000 f834 	bl	8009ae8 <__ieee754_rem_pio2>
 8009a80:	f000 0003 	and.w	r0, r0, #3
 8009a84:	2801      	cmp	r0, #1
 8009a86:	d008      	beq.n	8009a9a <sin+0x5a>
 8009a88:	2802      	cmp	r0, #2
 8009a8a:	d00d      	beq.n	8009aa8 <sin+0x68>
 8009a8c:	b9d0      	cbnz	r0, 8009ac4 <sin+0x84>
 8009a8e:	ed9d 1b02 	vldr	d1, [sp, #8]
 8009a92:	ed9d 0b00 	vldr	d0, [sp]
 8009a96:	2001      	movs	r0, #1
 8009a98:	e7dd      	b.n	8009a56 <sin+0x16>
 8009a9a:	ed9d 1b02 	vldr	d1, [sp, #8]
 8009a9e:	ed9d 0b00 	vldr	d0, [sp]
 8009aa2:	f000 fa2d 	bl	8009f00 <__kernel_cos>
 8009aa6:	e7d8      	b.n	8009a5a <sin+0x1a>
 8009aa8:	ed9d 1b02 	vldr	d1, [sp, #8]
 8009aac:	ed9d 0b00 	vldr	d0, [sp]
 8009ab0:	2001      	movs	r0, #1
 8009ab2:	f000 fe2d 	bl	800a710 <__kernel_sin>
 8009ab6:	ec53 2b10 	vmov	r2, r3, d0
 8009aba:	ee10 0a10 	vmov	r0, s0
 8009abe:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8009ac2:	e7d5      	b.n	8009a70 <sin+0x30>
 8009ac4:	ed9d 1b02 	vldr	d1, [sp, #8]
 8009ac8:	ed9d 0b00 	vldr	d0, [sp]
 8009acc:	f000 fa18 	bl	8009f00 <__kernel_cos>
 8009ad0:	e7f1      	b.n	8009ab6 <sin+0x76>
 8009ad2:	bf00      	nop
 8009ad4:	f3af 8000 	nop.w
	...
 8009ae0:	3fe921fb 	.word	0x3fe921fb
 8009ae4:	7fefffff 	.word	0x7fefffff

08009ae8 <__ieee754_rem_pio2>:
 8009ae8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009aec:	ed2d 8b02 	vpush	{d8}
 8009af0:	ec55 4b10 	vmov	r4, r5, d0
 8009af4:	4bca      	ldr	r3, [pc, #808]	; (8009e20 <__ieee754_rem_pio2+0x338>)
 8009af6:	b08b      	sub	sp, #44	; 0x2c
 8009af8:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 8009afc:	4598      	cmp	r8, r3
 8009afe:	4682      	mov	sl, r0
 8009b00:	9502      	str	r5, [sp, #8]
 8009b02:	dc08      	bgt.n	8009b16 <__ieee754_rem_pio2+0x2e>
 8009b04:	2200      	movs	r2, #0
 8009b06:	2300      	movs	r3, #0
 8009b08:	ed80 0b00 	vstr	d0, [r0]
 8009b0c:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8009b10:	f04f 0b00 	mov.w	fp, #0
 8009b14:	e028      	b.n	8009b68 <__ieee754_rem_pio2+0x80>
 8009b16:	4bc3      	ldr	r3, [pc, #780]	; (8009e24 <__ieee754_rem_pio2+0x33c>)
 8009b18:	4598      	cmp	r8, r3
 8009b1a:	dc78      	bgt.n	8009c0e <__ieee754_rem_pio2+0x126>
 8009b1c:	9b02      	ldr	r3, [sp, #8]
 8009b1e:	4ec2      	ldr	r6, [pc, #776]	; (8009e28 <__ieee754_rem_pio2+0x340>)
 8009b20:	2b00      	cmp	r3, #0
 8009b22:	ee10 0a10 	vmov	r0, s0
 8009b26:	a3b0      	add	r3, pc, #704	; (adr r3, 8009de8 <__ieee754_rem_pio2+0x300>)
 8009b28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b2c:	4629      	mov	r1, r5
 8009b2e:	dd39      	ble.n	8009ba4 <__ieee754_rem_pio2+0xbc>
 8009b30:	f7f6 fbb2 	bl	8000298 <__aeabi_dsub>
 8009b34:	45b0      	cmp	r8, r6
 8009b36:	4604      	mov	r4, r0
 8009b38:	460d      	mov	r5, r1
 8009b3a:	d01b      	beq.n	8009b74 <__ieee754_rem_pio2+0x8c>
 8009b3c:	a3ac      	add	r3, pc, #688	; (adr r3, 8009df0 <__ieee754_rem_pio2+0x308>)
 8009b3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b42:	f7f6 fba9 	bl	8000298 <__aeabi_dsub>
 8009b46:	4602      	mov	r2, r0
 8009b48:	460b      	mov	r3, r1
 8009b4a:	e9ca 2300 	strd	r2, r3, [sl]
 8009b4e:	4620      	mov	r0, r4
 8009b50:	4629      	mov	r1, r5
 8009b52:	f7f6 fba1 	bl	8000298 <__aeabi_dsub>
 8009b56:	a3a6      	add	r3, pc, #664	; (adr r3, 8009df0 <__ieee754_rem_pio2+0x308>)
 8009b58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b5c:	f7f6 fb9c 	bl	8000298 <__aeabi_dsub>
 8009b60:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8009b64:	f04f 0b01 	mov.w	fp, #1
 8009b68:	4658      	mov	r0, fp
 8009b6a:	b00b      	add	sp, #44	; 0x2c
 8009b6c:	ecbd 8b02 	vpop	{d8}
 8009b70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009b74:	a3a0      	add	r3, pc, #640	; (adr r3, 8009df8 <__ieee754_rem_pio2+0x310>)
 8009b76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b7a:	f7f6 fb8d 	bl	8000298 <__aeabi_dsub>
 8009b7e:	a3a0      	add	r3, pc, #640	; (adr r3, 8009e00 <__ieee754_rem_pio2+0x318>)
 8009b80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b84:	4604      	mov	r4, r0
 8009b86:	460d      	mov	r5, r1
 8009b88:	f7f6 fb86 	bl	8000298 <__aeabi_dsub>
 8009b8c:	4602      	mov	r2, r0
 8009b8e:	460b      	mov	r3, r1
 8009b90:	e9ca 2300 	strd	r2, r3, [sl]
 8009b94:	4620      	mov	r0, r4
 8009b96:	4629      	mov	r1, r5
 8009b98:	f7f6 fb7e 	bl	8000298 <__aeabi_dsub>
 8009b9c:	a398      	add	r3, pc, #608	; (adr r3, 8009e00 <__ieee754_rem_pio2+0x318>)
 8009b9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ba2:	e7db      	b.n	8009b5c <__ieee754_rem_pio2+0x74>
 8009ba4:	f7f6 fb7a 	bl	800029c <__adddf3>
 8009ba8:	45b0      	cmp	r8, r6
 8009baa:	4604      	mov	r4, r0
 8009bac:	460d      	mov	r5, r1
 8009bae:	d016      	beq.n	8009bde <__ieee754_rem_pio2+0xf6>
 8009bb0:	a38f      	add	r3, pc, #572	; (adr r3, 8009df0 <__ieee754_rem_pio2+0x308>)
 8009bb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009bb6:	f7f6 fb71 	bl	800029c <__adddf3>
 8009bba:	4602      	mov	r2, r0
 8009bbc:	460b      	mov	r3, r1
 8009bbe:	e9ca 2300 	strd	r2, r3, [sl]
 8009bc2:	4620      	mov	r0, r4
 8009bc4:	4629      	mov	r1, r5
 8009bc6:	f7f6 fb67 	bl	8000298 <__aeabi_dsub>
 8009bca:	a389      	add	r3, pc, #548	; (adr r3, 8009df0 <__ieee754_rem_pio2+0x308>)
 8009bcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009bd0:	f7f6 fb64 	bl	800029c <__adddf3>
 8009bd4:	f04f 3bff 	mov.w	fp, #4294967295
 8009bd8:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8009bdc:	e7c4      	b.n	8009b68 <__ieee754_rem_pio2+0x80>
 8009bde:	a386      	add	r3, pc, #536	; (adr r3, 8009df8 <__ieee754_rem_pio2+0x310>)
 8009be0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009be4:	f7f6 fb5a 	bl	800029c <__adddf3>
 8009be8:	a385      	add	r3, pc, #532	; (adr r3, 8009e00 <__ieee754_rem_pio2+0x318>)
 8009bea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009bee:	4604      	mov	r4, r0
 8009bf0:	460d      	mov	r5, r1
 8009bf2:	f7f6 fb53 	bl	800029c <__adddf3>
 8009bf6:	4602      	mov	r2, r0
 8009bf8:	460b      	mov	r3, r1
 8009bfa:	e9ca 2300 	strd	r2, r3, [sl]
 8009bfe:	4620      	mov	r0, r4
 8009c00:	4629      	mov	r1, r5
 8009c02:	f7f6 fb49 	bl	8000298 <__aeabi_dsub>
 8009c06:	a37e      	add	r3, pc, #504	; (adr r3, 8009e00 <__ieee754_rem_pio2+0x318>)
 8009c08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c0c:	e7e0      	b.n	8009bd0 <__ieee754_rem_pio2+0xe8>
 8009c0e:	4b87      	ldr	r3, [pc, #540]	; (8009e2c <__ieee754_rem_pio2+0x344>)
 8009c10:	4598      	cmp	r8, r3
 8009c12:	f300 80d9 	bgt.w	8009dc8 <__ieee754_rem_pio2+0x2e0>
 8009c16:	f000 fe39 	bl	800a88c <fabs>
 8009c1a:	ec55 4b10 	vmov	r4, r5, d0
 8009c1e:	ee10 0a10 	vmov	r0, s0
 8009c22:	a379      	add	r3, pc, #484	; (adr r3, 8009e08 <__ieee754_rem_pio2+0x320>)
 8009c24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c28:	4629      	mov	r1, r5
 8009c2a:	f7f6 fced 	bl	8000608 <__aeabi_dmul>
 8009c2e:	4b80      	ldr	r3, [pc, #512]	; (8009e30 <__ieee754_rem_pio2+0x348>)
 8009c30:	2200      	movs	r2, #0
 8009c32:	f7f6 fb33 	bl	800029c <__adddf3>
 8009c36:	f7f6 ff97 	bl	8000b68 <__aeabi_d2iz>
 8009c3a:	4683      	mov	fp, r0
 8009c3c:	f7f6 fc7a 	bl	8000534 <__aeabi_i2d>
 8009c40:	4602      	mov	r2, r0
 8009c42:	460b      	mov	r3, r1
 8009c44:	ec43 2b18 	vmov	d8, r2, r3
 8009c48:	a367      	add	r3, pc, #412	; (adr r3, 8009de8 <__ieee754_rem_pio2+0x300>)
 8009c4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c4e:	f7f6 fcdb 	bl	8000608 <__aeabi_dmul>
 8009c52:	4602      	mov	r2, r0
 8009c54:	460b      	mov	r3, r1
 8009c56:	4620      	mov	r0, r4
 8009c58:	4629      	mov	r1, r5
 8009c5a:	f7f6 fb1d 	bl	8000298 <__aeabi_dsub>
 8009c5e:	a364      	add	r3, pc, #400	; (adr r3, 8009df0 <__ieee754_rem_pio2+0x308>)
 8009c60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c64:	4606      	mov	r6, r0
 8009c66:	460f      	mov	r7, r1
 8009c68:	ec51 0b18 	vmov	r0, r1, d8
 8009c6c:	f7f6 fccc 	bl	8000608 <__aeabi_dmul>
 8009c70:	f1bb 0f1f 	cmp.w	fp, #31
 8009c74:	4604      	mov	r4, r0
 8009c76:	460d      	mov	r5, r1
 8009c78:	dc0d      	bgt.n	8009c96 <__ieee754_rem_pio2+0x1ae>
 8009c7a:	4b6e      	ldr	r3, [pc, #440]	; (8009e34 <__ieee754_rem_pio2+0x34c>)
 8009c7c:	f10b 32ff 	add.w	r2, fp, #4294967295
 8009c80:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009c84:	4543      	cmp	r3, r8
 8009c86:	d006      	beq.n	8009c96 <__ieee754_rem_pio2+0x1ae>
 8009c88:	4622      	mov	r2, r4
 8009c8a:	462b      	mov	r3, r5
 8009c8c:	4630      	mov	r0, r6
 8009c8e:	4639      	mov	r1, r7
 8009c90:	f7f6 fb02 	bl	8000298 <__aeabi_dsub>
 8009c94:	e00f      	b.n	8009cb6 <__ieee754_rem_pio2+0x1ce>
 8009c96:	462b      	mov	r3, r5
 8009c98:	4622      	mov	r2, r4
 8009c9a:	4630      	mov	r0, r6
 8009c9c:	4639      	mov	r1, r7
 8009c9e:	f7f6 fafb 	bl	8000298 <__aeabi_dsub>
 8009ca2:	ea4f 5328 	mov.w	r3, r8, asr #20
 8009ca6:	9303      	str	r3, [sp, #12]
 8009ca8:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8009cac:	ebc3 5818 	rsb	r8, r3, r8, lsr #20
 8009cb0:	f1b8 0f10 	cmp.w	r8, #16
 8009cb4:	dc02      	bgt.n	8009cbc <__ieee754_rem_pio2+0x1d4>
 8009cb6:	e9ca 0100 	strd	r0, r1, [sl]
 8009cba:	e039      	b.n	8009d30 <__ieee754_rem_pio2+0x248>
 8009cbc:	a34e      	add	r3, pc, #312	; (adr r3, 8009df8 <__ieee754_rem_pio2+0x310>)
 8009cbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009cc2:	ec51 0b18 	vmov	r0, r1, d8
 8009cc6:	f7f6 fc9f 	bl	8000608 <__aeabi_dmul>
 8009cca:	4604      	mov	r4, r0
 8009ccc:	460d      	mov	r5, r1
 8009cce:	4602      	mov	r2, r0
 8009cd0:	460b      	mov	r3, r1
 8009cd2:	4630      	mov	r0, r6
 8009cd4:	4639      	mov	r1, r7
 8009cd6:	f7f6 fadf 	bl	8000298 <__aeabi_dsub>
 8009cda:	4602      	mov	r2, r0
 8009cdc:	460b      	mov	r3, r1
 8009cde:	4680      	mov	r8, r0
 8009ce0:	4689      	mov	r9, r1
 8009ce2:	4630      	mov	r0, r6
 8009ce4:	4639      	mov	r1, r7
 8009ce6:	f7f6 fad7 	bl	8000298 <__aeabi_dsub>
 8009cea:	4622      	mov	r2, r4
 8009cec:	462b      	mov	r3, r5
 8009cee:	f7f6 fad3 	bl	8000298 <__aeabi_dsub>
 8009cf2:	a343      	add	r3, pc, #268	; (adr r3, 8009e00 <__ieee754_rem_pio2+0x318>)
 8009cf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009cf8:	4604      	mov	r4, r0
 8009cfa:	460d      	mov	r5, r1
 8009cfc:	ec51 0b18 	vmov	r0, r1, d8
 8009d00:	f7f6 fc82 	bl	8000608 <__aeabi_dmul>
 8009d04:	4622      	mov	r2, r4
 8009d06:	462b      	mov	r3, r5
 8009d08:	f7f6 fac6 	bl	8000298 <__aeabi_dsub>
 8009d0c:	4602      	mov	r2, r0
 8009d0e:	460b      	mov	r3, r1
 8009d10:	4604      	mov	r4, r0
 8009d12:	460d      	mov	r5, r1
 8009d14:	4640      	mov	r0, r8
 8009d16:	4649      	mov	r1, r9
 8009d18:	f7f6 fabe 	bl	8000298 <__aeabi_dsub>
 8009d1c:	9a03      	ldr	r2, [sp, #12]
 8009d1e:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8009d22:	1ad3      	subs	r3, r2, r3
 8009d24:	2b31      	cmp	r3, #49	; 0x31
 8009d26:	dc24      	bgt.n	8009d72 <__ieee754_rem_pio2+0x28a>
 8009d28:	e9ca 0100 	strd	r0, r1, [sl]
 8009d2c:	4646      	mov	r6, r8
 8009d2e:	464f      	mov	r7, r9
 8009d30:	e9da 8900 	ldrd	r8, r9, [sl]
 8009d34:	4630      	mov	r0, r6
 8009d36:	4642      	mov	r2, r8
 8009d38:	464b      	mov	r3, r9
 8009d3a:	4639      	mov	r1, r7
 8009d3c:	f7f6 faac 	bl	8000298 <__aeabi_dsub>
 8009d40:	462b      	mov	r3, r5
 8009d42:	4622      	mov	r2, r4
 8009d44:	f7f6 faa8 	bl	8000298 <__aeabi_dsub>
 8009d48:	9b02      	ldr	r3, [sp, #8]
 8009d4a:	2b00      	cmp	r3, #0
 8009d4c:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8009d50:	f6bf af0a 	bge.w	8009b68 <__ieee754_rem_pio2+0x80>
 8009d54:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8009d58:	f8ca 3004 	str.w	r3, [sl, #4]
 8009d5c:	f8ca 8000 	str.w	r8, [sl]
 8009d60:	f8ca 0008 	str.w	r0, [sl, #8]
 8009d64:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009d68:	f8ca 300c 	str.w	r3, [sl, #12]
 8009d6c:	f1cb 0b00 	rsb	fp, fp, #0
 8009d70:	e6fa      	b.n	8009b68 <__ieee754_rem_pio2+0x80>
 8009d72:	a327      	add	r3, pc, #156	; (adr r3, 8009e10 <__ieee754_rem_pio2+0x328>)
 8009d74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d78:	ec51 0b18 	vmov	r0, r1, d8
 8009d7c:	f7f6 fc44 	bl	8000608 <__aeabi_dmul>
 8009d80:	4604      	mov	r4, r0
 8009d82:	460d      	mov	r5, r1
 8009d84:	4602      	mov	r2, r0
 8009d86:	460b      	mov	r3, r1
 8009d88:	4640      	mov	r0, r8
 8009d8a:	4649      	mov	r1, r9
 8009d8c:	f7f6 fa84 	bl	8000298 <__aeabi_dsub>
 8009d90:	4602      	mov	r2, r0
 8009d92:	460b      	mov	r3, r1
 8009d94:	4606      	mov	r6, r0
 8009d96:	460f      	mov	r7, r1
 8009d98:	4640      	mov	r0, r8
 8009d9a:	4649      	mov	r1, r9
 8009d9c:	f7f6 fa7c 	bl	8000298 <__aeabi_dsub>
 8009da0:	4622      	mov	r2, r4
 8009da2:	462b      	mov	r3, r5
 8009da4:	f7f6 fa78 	bl	8000298 <__aeabi_dsub>
 8009da8:	a31b      	add	r3, pc, #108	; (adr r3, 8009e18 <__ieee754_rem_pio2+0x330>)
 8009daa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009dae:	4604      	mov	r4, r0
 8009db0:	460d      	mov	r5, r1
 8009db2:	ec51 0b18 	vmov	r0, r1, d8
 8009db6:	f7f6 fc27 	bl	8000608 <__aeabi_dmul>
 8009dba:	4622      	mov	r2, r4
 8009dbc:	462b      	mov	r3, r5
 8009dbe:	f7f6 fa6b 	bl	8000298 <__aeabi_dsub>
 8009dc2:	4604      	mov	r4, r0
 8009dc4:	460d      	mov	r5, r1
 8009dc6:	e75f      	b.n	8009c88 <__ieee754_rem_pio2+0x1a0>
 8009dc8:	4b1b      	ldr	r3, [pc, #108]	; (8009e38 <__ieee754_rem_pio2+0x350>)
 8009dca:	4598      	cmp	r8, r3
 8009dcc:	dd36      	ble.n	8009e3c <__ieee754_rem_pio2+0x354>
 8009dce:	ee10 2a10 	vmov	r2, s0
 8009dd2:	462b      	mov	r3, r5
 8009dd4:	4620      	mov	r0, r4
 8009dd6:	4629      	mov	r1, r5
 8009dd8:	f7f6 fa5e 	bl	8000298 <__aeabi_dsub>
 8009ddc:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8009de0:	e9ca 0100 	strd	r0, r1, [sl]
 8009de4:	e694      	b.n	8009b10 <__ieee754_rem_pio2+0x28>
 8009de6:	bf00      	nop
 8009de8:	54400000 	.word	0x54400000
 8009dec:	3ff921fb 	.word	0x3ff921fb
 8009df0:	1a626331 	.word	0x1a626331
 8009df4:	3dd0b461 	.word	0x3dd0b461
 8009df8:	1a600000 	.word	0x1a600000
 8009dfc:	3dd0b461 	.word	0x3dd0b461
 8009e00:	2e037073 	.word	0x2e037073
 8009e04:	3ba3198a 	.word	0x3ba3198a
 8009e08:	6dc9c883 	.word	0x6dc9c883
 8009e0c:	3fe45f30 	.word	0x3fe45f30
 8009e10:	2e000000 	.word	0x2e000000
 8009e14:	3ba3198a 	.word	0x3ba3198a
 8009e18:	252049c1 	.word	0x252049c1
 8009e1c:	397b839a 	.word	0x397b839a
 8009e20:	3fe921fb 	.word	0x3fe921fb
 8009e24:	4002d97b 	.word	0x4002d97b
 8009e28:	3ff921fb 	.word	0x3ff921fb
 8009e2c:	413921fb 	.word	0x413921fb
 8009e30:	3fe00000 	.word	0x3fe00000
 8009e34:	0800b40c 	.word	0x0800b40c
 8009e38:	7fefffff 	.word	0x7fefffff
 8009e3c:	ea4f 5428 	mov.w	r4, r8, asr #20
 8009e40:	f2a4 4416 	subw	r4, r4, #1046	; 0x416
 8009e44:	ee10 0a10 	vmov	r0, s0
 8009e48:	eba8 5104 	sub.w	r1, r8, r4, lsl #20
 8009e4c:	ee10 6a10 	vmov	r6, s0
 8009e50:	460f      	mov	r7, r1
 8009e52:	f7f6 fe89 	bl	8000b68 <__aeabi_d2iz>
 8009e56:	f7f6 fb6d 	bl	8000534 <__aeabi_i2d>
 8009e5a:	4602      	mov	r2, r0
 8009e5c:	460b      	mov	r3, r1
 8009e5e:	4630      	mov	r0, r6
 8009e60:	4639      	mov	r1, r7
 8009e62:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8009e66:	f7f6 fa17 	bl	8000298 <__aeabi_dsub>
 8009e6a:	4b22      	ldr	r3, [pc, #136]	; (8009ef4 <__ieee754_rem_pio2+0x40c>)
 8009e6c:	2200      	movs	r2, #0
 8009e6e:	f7f6 fbcb 	bl	8000608 <__aeabi_dmul>
 8009e72:	460f      	mov	r7, r1
 8009e74:	4606      	mov	r6, r0
 8009e76:	f7f6 fe77 	bl	8000b68 <__aeabi_d2iz>
 8009e7a:	f7f6 fb5b 	bl	8000534 <__aeabi_i2d>
 8009e7e:	4602      	mov	r2, r0
 8009e80:	460b      	mov	r3, r1
 8009e82:	4630      	mov	r0, r6
 8009e84:	4639      	mov	r1, r7
 8009e86:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8009e8a:	f7f6 fa05 	bl	8000298 <__aeabi_dsub>
 8009e8e:	4b19      	ldr	r3, [pc, #100]	; (8009ef4 <__ieee754_rem_pio2+0x40c>)
 8009e90:	2200      	movs	r2, #0
 8009e92:	f7f6 fbb9 	bl	8000608 <__aeabi_dmul>
 8009e96:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8009e9a:	ad04      	add	r5, sp, #16
 8009e9c:	f04f 0803 	mov.w	r8, #3
 8009ea0:	46a9      	mov	r9, r5
 8009ea2:	2600      	movs	r6, #0
 8009ea4:	2700      	movs	r7, #0
 8009ea6:	4632      	mov	r2, r6
 8009ea8:	463b      	mov	r3, r7
 8009eaa:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 8009eae:	46c3      	mov	fp, r8
 8009eb0:	3d08      	subs	r5, #8
 8009eb2:	f108 38ff 	add.w	r8, r8, #4294967295
 8009eb6:	f7f6 fe0f 	bl	8000ad8 <__aeabi_dcmpeq>
 8009eba:	2800      	cmp	r0, #0
 8009ebc:	d1f3      	bne.n	8009ea6 <__ieee754_rem_pio2+0x3be>
 8009ebe:	4b0e      	ldr	r3, [pc, #56]	; (8009ef8 <__ieee754_rem_pio2+0x410>)
 8009ec0:	9301      	str	r3, [sp, #4]
 8009ec2:	2302      	movs	r3, #2
 8009ec4:	9300      	str	r3, [sp, #0]
 8009ec6:	4622      	mov	r2, r4
 8009ec8:	465b      	mov	r3, fp
 8009eca:	4651      	mov	r1, sl
 8009ecc:	4648      	mov	r0, r9
 8009ece:	f000 f8df 	bl	800a090 <__kernel_rem_pio2>
 8009ed2:	9b02      	ldr	r3, [sp, #8]
 8009ed4:	2b00      	cmp	r3, #0
 8009ed6:	4683      	mov	fp, r0
 8009ed8:	f6bf ae46 	bge.w	8009b68 <__ieee754_rem_pio2+0x80>
 8009edc:	f8da 3004 	ldr.w	r3, [sl, #4]
 8009ee0:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8009ee4:	f8ca 3004 	str.w	r3, [sl, #4]
 8009ee8:	f8da 300c 	ldr.w	r3, [sl, #12]
 8009eec:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8009ef0:	e73a      	b.n	8009d68 <__ieee754_rem_pio2+0x280>
 8009ef2:	bf00      	nop
 8009ef4:	41700000 	.word	0x41700000
 8009ef8:	0800b48c 	.word	0x0800b48c
 8009efc:	00000000 	.word	0x00000000

08009f00 <__kernel_cos>:
 8009f00:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009f04:	ec57 6b10 	vmov	r6, r7, d0
 8009f08:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 8009f0c:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 8009f10:	ed8d 1b00 	vstr	d1, [sp]
 8009f14:	da07      	bge.n	8009f26 <__kernel_cos+0x26>
 8009f16:	ee10 0a10 	vmov	r0, s0
 8009f1a:	4639      	mov	r1, r7
 8009f1c:	f7f6 fe24 	bl	8000b68 <__aeabi_d2iz>
 8009f20:	2800      	cmp	r0, #0
 8009f22:	f000 8088 	beq.w	800a036 <__kernel_cos+0x136>
 8009f26:	4632      	mov	r2, r6
 8009f28:	463b      	mov	r3, r7
 8009f2a:	4630      	mov	r0, r6
 8009f2c:	4639      	mov	r1, r7
 8009f2e:	f7f6 fb6b 	bl	8000608 <__aeabi_dmul>
 8009f32:	4b51      	ldr	r3, [pc, #324]	; (800a078 <__kernel_cos+0x178>)
 8009f34:	2200      	movs	r2, #0
 8009f36:	4604      	mov	r4, r0
 8009f38:	460d      	mov	r5, r1
 8009f3a:	f7f6 fb65 	bl	8000608 <__aeabi_dmul>
 8009f3e:	a340      	add	r3, pc, #256	; (adr r3, 800a040 <__kernel_cos+0x140>)
 8009f40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f44:	4682      	mov	sl, r0
 8009f46:	468b      	mov	fp, r1
 8009f48:	4620      	mov	r0, r4
 8009f4a:	4629      	mov	r1, r5
 8009f4c:	f7f6 fb5c 	bl	8000608 <__aeabi_dmul>
 8009f50:	a33d      	add	r3, pc, #244	; (adr r3, 800a048 <__kernel_cos+0x148>)
 8009f52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f56:	f7f6 f9a1 	bl	800029c <__adddf3>
 8009f5a:	4622      	mov	r2, r4
 8009f5c:	462b      	mov	r3, r5
 8009f5e:	f7f6 fb53 	bl	8000608 <__aeabi_dmul>
 8009f62:	a33b      	add	r3, pc, #236	; (adr r3, 800a050 <__kernel_cos+0x150>)
 8009f64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f68:	f7f6 f996 	bl	8000298 <__aeabi_dsub>
 8009f6c:	4622      	mov	r2, r4
 8009f6e:	462b      	mov	r3, r5
 8009f70:	f7f6 fb4a 	bl	8000608 <__aeabi_dmul>
 8009f74:	a338      	add	r3, pc, #224	; (adr r3, 800a058 <__kernel_cos+0x158>)
 8009f76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f7a:	f7f6 f98f 	bl	800029c <__adddf3>
 8009f7e:	4622      	mov	r2, r4
 8009f80:	462b      	mov	r3, r5
 8009f82:	f7f6 fb41 	bl	8000608 <__aeabi_dmul>
 8009f86:	a336      	add	r3, pc, #216	; (adr r3, 800a060 <__kernel_cos+0x160>)
 8009f88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f8c:	f7f6 f984 	bl	8000298 <__aeabi_dsub>
 8009f90:	4622      	mov	r2, r4
 8009f92:	462b      	mov	r3, r5
 8009f94:	f7f6 fb38 	bl	8000608 <__aeabi_dmul>
 8009f98:	a333      	add	r3, pc, #204	; (adr r3, 800a068 <__kernel_cos+0x168>)
 8009f9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f9e:	f7f6 f97d 	bl	800029c <__adddf3>
 8009fa2:	4622      	mov	r2, r4
 8009fa4:	462b      	mov	r3, r5
 8009fa6:	f7f6 fb2f 	bl	8000608 <__aeabi_dmul>
 8009faa:	4622      	mov	r2, r4
 8009fac:	462b      	mov	r3, r5
 8009fae:	f7f6 fb2b 	bl	8000608 <__aeabi_dmul>
 8009fb2:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009fb6:	4604      	mov	r4, r0
 8009fb8:	460d      	mov	r5, r1
 8009fba:	4630      	mov	r0, r6
 8009fbc:	4639      	mov	r1, r7
 8009fbe:	f7f6 fb23 	bl	8000608 <__aeabi_dmul>
 8009fc2:	460b      	mov	r3, r1
 8009fc4:	4602      	mov	r2, r0
 8009fc6:	4629      	mov	r1, r5
 8009fc8:	4620      	mov	r0, r4
 8009fca:	f7f6 f965 	bl	8000298 <__aeabi_dsub>
 8009fce:	4b2b      	ldr	r3, [pc, #172]	; (800a07c <__kernel_cos+0x17c>)
 8009fd0:	4598      	cmp	r8, r3
 8009fd2:	4606      	mov	r6, r0
 8009fd4:	460f      	mov	r7, r1
 8009fd6:	dc10      	bgt.n	8009ffa <__kernel_cos+0xfa>
 8009fd8:	4602      	mov	r2, r0
 8009fda:	460b      	mov	r3, r1
 8009fdc:	4650      	mov	r0, sl
 8009fde:	4659      	mov	r1, fp
 8009fe0:	f7f6 f95a 	bl	8000298 <__aeabi_dsub>
 8009fe4:	460b      	mov	r3, r1
 8009fe6:	4926      	ldr	r1, [pc, #152]	; (800a080 <__kernel_cos+0x180>)
 8009fe8:	4602      	mov	r2, r0
 8009fea:	2000      	movs	r0, #0
 8009fec:	f7f6 f954 	bl	8000298 <__aeabi_dsub>
 8009ff0:	ec41 0b10 	vmov	d0, r0, r1
 8009ff4:	b003      	add	sp, #12
 8009ff6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009ffa:	4b22      	ldr	r3, [pc, #136]	; (800a084 <__kernel_cos+0x184>)
 8009ffc:	4920      	ldr	r1, [pc, #128]	; (800a080 <__kernel_cos+0x180>)
 8009ffe:	4598      	cmp	r8, r3
 800a000:	bfcc      	ite	gt
 800a002:	4d21      	ldrgt	r5, [pc, #132]	; (800a088 <__kernel_cos+0x188>)
 800a004:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 800a008:	2400      	movs	r4, #0
 800a00a:	4622      	mov	r2, r4
 800a00c:	462b      	mov	r3, r5
 800a00e:	2000      	movs	r0, #0
 800a010:	f7f6 f942 	bl	8000298 <__aeabi_dsub>
 800a014:	4622      	mov	r2, r4
 800a016:	4680      	mov	r8, r0
 800a018:	4689      	mov	r9, r1
 800a01a:	462b      	mov	r3, r5
 800a01c:	4650      	mov	r0, sl
 800a01e:	4659      	mov	r1, fp
 800a020:	f7f6 f93a 	bl	8000298 <__aeabi_dsub>
 800a024:	4632      	mov	r2, r6
 800a026:	463b      	mov	r3, r7
 800a028:	f7f6 f936 	bl	8000298 <__aeabi_dsub>
 800a02c:	4602      	mov	r2, r0
 800a02e:	460b      	mov	r3, r1
 800a030:	4640      	mov	r0, r8
 800a032:	4649      	mov	r1, r9
 800a034:	e7da      	b.n	8009fec <__kernel_cos+0xec>
 800a036:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 800a070 <__kernel_cos+0x170>
 800a03a:	e7db      	b.n	8009ff4 <__kernel_cos+0xf4>
 800a03c:	f3af 8000 	nop.w
 800a040:	be8838d4 	.word	0xbe8838d4
 800a044:	bda8fae9 	.word	0xbda8fae9
 800a048:	bdb4b1c4 	.word	0xbdb4b1c4
 800a04c:	3e21ee9e 	.word	0x3e21ee9e
 800a050:	809c52ad 	.word	0x809c52ad
 800a054:	3e927e4f 	.word	0x3e927e4f
 800a058:	19cb1590 	.word	0x19cb1590
 800a05c:	3efa01a0 	.word	0x3efa01a0
 800a060:	16c15177 	.word	0x16c15177
 800a064:	3f56c16c 	.word	0x3f56c16c
 800a068:	5555554c 	.word	0x5555554c
 800a06c:	3fa55555 	.word	0x3fa55555
 800a070:	00000000 	.word	0x00000000
 800a074:	3ff00000 	.word	0x3ff00000
 800a078:	3fe00000 	.word	0x3fe00000
 800a07c:	3fd33332 	.word	0x3fd33332
 800a080:	3ff00000 	.word	0x3ff00000
 800a084:	3fe90000 	.word	0x3fe90000
 800a088:	3fd20000 	.word	0x3fd20000
 800a08c:	00000000 	.word	0x00000000

0800a090 <__kernel_rem_pio2>:
 800a090:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a094:	ed2d 8b02 	vpush	{d8}
 800a098:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 800a09c:	f112 0f14 	cmn.w	r2, #20
 800a0a0:	9308      	str	r3, [sp, #32]
 800a0a2:	9101      	str	r1, [sp, #4]
 800a0a4:	4bc6      	ldr	r3, [pc, #792]	; (800a3c0 <__kernel_rem_pio2+0x330>)
 800a0a6:	99a4      	ldr	r1, [sp, #656]	; 0x290
 800a0a8:	9009      	str	r0, [sp, #36]	; 0x24
 800a0aa:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800a0ae:	9304      	str	r3, [sp, #16]
 800a0b0:	9b08      	ldr	r3, [sp, #32]
 800a0b2:	f103 33ff 	add.w	r3, r3, #4294967295
 800a0b6:	bfa8      	it	ge
 800a0b8:	1ed4      	subge	r4, r2, #3
 800a0ba:	9306      	str	r3, [sp, #24]
 800a0bc:	bfb2      	itee	lt
 800a0be:	2400      	movlt	r4, #0
 800a0c0:	2318      	movge	r3, #24
 800a0c2:	fb94 f4f3 	sdivge	r4, r4, r3
 800a0c6:	f06f 0317 	mvn.w	r3, #23
 800a0ca:	fb04 3303 	mla	r3, r4, r3, r3
 800a0ce:	eb03 0a02 	add.w	sl, r3, r2
 800a0d2:	9b04      	ldr	r3, [sp, #16]
 800a0d4:	9a06      	ldr	r2, [sp, #24]
 800a0d6:	ed9f 8bb6 	vldr	d8, [pc, #728]	; 800a3b0 <__kernel_rem_pio2+0x320>
 800a0da:	eb03 0802 	add.w	r8, r3, r2
 800a0de:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 800a0e0:	1aa7      	subs	r7, r4, r2
 800a0e2:	ae20      	add	r6, sp, #128	; 0x80
 800a0e4:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800a0e8:	2500      	movs	r5, #0
 800a0ea:	4545      	cmp	r5, r8
 800a0ec:	dd18      	ble.n	800a120 <__kernel_rem_pio2+0x90>
 800a0ee:	9b08      	ldr	r3, [sp, #32]
 800a0f0:	f8dd 8018 	ldr.w	r8, [sp, #24]
 800a0f4:	aa20      	add	r2, sp, #128	; 0x80
 800a0f6:	ed9f 8bae 	vldr	d8, [pc, #696]	; 800a3b0 <__kernel_rem_pio2+0x320>
 800a0fa:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 800a0fe:	f1c3 0301 	rsb	r3, r3, #1
 800a102:	f50d 7be0 	add.w	fp, sp, #448	; 0x1c0
 800a106:	9307      	str	r3, [sp, #28]
 800a108:	9b07      	ldr	r3, [sp, #28]
 800a10a:	9a04      	ldr	r2, [sp, #16]
 800a10c:	4443      	add	r3, r8
 800a10e:	429a      	cmp	r2, r3
 800a110:	db2f      	blt.n	800a172 <__kernel_rem_pio2+0xe2>
 800a112:	ed8d 8b02 	vstr	d8, [sp, #8]
 800a116:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 800a11a:	462f      	mov	r7, r5
 800a11c:	2600      	movs	r6, #0
 800a11e:	e01b      	b.n	800a158 <__kernel_rem_pio2+0xc8>
 800a120:	42ef      	cmn	r7, r5
 800a122:	d407      	bmi.n	800a134 <__kernel_rem_pio2+0xa4>
 800a124:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800a128:	f7f6 fa04 	bl	8000534 <__aeabi_i2d>
 800a12c:	e8e6 0102 	strd	r0, r1, [r6], #8
 800a130:	3501      	adds	r5, #1
 800a132:	e7da      	b.n	800a0ea <__kernel_rem_pio2+0x5a>
 800a134:	ec51 0b18 	vmov	r0, r1, d8
 800a138:	e7f8      	b.n	800a12c <__kernel_rem_pio2+0x9c>
 800a13a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a13e:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 800a142:	f7f6 fa61 	bl	8000608 <__aeabi_dmul>
 800a146:	4602      	mov	r2, r0
 800a148:	460b      	mov	r3, r1
 800a14a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a14e:	f7f6 f8a5 	bl	800029c <__adddf3>
 800a152:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a156:	3601      	adds	r6, #1
 800a158:	9b06      	ldr	r3, [sp, #24]
 800a15a:	429e      	cmp	r6, r3
 800a15c:	f1a7 0708 	sub.w	r7, r7, #8
 800a160:	ddeb      	ble.n	800a13a <__kernel_rem_pio2+0xaa>
 800a162:	ed9d 7b02 	vldr	d7, [sp, #8]
 800a166:	3508      	adds	r5, #8
 800a168:	ecab 7b02 	vstmia	fp!, {d7}
 800a16c:	f108 0801 	add.w	r8, r8, #1
 800a170:	e7ca      	b.n	800a108 <__kernel_rem_pio2+0x78>
 800a172:	9b04      	ldr	r3, [sp, #16]
 800a174:	aa0c      	add	r2, sp, #48	; 0x30
 800a176:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800a17a:	930b      	str	r3, [sp, #44]	; 0x2c
 800a17c:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 800a17e:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800a182:	9c04      	ldr	r4, [sp, #16]
 800a184:	930a      	str	r3, [sp, #40]	; 0x28
 800a186:	ab98      	add	r3, sp, #608	; 0x260
 800a188:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800a18c:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 800a190:	f10d 0b30 	add.w	fp, sp, #48	; 0x30
 800a194:	f8cd b008 	str.w	fp, [sp, #8]
 800a198:	4625      	mov	r5, r4
 800a19a:	2d00      	cmp	r5, #0
 800a19c:	dc78      	bgt.n	800a290 <__kernel_rem_pio2+0x200>
 800a19e:	ec47 6b10 	vmov	d0, r6, r7
 800a1a2:	4650      	mov	r0, sl
 800a1a4:	f000 fbfc 	bl	800a9a0 <scalbn>
 800a1a8:	ec57 6b10 	vmov	r6, r7, d0
 800a1ac:	2200      	movs	r2, #0
 800a1ae:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800a1b2:	ee10 0a10 	vmov	r0, s0
 800a1b6:	4639      	mov	r1, r7
 800a1b8:	f7f6 fa26 	bl	8000608 <__aeabi_dmul>
 800a1bc:	ec41 0b10 	vmov	d0, r0, r1
 800a1c0:	f000 fb6e 	bl	800a8a0 <floor>
 800a1c4:	4b7f      	ldr	r3, [pc, #508]	; (800a3c4 <__kernel_rem_pio2+0x334>)
 800a1c6:	ec51 0b10 	vmov	r0, r1, d0
 800a1ca:	2200      	movs	r2, #0
 800a1cc:	f7f6 fa1c 	bl	8000608 <__aeabi_dmul>
 800a1d0:	4602      	mov	r2, r0
 800a1d2:	460b      	mov	r3, r1
 800a1d4:	4630      	mov	r0, r6
 800a1d6:	4639      	mov	r1, r7
 800a1d8:	f7f6 f85e 	bl	8000298 <__aeabi_dsub>
 800a1dc:	460f      	mov	r7, r1
 800a1de:	4606      	mov	r6, r0
 800a1e0:	f7f6 fcc2 	bl	8000b68 <__aeabi_d2iz>
 800a1e4:	9007      	str	r0, [sp, #28]
 800a1e6:	f7f6 f9a5 	bl	8000534 <__aeabi_i2d>
 800a1ea:	4602      	mov	r2, r0
 800a1ec:	460b      	mov	r3, r1
 800a1ee:	4630      	mov	r0, r6
 800a1f0:	4639      	mov	r1, r7
 800a1f2:	f7f6 f851 	bl	8000298 <__aeabi_dsub>
 800a1f6:	f1ba 0f00 	cmp.w	sl, #0
 800a1fa:	4606      	mov	r6, r0
 800a1fc:	460f      	mov	r7, r1
 800a1fe:	dd70      	ble.n	800a2e2 <__kernel_rem_pio2+0x252>
 800a200:	1e62      	subs	r2, r4, #1
 800a202:	ab0c      	add	r3, sp, #48	; 0x30
 800a204:	9d07      	ldr	r5, [sp, #28]
 800a206:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800a20a:	f1ca 0118 	rsb	r1, sl, #24
 800a20e:	fa40 f301 	asr.w	r3, r0, r1
 800a212:	441d      	add	r5, r3
 800a214:	408b      	lsls	r3, r1
 800a216:	1ac0      	subs	r0, r0, r3
 800a218:	ab0c      	add	r3, sp, #48	; 0x30
 800a21a:	9507      	str	r5, [sp, #28]
 800a21c:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 800a220:	f1ca 0317 	rsb	r3, sl, #23
 800a224:	fa40 f303 	asr.w	r3, r0, r3
 800a228:	9302      	str	r3, [sp, #8]
 800a22a:	9b02      	ldr	r3, [sp, #8]
 800a22c:	2b00      	cmp	r3, #0
 800a22e:	dd66      	ble.n	800a2fe <__kernel_rem_pio2+0x26e>
 800a230:	9b07      	ldr	r3, [sp, #28]
 800a232:	2200      	movs	r2, #0
 800a234:	3301      	adds	r3, #1
 800a236:	9307      	str	r3, [sp, #28]
 800a238:	4615      	mov	r5, r2
 800a23a:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 800a23e:	4294      	cmp	r4, r2
 800a240:	f300 8099 	bgt.w	800a376 <__kernel_rem_pio2+0x2e6>
 800a244:	f1ba 0f00 	cmp.w	sl, #0
 800a248:	dd07      	ble.n	800a25a <__kernel_rem_pio2+0x1ca>
 800a24a:	f1ba 0f01 	cmp.w	sl, #1
 800a24e:	f000 80a5 	beq.w	800a39c <__kernel_rem_pio2+0x30c>
 800a252:	f1ba 0f02 	cmp.w	sl, #2
 800a256:	f000 80c1 	beq.w	800a3dc <__kernel_rem_pio2+0x34c>
 800a25a:	9b02      	ldr	r3, [sp, #8]
 800a25c:	2b02      	cmp	r3, #2
 800a25e:	d14e      	bne.n	800a2fe <__kernel_rem_pio2+0x26e>
 800a260:	4632      	mov	r2, r6
 800a262:	463b      	mov	r3, r7
 800a264:	4958      	ldr	r1, [pc, #352]	; (800a3c8 <__kernel_rem_pio2+0x338>)
 800a266:	2000      	movs	r0, #0
 800a268:	f7f6 f816 	bl	8000298 <__aeabi_dsub>
 800a26c:	4606      	mov	r6, r0
 800a26e:	460f      	mov	r7, r1
 800a270:	2d00      	cmp	r5, #0
 800a272:	d044      	beq.n	800a2fe <__kernel_rem_pio2+0x26e>
 800a274:	4650      	mov	r0, sl
 800a276:	ed9f 0b50 	vldr	d0, [pc, #320]	; 800a3b8 <__kernel_rem_pio2+0x328>
 800a27a:	f000 fb91 	bl	800a9a0 <scalbn>
 800a27e:	4630      	mov	r0, r6
 800a280:	4639      	mov	r1, r7
 800a282:	ec53 2b10 	vmov	r2, r3, d0
 800a286:	f7f6 f807 	bl	8000298 <__aeabi_dsub>
 800a28a:	4606      	mov	r6, r0
 800a28c:	460f      	mov	r7, r1
 800a28e:	e036      	b.n	800a2fe <__kernel_rem_pio2+0x26e>
 800a290:	4b4e      	ldr	r3, [pc, #312]	; (800a3cc <__kernel_rem_pio2+0x33c>)
 800a292:	2200      	movs	r2, #0
 800a294:	4630      	mov	r0, r6
 800a296:	4639      	mov	r1, r7
 800a298:	f7f6 f9b6 	bl	8000608 <__aeabi_dmul>
 800a29c:	f7f6 fc64 	bl	8000b68 <__aeabi_d2iz>
 800a2a0:	f7f6 f948 	bl	8000534 <__aeabi_i2d>
 800a2a4:	4b4a      	ldr	r3, [pc, #296]	; (800a3d0 <__kernel_rem_pio2+0x340>)
 800a2a6:	2200      	movs	r2, #0
 800a2a8:	4680      	mov	r8, r0
 800a2aa:	4689      	mov	r9, r1
 800a2ac:	f7f6 f9ac 	bl	8000608 <__aeabi_dmul>
 800a2b0:	4602      	mov	r2, r0
 800a2b2:	460b      	mov	r3, r1
 800a2b4:	4630      	mov	r0, r6
 800a2b6:	4639      	mov	r1, r7
 800a2b8:	f7f5 ffee 	bl	8000298 <__aeabi_dsub>
 800a2bc:	f7f6 fc54 	bl	8000b68 <__aeabi_d2iz>
 800a2c0:	9b02      	ldr	r3, [sp, #8]
 800a2c2:	f843 0b04 	str.w	r0, [r3], #4
 800a2c6:	3d01      	subs	r5, #1
 800a2c8:	9302      	str	r3, [sp, #8]
 800a2ca:	ab70      	add	r3, sp, #448	; 0x1c0
 800a2cc:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800a2d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2d4:	4640      	mov	r0, r8
 800a2d6:	4649      	mov	r1, r9
 800a2d8:	f7f5 ffe0 	bl	800029c <__adddf3>
 800a2dc:	4606      	mov	r6, r0
 800a2de:	460f      	mov	r7, r1
 800a2e0:	e75b      	b.n	800a19a <__kernel_rem_pio2+0x10a>
 800a2e2:	d105      	bne.n	800a2f0 <__kernel_rem_pio2+0x260>
 800a2e4:	1e63      	subs	r3, r4, #1
 800a2e6:	aa0c      	add	r2, sp, #48	; 0x30
 800a2e8:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800a2ec:	15c3      	asrs	r3, r0, #23
 800a2ee:	e79b      	b.n	800a228 <__kernel_rem_pio2+0x198>
 800a2f0:	4b38      	ldr	r3, [pc, #224]	; (800a3d4 <__kernel_rem_pio2+0x344>)
 800a2f2:	2200      	movs	r2, #0
 800a2f4:	f7f6 fc0e 	bl	8000b14 <__aeabi_dcmpge>
 800a2f8:	2800      	cmp	r0, #0
 800a2fa:	d139      	bne.n	800a370 <__kernel_rem_pio2+0x2e0>
 800a2fc:	9002      	str	r0, [sp, #8]
 800a2fe:	2200      	movs	r2, #0
 800a300:	2300      	movs	r3, #0
 800a302:	4630      	mov	r0, r6
 800a304:	4639      	mov	r1, r7
 800a306:	f7f6 fbe7 	bl	8000ad8 <__aeabi_dcmpeq>
 800a30a:	2800      	cmp	r0, #0
 800a30c:	f000 80b4 	beq.w	800a478 <__kernel_rem_pio2+0x3e8>
 800a310:	f104 3bff 	add.w	fp, r4, #4294967295
 800a314:	465b      	mov	r3, fp
 800a316:	2200      	movs	r2, #0
 800a318:	9904      	ldr	r1, [sp, #16]
 800a31a:	428b      	cmp	r3, r1
 800a31c:	da65      	bge.n	800a3ea <__kernel_rem_pio2+0x35a>
 800a31e:	2a00      	cmp	r2, #0
 800a320:	d07b      	beq.n	800a41a <__kernel_rem_pio2+0x38a>
 800a322:	ab0c      	add	r3, sp, #48	; 0x30
 800a324:	f1aa 0a18 	sub.w	sl, sl, #24
 800a328:	f853 302b 	ldr.w	r3, [r3, fp, lsl #2]
 800a32c:	2b00      	cmp	r3, #0
 800a32e:	f000 80a0 	beq.w	800a472 <__kernel_rem_pio2+0x3e2>
 800a332:	ed9f 0b21 	vldr	d0, [pc, #132]	; 800a3b8 <__kernel_rem_pio2+0x328>
 800a336:	4650      	mov	r0, sl
 800a338:	f000 fb32 	bl	800a9a0 <scalbn>
 800a33c:	4f23      	ldr	r7, [pc, #140]	; (800a3cc <__kernel_rem_pio2+0x33c>)
 800a33e:	ec55 4b10 	vmov	r4, r5, d0
 800a342:	46d8      	mov	r8, fp
 800a344:	2600      	movs	r6, #0
 800a346:	f1b8 0f00 	cmp.w	r8, #0
 800a34a:	f280 80cf 	bge.w	800a4ec <__kernel_rem_pio2+0x45c>
 800a34e:	ed9f 8b18 	vldr	d8, [pc, #96]	; 800a3b0 <__kernel_rem_pio2+0x320>
 800a352:	465f      	mov	r7, fp
 800a354:	f04f 0800 	mov.w	r8, #0
 800a358:	2f00      	cmp	r7, #0
 800a35a:	f2c0 80fd 	blt.w	800a558 <__kernel_rem_pio2+0x4c8>
 800a35e:	ab70      	add	r3, sp, #448	; 0x1c0
 800a360:	f8df a074 	ldr.w	sl, [pc, #116]	; 800a3d8 <__kernel_rem_pio2+0x348>
 800a364:	ec55 4b18 	vmov	r4, r5, d8
 800a368:	eb03 09c7 	add.w	r9, r3, r7, lsl #3
 800a36c:	2600      	movs	r6, #0
 800a36e:	e0e5      	b.n	800a53c <__kernel_rem_pio2+0x4ac>
 800a370:	2302      	movs	r3, #2
 800a372:	9302      	str	r3, [sp, #8]
 800a374:	e75c      	b.n	800a230 <__kernel_rem_pio2+0x1a0>
 800a376:	f8db 3000 	ldr.w	r3, [fp]
 800a37a:	b955      	cbnz	r5, 800a392 <__kernel_rem_pio2+0x302>
 800a37c:	b123      	cbz	r3, 800a388 <__kernel_rem_pio2+0x2f8>
 800a37e:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 800a382:	f8cb 3000 	str.w	r3, [fp]
 800a386:	2301      	movs	r3, #1
 800a388:	3201      	adds	r2, #1
 800a38a:	f10b 0b04 	add.w	fp, fp, #4
 800a38e:	461d      	mov	r5, r3
 800a390:	e755      	b.n	800a23e <__kernel_rem_pio2+0x1ae>
 800a392:	1acb      	subs	r3, r1, r3
 800a394:	f8cb 3000 	str.w	r3, [fp]
 800a398:	462b      	mov	r3, r5
 800a39a:	e7f5      	b.n	800a388 <__kernel_rem_pio2+0x2f8>
 800a39c:	1e62      	subs	r2, r4, #1
 800a39e:	ab0c      	add	r3, sp, #48	; 0x30
 800a3a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a3a4:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800a3a8:	a90c      	add	r1, sp, #48	; 0x30
 800a3aa:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800a3ae:	e754      	b.n	800a25a <__kernel_rem_pio2+0x1ca>
	...
 800a3bc:	3ff00000 	.word	0x3ff00000
 800a3c0:	0800b5d8 	.word	0x0800b5d8
 800a3c4:	40200000 	.word	0x40200000
 800a3c8:	3ff00000 	.word	0x3ff00000
 800a3cc:	3e700000 	.word	0x3e700000
 800a3d0:	41700000 	.word	0x41700000
 800a3d4:	3fe00000 	.word	0x3fe00000
 800a3d8:	0800b598 	.word	0x0800b598
 800a3dc:	1e62      	subs	r2, r4, #1
 800a3de:	ab0c      	add	r3, sp, #48	; 0x30
 800a3e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a3e4:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800a3e8:	e7de      	b.n	800a3a8 <__kernel_rem_pio2+0x318>
 800a3ea:	a90c      	add	r1, sp, #48	; 0x30
 800a3ec:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800a3f0:	3b01      	subs	r3, #1
 800a3f2:	430a      	orrs	r2, r1
 800a3f4:	e790      	b.n	800a318 <__kernel_rem_pio2+0x288>
 800a3f6:	3301      	adds	r3, #1
 800a3f8:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 800a3fc:	2900      	cmp	r1, #0
 800a3fe:	d0fa      	beq.n	800a3f6 <__kernel_rem_pio2+0x366>
 800a400:	9a08      	ldr	r2, [sp, #32]
 800a402:	18e3      	adds	r3, r4, r3
 800a404:	18a6      	adds	r6, r4, r2
 800a406:	aa20      	add	r2, sp, #128	; 0x80
 800a408:	1c65      	adds	r5, r4, #1
 800a40a:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 800a40e:	9302      	str	r3, [sp, #8]
 800a410:	9b02      	ldr	r3, [sp, #8]
 800a412:	42ab      	cmp	r3, r5
 800a414:	da04      	bge.n	800a420 <__kernel_rem_pio2+0x390>
 800a416:	461c      	mov	r4, r3
 800a418:	e6b5      	b.n	800a186 <__kernel_rem_pio2+0xf6>
 800a41a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800a41c:	2301      	movs	r3, #1
 800a41e:	e7eb      	b.n	800a3f8 <__kernel_rem_pio2+0x368>
 800a420:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a422:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800a426:	f7f6 f885 	bl	8000534 <__aeabi_i2d>
 800a42a:	e8e6 0102 	strd	r0, r1, [r6], #8
 800a42e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a430:	46b3      	mov	fp, r6
 800a432:	461c      	mov	r4, r3
 800a434:	2700      	movs	r7, #0
 800a436:	f04f 0800 	mov.w	r8, #0
 800a43a:	f04f 0900 	mov.w	r9, #0
 800a43e:	9b06      	ldr	r3, [sp, #24]
 800a440:	429f      	cmp	r7, r3
 800a442:	dd06      	ble.n	800a452 <__kernel_rem_pio2+0x3c2>
 800a444:	ab70      	add	r3, sp, #448	; 0x1c0
 800a446:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800a44a:	e9c3 8900 	strd	r8, r9, [r3]
 800a44e:	3501      	adds	r5, #1
 800a450:	e7de      	b.n	800a410 <__kernel_rem_pio2+0x380>
 800a452:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 800a456:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 800a45a:	f7f6 f8d5 	bl	8000608 <__aeabi_dmul>
 800a45e:	4602      	mov	r2, r0
 800a460:	460b      	mov	r3, r1
 800a462:	4640      	mov	r0, r8
 800a464:	4649      	mov	r1, r9
 800a466:	f7f5 ff19 	bl	800029c <__adddf3>
 800a46a:	3701      	adds	r7, #1
 800a46c:	4680      	mov	r8, r0
 800a46e:	4689      	mov	r9, r1
 800a470:	e7e5      	b.n	800a43e <__kernel_rem_pio2+0x3ae>
 800a472:	f10b 3bff 	add.w	fp, fp, #4294967295
 800a476:	e754      	b.n	800a322 <__kernel_rem_pio2+0x292>
 800a478:	ec47 6b10 	vmov	d0, r6, r7
 800a47c:	f1ca 0000 	rsb	r0, sl, #0
 800a480:	f000 fa8e 	bl	800a9a0 <scalbn>
 800a484:	ec57 6b10 	vmov	r6, r7, d0
 800a488:	4b9f      	ldr	r3, [pc, #636]	; (800a708 <__kernel_rem_pio2+0x678>)
 800a48a:	ee10 0a10 	vmov	r0, s0
 800a48e:	2200      	movs	r2, #0
 800a490:	4639      	mov	r1, r7
 800a492:	f7f6 fb3f 	bl	8000b14 <__aeabi_dcmpge>
 800a496:	b300      	cbz	r0, 800a4da <__kernel_rem_pio2+0x44a>
 800a498:	4b9c      	ldr	r3, [pc, #624]	; (800a70c <__kernel_rem_pio2+0x67c>)
 800a49a:	2200      	movs	r2, #0
 800a49c:	4630      	mov	r0, r6
 800a49e:	4639      	mov	r1, r7
 800a4a0:	f7f6 f8b2 	bl	8000608 <__aeabi_dmul>
 800a4a4:	f7f6 fb60 	bl	8000b68 <__aeabi_d2iz>
 800a4a8:	4605      	mov	r5, r0
 800a4aa:	f7f6 f843 	bl	8000534 <__aeabi_i2d>
 800a4ae:	4b96      	ldr	r3, [pc, #600]	; (800a708 <__kernel_rem_pio2+0x678>)
 800a4b0:	2200      	movs	r2, #0
 800a4b2:	f7f6 f8a9 	bl	8000608 <__aeabi_dmul>
 800a4b6:	460b      	mov	r3, r1
 800a4b8:	4602      	mov	r2, r0
 800a4ba:	4639      	mov	r1, r7
 800a4bc:	4630      	mov	r0, r6
 800a4be:	f7f5 feeb 	bl	8000298 <__aeabi_dsub>
 800a4c2:	f7f6 fb51 	bl	8000b68 <__aeabi_d2iz>
 800a4c6:	f104 0b01 	add.w	fp, r4, #1
 800a4ca:	ab0c      	add	r3, sp, #48	; 0x30
 800a4cc:	f10a 0a18 	add.w	sl, sl, #24
 800a4d0:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800a4d4:	f843 502b 	str.w	r5, [r3, fp, lsl #2]
 800a4d8:	e72b      	b.n	800a332 <__kernel_rem_pio2+0x2a2>
 800a4da:	4630      	mov	r0, r6
 800a4dc:	4639      	mov	r1, r7
 800a4de:	f7f6 fb43 	bl	8000b68 <__aeabi_d2iz>
 800a4e2:	ab0c      	add	r3, sp, #48	; 0x30
 800a4e4:	46a3      	mov	fp, r4
 800a4e6:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800a4ea:	e722      	b.n	800a332 <__kernel_rem_pio2+0x2a2>
 800a4ec:	ab70      	add	r3, sp, #448	; 0x1c0
 800a4ee:	eb03 09c8 	add.w	r9, r3, r8, lsl #3
 800a4f2:	ab0c      	add	r3, sp, #48	; 0x30
 800a4f4:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 800a4f8:	f7f6 f81c 	bl	8000534 <__aeabi_i2d>
 800a4fc:	4622      	mov	r2, r4
 800a4fe:	462b      	mov	r3, r5
 800a500:	f7f6 f882 	bl	8000608 <__aeabi_dmul>
 800a504:	4632      	mov	r2, r6
 800a506:	e9c9 0100 	strd	r0, r1, [r9]
 800a50a:	463b      	mov	r3, r7
 800a50c:	4620      	mov	r0, r4
 800a50e:	4629      	mov	r1, r5
 800a510:	f7f6 f87a 	bl	8000608 <__aeabi_dmul>
 800a514:	f108 38ff 	add.w	r8, r8, #4294967295
 800a518:	4604      	mov	r4, r0
 800a51a:	460d      	mov	r5, r1
 800a51c:	e713      	b.n	800a346 <__kernel_rem_pio2+0x2b6>
 800a51e:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 800a522:	e8fa 0102 	ldrd	r0, r1, [sl], #8
 800a526:	f7f6 f86f 	bl	8000608 <__aeabi_dmul>
 800a52a:	4602      	mov	r2, r0
 800a52c:	460b      	mov	r3, r1
 800a52e:	4620      	mov	r0, r4
 800a530:	4629      	mov	r1, r5
 800a532:	f7f5 feb3 	bl	800029c <__adddf3>
 800a536:	3601      	adds	r6, #1
 800a538:	4604      	mov	r4, r0
 800a53a:	460d      	mov	r5, r1
 800a53c:	9b04      	ldr	r3, [sp, #16]
 800a53e:	429e      	cmp	r6, r3
 800a540:	dc01      	bgt.n	800a546 <__kernel_rem_pio2+0x4b6>
 800a542:	45b0      	cmp	r8, r6
 800a544:	daeb      	bge.n	800a51e <__kernel_rem_pio2+0x48e>
 800a546:	ab48      	add	r3, sp, #288	; 0x120
 800a548:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800a54c:	e9c3 4500 	strd	r4, r5, [r3]
 800a550:	3f01      	subs	r7, #1
 800a552:	f108 0801 	add.w	r8, r8, #1
 800a556:	e6ff      	b.n	800a358 <__kernel_rem_pio2+0x2c8>
 800a558:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 800a55a:	2b02      	cmp	r3, #2
 800a55c:	dc0b      	bgt.n	800a576 <__kernel_rem_pio2+0x4e6>
 800a55e:	2b00      	cmp	r3, #0
 800a560:	dc6e      	bgt.n	800a640 <__kernel_rem_pio2+0x5b0>
 800a562:	d045      	beq.n	800a5f0 <__kernel_rem_pio2+0x560>
 800a564:	9b07      	ldr	r3, [sp, #28]
 800a566:	f003 0007 	and.w	r0, r3, #7
 800a56a:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 800a56e:	ecbd 8b02 	vpop	{d8}
 800a572:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a576:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 800a578:	2b03      	cmp	r3, #3
 800a57a:	d1f3      	bne.n	800a564 <__kernel_rem_pio2+0x4d4>
 800a57c:	ab48      	add	r3, sp, #288	; 0x120
 800a57e:	eb03 0acb 	add.w	sl, r3, fp, lsl #3
 800a582:	46d0      	mov	r8, sl
 800a584:	46d9      	mov	r9, fp
 800a586:	f1b9 0f00 	cmp.w	r9, #0
 800a58a:	f1a8 0808 	sub.w	r8, r8, #8
 800a58e:	dc64      	bgt.n	800a65a <__kernel_rem_pio2+0x5ca>
 800a590:	465c      	mov	r4, fp
 800a592:	2c01      	cmp	r4, #1
 800a594:	f1aa 0a08 	sub.w	sl, sl, #8
 800a598:	dc7e      	bgt.n	800a698 <__kernel_rem_pio2+0x608>
 800a59a:	2000      	movs	r0, #0
 800a59c:	2100      	movs	r1, #0
 800a59e:	f1bb 0f01 	cmp.w	fp, #1
 800a5a2:	f300 8097 	bgt.w	800a6d4 <__kernel_rem_pio2+0x644>
 800a5a6:	9b02      	ldr	r3, [sp, #8]
 800a5a8:	e9dd 5648 	ldrd	r5, r6, [sp, #288]	; 0x120
 800a5ac:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	; 0x128
 800a5b0:	2b00      	cmp	r3, #0
 800a5b2:	f040 8099 	bne.w	800a6e8 <__kernel_rem_pio2+0x658>
 800a5b6:	9b01      	ldr	r3, [sp, #4]
 800a5b8:	e9c3 5600 	strd	r5, r6, [r3]
 800a5bc:	e9c3 7802 	strd	r7, r8, [r3, #8]
 800a5c0:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800a5c4:	e7ce      	b.n	800a564 <__kernel_rem_pio2+0x4d4>
 800a5c6:	ab48      	add	r3, sp, #288	; 0x120
 800a5c8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800a5cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a5d0:	f7f5 fe64 	bl	800029c <__adddf3>
 800a5d4:	f10b 3bff 	add.w	fp, fp, #4294967295
 800a5d8:	f1bb 0f00 	cmp.w	fp, #0
 800a5dc:	daf3      	bge.n	800a5c6 <__kernel_rem_pio2+0x536>
 800a5de:	9b02      	ldr	r3, [sp, #8]
 800a5e0:	b113      	cbz	r3, 800a5e8 <__kernel_rem_pio2+0x558>
 800a5e2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a5e6:	4619      	mov	r1, r3
 800a5e8:	9b01      	ldr	r3, [sp, #4]
 800a5ea:	e9c3 0100 	strd	r0, r1, [r3]
 800a5ee:	e7b9      	b.n	800a564 <__kernel_rem_pio2+0x4d4>
 800a5f0:	2000      	movs	r0, #0
 800a5f2:	2100      	movs	r1, #0
 800a5f4:	e7f0      	b.n	800a5d8 <__kernel_rem_pio2+0x548>
 800a5f6:	ab48      	add	r3, sp, #288	; 0x120
 800a5f8:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800a5fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a600:	f7f5 fe4c 	bl	800029c <__adddf3>
 800a604:	3c01      	subs	r4, #1
 800a606:	2c00      	cmp	r4, #0
 800a608:	daf5      	bge.n	800a5f6 <__kernel_rem_pio2+0x566>
 800a60a:	9b02      	ldr	r3, [sp, #8]
 800a60c:	b1e3      	cbz	r3, 800a648 <__kernel_rem_pio2+0x5b8>
 800a60e:	4602      	mov	r2, r0
 800a610:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a614:	9c01      	ldr	r4, [sp, #4]
 800a616:	e9c4 2300 	strd	r2, r3, [r4]
 800a61a:	4602      	mov	r2, r0
 800a61c:	460b      	mov	r3, r1
 800a61e:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 800a622:	f7f5 fe39 	bl	8000298 <__aeabi_dsub>
 800a626:	ad4a      	add	r5, sp, #296	; 0x128
 800a628:	2401      	movs	r4, #1
 800a62a:	45a3      	cmp	fp, r4
 800a62c:	da0f      	bge.n	800a64e <__kernel_rem_pio2+0x5be>
 800a62e:	9b02      	ldr	r3, [sp, #8]
 800a630:	b113      	cbz	r3, 800a638 <__kernel_rem_pio2+0x5a8>
 800a632:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a636:	4619      	mov	r1, r3
 800a638:	9b01      	ldr	r3, [sp, #4]
 800a63a:	e9c3 0102 	strd	r0, r1, [r3, #8]
 800a63e:	e791      	b.n	800a564 <__kernel_rem_pio2+0x4d4>
 800a640:	465c      	mov	r4, fp
 800a642:	2000      	movs	r0, #0
 800a644:	2100      	movs	r1, #0
 800a646:	e7de      	b.n	800a606 <__kernel_rem_pio2+0x576>
 800a648:	4602      	mov	r2, r0
 800a64a:	460b      	mov	r3, r1
 800a64c:	e7e2      	b.n	800a614 <__kernel_rem_pio2+0x584>
 800a64e:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 800a652:	f7f5 fe23 	bl	800029c <__adddf3>
 800a656:	3401      	adds	r4, #1
 800a658:	e7e7      	b.n	800a62a <__kernel_rem_pio2+0x59a>
 800a65a:	e9d8 4500 	ldrd	r4, r5, [r8]
 800a65e:	e9d8 6702 	ldrd	r6, r7, [r8, #8]
 800a662:	4620      	mov	r0, r4
 800a664:	4632      	mov	r2, r6
 800a666:	463b      	mov	r3, r7
 800a668:	4629      	mov	r1, r5
 800a66a:	f7f5 fe17 	bl	800029c <__adddf3>
 800a66e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a672:	4602      	mov	r2, r0
 800a674:	460b      	mov	r3, r1
 800a676:	4620      	mov	r0, r4
 800a678:	4629      	mov	r1, r5
 800a67a:	f7f5 fe0d 	bl	8000298 <__aeabi_dsub>
 800a67e:	4632      	mov	r2, r6
 800a680:	463b      	mov	r3, r7
 800a682:	f7f5 fe0b 	bl	800029c <__adddf3>
 800a686:	ed9d 7b04 	vldr	d7, [sp, #16]
 800a68a:	e9c8 0102 	strd	r0, r1, [r8, #8]
 800a68e:	ed88 7b00 	vstr	d7, [r8]
 800a692:	f109 39ff 	add.w	r9, r9, #4294967295
 800a696:	e776      	b.n	800a586 <__kernel_rem_pio2+0x4f6>
 800a698:	e9da 8900 	ldrd	r8, r9, [sl]
 800a69c:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 800a6a0:	4640      	mov	r0, r8
 800a6a2:	4632      	mov	r2, r6
 800a6a4:	463b      	mov	r3, r7
 800a6a6:	4649      	mov	r1, r9
 800a6a8:	f7f5 fdf8 	bl	800029c <__adddf3>
 800a6ac:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a6b0:	4602      	mov	r2, r0
 800a6b2:	460b      	mov	r3, r1
 800a6b4:	4640      	mov	r0, r8
 800a6b6:	4649      	mov	r1, r9
 800a6b8:	f7f5 fdee 	bl	8000298 <__aeabi_dsub>
 800a6bc:	4632      	mov	r2, r6
 800a6be:	463b      	mov	r3, r7
 800a6c0:	f7f5 fdec 	bl	800029c <__adddf3>
 800a6c4:	ed9d 7b04 	vldr	d7, [sp, #16]
 800a6c8:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800a6cc:	ed8a 7b00 	vstr	d7, [sl]
 800a6d0:	3c01      	subs	r4, #1
 800a6d2:	e75e      	b.n	800a592 <__kernel_rem_pio2+0x502>
 800a6d4:	ab48      	add	r3, sp, #288	; 0x120
 800a6d6:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800a6da:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a6de:	f7f5 fddd 	bl	800029c <__adddf3>
 800a6e2:	f10b 3bff 	add.w	fp, fp, #4294967295
 800a6e6:	e75a      	b.n	800a59e <__kernel_rem_pio2+0x50e>
 800a6e8:	9b01      	ldr	r3, [sp, #4]
 800a6ea:	9a01      	ldr	r2, [sp, #4]
 800a6ec:	601d      	str	r5, [r3, #0]
 800a6ee:	f106 4400 	add.w	r4, r6, #2147483648	; 0x80000000
 800a6f2:	605c      	str	r4, [r3, #4]
 800a6f4:	609f      	str	r7, [r3, #8]
 800a6f6:	f108 4300 	add.w	r3, r8, #2147483648	; 0x80000000
 800a6fa:	60d3      	str	r3, [r2, #12]
 800a6fc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a700:	6110      	str	r0, [r2, #16]
 800a702:	6153      	str	r3, [r2, #20]
 800a704:	e72e      	b.n	800a564 <__kernel_rem_pio2+0x4d4>
 800a706:	bf00      	nop
 800a708:	41700000 	.word	0x41700000
 800a70c:	3e700000 	.word	0x3e700000

0800a710 <__kernel_sin>:
 800a710:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a714:	ed2d 8b04 	vpush	{d8-d9}
 800a718:	eeb0 8a41 	vmov.f32	s16, s2
 800a71c:	eef0 8a61 	vmov.f32	s17, s3
 800a720:	ec55 4b10 	vmov	r4, r5, d0
 800a724:	b083      	sub	sp, #12
 800a726:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800a72a:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 800a72e:	9001      	str	r0, [sp, #4]
 800a730:	da06      	bge.n	800a740 <__kernel_sin+0x30>
 800a732:	ee10 0a10 	vmov	r0, s0
 800a736:	4629      	mov	r1, r5
 800a738:	f7f6 fa16 	bl	8000b68 <__aeabi_d2iz>
 800a73c:	2800      	cmp	r0, #0
 800a73e:	d051      	beq.n	800a7e4 <__kernel_sin+0xd4>
 800a740:	4622      	mov	r2, r4
 800a742:	462b      	mov	r3, r5
 800a744:	4620      	mov	r0, r4
 800a746:	4629      	mov	r1, r5
 800a748:	f7f5 ff5e 	bl	8000608 <__aeabi_dmul>
 800a74c:	4682      	mov	sl, r0
 800a74e:	468b      	mov	fp, r1
 800a750:	4602      	mov	r2, r0
 800a752:	460b      	mov	r3, r1
 800a754:	4620      	mov	r0, r4
 800a756:	4629      	mov	r1, r5
 800a758:	f7f5 ff56 	bl	8000608 <__aeabi_dmul>
 800a75c:	a341      	add	r3, pc, #260	; (adr r3, 800a864 <__kernel_sin+0x154>)
 800a75e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a762:	4680      	mov	r8, r0
 800a764:	4689      	mov	r9, r1
 800a766:	4650      	mov	r0, sl
 800a768:	4659      	mov	r1, fp
 800a76a:	f7f5 ff4d 	bl	8000608 <__aeabi_dmul>
 800a76e:	a33f      	add	r3, pc, #252	; (adr r3, 800a86c <__kernel_sin+0x15c>)
 800a770:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a774:	f7f5 fd90 	bl	8000298 <__aeabi_dsub>
 800a778:	4652      	mov	r2, sl
 800a77a:	465b      	mov	r3, fp
 800a77c:	f7f5 ff44 	bl	8000608 <__aeabi_dmul>
 800a780:	a33c      	add	r3, pc, #240	; (adr r3, 800a874 <__kernel_sin+0x164>)
 800a782:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a786:	f7f5 fd89 	bl	800029c <__adddf3>
 800a78a:	4652      	mov	r2, sl
 800a78c:	465b      	mov	r3, fp
 800a78e:	f7f5 ff3b 	bl	8000608 <__aeabi_dmul>
 800a792:	a33a      	add	r3, pc, #232	; (adr r3, 800a87c <__kernel_sin+0x16c>)
 800a794:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a798:	f7f5 fd7e 	bl	8000298 <__aeabi_dsub>
 800a79c:	4652      	mov	r2, sl
 800a79e:	465b      	mov	r3, fp
 800a7a0:	f7f5 ff32 	bl	8000608 <__aeabi_dmul>
 800a7a4:	a337      	add	r3, pc, #220	; (adr r3, 800a884 <__kernel_sin+0x174>)
 800a7a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a7aa:	f7f5 fd77 	bl	800029c <__adddf3>
 800a7ae:	9b01      	ldr	r3, [sp, #4]
 800a7b0:	4606      	mov	r6, r0
 800a7b2:	460f      	mov	r7, r1
 800a7b4:	b9eb      	cbnz	r3, 800a7f2 <__kernel_sin+0xe2>
 800a7b6:	4602      	mov	r2, r0
 800a7b8:	460b      	mov	r3, r1
 800a7ba:	4650      	mov	r0, sl
 800a7bc:	4659      	mov	r1, fp
 800a7be:	f7f5 ff23 	bl	8000608 <__aeabi_dmul>
 800a7c2:	a325      	add	r3, pc, #148	; (adr r3, 800a858 <__kernel_sin+0x148>)
 800a7c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a7c8:	f7f5 fd66 	bl	8000298 <__aeabi_dsub>
 800a7cc:	4642      	mov	r2, r8
 800a7ce:	464b      	mov	r3, r9
 800a7d0:	f7f5 ff1a 	bl	8000608 <__aeabi_dmul>
 800a7d4:	4602      	mov	r2, r0
 800a7d6:	460b      	mov	r3, r1
 800a7d8:	4620      	mov	r0, r4
 800a7da:	4629      	mov	r1, r5
 800a7dc:	f7f5 fd5e 	bl	800029c <__adddf3>
 800a7e0:	4604      	mov	r4, r0
 800a7e2:	460d      	mov	r5, r1
 800a7e4:	ec45 4b10 	vmov	d0, r4, r5
 800a7e8:	b003      	add	sp, #12
 800a7ea:	ecbd 8b04 	vpop	{d8-d9}
 800a7ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a7f2:	4b1b      	ldr	r3, [pc, #108]	; (800a860 <__kernel_sin+0x150>)
 800a7f4:	ec51 0b18 	vmov	r0, r1, d8
 800a7f8:	2200      	movs	r2, #0
 800a7fa:	f7f5 ff05 	bl	8000608 <__aeabi_dmul>
 800a7fe:	4632      	mov	r2, r6
 800a800:	ec41 0b19 	vmov	d9, r0, r1
 800a804:	463b      	mov	r3, r7
 800a806:	4640      	mov	r0, r8
 800a808:	4649      	mov	r1, r9
 800a80a:	f7f5 fefd 	bl	8000608 <__aeabi_dmul>
 800a80e:	4602      	mov	r2, r0
 800a810:	460b      	mov	r3, r1
 800a812:	ec51 0b19 	vmov	r0, r1, d9
 800a816:	f7f5 fd3f 	bl	8000298 <__aeabi_dsub>
 800a81a:	4652      	mov	r2, sl
 800a81c:	465b      	mov	r3, fp
 800a81e:	f7f5 fef3 	bl	8000608 <__aeabi_dmul>
 800a822:	ec53 2b18 	vmov	r2, r3, d8
 800a826:	f7f5 fd37 	bl	8000298 <__aeabi_dsub>
 800a82a:	a30b      	add	r3, pc, #44	; (adr r3, 800a858 <__kernel_sin+0x148>)
 800a82c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a830:	4606      	mov	r6, r0
 800a832:	460f      	mov	r7, r1
 800a834:	4640      	mov	r0, r8
 800a836:	4649      	mov	r1, r9
 800a838:	f7f5 fee6 	bl	8000608 <__aeabi_dmul>
 800a83c:	4602      	mov	r2, r0
 800a83e:	460b      	mov	r3, r1
 800a840:	4630      	mov	r0, r6
 800a842:	4639      	mov	r1, r7
 800a844:	f7f5 fd2a 	bl	800029c <__adddf3>
 800a848:	4602      	mov	r2, r0
 800a84a:	460b      	mov	r3, r1
 800a84c:	4620      	mov	r0, r4
 800a84e:	4629      	mov	r1, r5
 800a850:	f7f5 fd22 	bl	8000298 <__aeabi_dsub>
 800a854:	e7c4      	b.n	800a7e0 <__kernel_sin+0xd0>
 800a856:	bf00      	nop
 800a858:	55555549 	.word	0x55555549
 800a85c:	3fc55555 	.word	0x3fc55555
 800a860:	3fe00000 	.word	0x3fe00000
 800a864:	5acfd57c 	.word	0x5acfd57c
 800a868:	3de5d93a 	.word	0x3de5d93a
 800a86c:	8a2b9ceb 	.word	0x8a2b9ceb
 800a870:	3e5ae5e6 	.word	0x3e5ae5e6
 800a874:	57b1fe7d 	.word	0x57b1fe7d
 800a878:	3ec71de3 	.word	0x3ec71de3
 800a87c:	19c161d5 	.word	0x19c161d5
 800a880:	3f2a01a0 	.word	0x3f2a01a0
 800a884:	1110f8a6 	.word	0x1110f8a6
 800a888:	3f811111 	.word	0x3f811111

0800a88c <fabs>:
 800a88c:	ec51 0b10 	vmov	r0, r1, d0
 800a890:	ee10 2a10 	vmov	r2, s0
 800a894:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800a898:	ec43 2b10 	vmov	d0, r2, r3
 800a89c:	4770      	bx	lr
	...

0800a8a0 <floor>:
 800a8a0:	ec51 0b10 	vmov	r0, r1, d0
 800a8a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a8a8:	f3c1 570a 	ubfx	r7, r1, #20, #11
 800a8ac:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 800a8b0:	2e13      	cmp	r6, #19
 800a8b2:	ee10 5a10 	vmov	r5, s0
 800a8b6:	ee10 8a10 	vmov	r8, s0
 800a8ba:	460c      	mov	r4, r1
 800a8bc:	dc32      	bgt.n	800a924 <floor+0x84>
 800a8be:	2e00      	cmp	r6, #0
 800a8c0:	da14      	bge.n	800a8ec <floor+0x4c>
 800a8c2:	a333      	add	r3, pc, #204	; (adr r3, 800a990 <floor+0xf0>)
 800a8c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8c8:	f7f5 fce8 	bl	800029c <__adddf3>
 800a8cc:	2200      	movs	r2, #0
 800a8ce:	2300      	movs	r3, #0
 800a8d0:	f7f6 f92a 	bl	8000b28 <__aeabi_dcmpgt>
 800a8d4:	b138      	cbz	r0, 800a8e6 <floor+0x46>
 800a8d6:	2c00      	cmp	r4, #0
 800a8d8:	da57      	bge.n	800a98a <floor+0xea>
 800a8da:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800a8de:	431d      	orrs	r5, r3
 800a8e0:	d001      	beq.n	800a8e6 <floor+0x46>
 800a8e2:	4c2d      	ldr	r4, [pc, #180]	; (800a998 <floor+0xf8>)
 800a8e4:	2500      	movs	r5, #0
 800a8e6:	4621      	mov	r1, r4
 800a8e8:	4628      	mov	r0, r5
 800a8ea:	e025      	b.n	800a938 <floor+0x98>
 800a8ec:	4f2b      	ldr	r7, [pc, #172]	; (800a99c <floor+0xfc>)
 800a8ee:	4137      	asrs	r7, r6
 800a8f0:	ea01 0307 	and.w	r3, r1, r7
 800a8f4:	4303      	orrs	r3, r0
 800a8f6:	d01f      	beq.n	800a938 <floor+0x98>
 800a8f8:	a325      	add	r3, pc, #148	; (adr r3, 800a990 <floor+0xf0>)
 800a8fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8fe:	f7f5 fccd 	bl	800029c <__adddf3>
 800a902:	2200      	movs	r2, #0
 800a904:	2300      	movs	r3, #0
 800a906:	f7f6 f90f 	bl	8000b28 <__aeabi_dcmpgt>
 800a90a:	2800      	cmp	r0, #0
 800a90c:	d0eb      	beq.n	800a8e6 <floor+0x46>
 800a90e:	2c00      	cmp	r4, #0
 800a910:	bfbe      	ittt	lt
 800a912:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800a916:	fa43 f606 	asrlt.w	r6, r3, r6
 800a91a:	19a4      	addlt	r4, r4, r6
 800a91c:	ea24 0407 	bic.w	r4, r4, r7
 800a920:	2500      	movs	r5, #0
 800a922:	e7e0      	b.n	800a8e6 <floor+0x46>
 800a924:	2e33      	cmp	r6, #51	; 0x33
 800a926:	dd0b      	ble.n	800a940 <floor+0xa0>
 800a928:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800a92c:	d104      	bne.n	800a938 <floor+0x98>
 800a92e:	ee10 2a10 	vmov	r2, s0
 800a932:	460b      	mov	r3, r1
 800a934:	f7f5 fcb2 	bl	800029c <__adddf3>
 800a938:	ec41 0b10 	vmov	d0, r0, r1
 800a93c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a940:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 800a944:	f04f 33ff 	mov.w	r3, #4294967295
 800a948:	fa23 f707 	lsr.w	r7, r3, r7
 800a94c:	4207      	tst	r7, r0
 800a94e:	d0f3      	beq.n	800a938 <floor+0x98>
 800a950:	a30f      	add	r3, pc, #60	; (adr r3, 800a990 <floor+0xf0>)
 800a952:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a956:	f7f5 fca1 	bl	800029c <__adddf3>
 800a95a:	2200      	movs	r2, #0
 800a95c:	2300      	movs	r3, #0
 800a95e:	f7f6 f8e3 	bl	8000b28 <__aeabi_dcmpgt>
 800a962:	2800      	cmp	r0, #0
 800a964:	d0bf      	beq.n	800a8e6 <floor+0x46>
 800a966:	2c00      	cmp	r4, #0
 800a968:	da02      	bge.n	800a970 <floor+0xd0>
 800a96a:	2e14      	cmp	r6, #20
 800a96c:	d103      	bne.n	800a976 <floor+0xd6>
 800a96e:	3401      	adds	r4, #1
 800a970:	ea25 0507 	bic.w	r5, r5, r7
 800a974:	e7b7      	b.n	800a8e6 <floor+0x46>
 800a976:	2301      	movs	r3, #1
 800a978:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800a97c:	fa03 f606 	lsl.w	r6, r3, r6
 800a980:	4435      	add	r5, r6
 800a982:	4545      	cmp	r5, r8
 800a984:	bf38      	it	cc
 800a986:	18e4      	addcc	r4, r4, r3
 800a988:	e7f2      	b.n	800a970 <floor+0xd0>
 800a98a:	2500      	movs	r5, #0
 800a98c:	462c      	mov	r4, r5
 800a98e:	e7aa      	b.n	800a8e6 <floor+0x46>
 800a990:	8800759c 	.word	0x8800759c
 800a994:	7e37e43c 	.word	0x7e37e43c
 800a998:	bff00000 	.word	0xbff00000
 800a99c:	000fffff 	.word	0x000fffff

0800a9a0 <scalbn>:
 800a9a0:	b570      	push	{r4, r5, r6, lr}
 800a9a2:	ec55 4b10 	vmov	r4, r5, d0
 800a9a6:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800a9aa:	4606      	mov	r6, r0
 800a9ac:	462b      	mov	r3, r5
 800a9ae:	b99a      	cbnz	r2, 800a9d8 <scalbn+0x38>
 800a9b0:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800a9b4:	4323      	orrs	r3, r4
 800a9b6:	d036      	beq.n	800aa26 <scalbn+0x86>
 800a9b8:	4b39      	ldr	r3, [pc, #228]	; (800aaa0 <scalbn+0x100>)
 800a9ba:	4629      	mov	r1, r5
 800a9bc:	ee10 0a10 	vmov	r0, s0
 800a9c0:	2200      	movs	r2, #0
 800a9c2:	f7f5 fe21 	bl	8000608 <__aeabi_dmul>
 800a9c6:	4b37      	ldr	r3, [pc, #220]	; (800aaa4 <scalbn+0x104>)
 800a9c8:	429e      	cmp	r6, r3
 800a9ca:	4604      	mov	r4, r0
 800a9cc:	460d      	mov	r5, r1
 800a9ce:	da10      	bge.n	800a9f2 <scalbn+0x52>
 800a9d0:	a32b      	add	r3, pc, #172	; (adr r3, 800aa80 <scalbn+0xe0>)
 800a9d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a9d6:	e03a      	b.n	800aa4e <scalbn+0xae>
 800a9d8:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800a9dc:	428a      	cmp	r2, r1
 800a9de:	d10c      	bne.n	800a9fa <scalbn+0x5a>
 800a9e0:	ee10 2a10 	vmov	r2, s0
 800a9e4:	4620      	mov	r0, r4
 800a9e6:	4629      	mov	r1, r5
 800a9e8:	f7f5 fc58 	bl	800029c <__adddf3>
 800a9ec:	4604      	mov	r4, r0
 800a9ee:	460d      	mov	r5, r1
 800a9f0:	e019      	b.n	800aa26 <scalbn+0x86>
 800a9f2:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800a9f6:	460b      	mov	r3, r1
 800a9f8:	3a36      	subs	r2, #54	; 0x36
 800a9fa:	4432      	add	r2, r6
 800a9fc:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800aa00:	428a      	cmp	r2, r1
 800aa02:	dd08      	ble.n	800aa16 <scalbn+0x76>
 800aa04:	2d00      	cmp	r5, #0
 800aa06:	a120      	add	r1, pc, #128	; (adr r1, 800aa88 <scalbn+0xe8>)
 800aa08:	e9d1 0100 	ldrd	r0, r1, [r1]
 800aa0c:	da1c      	bge.n	800aa48 <scalbn+0xa8>
 800aa0e:	a120      	add	r1, pc, #128	; (adr r1, 800aa90 <scalbn+0xf0>)
 800aa10:	e9d1 0100 	ldrd	r0, r1, [r1]
 800aa14:	e018      	b.n	800aa48 <scalbn+0xa8>
 800aa16:	2a00      	cmp	r2, #0
 800aa18:	dd08      	ble.n	800aa2c <scalbn+0x8c>
 800aa1a:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800aa1e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800aa22:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800aa26:	ec45 4b10 	vmov	d0, r4, r5
 800aa2a:	bd70      	pop	{r4, r5, r6, pc}
 800aa2c:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800aa30:	da19      	bge.n	800aa66 <scalbn+0xc6>
 800aa32:	f24c 3350 	movw	r3, #50000	; 0xc350
 800aa36:	429e      	cmp	r6, r3
 800aa38:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 800aa3c:	dd0a      	ble.n	800aa54 <scalbn+0xb4>
 800aa3e:	a112      	add	r1, pc, #72	; (adr r1, 800aa88 <scalbn+0xe8>)
 800aa40:	e9d1 0100 	ldrd	r0, r1, [r1]
 800aa44:	2b00      	cmp	r3, #0
 800aa46:	d1e2      	bne.n	800aa0e <scalbn+0x6e>
 800aa48:	a30f      	add	r3, pc, #60	; (adr r3, 800aa88 <scalbn+0xe8>)
 800aa4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa4e:	f7f5 fddb 	bl	8000608 <__aeabi_dmul>
 800aa52:	e7cb      	b.n	800a9ec <scalbn+0x4c>
 800aa54:	a10a      	add	r1, pc, #40	; (adr r1, 800aa80 <scalbn+0xe0>)
 800aa56:	e9d1 0100 	ldrd	r0, r1, [r1]
 800aa5a:	2b00      	cmp	r3, #0
 800aa5c:	d0b8      	beq.n	800a9d0 <scalbn+0x30>
 800aa5e:	a10e      	add	r1, pc, #56	; (adr r1, 800aa98 <scalbn+0xf8>)
 800aa60:	e9d1 0100 	ldrd	r0, r1, [r1]
 800aa64:	e7b4      	b.n	800a9d0 <scalbn+0x30>
 800aa66:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800aa6a:	3236      	adds	r2, #54	; 0x36
 800aa6c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800aa70:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800aa74:	4620      	mov	r0, r4
 800aa76:	4b0c      	ldr	r3, [pc, #48]	; (800aaa8 <scalbn+0x108>)
 800aa78:	2200      	movs	r2, #0
 800aa7a:	e7e8      	b.n	800aa4e <scalbn+0xae>
 800aa7c:	f3af 8000 	nop.w
 800aa80:	c2f8f359 	.word	0xc2f8f359
 800aa84:	01a56e1f 	.word	0x01a56e1f
 800aa88:	8800759c 	.word	0x8800759c
 800aa8c:	7e37e43c 	.word	0x7e37e43c
 800aa90:	8800759c 	.word	0x8800759c
 800aa94:	fe37e43c 	.word	0xfe37e43c
 800aa98:	c2f8f359 	.word	0xc2f8f359
 800aa9c:	81a56e1f 	.word	0x81a56e1f
 800aaa0:	43500000 	.word	0x43500000
 800aaa4:	ffff3cb0 	.word	0xffff3cb0
 800aaa8:	3c900000 	.word	0x3c900000

0800aaac <_init>:
 800aaac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aaae:	bf00      	nop
 800aab0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800aab2:	bc08      	pop	{r3}
 800aab4:	469e      	mov	lr, r3
 800aab6:	4770      	bx	lr

0800aab8 <_fini>:
 800aab8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aaba:	bf00      	nop
 800aabc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800aabe:	bc08      	pop	{r3}
 800aac0:	469e      	mov	lr, r3
 800aac2:	4770      	bx	lr
